; Example program skeleton - multiplayer
; 12/8/89 M. Peter Engelbrite
	.list off

;masks for game controls
;JOY_DOWN
;JOY_UP
;JOY_RIGHT
;JOY_LEFT
;OPTION1_BUTTON
;OPTION2_BUTTON
;BUTTON_A
;BUTTON_B

;"level" = levels of controls (1=pressed,0=not pressed)
;"edge" = leading edges of controls (1=just pressed,0=not just pressed)
;it is high for one game frame only

; the OPTION2_BUTTON for "level" should be ignored
; use the OPTION2_BUTTON on "edge" only!




; sys control constants
; set to adjust system to specific game needs
MULTIPLAYER		.eq 1	;define this for comlynx game
MAX_PLAYERS		.eq 4	;maximum number of players possible in game
FAKE_COMLYNX	.eq 1	;simulates other players
SCORE_SIZE		.eq 5	;this is the number of bytes (1/2 # of digits)
CHEAP_PAUSED	.eq 1	;define this for smaller "paused" message
FRAME_RATE		.eq 4	;number of 60Hz frames in a game frame
MUSIC_TOGGLE	.eq 1	;define for Opt 2 = music on/off
SCREEN_CLEAR	.eq 1	;clear the screen each frame automatically


	.in sys.src
	BEGIN_ZPAGE
; user zero page variables (use .ds only)
my.var1	.ds 10
	END_ZPAGE

; "game.start" must be the entry point for the game

game.start
	lda #normal.pal
	jsr set.colors		;fade up from black
	lda #30
	sta hscroll		;position "window on the world"
	lda #30
	sta vscroll
	ldy #$40		;start the music
	ldx #>tune.1
	lda #<tune.1
	jsr start.tune

	lda #zapsnd		;make a sound on powerup
	jsr start.sound
	lda #64+30		;center the face
	sta face+SCB_HPOS
	lda #31+30
	sta face+SCB_VPOS
; ---- MAIN GAME LOOP ----
; example
loop
	ldx #>blob
	ldy #<blob
	jsr do.sprite	;display a sprite
	lda count		;this counts once per game frame
	and #$7f
	bne .01			;once in a while
	lda #gulp
	jsr start.sound
	lda #$01
	jsr add.score
.01
; display sprites
	ldx my.player
	ldx number.of.players
face.loop
	lda level,x	;joystick/firebutton levels
	bit #JOY_UP
	beq .02
	dec facev,x

.02
	bit #JOY_DOWN
	beq .03
	inc facev,x
.03
	bit #JOY_LEFT
	beq .04
	dec faceh,x
.04
	bit #JOY_RIGHT
	beq .05
	inc faceh,x
.05


	cpx my.player		;check button for my.player only
	bne .06
	lda edge,x	;joystick/firebutton leading edges
	bit #BUTTON_A	
;	bit #OPTION2_BUTTON
	beq .06
	phx
	lda #lazsnd
	jsr start.sound
	lda #$50
	jsr add.score
	plx
.06
	lda facev,x
	sta face+SCB_VPOS
	lda faceh,x
	sta face+SCB_HPOS
	phx
	ldx #>face
	ldy #<face
	jsr do.sprite	;display a sprite
	plx
	dex
	bpl face.loop

	jsr game.frame	;wait for next game frame (& display screen, etc.)
	bra loop


tune.1
	.pc music.dnl


; this is a table of pointers to color palettes
; the first one must be all 0's
; the game should supplly the palettes

color.pnts
	.wo all.black,pal1,pal2

all.black
black.pal	.eq 0
;green
	.by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;bluered
	.by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

pal1
normal.pal	.eq 1
; Handy Color Palette
; Greens
	.BYTE	$00,$07,$05,$03,$00,$00,$0f,$00
	.BYTE	$00,$02,$03,$06,$0b,$00,$04,$07
; Blues-Reds

	.BYTE	$f0,$06,$00,$00,$06,$0f,$0f,$f0
	.BYTE	$00,$04,$28,$6b,$cf,$6d,$00,$00
pal2
star.pal	.eq 2
;greys (starfield)
;green
	.by $00,$06,$00,$00,$00,$00,$0f,$00,$02,$04,$07,$0b,$0f,$06,$09,$0f
;bluered
	.by $00,$f6,$f0,$90,$0a,$0f,$0f,$f0,$22,$44,$77,$bb,$ff,$00,$00,$00



; name for sounds
small.bang	.eq 0
mid.bang	.eq 1
big.bang	.eq 2
shoot		.eq 3
boing		.eq 4
zapsnd		.eq 5
gulp		.eq 6
lazsnd		.eq 7
shieldsnd	.eq 8
elevsnd		.eq 9
boggle		.eq 10
transnd		.eq 11
whoosh		.eq 12
giggle		.eq 13
my.bang		.eq 14

; these are sound priorities
sound.pri
	.by 101,103,105,91,33,201,249,49,53
	.by 247
	.by 57
	.by 251
	.by 55
	.by 61
	.by 253

; pointers to sounds
sound.lo
	.by <small.bang.fxdata,<mid.bang.fxdata,<big.bang.fxdata
	.by <shoot.fxdata,<boing.fxdata,<zap.fxdata
	.by <gulp.fxdata
	.by <laz.fxdata
	.by <shield.fxdata
	.by <elevator.fxdata
	.by <boggle.fxdata
	.by <trans.fxdata
	.by <whoosh.fxdata
	.by <giggle.fxdata
	.by <my.bang.fxdata

sound.hi
	.by >small.bang.fxdata,>mid.bang.fxdata,>big.bang.fxdata
	.by >shoot.fxdata,>boing.fxdata,>zap.fxdata
	.by >gulp.fxdata
	.by >laz.fxdata
	.by >shield.fxdata
	.by >elevator.fxdata
	.by >boggle.fxdata
	.by >trans.fxdata
	.by >whoosh.fxdata
	.by >giggle.fxdata
	.by >my.bang.fxdata

small.bang.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$1ffc	; Freq accum
	.WORD	$ffff	; Shifter accum
	.WORD	$c010	; Feedback accum
	.WORD	$0000	; Volume accum
	.WORD	$fc74	; Freq interp
	.WORD	$0003	; Feedback interp
	.WORD	$0355	; Volume interp
	;------ Next Frame
	.WORD	9	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$0008	; Freq accum
	.WORD	$f016	; Shifter accum
	.WORD	$c030	; Feedback accum
	.WORD	$1e00	; Volume accum
	.WORD	$000a	; Freq interp
	.WORD	$f6da	; Feedback interp
	.WORD	$fe93	; Volume interp
	;------ Next Frame
	.WORD	30	; Frame number
	.WORD	$0001	; Flags

mid.bang.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$fffc	; Freq accum
	.WORD	$ffff	; Shifter accum
	.WORD	$c010	; Feedback accum
	.WORD	$0000	; Volume accum
	.WORD	$e391	; Freq interp
	.WORD	$0003	; Feedback interp
	.WORD	$091c	; Volume interp
	;------ Next Frame
	.WORD	9	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$0010	; Freq accum
	.WORD	$f016	; Shifter accum
	.WORD	$c030	; Feedback accum
	.WORD	$5200	; Volume accum
	.WORD	$001b	; Freq interp
	.WORD	$0000	; Feedback interp
	.WORD	$ffb8	; Volume interp
	;------ Next Frame
	.WORD	300	; Frame number
	.WORD	$0001	; Flags

big.bang.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$fffc	; Freq accum
	.WORD	$ffff	; Shifter accum
	.WORD	$c010	; Feedback accum
	.WORD	$0000	; Volume accum
	.WORD	$e3e8	; Freq interp
	.WORD	$0003	; Feedback interp
	.WORD	$0e1c	; Volume interp
	;------ Next Frame
	.WORD	9	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$031c	; Freq accum
	.WORD	$f016	; Shifter accum
	.WORD	$c030	; Feedback accum
	.WORD	$7f00	; Volume accum
	.WORD	$0002	; Freq interp
	.WORD	$0000	; Feedback interp
	.WORD	$ffc9	; Volume interp
	;------ Next Frame
	.WORD	600	; Frame number
	.WORD	$0001	; Flags

shoot.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0f90	; Flags
	.WORD	$0008	; Freq accum
	.WORD	$fc83	; Shifter accum
	.WORD	$0200	; Feedback accum
	.WORD	$7f00	; Volume accum
	.WORD	$004f	; Freq interp
	.WORD	$fdcd	; Volume interp
	;------ Next Frame
	.WORD	50	; Frame number
	.WORD	$0001	; Flags

boing.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0f90	; Flags
	.WORD	$04ac	; Freq accum
	.WORD	$fc9f	; Shifter accum
	.WORD	$0200	; Feedback accum
	.WORD	$7f00	; Volume accum
	.WORD	$ffd9	; Freq interp
	.WORD	$fd6f	; Volume interp
	;------ Next Frame
	.WORD	30	; Frame number
	.WORD	$0001	; Flags

zap.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$0000	; Freq accum
	.WORD	$ffff	; Shifter accum
	.WORD	$c010	; Feedback accum
	.WORD	$0000	; Volume accum
	.WORD	$0001	; Freq interp
	.WORD	$fd58	; Feedback interp
	.WORD	$01c9	; Volume interp
	;------ Next Frame
	.WORD	71	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$004c	; Freq accum
	.WORD	$fc0f	; Shifter accum
	.WORD	$0340	; Feedback accum
	.WORD	$7f00	; Volume accum
	.WORD	$0022	; Freq interp
	.WORD	$0000	; Feedback interp
	.WORD	$ff73	; Volume interp
	;------ Next Frame
	.WORD	300	; Frame number
	.WORD	$0001	; Flags

laz.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0f98	; Flags
	.WORD	$0024	; Freq accum
	.WORD	$ffc0	; Shifter accum
	.WORD	$c010	; Feedback accum
	.WORD	$0a00	; Volume accum
	.WORD	$000c	; Freq interp
	.WORD	$0041	; Volume interp
	;------ Next Frame
	.WORD	78	; Frame number
	.WORD	$0001	; Flags

shield.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0f98	; Flags
	.WORD	$0234	; Freq accum
	.WORD	$ffc0	; Shifter accum
	.WORD	$c010	; Feedback accum
	.WORD	$1700	; Volume accum
	.WORD	$0003	; Freq interp
	.WORD	$0044	; Volume interp
	;------ Next Frame
	.WORD	64	; Frame number
	.WORD	$0b98	; Flags
	.WORD	$031c	; Freq accum
	.WORD	$c010	; Feedback accum
	.WORD	$2800	; Volume accum
	.WORD	$fffd	; Freq interp
	.WORD	$0000	; Volume interp
	;------ Next Frame
	.WORD	128	; Frame number
	.WORD	$0001	; Flags

elevator.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0f10	; Flags
	.WORD	$0000	; Freq accum
	.WORD	$fffe	; Shifter accum
	.WORD	$4940	; Feedback accum
	.WORD	$0000	; Volume accum
	.WORD	$0100	; Volume interp
	;------ Next Frame
	.WORD	20	; Frame number
	.WORD	$0f10	; Flags
	.WORD	$0024	; Freq accum
	.WORD	$fffe	; Shifter accum
	.WORD	$4b00	; Feedback accum
	.WORD	$1400	; Volume accum
	.WORD	$0002	; Volume interp
	;------ Next Frame
	.WORD	1000	; Frame number
	.WORD	$0001	; Flags
gulp.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0f88	; Flags
	.WORD	$0004	; Freq accum
	.WORD	$fc87	; Shifter accum
	.WORD	$0200	; Feedback accum
	.WORD	$7f00	; Volume accum
	.WORD	$0085	; Freq interp
	;------ Next Frame
	.WORD	30	; Frame number
	.WORD	$0b98	; Flags
	.WORD	$0f9c	; Freq accum
	.WORD	$0200	; Feedback accum
	.WORD	$7f00	; Volume accum
	.WORD	$ffe4	; Freq interp
	.WORD	$ff74	; Volume interp
	;------ Next Frame
	.WORD	170	; Frame number
	.WORD	$0001	; Flags

boggle.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0fb0	; Flags
	.WORD	$00ac	; Freq accum
	.WORD	$fc80	; Shifter accum
	.WORD	$01f0	; Feedback accum
	.WORD	$7f00	; Volume accum
	.WORD	$0007	; Freq interp
	.WORD	$0001	; Feedback interp
	.WORD	$fee7	; Volume interp
	;------ Next Frame
	.WORD	100	; Frame number
	.WORD	$0fb0	; Flags
	.WORD	$0388	; Freq accum
	.WORD	$f48b	; Shifter accum
	.WORD	$02a0	; Feedback accum
	.WORD	$1100	; Volume accum
	.WORD	$0000	; Freq interp
	.WORD	$fff5	; Feedback interp
	.WORD	$ffb5	; Volume interp
	;------ Next Frame
	.WORD	151	; Frame number
	.WORD	$0001	; Flags

trans.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0f98	; Flags
	.WORD	$0060	; Freq accum
	.WORD	$ffff	; Shifter accum
	.WORD	$c010	; Feedback accum
	.WORD	$0000	; Volume accum
	.WORD	$0067	; Freq interp
	.WORD	$01ab	; Volume interp
	;------ Next Frame
	.WORD	76	; Frame number
	.WORD	$0f98	; Flags
	.WORD	$1f3c	; Freq accum
	.WORD	$ffff	; Shifter accum
	.WORD	$0010	; Feedback accum
	.WORD	$7f00	; Volume accum
	.WORD	$e124	; Freq interp
	.WORD	$8100	; Volume interp
	;------ Next Frame
	.WORD	77	; Frame number
	.WORD	$0f98	; Flags
	.WORD	$0060	; Freq accum
	.WORD	$ffff	; Shifter accum
	.WORD	$c010	; Feedback accum
	.WORD	$0000	; Volume accum
	.WORD	$001c	; Freq interp
	.WORD	$0265	; Volume interp
	;------ Next Frame
	.WORD	130	; Frame number
	.WORD	$0f98	; Flags
	.WORD	$063c	; Freq accum
	.WORD	$ffff	; Shifter accum
	.WORD	$0010	; Feedback accum
	.WORD	$7f00	; Volume accum
	.WORD	$fce0	; Freq interp
	.WORD	$8100	; Volume interp
	;------ Next Frame
	.WORD	131	; Frame number
	.WORD	$0f98	; Flags
	.WORD	$031c	; Freq accum
	.WORD	$ffff	; Shifter accum
	.WORD	$c010	; Feedback accum
	.WORD	$0000	; Volume accum
	.WORD	$fffe	; Freq interp
	.WORD	$0108	; Volume interp
	;------ Next Frame
	.WORD	250	; Frame number
	.WORD	$0001	; Flags
whoosh.fxdata
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0f38	; Flags
	.WORD	$004c	; Freq accum
	.WORD	$fcbf	; Shifter accum
	.WORD	$cb90	; Feedback accum
	.WORD	$6400	; Volume accum
	.WORD	$3ca0	; Feedback interp
	.WORD	$a600	; Volume interp
	;------ Next Frame
	.WORD	1	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$004c	; Freq accum
	.WORD	$fcb5	; Shifter accum
	.WORD	$0830	; Feedback accum
	.WORD	$0a00	; Volume accum
	.WORD	$ffff	; Freq interp
	.WORD	$051a	; Feedback interp
	.WORD	$0150	; Volume interp
	;------ Next Frame
	.WORD	39	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$0004	; Freq accum
	.WORD	$fcbf	; Shifter accum
	.WORD	$ca10	; Feedback accum
	.WORD	$3c00	; Volume accum
	.WORD	$0000	; Freq interp
	.WORD	$0180	; Feedback interp
	.WORD	$3c00	; Volume interp
	;------ Next Frame
	.WORD	40	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$0004	; Freq accum
	.WORD	$fcbf	; Shifter accum
	.WORD	$cb90	; Feedback accum
	.WORD	$7800	; Volume accum
	.WORD	$0045	; Freq interp
	.WORD	$fdf3	; Feedback interp
	.WORD	$ff29	; Volume interp
	;------ Next Frame
	.WORD	135	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$19fc	; Freq accum
	.WORD	$fcb1	; Shifter accum
	.WORD	$0860	; Feedback accum
	.WORD	$2800	; Volume accum
	.WORD	$00a3	; Freq interp
	.WORD	$0000	; Feedback interp
	.WORD	$ffa3	; Volume interp
	;------ Next Frame
	.WORD	217	; Frame number
	.WORD	$0f90	; Flags
	.WORD	$4e7c	; Freq accum
	.WORD	$fcb1	; Shifter accum
	.WORD	$0870	; Feedback accum
	.WORD	$0a00	; Volume accum
	.WORD	$04ab	; Freq interp
	.WORD	$ffc4	; Volume interp
	;------ Next Frame
	.WORD	255	; Frame number
	.WORD	$0001	; Flags
giggle.fxdata
; HSFX Table for SFX_1 sound effect
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0f18	; Flags
	.WORD	$00fc	; Freq accum
	.WORD	$f0b5	; Shifter accum
	.WORD	$0000	; Feedback accum
	.WORD	$4e00	; Volume accum
	.WORD	$fd9a	; Volume interp
	;------ Next Frame
	.WORD	25	; Frame number
	.WORD	$0f38	; Flags
	.WORD	$00fc	; Freq accum
	.WORD	$f0b5	; Shifter accum
	.WORD	$0010	; Feedback accum
	.WORD	$1200	; Volume accum
	.WORD	$0007	; Feedback interp
	.WORD	$00d7	; Volume interp
	;------ Next Frame
	.WORD	50	; Frame number
	.WORD	$0f38	; Flags
	.WORD	$00f8	; Freq accum
	.WORD	$f0b9	; Shifter accum
	.WORD	$00c0	; Feedback accum
	.WORD	$2700	; Volume accum
	.WORD	$fffe	; Feedback interp
	.WORD	$00b3	; Volume interp
	;------ Next Frame
	.WORD	80	; Frame number
	.WORD	$0f38	; Flags
	.WORD	$00fc	; Freq accum
	.WORD	$f0b5	; Shifter accum
	.WORD	$0080	; Feedback accum
	.WORD	$3c00	; Volume accum
	.WORD	$0000	; Feedback interp
	.WORD	$01d9	; Volume interp
	;------ Next Frame
	.WORD	100	; Frame number
	.WORD	$0fb8	; Flags
	.WORD	$00fc	; Freq accum
	.WORD	$f0b5	; Shifter accum
	.WORD	$0080	; Feedback accum
	.WORD	$6100	; Volume accum
	.WORD	$0790	; Freq interp
	.WORD	$3264	; Feedback interp
	.WORD	$f080	; Volume interp
	;------ Next Frame
	.WORD	104	; Frame number
	.WORD	$0001	; Flags

my.bang.fxdata
; HSFX Table for SFX_1 sound effect
	;------ Next Frame
	.WORD	0	; Frame number
	.WORD	$0f90	; Flags
	.WORD	$7ffc	; Freq accum
	.WORD	$fff3	; Shifter accum
	.WORD	$cbf0	; Feedback accum
	.WORD	$0000	; Volume accum
	.WORD	$f384	; Freq interp
	.WORD	$0e1c	; Volume interp
	;------ Next Frame
	.WORD	9	; Frame number
	.WORD	$0b90	; Flags
	.WORD	$0f9c	; Freq accum
	.WORD	$c210	; Feedback accum
	.WORD	$7f00	; Volume accum
	.WORD	$0008	; Freq interp
	.WORD	$ffbe	; Volume interp
	;------ Next Frame
	.WORD	500	; Frame number
	.WORD	$0001	; Flags





blob.Data
; Handy Sprite Image Data
; Bits per Pixel = 3
; Next data is down-right
	.BYTE	$04,$10,$09,$00
	.BYTE	$07,$18,$c9,$20,$02,$01,$20
	.BYTE	$06,$18,$11,$80,$21,$00
	.BYTE	$07,$10,$b1,$48,$82,$84,$40
	.BYTE	$08,$f8,$24,$94,$53,$48,$80,$08
	.BYTE	$08,$18,$e1,$49,$34,$91,$00,$90
	.BYTE	$08,$e8,$04,$b4,$a4,$69,$20,$22
	.BYTE	$09,$08,$f1,$6d,$37,$1b,$48,$90,$40
	.BYTE	$06,$19,$13,$14,$93,$48
	.BYTE	$09,$f1,$04,$a4,$e4,$8d,$22,$02,$40
	.BYTE	$07,$10,$a9,$49,$b8,$26,$32
	.BYTE	$08,$d8,$24,$94,$db,$65,$88,$80
	.BYTE	$08,$10,$e1,$4d,$a4,$89,$20,$90
	.BYTE	$07,$10,$c1,$08,$92,$91,$00
	.BYTE	$06,$b8,$04,$80,$41,$48
	.BYTE	$05,$90,$04,$60,$44
	.BYTE	$00
; 114 total image bytes
blob
; Handy Sprite
	.BYTE	THREE_PER_PIXEL+NONCOLL_SPRITE ; Control 0
	.BYTE	RELOAD_HVST ; Control 1
	.BYTE	$00 ; Control 2
	.WORD	$0000	; Next Sprite
	.WORD	blob.Data	; ImageData
	.WORD	80	; HPos
	.WORD	51	; VPos
	.WORD	$0100	; HSize
	.WORD	$0100	; VSize
	.WORD	$0000	; Stretch
	.WORD	$0000	; Tilt
	; Palette
	.BYTE	$09,$ab,$c0,$00
face.Data
; Handy Sprite Image Data
; Bits per Pixel = 3
; Next data is down-right
	.BYTE	$04,$50,$31,$00
	.BYTE	$04,$38,$71,$00
	.BYTE	$06,$30,$31,$82,$49,$00
	.BYTE	$05,$20,$79,$21,$00
	.BYTE	$06,$18,$21,$92,$45,$e4
	.BYTE	$05,$10,$79,$49,$00
	.BYTE	$05,$10,$79,$51,$00
	.BYTE	$07,$08,$79,$a1,$32,$23,$10
	.BYTE	$07,$08,$79,$a9,$56,$d4,$52
	.BYTE	$07,$80,$71,$92,$50,$94,$c4
	.BYTE	$0a,$a0,$25,$44,$99,$25,$0b,$60,$8a,$40
	.BYTE	$0a,$a8,$26,$54,$32,$24,$38,$6b,$08,$52
	.BYTE	$0a,$b0,$2a,$db,$04,$89,$11,$61,$0a,$40
	.BYTE	$07,$91,$29,$f4,$96,$10,$a4
	.BYTE	$07,$11,$7d,$25,$82,$29,$00
	.BYTE	$07,$11,$7d,$1d,$8c,$45,$20
	.BYTE	$0c,$11,$1d,$0c,$0a,$1c,$12,$14,$9d,$b1,$14,$80
	.BYTE	$0b,$11,$8c,$a4,$54,$25,$44,$32,$34,$18,$52
	.BYTE	$0c,$11,$da,$51,$12,$4a,$91,$10,$8d,$06,$10,$80
	.BYTE	$0c,$a9,$45,$58,$45,$92,$91,$49,$14,$46,$8a,$40
	.BYTE	$0e,$c8,$51,$5b,$64,$5f,$86,$d3,$22,$92,$d9,$12,$21,$00
	.BYTE	$0c,$80,$14,$2d,$ac,$96,$d8,$6b,$35,$62,$11,$00
	.BYTE	$0d,$a0,$52,$a2,$58,$41,$df,$29,$6d,$b1,$4b,$22,$24
	.BYTE	$0b,$a0,$12,$d2,$a2,$52,$ab,$c9,$64,$29,$00
	.BYTE	$0b,$c8,$12,$d9,$2c,$46,$83,$30,$64,$82,$40
	.BYTE	$0d,$90,$08,$77,$c8,$d8,$4a,$45,$22,$89,$1c,$93,$48
	.BYTE	$0b,$10,$b4,$b6,$17,$4e,$72,$91,$32,$48,$d0
	.BYTE	$09,$10,$a4,$b6,$26,$1a,$b9,$23,$60
	.BYTE	$0a,$10,$bc,$b6,$c7,$21,$10,$c9,$24,$18
	.BYTE	$0a,$18,$bc,$b6,$48,$50,$a0,$91,$60,$58
	.BYTE	$09,$18,$24,$0d,$14,$25,$1c,$0b,$00
	.BYTE	$0a,$20,$1c,$c5,$b1,$25,$25,$24,$83,$00
	.BYTE	$09,$20,$1c,$0d,$1c,$bd,$96,$48,$d8
	.BYTE	$07,$28,$14,$45,$0c,$0b,$00
	.BYTE	$07,$38,$0c,$35,$14,$83,$00
	.BYTE	$04,$40,$3c,$00
	.BYTE	$00
; 315 total image bytes
face
; Handy Sprite
	.BYTE	THREE_PER_PIXEL+NONCOLL_SPRITE ; Control 0
	.BYTE	RELOAD_HVST ; Control 1
	.BYTE	$00 ; Control 2
	.WORD	$0000	; Next Sprite
	.WORD	face.Data	; ImageData
	.WORD	64	; HPos
	.WORD	31	; VPos
	.WORD	$0100	; HSize
	.WORD	$0100	; VSize
	.WORD	$0000	; Stretch
	.WORD	$0000	; Tilt
	; Palette
	.BYTE	$08,$9a,$bc,$00



;------------------------------------------------------------------
; include system variables
	.in sys.var



;------------------------------------------------------------------
; game variables/buffers (use the .ds command only)
my.buffer	.ds 1000


;------------------------------------------------------------------


len.free	.eq Buffer2-* ;number of bytes unused RAM for game buffers

	.or $200


;------------------------------------------------------------------
; more game variables/buffers (use the .ds command only)
; there is room for 512 bytes here
faceh	.ds 4
facev	.ds 4

;------------------------------------------------------------------

	.list on	; enable list for symbol table in list
	.en
