Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page    1
                                                        14:37:01  

    1                   
    2                   * === testhmusic.src =================================
    3                   * 
    4                   * Test Handy Music Example Program  --  Handy Software
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 9-Feb-90	SHL		Updated for compatibility with 1.1 rel
   12                   * 18 Apr 89	-RJ		Added initialization code
   13                   * 11 Apr 89	-RJ		Made many necessary modifications to 
   14                   *				current pre-release hmusic driver
   15                   * 6 Apr 89	-RJ		Added sys.mac, sys.src, and INITSYS
   16                   * 21 Mar 89	=RJ Mical=	Created this file!
   17                   * 
   18                   * ====================================================
   19                   
   20                   
   21                   
   22                   * Define BRK_USER to do debugging.
   23      0001         BRK_USER	.EQU	1
   24                   
   25                   
   26      0004         SONG_COUNT	.EQU	4
   27                   
   28                   * For a goo dtime, define these constants and change t
   29                   * run faster or slower.  
   30                   ; AUDIO_CLOCK_MASK	.EQU	6  ; Normally 6
   31                   ; AUDIO_PRELOAD		.EQU	16 ; Normally 64
   32                   
   33                   
   34                   ; These definitions cause the various bits of HMUSIC c
   35                   ;???STARTVOICE_USER		.EQU	1
   36      0001         STOPMUSIC_USER	.EQU	1
   37                   ;???STOPVOICE_USER	.EQU	1
   38                   ;???USERCALLS_USER	.EQU	1
   39                   ;???HMUSIC_USERCOUNT	.EQU	4	; If USERCALLS_USER, defin
   40                   
   41                   
   42                   * If you like, you can define HMUSIC_CHANNELCOUNT to a
   43                   * to define the maximum number of music channels.  A s
   44                   * result in slightly smaller code and data, and slight
   45                   ;HMUSIC_CHANNELCOUNT	.EQU	2
   46                   
   47                   
   48                   ;SEPARATE_HMUSIC_HSFX
   49                   
   50                   
   51                   		.IN	6502:include/harddefs.i
    1                   ; Wednesday 27-Jun-90 10:45:41
    2                   * === harddefs.i =====================================
    3                   *
    4                   * Hardware Definitions  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page    2
                        6502:include/harddefs.i         14:37:01  

    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 27-Jun-90	SHL		Removed MAGxx alternate names for tim
   12                   *				Added READ_ENABLE definition for IODAT
   13                   * 12-Apr-90	SHL		Added SUZY_BASE and MIKEY_BASE defini
   14                   *				Removed SUZY_ADDRESS definition
   15                   *				Corrected LEFT_ATTENMASK and RIGHT_ATTENMASK
   16                   * 9-Mar-90	SHL		Added new stereo register definitions
   17                   * 7-Mar-90	SHL		Removed MAGRDYx definitions
   18                   *				Commented out MSTEREO until get real info
   19                   * 26-Feb-90	SHL		Corrected some bit definitions
   20                   * 13-Feb-90	SHL		Added a few more missing definitions
   21                   * 9-Feb-90	SHL		Added rest of the hardware definitions
   22                   *				Added CPU interrupt and reset vectors
   23                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   24                   * 25 May 89	-RJ		Deleted LEFT_ and RIGHT_FIRE_BUTTON d
   25                   * 22 May 89	-RJ		Added RESTLESS definition, changed LI
   26                   *				to EXTERNAL_POWER
   27                   * 11 May 89	-RJ		Changed sprite definitions to track t
   28                   *				definitions caused by the Shadow-E chip bug
   29                   * 10 May 89	-RJ		Added INNER_ and OUTER_BUTTON and MST
   30                   *				CART0,1_IO_INACTIVE definitions
   31                   * 20 Apr 89	-RJ		Changed the game button definitions t
   32                   *				the new way to handle Pause, Restart, Flip and
   33                   *				Game Options 1 & 2.  Added bit defs to DISPCTL
   34                   * 19 Apr 89	RG Goudy	Added serial port bit definitions
   35                   * 18 Apr 89	-RJ		The RELOAD_ definition comments say "
   36                   * 19 Mar 89	-RJ		Added TURBO_DISABLE definition to MAP
   37                   * 17 Jan 89	-RJ		Added POWERON and MOTORON of SYSCTL1
   38                   *				Renamed RCART to RCART_0 and added RCART_1
   39                   *				Deleted VIDEO/MIKEYTEST, added MTEST0/1/2
   40                   * 2 Jan 89	-RJ		Added EVER_ON and NO_COLLIDE
   41                   * 31 Dec 88	-RJ		When HANDYMATH is non-zero, the hardw
   42                   *				math registers now aren't defined here either
   43                   *				Added JOYSTICK and SWITCHES flag definitions
   44                   * 30 Dec 88	-RJ		Added sprite type defs.  Renamed REUS
   45                   *				et al to the more accurate RELOAD_NONE et al
   46                   * 24-Dec-88	-RJ		Added sprite control register and aud
   47                   *				channel declarations and control bits
   48                   * 22 Dec 88	-RJ		Redefined all addresses, turning them
   49                   *				symbols that Handebug will recognize
   50                   *
   51                   * Mid 87	=RJ Mical=	Created this file!
   52                   *
   53                   * ====================================================
   54                   
   55                   
   56                   * Size of a display buffer
   57      1FE0         DISPLAY_BUFSIZE	.EQ $1FE0
   58                   
   59                   
   60                   * First address of the block of hardware addresses.
   61      FC00         HARDWARE_START	.EQ $FC00
   62                   
   63                   
   64                   
   65                   * SUZY chip functions are mapped into the $FC00 page
   66 0000:             		.OR $FC00
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page    3
                        6502:include/harddefs.i         14:37:01  

   67 FC00:             SUZY_BASE		; FC00
   68                   
   69                   * SUZY registers from $FC00-$FC7F (both sprite and MAT
   70                   * when the lower byte is stored to.
   71                   
   72                   * Sprite engine registers - *'ed values are used inter
   73                   * cannot be usefully initialized externally.
   74                   
   75 FC00:             TMPADRL		.DS 1	; FC00 *
   76 FC01:             TMPADRH		.DS 1	; FC01 *
   77 FC02:             TILTACUML	.DS 1	; FC02 *
   78 FC03:             TILTACUMH	.DS 1	; FC03 *
   79 FC04:             HOFFL		.DS 1	; FC04
   80 FC05:             HOFFH		.DS 1	; FC05
   81 FC06:             VOFFL		.DS 1	; FC06
   82 FC07:             VOFFH		.DS 1	; FC07
   83 FC08:             VIDBASL		.DS 1	; FC08
   84 FC09:             VIDBASH		.DS 1	; FC09
   85 FC0A:             COLLBASL	.DS 1	; FC0A
   86 FC0B:             COLLBASH	.DS 1	; FC0B
   87 FC0C:             VIDADRL		.DS 1	; FC0C *
   88 FC0D:             VIDADRH		.DS 1	; FC0D *
   89 FC0E:             COLLADRL	.DS 1	; FC0E *
   90 FC0F:             COLLADRH	.DS 1	; FC0F *
   91 FC10:             SCBNEXTL	.DS 1	; FC10
   92 FC11:             SCBNEXTH	.DS 1	; FC11
   93 FC12:             SPRDLINEL	.DS 1	; FC12 *
   94 FC13:             SPRDLINEH	.DS 1	; FC13 *
   95 FC14:             HPOSSTRTL	.DS 1	; FC14 *
   96 FC15:             HPOSSTRTH	.DS 1	; FC15 *
   97 FC16:             VPOSSTRTL	.DS 1	; FC16 *
   98 FC17:             VPOSSTRTH	.DS 1	; FC17 *
   99 FC18:             SPRHSIZL	.DS 1	; FC18
  100 FC19:             SPRHSIZH	.DS 1	; FC19
  101 FC1A:             SPRVSIZL	.DS 1	; FC1A
  102 FC1B:             SPRVSIZH	.DS 1	; FC1B
  103 FC1C:             STRETCHL	.DS 1	; FC1C *
  104 FC1D:             STRETCHH	.DS 1	; FC1D *
  105 FC1E:             TILTL		.DS 1	; FC1E *
  106 FC1F:             TILTH		.DS 1	; FC1F *
  107 FC20:             SPRDOFFL	.DS 1	; FC20 *
  108 FC21:             SPRDOFFH	.DS 1	; FC21 *
  109 FC22:             SCVPOSL		.DS 1	; FC22 *
  110 FC23:             SCVPOSH		.DS 1	; FC23 *
  111 FC24:             COLLOFFL	.DS 1	; FC24
  112 FC25:             COLLOFFH	.DS 1	; FC25
  113 FC26:             VSIZACUML	.DS 1	; FC26 *
  114 FC27:             VSIZACUMH	.DS 1	; FC27 *
  115 FC28:             HSIZOFFL	.DS 1	; FC28
  116 FC29:             HSIZOFFH	.DS 1	; FC29
  117 FC2A:             VSIZOFFL	.DS 1	; FC2A
  118 FC2B:             VSIZOFFH	.DS 1	; FC2B
  119 FC2C:             SCBADRL		.DS 1	; FC2C *
  120 FC2D:             SCBADRH		.DS 1	; FC2D *
  121 FC2E:             PROCADRL	.DS 1	; FC2E *
  122 FC2F:             PROCADRH	.DS 1	; FC2F *
  123                   
  124                   
  125                   * Math engine registers
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page    4
                        6502:include/harddefs.i         14:37:01  

  126                   
  127 FC30:             		.OR $FC52
  128 FC52:             MATHD		.DS 1	; FC52
  129 FC53:             MATHC		.DS 1	; FC53
  130 FC54:             MATHB		.DS 1	; FC54
  131 FC55:             MATHA		.DS 1	; FC55
  132 FC56:             MATHP		.DS 1	; FC56
  133 FC57:             MATHN		.DS 1	; FC57
  134 FC58:             		.OR $FC60
  135 FC60:             MATHH		.DS 1	; FC60
  136 FC61:             MATHG		.DS 1	; FC61
  137 FC62:             MATHF		.DS 1	; FC62
  138 FC63:             MATHE		.DS 1	; FC63
  139 FC64:             		.OR $FC6C
  140 FC6C:             MATHM		.DS 1	; FC6C
  141 FC6D:             MATHL		.DS 1	; FC6D
  142 FC6E:             MATHK		.DS 1	; FC6E
  143 FC6F:             MATHJ		.DS 1	; FC6F
  144                   
  145                   
  146                   * More SUZY control registers
  147                   
  148 FC70:             		.OR $FC80
  149 FC80:             SPRCTL0		.DS 1	; FC80
  150                   * Sprite control 0 bit definitions
  151      00C0         BITS_MASK	.EQ %11000000	; Mask for settings bits per p
  152                   * Sprite bits-per-pixel definitions
  153      0000         ONE_PER_PIXEL	.EQ %00000000
  154      0040         TWO_PER_PIXEL	.EQ %01000000
  155      0080         THREE_PER_PIXEL	.EQ %10000000
  156      00C0         FOUR_PER_PIXEL	.EQ %11000000
  157                   * More sprite control 0 bit definitions
  158      0020         HFLIP		.EQ %00100000
  159      0010         VFLIP		.EQ %00010000
  160                   * Sprite types - redefined to reflect the reality caus
  161                   ; NORMAL_SPRITE		.EQ %00000111
  162      0007         SHADOW_SPRITE		.EQ %00000111
  163                   
  164      0006         XOR_SPRITE		.EQ %00000110
  165      0006         XOR_SHADOW_SPRITE	.EQ %00000110
  166                   
  167      0005         NONCOLL_SPRITE		.EQ %00000101
  168                   
  169                   ; SHADOW_SPRITE		.EQ %00000100
  170      0004         NORMAL_SPRITE		.EQ %00000100
  171                   
  172                   ; BSHADOW_SPRITE	.EQ %00000011
  173      0003         BOUNDARY_SPRITE		.EQ %00000011
  174                   
  175                   ; BOUNDARY_SPRITE	.EQ %00000010
  176      0002         BSHADOW_SPRITE		.EQ %00000010
  177                   
  178      0001         BACKNONCOLL_SPRITE	.EQ %00000001
  179                   
  180      0000         BACKGROUND_SPRITE	.EQ %00000000
  181      0000         BACK_SHADOW_SPRITE	.EQ %00000000
  182                   
  183                   
  184 FC81:             SPRCTL1		.DS 1	; FC81
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page    5
                        6502:include/harddefs.i         14:37:01  

  185                   * Sprite control 1 bit definitions
  186      0080         LITERAL		.EQ %10000000
  187      0040         ALGO_3		.EQ %01000000	; broken, do not set this bit!
  188      0030         RELOAD_MASK	.EQ %00110000
  189                   * Sprite reload mask definitions
  190      0000         RELOAD_NONE	.EQ %00000000	; Reload nothing
  191      0010         RELOAD_HV	.EQ %00010000	; Reload hsize, vsize
  192      0020         RELOAD_HVS	.EQ %00100000	; Reload hsize, vsize, stretc
  193      0030         RELOAD_HVST	.EQ %00110000	; Reload hsize, vsize, stret
  194                   * More sprite control 1 bit definitions
  195      0008         REUSE_PALETTE	.EQ %00001000
  196      0004         SKIP_SPRITE	.EQ %00000100
  197      0002         DRAW_UP		.EQ %00000010
  198      0001         DRAW_LEFT	.EQ %00000001
  199                   
  200                   
  201 FC82:             SPRCOLL		.DS 1	; FC82
  202                   * SPRCOLL bit definitions
  203      0020         NO_COLLIDE	.EQ %00100000
  204                   
  205 FC83:             SPRINIT		.DS 1	; FC83
  206                   
  207 FC84:             		.OR $FC88
  208 FC88:             SUZYHREV	.DS 1	; FC88
  209 FC89:             SUZYSREV	.DS 1	; FC89
  210                   
  211 FC8A:             		.OR $FC90
  212 FC90:             SUZYBUSEN	.DS 1	; FC90
  213                   
  214 FC91:             SPRGO		.DS 1	; FC91
  215                   * These are the SPRGO flag definitions
  216      0004         EVER_ON		.EQ %00000100
  217      0001         SPRITE_GO	.EQ %00000001
  218                   
  219 FC92:             SPRSYS		.DS 1	; FC92
  220                   * These are the SPRSYS flag definitions when writing
  221      0080         SIGNMATH	.EQ %10000000
  222      0040         ACCUMULATE	.EQ %01000000
  223                   ;NO_COLLIDE	.EQ %00100000	; same as for SPRCOLL
  224      0010         VSTRETCH	.EQ %00010000
  225      0008         LEFTHAND	.EQ %00001000
  226      0004         UNSAFEACCESSRST	.EQ %00000100
  227      0002         SPRITESTOP	.EQ %00000010
  228                   * These are the SPRSYS flag definitions when reading
  229      0080         MATHWORKING	.EQ %10000000
  230      0040         MATHWARNING	.EQ %01000000
  231      0020         MATHCARRY	.EQ %00100000
  232      0010         VSTRETCHING	.EQ %00010000
  233      0008         LEFTHANDED	.EQ %00001000
  234      0004         UNSAFEACCESS	.EQ %00000100
  235      0002         SPRITETOSTOP	.EQ %00000010
  236      0001         SPRITEWORKING	.EQ %00000001
  237                   
  238 FC93:             		.OR $FCB0
  239 FCB0:             JOYSTICK	.DS 1	; FCB0
  240      0080         JOY_DOWN	.EQ %10000000
  241      0040         JOY_UP		.EQ %01000000
  242      0020         JOY_RIGHT	.EQ %00100000
  243      0010         JOY_LEFT	.EQ %00010000
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page    6
                        6502:include/harddefs.i         14:37:01  

  244      0008         OPTION1_BUTTON	.EQ %00001000
  245      0004         OPTION2_BUTTON	.EQ %00000100
  246      0002         INNER_BUTTON	.EQ %00000010
  247      0001         OUTER_BUTTON	.EQ %00000001
  248      0001         A_BUTTON	.EQ OUTER_BUTTON
  249      0002         B_BUTTON	.EQ INNER_BUTTON
  250      0008         RESTART_BUTTON	.EQ OPTION1_BUTTON
  251      0004         FLIP_BUTTON	.EQ OPTION2_BUTTON
  252                   
  253 FCB1:             SWITCHES	.DS 1	; FCB1
  254      0004         CART1_IO_INACTIVE .EQ %00000100
  255      0002         CART0_IO_INACTIVE .EQ %00000010
  256      0001         PAUSE_SWITCH	.EQ %00000001
  257                   
  258 FCB2:             RCART_0		.DS 1	; FCB2
  259 FCB3:             RCART_1		.DS 1	; FCB3
  260                   
  261                   
  262                   * LEDS output register only exists on early wire-wrap 
  263 FCB4:             		.OR $FCC0
  264 FCC0:             LEDS		.DS 1	; FCC0
  265                   
  266                   
  267                   * The parallel IO port only exists on early wire-wrap 
  268 FCC1:             		.OR $FCC2
  269 FCC2:             IOStatus	.DS 1	; FCC2
  270 FCC3:             IOData		.DS 1	; FCC3
  271                   
  272 FCC4:             HOWIE		.DS 1	; FCC4
  273                   
  274                   
  275                   
  276                   
  277                   * MIKEY chip functions are mapped into the $FD00 page
  278                   
  279 FCC5:             		.OR $FD00
  280 FD00:             MIKEY_BASE	; FD00
  281                   
  282                   * The Mikey Timers
  283                   * First the logical timer names are defined, then the 
  284 FD00:             HCOUNT		; FD00
  285 FD00:             TIMER0		; FD00
  286 FD00:             	.DS 4
  287 FD04:             TIMER1		; FD04
  288 FD04:             	.DS 4
  289 FD08:             VCOUNT		; FD08
  290 FD08:             TIMER2		; FD08
  291 FD08:             	.DS 4
  292 FD0C:             TIMER3		; FD0C
  293 FD0C:             	.DS 4
  294 FD10:             SERIALRATE	; FD10
  295 FD10:             TIMER4		; FD10
  296 FD10:             	.DS 4
  297 FD14:             TIMER5		; FD14
  298 FD14:             	.DS 4
  299 FD18:             TIMER6		; FD18
  300 FD18:             	.DS 4
  301 FD1C:             TIMER7		; FD1C
  302 FD1C:             	.DS 4
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page    7
                        6502:include/harddefs.i         14:37:01  

  303                   
  304                   * Here's the timer offsets
  305      0000         TIM_BACKUP	.EQ 0
  306      0001         TIM_CONTROLA	.EQ 1
  307      0002         TIM_COUNT	.EQ 2
  308      0003         TIM_CONTROLB	.EQ 3
  309                   
  310                   * TIM_CONTROLA control bits
  311      0080         ENABLE_INT	.EQ %10000000
  312      0040         RESET_DONE	.EQ %01000000
  313      0010         ENABLE_RELOAD	.EQ %00010000
  314      0008         ENABLE_COUNT	.EQ %00001000
  315      0007         AUD_CLOCK_MASK	.EQ %00000111
  316                   * Clock settings
  317      0007         AUD_LINKING	.EQ %00000111
  318      0006         AUD_64		.EQ %00000110
  319      0005         AUD_32		.EQ %00000101
  320      0004         AUD_16		.EQ %00000100
  321      0003         AUD_8		.EQ %00000011
  322      0002         AUD_4		.EQ %00000010
  323      0001         AUD_2		.EQ %00000001
  324      0000         AUD_1		.EQ %00000000
  325                   
  326                   * TIM_CONTROLB control bits
  327      0008         TIMER_DONE	.EQ %00001000
  328      0004         LAST_CLOCK	.EQ %00000100
  329      0002         BORROW_IN	.EQ %00000010
  330      0001         BORROW_OUT	.EQ %00000001
  331                   
  332                   
  333 FD20:             AUDIO0		.DS 8	; FD20
  334 FD28:             AUDIO1		.DS 8	; FD28
  335 FD30:             AUDIO2		.DS 8	; FD30
  336 FD38:             AUDIO3		.DS 8	; FD38
  337                   * Here's the audio channel offsets
  338      0000         AUD_VOLCNTRL	.EQ 0
  339      0001         AUD_FEEDBACK	.EQ 1
  340      0002         AUD_OUTPUT	.EQ 2
  341      0003         AUD_SHIFT	.EQ 3
  342      0004         AUD_BACKUP	.EQ 4
  343      0005         AUD_CONTROL	.EQ 5
  344      0006         AUD_COUNTER	.EQ 6
  345      0007         AUD_OTHER	.EQ 7
  346                   * The AUD_CONTROL bits are almost identical to the TIM
  347                   * Here's the AUD_CONTROL control bits that are differe
  348                   * control bits.
  349                   * See TIM_CONTROLA above for the other definitions
  350      0080         FEEDBACK_7		.EQ %10000000
  351      0020         ENABLE_INTEGRATE	.EQ %00100000
  352                   
  353                   
  354                   ; Stereo control registers follow
  355                   ; Stereo capability does not exist in all Lynxes
  356                   ; Left and right may be reversed, and if so will be co
  357                   ; release
  358                   
  359 FD40:             		.OR $FD40
  360 FD40:             ATTENREG0	.DS 1	; FD40	; Stereo attenuation registers
  361 FD41:             ATTENREG1	.DS 1	; FD41
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page    8
                        6502:include/harddefs.i         14:37:01  

  362 FD42:             ATTENREG2	.DS 1	; FD42
  363 FD43:             ATTENREG3	.DS 1	; FD43
  364      00F0         LEFT_ATTENMASK	.EQ %11110000
  365      000F         RIGHT_ATTENMASK	.EQ %00001111
  366                   
  367 FD44:             MPAN		.DS 1	; FD44	; Stereo attenuation select registe
  368                   
  369 FD45:             		.OR $FD50
  370 FD50:             MSTEREO		.DS 1	; FD50	; Stereo channel disable registe
  371                   
  372                   ; bit definitions for MPAN and MSTEREO registers
  373      0080         LEFT3_SELECT	.EQ %10000000
  374      0040         LEFT2_SELECT	.EQ %01000000
  375      0020         LEFT1_SELECT	.EQ %00100000
  376      0010         LEFT0_SELECT	.EQ %00010000
  377      0008         RIGHT3_SELECT	.EQ %00001000
  378      0004         RIGHT2_SELECT	.EQ %00000100
  379      0002         RIGHT1_SELECT	.EQ %00000010
  380      0001         RIGHT0_SELECT	.EQ %00000001
  381                   
  382                   
  383 FD51:             		.OR $FD80
  384 FD80:             INTRST		.DS 1	; FD80	; Interrupt Reset and Set registe
  385 FD81:             INTSET		.DS 1	; FD81
  386                   
  387                   * Interrupt Reset and Set bit definitions
  388      0080         TIMER7_INT	.EQ %10000000
  389      0040         TIMER6_INT	.EQ %01000000
  390      0020         TIMER5_INT	.EQ %00100000
  391      0010         SERIAL_INT	.EQ %00010000
  392      0008         TIMER3_INT	.EQ %00001000
  393      0004         TIMER2_INT	.EQ %00000100
  394      0002         TIMER1_INT	.EQ %00000010
  395      0001         TIMER0_INT	.EQ %00000001
  396      0004         VERTICAL_INT	.EQ TIMER2_INT
  397      0001         HORIZONTAL_INT	.EQ TIMER0_INT
  398                   
  399 FD82:             		.OR $FD86
  400 FD86:             AUDIN		.DS 1	; FD86	; Audio in -or- cartridge r/w line
  401 FD87:             SYSCTL1		.DS 1	; FD87
  402                   * SYSCTL1 bit definitions
  403      0002         POWERON		.EQ %00000010
  404      0001         CART_ADDR_STROBE .EQ %00000001
  405                   
  406 FD88:             MIKEYHREV	.DS 1	; FD88	; Mikey hardware rev
  407 FD89:             MIKEYSREV	.DS 1	; FD89	; Mikey software rev
  408 FD8A:             IODIR		.DS 1	; FD8A
  409 FD8B:             IODAT		.DS 1	; FD8B
  410                   * Here's the IODIR and IODAT bit definitions
  411      0010         AUDIN_BIT	.EQ %00010000	; note that there is also the 
  412      0010         READ_ENABLE	.EQ %00010000	; same bit for AUDIN_BIT
  413      0008         RESTLESS	.EQ %00001000
  414      0004         NOEXP		.EQ %00000100	; If set, redeye is not connected
  415      0002         CART_ADDR_DATA	.EQ %00000010
  416      0002         CART_POWER_OFF	.EQ %00000010	; same bit for CART_ADDR_
  417      0001         EXTERNAL_POWER	.EQ %00000001
  418                   
  419 FD8C:             SERCTL		.DS 1	; FD8C	; Serial control
  420                   * Here's the SERCTL bit definitions when writing
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page    9
                        6502:include/harddefs.i         14:37:01  

  421      0080         TXINTEN		.EQ %10000000
  422      0040         RXINTEN		.EQ %01000000
  423                   ;unused		.EQ %00100000	; Leave unused bit 0 for future
  424      0010         PAREN		.EQ %00010000
  425      0008         RESETERR	.EQ %00001000
  426      0004         TXOPEN		.EQ %00000100
  427      0002         TXBRK		.EQ %00000010
  428      0001         PAREVEN		.EQ %00000001
  429                   * Here's the SERCTL bit definitions when reading
  430      0080         TXRDY		.EQ %10000000
  431      0040         RXRDY		.EQ %01000000
  432      0020         TXEMPTY		.EQ %00100000
  433      0010         PARERR		.EQ %00010000
  434      0008         OVERRUN		.EQ %00001000
  435      0004         FRAMERR		.EQ %00000100
  436      0002         RXBRK		.EQ %00000010
  437      0001         PARBIT		.EQ %00000001
  438                   
  439 FD8D:             SERDAT		.DS 1	; FD8D	; Serial data
  440                   
  441                   
  442                   
  443 FD8E:             		.OR $FD90
  444 FD90:             SDONEACK	.DS 1	; FD90	; Suzy done ack
  445 FD91:             CPUSLEEP	.DS 1	; FD91	; zzz
  446 FD92:             DISPCTL		.DS 1	; FD92	; Display control
  447                   * Here are the DISPCTL bit definitions
  448      0008         DISP_COLOR	.EQ %00001000	; must be set to 1
  449      0004         DISP_FOURBIT	.EQ %00000100	; must be set to 1
  450      0002         DISP_FLIP	.EQ %00000010
  451      0001         DMA_ENABLE	.EQ %00000001	; must be set to 1
  452                   
  453 FD93:             PBKUP		.DS 1	; FD93	; Display's magic 'P' count
  454 FD94:             DISPADRL	.DS 1	; FD94	; Start of display
  455 FD95:             DISPADRH	.DS 1	; FD95
  456                   
  457 FD96:             		.OR $FD9C
  458 FD9C:             MTEST0		.DS 1	; FD9C	; System test vectors, see spec f
  459 FD9D:             MTEST1		.DS 1	; FD9D
  460 FD9E:             MTEST2		.DS 1	; FD9E
  461                   
  462                   * The Color registers
  463 FD9F:             		.OR $FDA0
  464 FDA0:             GREEN0		.DS 1	; FDA0
  465 FDA1:             GREEN1		.DS 1	; FDA1
  466 FDA2:             GREEN2		.DS 1	; FDA2
  467 FDA3:             GREEN3		.DS 1	; FDA3
  468 FDA4:             GREEN4		.DS 1	; FDA4
  469 FDA5:             GREEN5		.DS 1	; FDA5
  470 FDA6:             GREEN6		.DS 1	; FDA6
  471 FDA7:             GREEN7		.DS 1	; FDA7
  472 FDA8:             GREEN8		.DS 1	; FDA8
  473 FDA9:             GREEN9		.DS 1	; FDA9
  474 FDAA:             GREENA		.DS 1	; FDAA
  475 FDAB:             GREENB		.DS 1	; FDAB
  476 FDAC:             GREENC		.DS 1	; FDAC
  477 FDAD:             GREEND		.DS 1	; FDAD
  478 FDAE:             GREENE		.DS 1	; FDAE
  479 FDAF:             GREENF		.DS 1	; FDAF
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   10
                        6502:include/harddefs.i         14:37:01  

  480                   
  481 FDB0:             BLUERED0	.DS 1	; FDB0
  482 FDB1:             BLUERED1	.DS 1	; FDB1
  483 FDB2:             BLUERED2	.DS 1	; FDB2
  484 FDB3:             BLUERED3	.DS 1	; FDB3
  485 FDB4:             BLUERED4	.DS 1	; FDB4
  486 FDB5:             BLUERED5	.DS 1	; FDB5
  487 FDB6:             BLUERED6	.DS 1	; FDB6
  488 FDB7:             BLUERED7	.DS 1	; FDB7
  489 FDB8:             BLUERED8	.DS 1	; FDB8
  490 FDB9:             BLUERED9	.DS 1	; FDB9
  491 FDBA:             BLUEREDA	.DS 1	; FDBA
  492 FDBB:             BLUEREDB	.DS 1	; FDBB
  493 FDBC:             BLUEREDC	.DS 1	; FDBC
  494 FDBD:             BLUEREDD	.DS 1	; FDBD
  495 FDBE:             BLUEREDE	.DS 1	; FDBE
  496 FDBF:             BLUEREDF	.DS 1	; FDBF
  497                   
  498                   
  499                   * The Map Control register
  500 FDC0:             		.OR $FFF9
  501 FFF9:             MAPCTL		.DS 1	; FFF9
  502                   * These are the MAPCTL flag definitions
  503      0080         TURBO_DISABLE	.EQ %10000000
  504      0008         VECTOR_SPACE	.EQ %00001000	; 1 maps RAM into specified
  505      0004         ROM_SPACE	.EQ %00000100
  506      0002         MIKEY_SPACE	.EQ %00000010
  507      0001         SUZY_SPACE	.EQ %00000001
  508                   
  509                   * 65C02 hardware interrupt and reset vectors
  510 FFFA:             CPU_NMI		.DS 2	; FFFA
  511 FFFC:             CPU_RESET	.DS 2	; FFFC
  512 FFFE:             CPU_IRQ			; FFFE
  513                   
  514                   
  515                   
   52                   		.IN	6502:include/monitor.i
    1                   
    2                   * === monitor.i ======================================
    3                   *
    4                   * 6502 Debugger Monitor Definitions File  --  Handy So
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 26-Feb-90	SHL		Minor cleanup
   12                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   13                   * 1 May 89	-RJ		Changed MONITOR_ZP_RESERVED to $F8
   14                   * 19 Mar 89	-RJ		Changed MONITOR_RAM_RESERVED to $F800
   15                   * 16 Mar 89	-RJ		Changed values of BUS_MONITOR and TRA
   16                   *				added LARGE_DATA
   17                   * 14 Mar 89	-RJ		Changed value of MONITOR_RAM_RESERVED
   18                   * 26-Dec-88	-RJ		Added HANDEM_NEWDISPLAY
   19                   * Early 88	=RJ Mical=	Created this file!
   20                   *
   21                   * ====================================================
   22                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   11
                        6502:include/monitor.i          14:37:01  

   23                   
   24                   
   25      FALSE        	#IFDEF	MONITOR_I	; prevent multiple inclusion
   27                   	#ENDIF
   28      0001         MONITOR_I	.EQU	1
   29                   
   30                   
   31                   
   32                   * The hardware interrupt vector table starts at this a
   33      FBF0         IntTable		.=	$FC00-{8*2}
   34                   
   35                   
   36                   
   37                   * These constants define the memory locations reserved
   38                   * program.  The zero-page definition describes the fir
   39                   * in zero-page; all locations from there to the end of
   40                   * reserved.  With the RAM definition, all locations
   41                   * are reserved from that address to the start of Handy
   42                   * currently lives at $FC00
   43                   * Note that the Howard board does not require RAM for 
   44      00F8         MONITOR_ZP_RESERVED	.EQU	$00F8
   45      F900         MONITOR_RAM_RESERVED	.EQU	$F900
   46                   
   47                   
   48                   
   49                   * These are the offsets of the register data both in t
   50                   * data stream when host and monitor are passing the re
   51      0000         A_OFFSET		.EQU	0
   52      0001         X_OFFSET		.EQU	1
   53      0002         Y_OFFSET		.EQU	2
   54      0003         S_OFFSET		.EQU	3
   55      0004         PC_OFFSET		.EQU	4
   56      0006         P_OFFSET		.EQU	6
   57                   
   58                   
   59                   
   60                   * These define the monitor memory block sizes
   61      0007         REGISTER_BYTECOUNT	.EQU	7
   62      0010         MONITOR_BYTECOUNT	.EQU	16
   63                   
   64                   
   65                   
   66                   * These are the definitions of the signals that can be
   67                   * the Handebug monitor program after a warm restart.
   68      0000         NOP_REQUEST		.EQU	0
   69      0001         DOWNLOAD_REQUEST	.EQU	1
   70      0002         UPLOAD_REQUEST		.EQU	2
   71      0003         CONTINUE_REQUEST	.EQU	3
   72      0004         SLAVE_REQUEST		.EQU	4
   73      0005         GO_REQUEST		.EQU	5
   74      0006         SEE_HOWARD_REQUEST	.EQU	6
   75      0007         HIDE_HOWARD_REQUEST	.EQU	7
   76                   
   77                   
   78                   
   79                   * These are the definitions of the upload/download typ
   80      0000         END_OF_FILE		.EQU	$00
   81      0001         ORIGIN			.EQU	$01
   82      0002         DATA			.EQU	$02
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   12
                        6502:include/monitor.i          14:37:01  

   83      0003         RUN_ADDRESS		.EQU	$03
   84                   * The assembler reserves the remainder of the low defi
   85      0010         REGISTER		.EQU	$10
   86      0011         FILL_MEM		.EQU	$11
   87      0012         LARGE_DATA		.EQU	$12
   88      0013         BUS_MONITOR		.EQU	$13
   89      0014         TRACE			.EQU	$14
   90      0015         BREAK_CONTROLS		.EQU	$15
   91      0016         HOWARD_ABUS		.EQU	$16
   92      0017         HOWARD_BBUS		.EQU	$17
   93      0018         HOWARD_CBUS		.EQU	$18
   94      0019         HOWARD_DBUS		.EQU	$19
   95      001A         ROM			.EQU	$1A
   96                   
   97                   
   98                   * These are the monitor to host slave requests
   99      0001         UP_THIS_PAGE		.EQU	1
  100      0002         UP_CURRENT_PAGE		.EQU	2
  101      0003         UP_REGISTERS		.EQU	3
  102      0004         UP_MEMWATCH		.EQU	4
  103      0005         UP_HAHDATA		.EQU	5
  104                   
  105                   
  106                   
   53                   		.IN	6502:include/hsfx.i
    1                   
    2                   * === hsfx.i =========================================
    3                   * 
    4                   * Handy Sound Effects Driver Definitions  --  Handy So
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date       Name              Description
   10                   * ---------  ----------------  -----------------------
   11                   * 11 May 89  -RJ               Made AUDIO_TIMER defini
   12                   *                              Added AUDIO_CLOCK and A
   13                   * 22 Mar 89  -RJ               Added FREECHANNEL and N
   14                   * 21 Mar 89  -RJ               Commented out CES_SLOWC
   15                   * 4 Jan 88   =RJ Mical=        Added AUDIO_TIMER defin
   16                   * Late 88    RG Goudy          Created this file!
   17                   * 
   18                   * ====================================================
   19                   
   20                   
   21                   * This defines the total number of accumulators and in
   22                   
   23      TRUE         	#IFNDEF	HSFX_CHANNELCOUNT
   24      0004         HSFX_CHANNELCOUNT	.=	4	; number of HSFX channels
   25                   	#ENDIF				; you may redefine from 1 to 4
   26                   
   27      0002         HSFX_REGSIZE		.EQU	2	; bytes per accumulator or interp
   28                   					; (must be 2 for this code)
   29      0004         HSFX_ACCUMCOUNT		.EQU	4	; number of accumulators
   30                   					;
   31      0008         HSFX_REGCOUNT		.EQU	2*HSFX_ACCUMCOUNT ; total number o
   32                   
   33                   
   34                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   13
                        6502:include/hsfx.i             14:37:01  

   35                   
   36      TRUE          #IFNDEF AUDIO_TIMER
   37      0006         AUDIO_TIMER		.=	6
   38                    #ENDIF
   39      TRUE          #IFNDEF AUDIO_CLOCK_MASK
   40      0006         AUDIO_CLOCK_MASK	.=	6		; 64uS clock
   41                    #ENDIF
   42      TRUE          #IFNDEF AUDIO_PRELOAD
   43      0040         AUDIO_PRELOAD		.=	64
   44                    #ENDIF
   45                   
   46                   
   47      0000         HSFX_FREECHANNEL	.EQU	0	; This channel is free and ava
   48      0001         HSFX_LILPRIORITY	.EQU	$01	; Minimum allowable priority
   49      00FE         HSFX_BIGPRIORITY	.EQU	$FE	; Maximum allowable priority
   50      00FF         HSFX_NOCHANNEL		.EQU	$FF	; Channel not available to HS
   51                   
   52                   
   53                   * HSFX keyframe entry flags
   54      8000         LOOP0			.EQU $8000	; one 'loop start' flag
   55      4000         NEXT0			.EQU $4000	; one 'loop end' flag
   56      2000         LOOP1			.EQU $2000	; another 'loop start' flag
   57      1000         NEXT1			.EQU $1000	; another 'loop end' flag
   58      0800         FREQ_ACCUM		.EQU $0800	; frequency accumulator
   59      0400         SHIFT_ACCUM		.EQU $0400	; shifter absolute store
   60      0200         FBACK_ACCUM		.EQU $0200	; feedback accumulator
   61      0100         VOL_ACCUM		.EQU $0100	; volume accumulator
   62      0080         FREQ_INTERP		.EQU $80	; frequency interpolation
   63      0040         SHIFT_INTERP		.EQU $40	; shifter interpolation
   64      0020         FBACK_INTERP		.EQU $20	; feedback interpolation
   65      0010         VOL_INTERP		.EQU $10	; volume interpolation
   66      0008         INTEGRATE		.EQU $08	; integration - 1=on, 0=off
   67      0004         SHIFT_ALWAYS		.EQU $04	; store shifter every frame
   68                   ; 			.EQU $02	; ignored
   69      0001         END_OF_EFFECT		.EQU $01	; end of effect (last bit test
   70                   
   71                   
   72                   
   54                   		.IN	6502:include/hmusic.i
    1                   ; Tuesday 24-Apr-90 15:14:27
    2                   * === hmusic.i =======================================
    3                   * 
    4                   * Handy Music Definitions  --  Handy Software
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 18-Apr-90	SHL		Added HMUSIC_DEFAULT_PRIORITY
   12                   * 11 Sep 89	Stephen Jungels	Added song header and note
   13                   * 17 Apr 89	-RJ		Added "safe" declaration of HMUSIC_US
   14                   *				and HMUSIC_CHANNELCOUNT
   15                   * 21 Mar 89	=RJ Mical=	Added HANDYMUSIC definition, co
   16                   * Feb 89	RG Goudy	Created this file!
   17                   * 
   18                   * ====================================================
   19                   
   20                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   14
                        6502:include/hmusic.i           14:37:01  

   21                   
   22      TRUE         	#IFNDEF	HANDYMUSIC
   23      0001         HANDYMUSIC	.EQU	1
   24                   	#ENDIF
   25                   
   26                   
   27                   * These declarations are done in case the programmer w
   28                   * defaults.  If any of these constants is already defi
   29                   * redefined here. However, if not yet defined then whe
   30                   * using .= so the programmer can safely redefine these
   31                   * has been included. (though they must defined to the 
   32                   * the hmusic source code is included!)
   33      TRUE         	#IFNDEF	HMUSIC_USERCOUNT
   34      0004         HMUSIC_USERCOUNT	.= 4
   35                   	#ENDIF
   36      TRUE         	#IFNDEF	HMUSIC_CHANNELCOUNT
   37      0004         HMUSIC_CHANNELCOUNT	.= 4
   38                   	#ENDIF
   39                   
   40      TRUE         	#IFNDEF HMUSIC_DEFAULT_PRIORITY
   41      0064         HMUSIC_DEFAULT_PRIORITY	.= 100
   42                   	#ENDIF
   43                   
   44                   * music table flags
   45                   ; LOOP0		.EQU $8000	; inner 'loop start' flag
   46                   ; NEXT0		.EQU $4000	; inner 'loop end' flag
   47                   ; LOOP1		.EQU $2000	; outer 'loop start' flag
   48                   ; NEXT1		.EQU $1000	; outer 'loop end' flag
   49      0800         RING		.EQU $0800	; gosub to programmers
   50                   ; future [AGS?]	.EQU $0400	;
   51      0200         ASD		.EQU $0200	;
   52      0100         AGD		.EQU $0100	;
   53                   
   54      0080         COMMAND		.EQU $80	; Command Flag Word
   55      0040         EXPAND_CFW	.EQU $40	; Expand CFW to 2 words of flags
   56      0020         MSFX		.EQU $20	; "Music calls an effect" flag
   57      0010         USER		.EQU $10	; Call user routine
   58      0008         DURATION	.EQU $08	; New duration table pointer follows
   59      0004         PITCH		.EQU $04	; New pitch table pointer follows
   60      0002         ESCAPE		.EQU $02	; Do direct store sequence 
   61      0001         END_OF_VOICE	.EQU $01	; Bye-bye!
   62                   
   63                   
   64                   
   65                   * Song header layout
   66                   
   67      0000         SONG_STARTUPVOICE0	.EQU	0	; offsets for "start-up" voi
   68      0002         SONG_STARTUPVOICE1	.EQU	2	; offsets for "start-up" voi
   69      0004         SONG_STARTUPVOICE2	.EQU	4	; offsets for "start-up" voi
   70      0006         SONG_STARTUPVOICE3	.EQU	6	; offsets for "start-up" voi
   71      0008         SONG_MAINVOICES		.EQU	8	; number of start-up voices
   72                   					; (must change HSPL to make this true)
   73      0009         SONG_VOICEFX_OFFSETS	.EQU	9	; beginning of voice/fx of
   74                   
   75                   ; 16 bit offsets for each voice or sound effect in the
   76                   ; All offsets are relative to the song base address.
   77                   
   78                   
   79                   * Note bit definition masks
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   15
                        6502:include/hmusic.i           14:37:01  

   80                   
   81                   ; notes look like 0dddpppp, where d=duration and p=pit
   82                   ; bit 7 on signifies this is the beginning of a Comman
   83      0070         SONG_DURATIONBITS	.EQU	%01110000
   84      000F         SONG_PITCHBITS		.EQU	%00001111
   85                   
   55                   
   56                   		;------	We promise RJ to include these two files in 
   57                   		.IN	6502:macros/zpage.mac
    1                   ; ----------------------------------------------------
    2                   ; Zero-Page memory allocation macros
    3                   ;  Created:  Mike Ireton, 10/07/88
    4                   ; Modified:  RJ Mical, 14 Nov 88
    5                   ; 
    6                   ; BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPAGE) 
    7                   ; and END_ZPAGE (or END_ALLOCATE_ZEROPAGE) are two ver
    8                   ; for safely allocating zero-page memory space in any 
    9                   ; If you use these macros around every z-page memory a
   10                   ; the macros will track your allocations and dole out 
   11                   ; memory locations every time you ask for them.  This 
   12                   ; emulator to make z-page allocations without stepping
   13                   ; allows you to make z-page allocations locally in the
   14                   ; rather than making all your allocations in one file 
   15                   ; down all free zero page locations and figuring out w
   16                   ; 
   17                   ; -- TO USE ---
   18                   ; This file defines a redefinable value named NEXTZPG,
   19                   ; to 0.  NEXTZPG holds the address of the next availab
   20                   ; which in most cases will be at memory location $00. 
   21                   ; zero-page memory locations starting from $00, you ca
   22                   ; a value of your own choice after you've included thi
   23                   ; used any of this file's macros.  For example, say th
   24                   ; to stash away memory locations $00 through $0F.  At 
   25                   ; before calling BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPA
   26                   ;                .IN    6502:macros/zpage.mac
   27                   ;   NEXTZPG     .=     $10
   28                   ; 
   29                   ; Then, when the need arises for zero page variables, 
   30                   ; BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPAGE).  This will
   31                   ; labels and re-assign the assembler's location counte
   32                   ; zero-page (as pointed to by the current NEXTZPG).  A
   33                   ; end with END_ZPAGE (or END_ALLOCATE_ZEROPAGE), which
   34                   ; z-page offset and restore the program counter.  For 
   35                   ;   RoutineX                        RoutineX
   36                   ;           BEGIN_ZPAGE                     BEGIN_ALLO
   37                   ;   ZPG1    .DS    2      - or -    ZPG1    .DS    2
   38                   ;   COUNT   .DS    1                COUNT   .DS    1
   39                   ;           END_ZPAGE                       END_ALLOCA
   40                   ;           STA    ZPG1                     STA    ZPG
   41                   ; 
   42                   ; Remember that you should only define data areas betw
   43                   ; Anything else is dangerous and should be avoided (an
   44                   ; you should find another line of work... :-)  )
   45                   ; 
   46                   ; Also, note that these macros use another redefinable
   47                   ; record and restore the program counter 
   48                   
   49      0000         NEXTZPG	.= $00
   50                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   16
                        6502:macros/zpage.mac           14:37:01  

   51                   	#MACRO BEGIN_ZPAGE
   52 MACRO             TEMPORG	  .= *
   53 MACRO             	  .ORG NEXTZPG
   54                   	#ENDM
   55                   
   56                   	#MACRO BEGIN_ALLOCATE_ZEROPAGE
   57 MACRO             	  BEGIN_ZPAGE
   58                   	#ENDM
   59                   
   60                   
   61                   	#MACRO END_ZPAGE
   62 MACRO             NEXTZPG	  .= *
   63 MACRO             	  #IF NEXTZPG > $0100
   64 MACRO             	    .ECHO "ERROR:  z-page allocations went out of pag
   65 MACRO             	  #ENDIF
   66 MACRO             	  .ORG TEMPORG
   67                   	#ENDM
   68                   
   69                   	#MACRO END_ALLOCATE_ZEROPAGE
   70 MACRO             	  END_ZPAGE
   71                   	#ENDM
   72                   
   73                   
   74                   
   58                   		.IN	6502:src/syszpage.src
    1                   
    2                   * === syszpage.src ===================================
    3                   *
    4                   * System Zero-Page Data Allocations  --  the 6502 Side
    5                   *
    6                   * Copyright (C) 1988, Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   *
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   13                   * 19 Apr 89	-RJ		Added description of rule for using s
   14                   * 22 Mar 89	-RJ		Removed the audio variables from this
   15                   * 20 Mar 89	RG Goudy	Added several new zpage pointers
   16                   * 26 Jan 89	-RJ		Got rid of Interruptus
   17                   * 26-Dec-88	=RJ Mical=	Created this file from sysdata.
   18                   *
   19                   * ====================================================
   20                   
   21                   
   22                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   23                   *
   24                   * This file should be included before any source code 
   25                   *
   26                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   27                   
   28                   
   29                   
   30                   * System programmers note:  the sysptrs are defined as
   31                   * pointers.  These can't be used during interrupt code
   32                   * no promises regarding the usage of these for anythin
   33                   * while using one of these is a dangerous thing to do
   34                   		BEGIN_ZPAGE
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   17
                        6502:src/syszpage.src           14:37:01  

    1      FFFE       + TEMPORG	  .= *
    2 FFFE:           + 	  .ORG NEXTZPG
    3                 + 
   35 0000:             sysptr		.DS 2
   36 0002:             sysptr2		.DS 2
   37 0004:             sysptr3		.DS 2
   38                   		END_ZPAGE
    1      0006       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 0006:           + 	  .ORG TEMPORG
    6                 + 
   39                   
   40                   
   41                   
   59                   
   60                   		.IN	6502:macros/sys.mac
    1                   ; Wednesday 27-Jun-90 11:49:43
    2                   * == sys.mac =========================================
    3                   *
    4                   * System Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 20-Jun-90	SHL		RAMCART_USER support added
   12                   * 28-Mar-90	SHL		INITINT new clears and resets serial 
   13                   *				if SERIALPORT_USER defined
   14                   * 22-Mar-90	SHL		INITINT now vectors all IRQS to IntRe
   15                   *				instead of user supplied RTS
   16                   * 20-Mar-90	SHL		Removed SEI, CLI from INITINT macro
   17                   * 7-Mar-90	SHL		DISPCTL_RAM now initialized in INITSYS
   18                   * 9-Feb-90	SHL		Modified BRK_USER support to force bre
   19                   *				Howard board, unless user uses the SET_BRK
   20                   *				macro to redirect breaks
   21                   *				INITINT is now required before any use of
   22                   *				INITEOF, INITEOL or SET_DISPLAY... macros
   23                   *				Added HBRK macro
   24                   *				Moved initialization of MAPCTL to INITSYS
   25                   *				Removed HFIX1 macros
   26                   * 31 May 89	-RJ		Added BRK_USER support to INITINT mac
   27                   *				Killed call to InitSys
   28                   *				Added SET_BRK macro
   29                   * 25 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   30                   * 22 May 89	-RJ		Changed init'ing of IODIR's LIGHT_OFF
   31                   *				RESTLESS, also now init IODAT too
   32                   * 16 May 89	-RJ		Added setting TXOPEN to SERCTL in INI
   33                   * 11 May 89	-RJ		Moved declaration of sysIntTable to s
   34                   * 10 May 89	-RJ		Changed CART_STROBE to CART_ADDR_DATA
   35                   * 1 May 89	-RJ		Added the INITINTS macro for user-cont
   36                   *				interrupt table handling.  Also defined
   37                   *				and allow redefinition of sysIntTable, which
   38                   *				is now used in the display.src file
   39                   * 20 Apr 89	-RJ		Added initialization of IODIR and IOD
   40                   * 6 Apr 89	-RJ		Moved init of SPRSYS into INITSYS
   41                   * 19 Mar 89	-RJ		Added HFIX1 macros, modified INITSYS 
   42                   * 18 Mar 89	=RJ Mical=	Created this file!
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   18
                        6502:macros/sys.mac             14:37:01  

   43                   *
   44                   * ====================================================
   45                   
   46                   
   47                   * HBRK macro forces a break on a Howard board.  On a c
   48                   * executed as one-byte one-cycle NOP.
   49                   	#MACRO HBRK
   50 MACRO             	.HS 13
   51                   	#ENDM
   52                   
   53                   
   54                   * Do some needed hardware initialization to get system
   55                   	#MACRO INITSYS
   56 MACRO             
   57 MACRO             	LDA #DISP_COLOR+DISP_FOURBIT+DMA_ENABLE
   58 MACRO             	STA DISPCTL_RAM
   59 MACRO             
   60 MACRO             	LDA #LEFTHAND		; the equates have been defined to pre
   61 MACRO             	STA SPRSYS_RAM
   62 MACRO             	STA SPRSYS
   63 MACRO             
   64 MACRO             	LDA #VECTOR_SPACE	; map in all RAM except for CPU vec
   65 MACRO             	STA MAPCTL
   66 MACRO             
   67 MACRO             	;------	Set parallel CART_ADDR_DATA and RESTLESS as o
   68 MACRO             	;------ If RAMCART_USER, set AUDIN (READ_ENABLE) as o
   69 MACRO             	;------	all others as input
   70 MACRO              #IFDEF RAMCART_USER
   71 MACRO             	LDA #CART_ADDR_DATA+RESTLESS+READ_ENABLE
   72 MACRO              #ELSE
   73 MACRO             	LDA #CART_ADDR_DATA+RESTLESS
   74 MACRO              #ENDIF
   75 MACRO             	STA IODAT_RAM
   76 MACRO             	STA IODAT
   77 MACRO             	STA IODIR_RAM
   78 MACRO             	STA IODIR
   79 MACRO             
   80 MACRO             	LDA #TXOPEN	; Turn off serial IRQs before starting
   81 MACRO             	STA SERCTL	;  and make sure serial port is open-colle
   82 MACRO             
   83 MACRO             	  #IFDEF AUTO_TIMEOUT_USER
   84 MACRO             		STZ TimeoutCount+1
   85 MACRO             		STZ TimeoutCount+2
   86 MACRO             	  #ENDIF
   87 MACRO             
   88                   	#ENDMACRO
   89                   
   90                   
   91                   	#MACRO	INITINT
   92 MACRO             sysIntTable	.EQ ?0
   93 MACRO             
   94 MACRO             		;------	Set the break and int vectors to point to ou
   95 MACRO             		LDA #<UserIntHandler
   96 MACRO             		STA CPU_IRQ
   97 MACRO             		LDA #>UserIntHandler
   98 MACRO             		STA CPU_IRQ+1
   99 MACRO             
  100 MACRO             		LDX #8*2-1
  101 MACRO             ??	.= *
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   19
                        6502:macros/sys.mac             14:37:01  

  102 MACRO             		  LDA #>IntReturn
  103 MACRO             		  STA ?0,X
  104 MACRO             		  DEX
  105 MACRO             		  LDA #<IntReturn
  106 MACRO             		  STA ?0,X
  107 MACRO             		  DEX
  108 MACRO             		 BPL ??
  109 MACRO             
  110 MACRO             	  #IFDEF BRK_USER
  111 MACRO             		LDA CPU_NMI
  112 MACRO             		STA BRK_vector+2
  113 MACRO             		LDA CPU_NMI+1
  114 MACRO             		STA BRK_vector+3
  115 MACRO             	  #ENDIF ; of #IFDEF BRK_USER
  116 MACRO             
  117 MACRO             	  #IFDEF SERIALPORT_USER
  118 MACRO             		lda #TXOPEN
  119 MACRO             		sta SERCTL
  120 MACRO             		lda #SERIAL_INT
  121 MACRO             		sta INTRST
  122 MACRO             	  #ENDIF
  123 MACRO             
  124                   	#ENDMACRO
  125                   
  126                   
  127                   	#MACRO SET_BRK
  128 MACRO             		LDA #<?0
  129 MACRO             		STA BRK_vector+2
  130 MACRO             		LDA #>?0
  131 MACRO             		STA BRK_vector+3
  132 MACRO             		LDA #$EA	; nop
  133 MACRO             		STA BRK_vector
  134                   	#ENDMACRO
  135                   
  136                   
  137                   	#MACRO RESET_TIMEOUT
  138 MACRO             		STZ TimeoutCount+1	; else reset timeout counter
  139 MACRO             		STZ TimeoutCount+2
  140                   	#ENDMACRO
  141                   
  142                   
  143                   	#MACRO ECHO_VALUE
  144 MACRO             		.ECHO "Value of ?0 is ?%d0 ($?%x0)"
  145                   	#ENDMACRO
  146                   
  147                   
   61                   		.IN	6502:macros/hsfx.mac
    1                   ; Monday 30-Apr-90 17:26:10
    2                   * === hsfx.mac =======================================
    3                   *
    4                   * HSFX (Handy Sound Effects) Macros  --  Handy Softwar
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   12                   * 13 May 89	-RJ		Added SEPARATE_HMUSIC_HSFX support
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   20
                        6502:macros/hsfx.mac            14:37:01  

   13                   * 11 Apr 89	-RJ		Added INITHSFX warning
   14                   * 4-Jan-89	=RJ Mical=	Created this file!
   15                   *
   16                   * ====================================================
   17                   
   18                   
   19                   		#MACRO	INITHSFX
   20 MACRO             		#IFDEF HANDYMUSIC
   21 MACRO             		  #IFNDEF SEPARATE_HMUSIC_HSFX
   22 MACRO             		    .ECHO	""
   23 MACRO             		    .ECHO	"WARNING:  When using HMUSIC you should us
   24 MACRO             		    .ECHO	"          INITHMUSIC and you should not"
   25 MACRO             		    .ECHO	"          use INITHSFX!"
   26 MACRO             		  #ELSE
   27 MACRO             		    JSR	InitHSFX
   28 MACRO             		  #ENDIF
   29 MACRO             		#ELSE
   30 MACRO             		  JSR	InitHSFX
   31 MACRO             		#ENDIF
   32                   		#ENDMACRO
   33                   
   34                   
   35                   		#MACRO	RESETHSFX
   36 MACRO             		JSR	ResetHSFX
   37                   		#ENDMACRO
   38                   
   39                   
   40                   		#MACRO	PLAYHSFX
   41 MACRO             		JSR	StartHSFX
   42                   		#ENDMACRO
   43                   
   44                   
   45                   
   46                   * The SET_AUDIO_CLOCK sets the audio system's timer to
   47                   * specified rate.  Also, it causes the HMUSIC and HSFX
   48                   * to their initial state.
   49                   * ON ENTRY:
   50                   *     A has the audio timer preload value
   51                   *     X has the audio clock frequency select mask
   52                   
   53                   	#MACRO SET_AUDIO_CLOCK
   54 MACRO             	   phx
   55 MACRO             	     pha
   56 MACRO             	      #IFDEF HANDYMUSIC
   57 MACRO             		INITHMUSIC
   58 MACRO             	      #ELSE
   59 MACRO             		INITHSFX
   60 MACRO             	      #ENDIF
   61 MACRO             	     pla
   62 MACRO             	    sta TIMER0+{AUDIO_TIMER*4}+TIM_BACKUP
   63 MACRO             	   pla
   64 MACRO             	  ora #ENABLE_INT+ENABLE_RELOAD+ENABLE_COUNT
   65 MACRO             	  sta TIMER0+{AUDIO_TIMER*4}+TIM_CONTROLA
   66                   	#ENDMACRO
   67                   
   68                   
   69                   
   70                   
   62                   		.IN	6502:macros/hmusic.mac
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   21
                        6502:macros/hmusic.mac          14:37:01  

    1                   ; Monday 23-Apr-90 16:06:17
    2                   * === hmusic.mac =====================================
    3                   *
    4                   * Handy Music Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   12                   *  8 Jun 89	Greg Omi	Added MUTE macro
   13                   * 18 Apr 89	-RJ		Changed ADDVOICE to STARTVOICE
   14                   * 11 Apr 89	-RJ		Added all the other music macros; cha
   15                   *				PLAYMUSIC to ADDMUSIC, as that's what it does;
   16                   *				changed INITMUSIC to INITHMUSIC
   17                   *  6 Apr 89	-RJ Mical-	Added STOPMUSIC macro
   18                   * 13 Feb 89	RG Goudy	Created this file from hsfx.mac
   19                   *
   20                   * ====================================================
   21                   
   22                   
   23                   
   24                    #MACRO	INITHMUSIC
   25 MACRO             	JSR InitHMusic
   26                    #ENDMACRO
   27                   
   28                   
   29                    #MACRO	PLAYMUSIC
   30 MACRO             	JSR PlayMusic
   31                    #ENDMACRO
   32                   
   33                   
   34                    #MACRO	ADDMUSIC
   35 MACRO             	JSR AddMusic
   36                    #ENDMACRO
   37                   
   38                   
   39                    #MACRO	STARTVOICE
   40 MACRO             	JSR StartVoice
   41                    #ENDMACRO
   42                   
   43                   
   44                    #MACRO	STOPMUSIC
   45 MACRO             	JSR StopMusic
   46                    #ENDMACRO
   47                   
   48                   
   49                    #MACRO	STOPVOICE
   50 MACRO             	JSR StopVoice
   51                    #ENDMACRO
   52                   
   53                   
   54                    #MACRO	SETUSER
   55 MACRO             	LDA #<?0
   56 MACRO             	LDX #>?0
   57 MACRO             	JSR SetUser
   58                    #ENDMACRO
   59                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   22
                        6502:macros/hmusic.mac          14:37:01  

   60                   
   61                    #MACRO	CLEARUSER
   62 MACRO             	JSR ClearUser
   63                    #ENDMACRO
   64                   
   65                   
   66                    #MACRO	MUTE
   67 MACRO             	JSR Mute
   68                    #ENDMACRO
   69                   
   70                   
   71                   
   63                   
   64                   
   65                   	BEGIN_ZPAGE
    1      FFFE       + TEMPORG	  .= *
    2 FFFE:           + 	  .ORG NEXTZPG
    3                 + 
   66 0006:             songptr		.DS	2
   67 0008:             songptr2	.DS	2
   68 000A:04           SongSelect	.BYTE	SONG_COUNT
   69                   	END_ZPAGE
    1      000B       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 000B:           + 	  .ORG TEMPORG
    6                 + 
   70                   
   71                   
   72                   
   73 FFFE:             		.ORG	$0800
   74                   
   75                   		.RUN	Start
   76 0800:             Start
   77                   		INITSYS
    1 0800:A9 0D      + 	LDA #DISP_COLOR+DISP_FOURBIT+DMA_ENABLE
    2 0802:8D ** **   + 	STA DISPCTL_RAM
    3 0805:A9 08      + 	LDA #LEFTHAND		
    4 0807:8D ** **   + 	STA SPRSYS_RAM
    5 080A:8D 92 FC   + 	STA SPRSYS
    6 080D:A9 08      + 	LDA #VECTOR_SPACE	
    7 080F:8D F9 FF   + 	STA MAPCTL
    8      FALSE         #IFDEF RAMCART_USER
   10                 +  #ELSE
   11 0812:A9 0A      + 	LDA #CART_ADDR_DATA+RESTLESS
   12                 +  #ENDIF
   13 0814:8D ** **   + 	STA IODAT_RAM
   14 0817:8D 8B FD   + 	STA IODAT
   15 081A:8D ** **   + 	STA IODIR_RAM
   16 081D:8D 8A FD   + 	STA IODIR
   17 0820:A9 04      + 	LDA #TXOPEN	
   18 0822:8D 8C FD   + 	STA SERCTL	
   19      FALSE        	  #IFDEF AUTO_TIMEOUT_USER
   22                 + 	  #ENDIF
   23                 + 
   78                   		INITINT	InterruptTable,SafeReturn
    1      ****       + sysIntTable	.EQ InterruptTable
    2 0825:A9 **      + 		LDA #<UserIntHandler
    3 0827:8D FE FF   + 		STA CPU_IRQ
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   23
                        testhmusic.src                  14:37:01  

    4 082A:A9 **      + 		LDA #>UserIntHandler
    5 082C:8D FF FF   + 		STA CPU_IRQ+1
    6 082F:A2 0F      + 		LDX #8*2-1
    7      0831       + INITINT.0006	.= *
    8 0831:A9 **      + 		  LDA #>IntReturn
    9 0833:9D ** **   + 		  STA InterruptTable,X
   10 0836:CA         + 		  DEX
   11 0837:A9 **      + 		  LDA #<IntReturn
   12 0839:9D ** **   + 		  STA InterruptTable,X
   13 083C:CA         + 		  DEX
   14 083D:10 F2      + 		 BPL INITINT.0006
   15      TRUE       + 	  #IFDEF BRK_USER
   16 083F:AD FA FF   + 		LDA CPU_NMI
   17 0842:8D ** **   + 		STA BRK_vector+2
   18 0845:AD FB FF   + 		LDA CPU_NMI+1
   19 0848:8D ** **   + 		STA BRK_vector+3
   20                 + 	  #ENDIF 
   21      FALSE        	  #IFDEF SERIALPORT_USER
   26                 + 	  #ENDIF
   27                 + 
   79                   
   80 084B:D8           		CLD
   81 084C:58           		CLI
   82 084D:A2 DD        		LDX	#$DD
   83 084F:9A           		TXS
   84                   
   85                   		;------	Initialize the audio drivers.  Note that use
   86                   		;------	INITMUSIC replaces INIHSFX when creating mus
   87                   		INITHMUSIC
    1 0850:20 ** **   + 	JSR InitHMusic
    2                 + 
   88                   
   89 0853:             testMusicLoop
   90                   		;------	Play the next song
   91 0853:A6 0A        		LDX	SongSelect
   92 0855:E8           		INX
   93 0856:E0 04        		CPX	#SONG_COUNT
   94 0858:90 **        		BLT	.10
   95 085A:A2 00        		LDX	#0
   96 085C:86 0A        .10		STX	SongSelect
   97                   
   98 085E:BD ** **     		LDA	SongsLow,X
   99 0861:48           		PHA
  100 0862:BD ** **     		LDA	SongsHigh,X
  101 0865:AA           		TAX
  102 0866:68           		PLA
  103                   
  104                   		PLAYMUSIC
    1 0867:20 ** **   + 	JSR PlayMusic
    2                 + 
  105                   
  106 086A:             .30		;------	Loop until all notes are done
  107 086A:AD ** **     		LDA	VoiceInUse
  108 086D:0D ** **     		ORA	VoiceInUse+1
  109 0870:0D ** **     		ORA	VoiceInUse+2
  110 0873:0D ** **     		ORA	VoiceInUse+3
  111 0876:D0 F2        		BNE	.30
  112                   
  113                   		;------ Slow the clock by a tick, just for fun
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   24
                                                        14:37:01  

  114 0878:AD ** **     		LDA	audioPreload
  115 087B:D0 **        		BNE	.40
  116 087D:CE ** **     		DEC	audioClock
  117 0880:3A           .40		DEC
  118 0881:8D ** **     		STA	audioPreload
  119 0884:AE ** **     		LDX	audioClock
  120                   		SET_AUDIO_CLOCK
    1 0887:DA         + 	   phx
    2 0888:48         + 	     pha
    3      TRUE       + 	      #IFDEF HANDYMUSIC
    4                   		INITHMUSIC
    1 0889:20 ** **   + 	JSR InitHMusic
    2                 + 
    5                   	      #ELSE
    7                 + 	      #ENDIF
    8 088C:68         + 	     pla
    9 088D:8D 18 FD   + 	    sta TIMER0+{AUDIO_TIMER*4}+TIM_BACKUP
   10 0890:68         + 	   pla
   11 0891:09 98      + 	  ora #ENABLE_INT+ENABLE_RELOAD+ENABLE_COUNT
   12 0893:8D 19 FD   + 	  sta TIMER0+{AUDIO_TIMER*4}+TIM_CONTROLA
   13                 + 
  121                   
  122 0896:80 BB        		BRA	testMusicLoop
  123                   
  124                   
  125 0898:             SafeReturn
  126 0898:60           		RTS
  127                   
  128                   
  129                   
  130 0899:00 ** ** **  SongsLow	.BYTE	<song1,<song2,<song3,<song4
  130                   
  131 089D:00 ** ** **  SongsHigh	.BYTE	>song1,>song2,>song3,>song4
  131                   
  132 08A1:             InterruptTable	.DS	8*2
  133                   
  134                   
  135 08B1:00CB         song1		.pc songs/Sink2.dnl	; Music data file 
  136 097C:02EA         song2		.pc songs/Summer.dnl	; Music data file 
  137 0C66:04BD         song3		.pc songs/roadrace.dnl	; Music data file 
  138 1123:0A7D         song4		.pc songs/Liberty.dnl	; Music data file 
  139                   
  140                   
  141 1BA0:06           audioClock	.BYTE	AUDIO_CLOCK_MASK
  142 1BA1:40           audioPreload	.BYTE	AUDIO_PRELOAD
  143                   
  144                   
  145                   		.IN	6502:src/sysdata.src
    1                   ; Tuesday 27-Mar-90 10:58:04
    2                   * === sysdata.src ====================================
    3                   * 
    4                   * System Data Allocations  --  the 6502 Side of Handy
    5                   * 
    6                   * Copyright (c) 1988,1990 Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   * 
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   25
                        6502:src/sysdata.src            14:37:01  

   12                   * 27-Mar-90	SHL		Removed BufferAddrL, BufferAddrH
   13                   * 22-Mar-90	SHL		Added INTSET_RAM shadow for IRQs
   14                   * 9-Feb-90	SHL		Removed Apple emulation compatibility
   15                   * 30 May 89	-RJ		Added IODAT_RAM
   16                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   17                   * 20 Apr 89	-RJ		Added IODIR_RAM
   18                   * 19 Apr 89	-RJ		Moved DisplayFrameCount to display.sr
   19                   * 20 Mar 89	-RJ		Added DisplayFrameCount
   20                   * 13 Feb 89	-RJ		Added DisplayBuffer
   21                   * 26 Jan 88	-RJ		Ended Interruptus
   22                   * 24 Dec 88	-RJ		Added Interruptus
   23                   * 22 Dec 88	-RJ		Added DISPCTL_RAM, RenderBuffer, 
   24                   *				BufferAddrL/H, and DisplayFlags with its defs
   25                   *				Added note about .ORGing to non-zpage
   26                   * Early 88	=RJ Mical=	Created this file!
   27                   * 
   28                   * ====================================================
   29                   
   30                   
   31                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   32                   * 
   33                   * This file should be included before any of the 6502:
   34                   * 
   35                   * Note that you should .ORG to a non-zero page address
   36                   * this file.  This is because this file includes data 
   37                   * don't need to be in zero-page memory.
   38                   * 
   39                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   40                   
   41                   
   42                   * Here are the declarations of the local copies of wri
   43                   * (and read-doesn't-equal-write registers such as SPRS
   44                   * Whenever you want to make a change to one of the har
   45                   * that's write-only, you should read from this RAM cop
   46                   * and then write the value out to both the RAM copy an
   47 1BA2:             SPRSYS_RAM	.DS 1
   48 1BA3:             DISPCTL_RAM	.DS 1
   49 1BA4:             IODAT_RAM	.DS 1
   50 1BA5:             IODIR_RAM	.DS 1
   51                   
   52                   
   53                   * Display buffer pointers for use by the system displa
   54 1BA6:             RenderBuffer	.DS 2
   55 1BA8:             DisplayBuffer	.DS 2
   56                   
   57                   * Shadow of INTSET used in IRQ handler
   58 1BAA:             INTSET_RAM	.DS 1
   59                   
   60                   
   61      FALSE        	#IFDEF AUTO_TIMEOUT_USER
   63                   	#ENDIF
   64                   
   65                   
   66                   * The DisplayFlags field is a field that may enjoy mul
   67                   * read-modify-write operations peformed by both interr
   68                   * Because of this, any code must make sure that interr
   69                   * beginning a read-modify-write cycle, or use the TSB/
   70 1BAB:             DisplayFlags	.DS	1
   71                   * Here's the definitions of DisplayFlags
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   26
                        6502:src/sysdata.src            14:37:01  

   72      0080         DISPLAY_EOFFLAG		.EQ $80	; Set every EOF
   73      0040         DISPLAY_EOLFLAG		.EQ $40	; Set every EOL
   74                   
   75                   
   76                   
  146                   		.IN	6502:src/sys.src
    1                   ; Tue Sep 18 17:43:25 1990
    2                   * === sys.src ========================================
    3                   *
    4                   * General System Source Code  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 28-Mar-90	SHL		IRQ handler quick checks for serial I
   12                   *				if SERIALPORT_USER defined now.
   13                   * 22-Mar-90	SHL		IRQ handler only touches 1 IRQ at a t
   14                   *				Individual handlers need not preserve X and A
   15                   *				IRQ handlers now required to PLX PLA RTI
   16                   *				instead of RTS
   17                   *				Renamed SafeIntRts to IntReturn, which now
   18                   *				does PLX PLA RTI
   19                   * 16-Mar-90	SHL		Modified BRK detect for 1 cycle impro
   20                   *				in the case of IRQ
   21                   * 15-Mar-90	SHL		Provided faster vector to Redeye inte
   22                   *				Serial interrupts now must PLX PLA RTI to
   23                   *				exit.
   24                   * 14-Mar-90	SHL		Added SafeIntRts
   25                   *				INITINT now vectors all IRQS to SafeIntRts
   26                   *				instead of user supplied RTS
   27                   * 26-Feb-90	SHL		Minor code tightening
   28                   * 9-Feb-90	SHL		INITINT is now required before any use
   29                   *				INITEOF, INITEOL or SET_DISPLAY... macros
   30                   *				This file can now be included before user
   31                   *				calls INITINT
   32                   * 7-Feb-90	SHL		Modified BRK_USER to force Howard Brea
   33                   * 31 May 89	-RJ		Added BRK_USER support code to UserIn
   34                   *				Removed InitSys routine
   35                   * 6 Apr 89	=RJ Mical=	Created this file!
   36                   *
   37                   * ====================================================
   38                   
   39                   
   40                   * This code is called whenever a non-NMI interrupt occ
   41                   * interrupt or execution of a software BRK).
   42                   
   43 1BAC:             UserIntHandler
   44 1BAC:48           		PHA
   45 1BAD:DA           		PHX
   46                   
   47      TRUE         	  #IFDEF BRK_USER
   48                   	  ;-- Check if we got here because of a BRK instructi
   49                   	  ;-- the BRK routine if so, else branch to the inter
   50 1BAE:BA           		TSX
   51 1BAF:E8           		INX
   52 1BB0:E8           		INX
   53 1BB1:E8           		INX
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   27
                        6502:src/sys.src                14:37:01  

   54 1BB2:BD 00 01     		LDA $0100,X		; Get a copy of the status byte
   55 1BB5:89 10        		bit #$10		; Check break bit
   56 1BB7:D0 **        		BNE brkInt		; and branch if clear (hardware int)
   57                   	  #ENDIF ; of #IFDEF BRK_USER
   58                   
   59 1BB9:             hardInt
   60                   		;------	We had a hardware interrupt.
   61                   		;------	Get the interrupt flags value, reset the bit
   62 1BB9:AD 81 FD     		LDA INTSET		; This gets the bits
   63                   
   64      FALSE        	  #IFDEF SERIALPORT_USER
   68                   	  #ENDIF
   69                   
   70 1BBC:8D AA 1B     .02		STA INTSET_RAM
   71                   
   72                   		;------	For least set bit in the interrupt value,
   73                   		;------	vector to the routine
   74 1BBF:A2 00        		LDX #0
   75 1BC1:A9 01        		lda #1
   76 1BC3:2C AA 1B     .00		  bit INTSET_RAM
   77 1BC6:D0 **        		  bne jumpIntTable
   78 1BC8:E8           		  INX
   79 1BC9:E8           		  INX
   80 1BCA:0A           		  asl a
   81 1BCB:D0 F6        		 bne .00
   82 1BCD:             IntReturn
   83                   		;------	At end of interrupt processing, restore the
   84                   		;------	registers and return from interrupt
   85                   
   86 1BCD:FA           		PLX
   87 1BCE:68           		PLA
   88 1BCF:40           		RTI
   89                   
   90                   
   91                   
   92                   
   93                   * The above interrupt dispatcher does a JSR to this li
   94                   * This code jumps to the particular handler.  The inte
   95                   * should end with an RTS, which will return control to
   96                   
   97 1BD0:             jumpIntTable
   98 1BD0:8D 80 FD     		sta INTRST	; clear interrupt we're processing
   99 1BD3:7C A1 08     		JMP	(sysIntTable,X)
  100                   
  101                   
  102      TRUE         	  #IFDEF BRK_USER
  103 1BD6:             brkInt
  104 1BD6:FA           		PLX
  105 1BD7:68           		PLA
  106                   BRK_vector	HBRK			; force BRK on Howard board
    1 1BD8:13         + 	.HS 13
    2                 + 
  107 1BD9:4C D8 1B     		JMP BRK_vector		; Will be modified by INITINT call
  108                   	  #ENDIF ; of #IFDEF BRK_USER
  109                   
  110                   
  111                   
  147                   		.IN	6502:src/hsfx.src
    1                   ; Tue Sep 18 17:43:53 1990
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   28
                        6502:src/hsfx.src               14:37:01  

    2                   * === hsfx.src =======================================
    3                   *
    4                   * Handy Sound Effects Driver  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 04-May-90	SHL		If not integrated, voice bias reset o
   12                   *				channel.  If integrating, voice bias ramped to
   13                   *				zero.  No longer tries to play sounds if voice
   14                   *				owned by someone else.
   15                   * 19-Apr-90	SHL		AllocAudio and GrabAudio routines now
   16                   *				inly if GRABAUDIO_USER is set.
   17                   *				General code tightening and cleanup.
   18                   *				Moved top_of_loop0,1 variables to hsfx.var .
   19                   *				Moved hsfx_temp to zero page.
   20                   * 18-Apr-90	SHL		InitHSFX now zeroes all HSFX variable
   21                   *				FreeAudio now zeroes bias on stopped channel
   22                   * 01-Apr-90	SHL & G Colgate	Added USER_HSFX switch and
   23                   * 26-Mar-90	SHL		Removed PHA, PHX instructions from hs
   24                   *				Changed driver exit to match new IRQ handler
   25                   * 6 Oct 89	SHL		Modified driver to catch dropped frame
   26                   *				Modified START_DISABLE and END_DISABLE macros
   27                   *				to use the new flag audio_lockout
   28                   * 14 Sep 89	SJ		Fix to register clear in StartHSFX
   29                   * 5 Sept 89	SJ		Changed public calls to lock out just 
   30                   * 31 Aug 89	SJ		Changed code to use HSFX_CHANNELCOUNT 
   31                   *				Made variables relocatable in HSFX.var
   32                   *				User programs now must include HSFX.var also.
   33                   *				Tightened up key frame loop in update_frame.
   34                   * 30 Aug 89	Stephen Jungels	Clear launch_channel flag 
   35                   *				Simplified channel killing code.
   36                   *				Modified grunt main loops.
   37                   *				Changed ResetHSFX to call FreeAudio.
   38                   * 11 Aug 89	-RJ		Restore I flag at end of int. driver 
   39                   *				clearing audio_interruptus
   40                   * 1 June 89	-RJ		Added some pre-CES bullet-proofing to
   41                   *				channel number in FreeAudio and GrabAudio
   42                   * 1 June 89	SHL		Moved hsfx_driver core to hsfx_driver
   43                   *				called by both hsfx_driver and hmusic_driver
   44                   *				allowing SEPARATE_HMUSIC_HSFX to work
   45                   * 31 May 89	SHL		Added the required 5th element to Cha
   46                   * 13 May 89	-RJ		Added SEPARATE_HMUSIC_HSFX support
   47                   * 11 May 89	-RJ		FrameClock and FramePreload are chang
   48                   *				AudioClock and AudioPreload.  These are now
   49                   *				set using AUDIO_CLOCK_MASK and AUDIO_PRELOAD.
   50                   *				Removed HFIX1 references.  Made InitHSFX
   51                   *				always disable interrupts
   52                   * 1 May 89	-RJ		Changed all IntTable references to sys
   53                   *				which is defined now in the sys.mac file
   54                   * 30 Apr 89	-RJ		Got rid of old CES_SLOWCLOCK stuff
   55                   * 5 Apr 89	-RJ		Added audio_interruptus.  The hsfx dri
   56                   *				interrupt code now clears interrupt disable
   57                   *				as soon as its taken steps to prevent
   58                   *				reentrancy, thereby allowing other more
   59                   *				important interrupts to be processed.
   60                   * 22 Mar 89	-RJ		Moved declaration of audio_ptr into t
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   29
                        6502:src/hsfx.src               14:37:01  

   61                   *				Changed order of steps in ResetHSFX.
   62                   *				Added cancellation of launch_channel in Reset.
   63                   *				Tightened code in calc_next_audio
   64                   * 21 Mar 89	-RJ		Changed name of effect_in_use to Chan
   65                   *				By request, changed name of temp to hsfx_temp.
   66                   *				Tightened up loop in ResetHSFX
   67                   * 20 Mar 89	-RJ		Merged RG's changes into this file, a
   68                   *				many comments, general cleanup
   69                   * 19 Mar 89	-RJ		Added many calls to HFIX1 macros as n
   70                   * Feb 89	RG		Tightened code, folded music into HSFX
   71                   * 4 Jan 89	=RJ Mical=	Stripped out sample program, cha
   72                   *				to match harddefs.i
   73                   *				Added AUDIO_TIMER definition and more
   74                   * Late 88	RG Goudy	Created this file!
   75                   *
   76                   * ====================================================
   77                   
   78                   
   79                   
   80                   
   81      TRUE            #IFNDEF START_DISABLE
   82                   
   83      0001         AUDIO_DISABLE	.EQU	1
   84                   ; Define AUDIO_DISABLE to disable audio interrupts *on
   85                   ; routines.  Undefine AUDIO_DISABLE to lock out *all* 
   86                   
   87                   	#MACRO START_DISABLE
   88 MACRO             		#IFDEF AUDIO_DISABLE
   89 MACRO             		 INC	audio_lockout
   90 MACRO             		#ELSE
   91 MACRO             		 PHP
   92 MACRO             		 SEI
   93 MACRO             		#ENDIF
   94                   	#ENDM	; START_DISABLE
   95                   
   96                   	#MACRO END_DISABLE
   97 MACRO             		#IFDEF AUDIO_DISABLE
   98 MACRO             		 DEC	audio_lockout
   99 MACRO             		#ELSE
  100 MACRO             		 PLP
  101 MACRO             		#ENDIF
  102                   	#ENDM	; END_DISABLE
  103                   
  104                   
  105                      #ENDIF	; OF IFNDEF START_DISABLE
  106                   
  107                   
  108                   
  109                   		BEGIN_ZPAGE
    1      1BDC       + TEMPORG	  .= *
    2 1BDC:           + 	  .ORG NEXTZPG
    3                 + 
  110 000B:             audio_ptr	.DS 2		; grab some zero page variables
  111 000D:             hsfx_temp	.DS 1
  112                   		END_ZPAGE
    1      000E       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 000E:           + 	  .ORG TEMPORG
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   30
                        6502:src/hsfx.src               14:37:01  

    6                 + 
  113                   
  114                   
  115                   
  116                   * If HMUSIC is out there and if the programmer hasn't 
  117                   * SEPARATE_HMUSIC_HSFX then define hsfxSysCancel, whic
  118                   * little more than a subroutine call for HMUSIC
  119      TRUE         	#IFDEF HANDYMUSIC
  120      TRUE         	  #IFNDEF SEPARATE_HMUSIC_HSFX
  121      0001         hsfxSysCancel	.EQU	1
  122                   	  #ENDIF
  123                   	#ENDIF
  124                   
  125                   
  126                   
  127 1BDC:             InitHSFX
  128                   * ====================================================
  129                   * Sound Effects Driver Initialization
  130                   * You should call this routine only once, during the i
  131                   * portion of your code
  132                   * Warning from RG:  if you muck with it and it doesn't
  133                   * (yes, straight to bed with no dinner).
  134                   *
  135                   * If you are using the Handy music driver you are supp
  136                   * the audio system by calling InitMusic.  InitMusic ca
  137                   * aren't required to call both.
  138                   
  139                   
  140      FALSE         #IFNDEF hsfxSysCancel
  148                    #ENDIF
  149                   
  150 1BDC:A9 9E        	  lda #AUDIO_CLOCK_MASK+ENABLE_INT+ENABLE_RELOAD+ENAB
  151 1BDE:A0 40        	  ldy #AUDIO_PRELOAD
  152 1BE0:8D 19 FD     	  sta TIMER0+{AUDIO_TIMER*4}+TIM_CONTROLA
  153 1BE3:8C 18 FD     	  sty TIMER0+{AUDIO_TIMER*4}+TIM_BACKUP
  154                   
  155      FALSE         #IFNDEF hsfxSysCancel
  157                    #ENDIF
  158                   
  159                   * ... and intentionally fall into ResetHSFX
  160                   
  161                   
  162                   
  163 1BE6:             ResetHSFX
  164                   * ====================================================
  165                   * This routine turns off the audio channels and clears
  166                   * usage of all the channels.  You can call this routin
  167                   * whenever you like, as often as you like.
  168                   
  169                   * Warning:  this code is fallen into from above
  170                   
  171 1BE6:08           	 php
  172 1BE7:78           	  sei
  173                   
  174 1BE8:A2 **        	  ldx #HSFXVarEnd-HSFXVarStart	; clear all HSFX varia
  175 1BEA:9E ** **     .00	    stz HSFXVarStart-1,x
  176 1BED:CA           	    dex
  177 1BEE:D0 FA        	   bne .00
  178                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   31
                        6502:src/hsfx.src               14:37:01  

  179 1BF0:A2 03        	  ldx #HSFX_CHANNELCOUNT-1	; free each audio channel
  180 1BF2:20 ** **     .10	    jsr FreeAudio
  181 1BF5:CA           	    dex
  182 1BF6:10 FA        	   bpl .10
  183                   
  184 1BF8:28           	 plp
  185 1BF9:60           	rts
  186                   
  187                   
  188 1BFA:             StartHSFX
  189                   * ====================================================
  190                   * The StartHSFX routine is called to add a sound effec
  191                   * Call with the address of your HSFX table in A,X (low
  192                   * with the priority of this sound effect in Y.
  193                   *
  194                   * If your sound effect is successfully added, carry is
  195                   * has the audio channel number of your sound effect.  
  196                   * couldn't be added, carry is set on return and X will
  197                   * Channel 4 is a mock HSFX channel, the priority of wh
  198                   * ChannelInUse) will always be zero and therefore will
  199                   * priority of a sound effect submitted to StartHSFX.  
  200                   * convenience of being able to check at a later time w
  201                   * sound effect is still active without requiring the o
  202                   * whether the call to StartHSFX succeeded or failed in
  203                   *
  204                   * On return:
  205                   *    carry clear = success
  206                   *      carry set = failure
  207                   *              X = channel number (0 - 3) of sound eff
  208                   
  209                   
  210                   	START_DISABLE	; disable sound IRQs
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1BFA:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
  211                   
  212 1BFD:85 0B        	sta audio_ptr		; hsfx table address lsb
  213 1BFF:86 0C        	stx audio_ptr+1		; hsfx table address msb
  214                   
  215 1C01:20 ** **     	jsr find_lesser_channel
  216 1C04:B0 **        	bcs .00
  217                   
  218 1C06:A2 04        	ldx #HSFX_CHANNELCOUNT	; Return mock channel number
  219                   
  220                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1C08:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  221                   
  222 1C0B:38           	sec			; Return result:  no channel available
  223 1C0C:60           	rts
  224                   
  225                   
  226 1C0D:9D ** **     .00	sta ChannelInUse,x	; Store priority of this channe
  227 1C10:A5 0B        	lda audio_ptr
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   32
                        6502:src/hsfx.src               14:37:01  

  228 1C12:9D ** **     	sta hsfx_basel,x
  229 1C15:A5 0C        	lda audio_ptr+1
  230 1C17:9D ** **     	sta hsfx_baseh,x
  231                   
  232 1C1A:8A           	txa			; Clear accumulators & interpolators
  233 1C1B:18           	clc
  234 1C1C:69 3C        	adc #HSFX_CHANNELCOUNT*{HSFX_REGSIZE*HSFX_REGCOUNT-1}
  235 1C1E:38           	sec
  236 1C1F:AA           .11	  tax
  237 1C20:9E ** **     	  stz freql,x
  238 1C23:E9 04        	  sbc #HSFX_CHANNELCOUNT
  239 1C25:B0 F8        	 bcs .11		; X comes out of loop with correct index
  240                   
  241 1C27:20 ** **     	jsr update_frame	; read in first key frame
  242 1C2A:20 ** **     	jsr calc_next_audio	; set up for first hardware load
  243                   
  244 1C2D:A9 80        	lda #$80		; set signal to start sound effect
  245 1C2F:9D ** **     	sta launch_channel,x
  246                   
  247                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1C32:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  248                   
  249 1C35:18           	clc			; tell caller that channel was gotten
  250 1C36:60           	rts
  251                   
  252                   
  253                   
  254 1C37:             StopHSFX
  255                   * ====================================================
  256                   * This routine is called to remove a sound effect from
  257                   * Call with the priority of the sound effect to stop i
  258                   *
  259                   * On return:
  260                   *    A, X and Y are trashed
  261                   *    carry clear = a sound effect with this priority w
  262                   *    carry set = no sound effect with this priority wa
  263                   
  264                   
  265                   	START_DISABLE		; kill sound IRQs
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1C37:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
  266                   
  267 1C3A:98           	tya
  268 1C3B:A2 04        	ldx #HSFX_CHANNELCOUNT
  269                   
  270 1C3D:CA           .11	  dex
  271 1C3E:30 **        	  bmi .20
  272 1C40:DD ** **     	  cmp ChannelInUse,x
  273 1C43:D0 F8        	 bne .11
  274                   
  275 1C45:20 ** **     	jsr freeChannelX	 ; found channel with desired priori
  276                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   33
                        6502:src/hsfx.src               14:37:01  

  277                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1C48:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  278 1C4B:18           	clc
  279 1C4C:60           	rts
  280                   
  281                   .20	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1C4D:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  282 1C50:38           	sec
  283 1C51:60           	rts
  284                   
  285                   
  286                   
  287 1C52:             FreeAudio
  288                   * ====================================================
  289                   * This routine is called to free an audio channel that
  290                   * using AllocAudio or GrabAudio.  It's used also by th
  291                   * free up the channel at the end of a note.
  292                   *
  293                   * Call with the channel number that you want to free i
  294                   *
  295                   * On return:
  296                   *    carry wil be clear, which equals success
  297                   
  298      FALSE         #IFDEF SOUND_DEBUG
  303                    #ENDIF
  304                   
  305                   
  306                   	START_DISABLE	; kill sound IRQs
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1C52:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
  307                   
  308 1C55:20 ** **     	jsr freeChannelX
  309                   
  310                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1C58:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  311 1C5B:18           	clc
  312 1C5C:60           	rts
  313                   
  314                   
  315                   
  316      FALSE         #IFDEF GRABAUDIO_USER
  367                    #ENDIF ; of #IFDEF GRABAUDIO_USER
  368                   
  369                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   34
                        6502:src/hsfx.src               14:37:01  

  370                   
  371                   * find_lesser_channel and freeChannelX don't affect th
  372                   
  373                   
  374 1C5D:             find_lesser_channel
  375                   * ====================================================
  376                   * The find_lesser_channel routine feels through the pr
  377                   * channels, looking for one that's the most less than 
  378                   * priority of interest.
  379                   *
  380                   * On entry:  the priority to beat is in Y
  381                   * On exit:  The lowest priority channel number is retu
  382                   *	of the channel is less than or equal to request	then
  383                   
  384      TRUE          #IF HSFX_CHANNELCOUNT>1
  385                   
  386 1C5D:5A           	phy
  387                   
  388 1C5E:A2 03        	ldx #HSFX_CHANNELCOUNT-1
  389 1C60:A0 02        	ldy #HSFX_CHANNELCOUNT-2
  390 1C62:BD ** **     .40	  lda ChannelInUse,x
  391 1C65:D9 ** **     	  cmp ChannelInUse,y
  392 1C68:90 **        	  blt .41		; Branch if x-priority is less than y-prio
  393 1C6A:98           	  tya		; else copy y to x
  394 1C6B:AA           	  tax
  395 1C6C:88           .41	  dey
  396 1C6D:10 F3        	 bpl .40
  397                   
  398 1C6F:68           	pla	
  399                   
  400                    #ELSE
  405                    #ENDIF
  406                   
  407 1C70:DD ** **     	cmp ChannelInUse,x	; compare with lowest priority cha
  408                   
  409 1C73:60           	rts
  410                   
  411                   
  412                   
  413 1C74:             freeChannelX
  414                   * ====================================================
  415                   * Here, X has the index of the channel to be freed
  416 1C74:A9 00        	lda #0
  417                   
  418 1C76:             killChannelX
  419 1C76:9D ** **     	sta ChannelInUse,x		; either free or grab channel
  420                   
  421 1C79:9E ** **     	stz launch_channel,x		; make sure we zero launch flag
  422 1C7C:BC ** **     	ldy audio_offsets,x
  423 1C7F:B9 25 FD     	lda AUDIO0+AUD_CONTROL,y
  424 1C82:29 20        	and #ENABLE_INTEGRATE
  425 1C84:99 25 FD     	sta AUDIO0+AUD_CONTROL,y	; kill channel
  426 1C87:D0 **        	bne .90
  427 1C89:99 22 FD     	sta AUDIO0+AUD_OUTPUT,y	; reset volume (DC bias) if n
  428 1C8C:60           .90	rts
  429                   
  430                   
  431                   
  432                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   35
                        6502:src/hsfx.src               14:37:01  

  433                   
  434                   
  435                   
  436                   * ====================================================
  437                   * ====                    ============================
  438                   * ====   Interrupt Code   ============================
  439                   * ====                    ============================
  440                   * ====================================================
  441                   
  442                   
  443      FALSE         #IFNDEF hsfxSysCancel
  481                    #ENDIF ; of IFNDEF hsfxSysCancel
  482                   
  483                   
  484                   
  485                   
  486                   
  487 1C8D:             hsfx_driver_grunt
  488                   * ====================================================
  489                   * Here's the actual HSFX interrupt code
  490                   * The audio driver turns itself into "low-priority" in
  491                   * enabling interrupts as soon as it has protected itse
  492                   * reentered.  This will allow more important (especial
  493                   * interrupt routines to wrest control away from audio 
  494                   
  495      FALSE         #IFDEF USER_HSFX
  497                    #ENDIF
  498                   
  499                   * Lay our hands on the hardware of each active channel
  500                   * (although note that this loop won't actually start t
  501                   * for the channel if the timer isn't already running. 
  502                   * in the launch_channel loop below).
  503                   
  504 1C8D:A2 03        	ldx #HSFX_CHANNELCOUNT-1
  505                   
  506 1C8F:BC ** **     .00	  ldy audio_offsets,x
  507 1C92:BD ** **     	  lda ChannelInUse,x	; Is this an active channel?
  508 1C95:D0 **        	  bne .02
  509 1C97:B9 22 FD     	  lda AUDIO0+AUD_OUTPUT,y	; not active, ramp volume t
  510 1C9A:F0 **        	  beq .01
  511 1C9C:10 **        	  bpl .03
  512 1C9E:1A           	  inc a
  513 1C9F:1A           	  inc a
  514 1CA0:3A           .03	  dec a
  515 1CA1:99 22 FD     	  sta AUDIO0+AUD_OUTPUT,y
  516 1CA4:80 **        	  bra .01
  517                   
  518 1CA6:C9 FF        .02	  cmp #HSFX_NOCHANNEL	; does someone else own this
  519 1CA8:F0 **        	  beq .01
  520                   
  521 1CAA:BD ** **     .10	  lda volumeh,x
  522 1CAD:99 20 FD     	  sta AUDIO0+AUD_VOLCNTRL,y	; Volume
  523                   
  524 1CB0:BD ** **     	  lda preload_temp,x
  525 1CB3:99 24 FD     	  sta AUDIO0+AUD_BACKUP,y	; Frequency lsb
  526                   
  527 1CB6:BD ** **     	  lda data_temp,x
  528 1CB9:99 21 FD     	  sta AUDIO0+AUD_FEEDBACK,y	; Update feedback
  529                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   36
                        6502:src/hsfx.src               14:37:01  

  530 1CBC:BD ** **     	  lda flagsl,x
  531 1CBF:29 04        	  and #SHIFT_ALWAYS		; Store shifter value always?
  532 1CC1:D0 **        	  bne .20			; Branch if yes
  533 1CC3:1E ** **     	  asl shift_flag,x		; Store new shifter this time onl
  534 1CC6:90 **        	  bcc .22			; Branch if no
  535                   
  536 1CC8:B9 27 FD     .20	  lda AUDIO0+AUD_OTHER,y	; Do masking as needed
  537 1CCB:29 0F        	  and #$f
  538 1CCD:1D ** **     	  ora shift_temp,x
  539 1CD0:99 27 FD     	  sta AUDIO0+AUD_OTHER,y
  540                   
  541 1CD3:BD ** **     	  lda shiftl,x
  542 1CD6:99 23 FD     	  sta AUDIO0+AUD_SHIFT,y
  543                   
  544 1CD9:B9 25 FD     .22	  lda AUDIO0+AUD_CONTROL,y	; patch in new control 
  545 1CDC:29 58        	  and #ENABLE_COUNT+ENABLE_RELOAD+RESET_DONE
  546 1CDE:1D ** **     	  ora clock_temp,x
  547 1CE1:99 25 FD     	  sta AUDIO0+AUD_CONTROL,y
  548                   
  549 1CE4:CA           .01	  dex
  550 1CE5:10 A8        	 bpl .00
  551                   
  552                   ;	jmp launch_channels		; fall through
  553                   
  554                   
  555                   * If two notes start with the same frequency they shou
  556                   * at very close to the same time to prevent them from 
  557                   * 180 degrees out of phase with each other.  Being out
  558                   * them to cancel each other out; we know this from exp
  559                   * notes should be launched as close together as possib
  560                   * avoid the out-of-phase cancellation problem.  This l
  561                   * and the overhead of the additional loop is well wort
  562                   
  563 1CE7:             launch_channels
  564 1CE7:78           	sei
  565 1CE8:A2 03        	ldx #HSFX_CHANNELCOUNT-1
  566                   
  567 1CEA:             launch_next_channel
  568 1CEA:BD ** **     .00	  lda launch_channel,x		; Launch this channel?
  569 1CED:F0 **        	  beq .01			; Branch if not
  570 1CEF:9E ** **     	  stz launch_channel,x		; finished launching
  571                   
  572 1CF2:BC ** **     	  ldy audio_offsets,x
  573 1CF5:B9 24 FD     	  lda AUDIO0+AUD_BACKUP,y	; Frequency lsb
  574 1CF8:99 26 FD     	  sta AUDIO0+AUD_COUNTER,y	; Copy prevents phase erro
  575                   
  576 1CFB:B9 25 FD     	  lda AUDIO0+AUD_CONTROL,y	; Start audio timer
  577 1CFE:09 18        	  ora #ENABLE_RELOAD+ENABLE_COUNT
  578 1D00:99 25 FD     	  sta AUDIO0+AUD_CONTROL,y
  579                   
  580 1D03:CA           .01	  dex
  581 1D04:10 E4        	 bpl .00
  582                   
  583                   * Advance the HSFX values of each active channel
  584                   
  585 1D06:             advance_channels
  586 1D06:58           	cli
  587 1D07:A2 03        	ldx #HSFX_CHANNELCOUNT-1
  588                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   37
                        6502:src/hsfx.src               14:37:01  

  589 1D09:BD ** **     .00	  lda ChannelInUse,x	; Is this an active channel?
  590 1D0C:F0 **        	  beq .01		; skip if not
  591 1D0E:C9 FF        	  cmp #HSFX_NOCHANNEL	; do we own this channel?
  592 1D10:F0 **        	  beq .01
  593 1D12:BD ** **     	  lda current_framel,x	; Do we match next key frame e
  594 1D15:DD ** **     	  cmp next_keyframel,x
  595 1D18:D0 **        	  bne .10		; ... no, do interpolation only
  596 1D1A:BD ** **     	  lda current_frameh,x
  597 1D1D:DD ** **     	  cmp next_keyframeh,x
  598 1D20:D0 **        	  bne .10		; ... no, do interpolation only
  599 1D22:20 ** **     	  jsr update_frame	; It's time to do something differ
  600 1D25:80 **        	  bra .20		; First time, don't interpolate
  601                   
  602                   * Add the interpolators to the accumulators
  603                   
  604 1D27:DA           .10	   phx
  605                   
  606 1D28:18           .11	    clc
  607 1D29:BD ** **     	    lda freq_interpl,x
  608 1D2C:7D ** **     	    adc freql,x
  609 1D2F:9D ** **     	    sta freql,x
  610 1D32:BD ** **     	    lda freq_interph,x
  611 1D35:7D ** **     	    adc freqh,x
  612 1D38:9D ** **     	    sta freqh,x
  613                   
  614                   	    ; Bump x to next accumulator-interpolator pair
  615                   
  616      TRUE          #IF HSFX_REGSIZE*HSFX_CHANNELCOUNT > 4
  617 1D3B:8A           	    txa
  618 1D3C:18           	    clc
  619 1D3D:69 08        	    adc #HSFX_REGSIZE*HSFX_CHANNELCOUNT
  620 1D3F:AA           	    tax
  621                    #ELSE
  625                    #ENDIF
  626                   
  627                   ; Has index overshot into accumulator-interpolator pai
  628 1D40:E0 20        	    cpx #HSFX_CHANNELCOUNT*HSFX_REGSIZE*HSFX_ACCUMCOU
  629 1D42:90 E4        	    bcc .11		; Branch if not
  630 1D44:FA           	   plx
  631                   
  632 1D45:20 ** **     .20	  jsr calc_next_audio	; Prepare data for hardware 
  633                   
  634 1D48:CA           .01	  dex
  635 1D49:10 BE        	 bpl .00
  636                   
  637 1D4B:60           	rts
  638                   
  639                   
  640                   
  641                   
  642 1D4C:             update_frame
  643                   * ====================================================
  644                   * Updates an HSFX channel's arrays based on the keyfra
  645                   * pointed to by hsfx_basel,h.
  646                   *
  647                   * On entry:
  648                   *   x = HSFX channel number
  649                   *   hsfx_basel,x points to low flag byte of current fr
  650                   *
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   38
                        6502:src/hsfx.src               14:37:01  

  651                   * On exit:
  652                   *   accumulators & interpolators pre-loaded
  653                   *   next_keyframel,h set to frame number for next keyf
  654                   *   hsfx_basel,x points to low flag byte of next frame
  655                   *   This routine trashes A and Y, leaves X intact
  656                   
  657 1D4C:BD ** **     	lda hsfx_basel,x	; Set up indirect pointer
  658 1D4F:85 0B        	sta audio_ptr
  659 1D51:BD ** **     	lda hsfx_baseh,x
  660 1D54:85 0C        	sta audio_ptr+1
  661 1D56:             loop_frame
  662 1D56:A0 01        	  ldy #1
  663                   
  664 1D58:B2 0B        	  lda (audio_ptr)	; this is where current_frame gets 
  665 1D5A:9D ** **     	  sta current_framel,x	; when a sound is started.
  666 1D5D:B1 0B        	  lda (audio_ptr),y
  667 1D5F:9D ** **     	  sta current_frameh,x
  668                   
  669 1D62:C8           	  iny
  670 1D63:B1 0B        	  lda (audio_ptr),y	; Find out what to do this time
  671 1D65:9D ** **     	  sta flagsl,x
  672 1D68:C8           	  iny
  673 1D69:B1 0B        	  lda (audio_ptr),y
  674 1D6B:9D ** **     	  sta flagsh,x
  675 1D6E:C8           	  iny
  676                   
  677 1D6F:0E ** **     	  asl top_of_loop0	; Returning to the top of a loop?
  678 1D72:B0 **        	  bcs stuff0		; Yes, don't reload count byte
  679 1D74:BD ** **     	  lda flagsh,x
  680 1D77:29 40        	  and #>NEXT0		; At the bottom of an inner loop?
  681 1D79:F0 **        	  beq next0_done	; Branch if not
  682 1D7B:BD ** **     	  lda loop_count0,x	; Infinite loop?
  683 1D7E:F0 **        	  beq infinite0		; Yes, don't count
  684 1D80:DE ** **     	  dec loop_count0,x	; Not infinite, so are we done?
  685 1D83:F0 **        	  beq next0_done	; Branch if yes.
  686 1D85:             infinite0
  687 1D85:BD ** **     	  lda loop_adrl0,x	; Reload pointer to top of loop
  688 1D88:85 0B        	  sta audio_ptr
  689 1D8A:BD ** **     	  lda loop_adrh0,x
  690 1D8D:85 0C        	  sta audio_ptr+1
  691 1D8F:A9 80        	  lda #$80		; Set 'skip loading count' flag
  692 1D91:8D ** **     	  sta top_of_loop0
  693 1D94:80 C0        	 bra loop_frame		; Go do top of loop
  694                   
  695                   
  696 1D96:             next0_done
  697                   
  698 1D96:BD ** **     	  lda flagsh,x
  699 1D99:29 80        	  and #>LOOP0		; Starting an inner loop?
  700 1D9B:F0 **        	  beq no_loop0		; Branch if not
  701 1D9D:A5 0B        	  lda audio_ptr		; else save this table pointer value
  702 1D9F:9D ** **     	  sta loop_adrl0,x
  703 1DA2:A5 0C        	  lda audio_ptr+1
  704 1DA4:9D ** **     	  sta loop_adrh0,x
  705 1DA7:B1 0B        	  lda (audio_ptr),y	; Get # of loops to do
  706 1DA9:9D ** **     	  sta loop_count0,x
  707 1DAC:             stuff0
  708 1DAC:C8           	  iny
  709 1DAD:             no_loop0
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   39
                        6502:src/hsfx.src               14:37:01  

  710                   
  711 1DAD:0E ** **     	  asl top_of_loop1	; Returning to the top of a loop?
  712 1DB0:B0 **        	  bcs stuff1		; Yes, don't reload count byte
  713 1DB2:BD ** **     	  lda flagsh,x
  714 1DB5:29 10        	  and #>NEXT1		; At the bottom of an outer loop?
  715 1DB7:F0 **        	  beq next1_done	; Branch if not
  716 1DB9:BD ** **     	  lda loop_count1,x	; Infinite loop?
  717 1DBC:F0 **        	  beq infinite1		; Yes, so don't count
  718 1DBE:DE ** **     	  dec loop_count1,x	; Not infinite, so are we done?
  719 1DC1:F0 **        	  beq next1_done	; Branch if yes
  720 1DC3:             infinite1
  721 1DC3:BD ** **     	  lda loop_adrl1,x	; Reload pointer to top of loop
  722 1DC6:85 0B        	  sta audio_ptr
  723 1DC8:BD ** **     	  lda loop_adrh1,x
  724 1DCB:85 0C        	  sta audio_ptr+1
  725 1DCD:A9 80        	  lda #$80		; Set 'skip loading count' flag
  726 1DCF:8D ** **     	  sta top_of_loop1
  727 1DD2:4C 56 1D     	 jmp loop_frame		; Go do top of loop
  728                   
  729                   
  730 1DD5:             next1_done
  731 1DD5:BD ** **     	lda flagsh,x
  732 1DD8:29 20        	and #>LOOP1		; Are we starting an outer loop?
  733 1DDA:F0 **        	beq no_loop1		; Branch if not
  734 1DDC:A5 0B        	lda audio_ptr		; Save this table pointer value
  735 1DDE:9D ** **     	sta loop_adrl1,x
  736 1DE1:A5 0C        	lda audio_ptr+1
  737 1DE3:9D ** **     	sta loop_adrh1,x
  738 1DE6:B1 0B        	lda (audio_ptr),y	; Get # of loops to do
  739 1DE8:9D ** **     	sta loop_count1,x
  740 1DEB:             stuff1
  741 1DEB:C8           	iny
  742                   
  743 1DEC:             no_loop1		; now load appropriate accumulator/interpola
  744                   
  745                   			; The following piece of code takes the center 8 bi
  746                   			; from the middle of flagsl,h and puts them in orde
  747                   			; into hsfx_temp
  748 1DEC:BD ** **     	lda flagsl,x	; Get a temporary copy of this channel's
  749 1DEF:0A           	asl a
  750 1DF0:5D ** **     	eor flagsh,x	; smush together upper flagsl bits + low
  751 1DF3:29 E0        	and #$e0
  752 1DF5:5D ** **     	eor flagsh,x
  753 1DF8:2A           	rol a		; bring flagsh bits to the top
  754 1DF9:2A           	rol a
  755 1DFA:2A           	rol a
  756 1DFB:2A           	rol a
  757 1DFC:85 0D        	sta hsfx_temp
  758                   
  759 1DFE:DA           	 phx		; Stash the channel number
  760                   
  761                   			; NOTE: the BPL at top of the loop depends on the
  762                   			; ROL instruction above, and the ASL below
  763 1DFF:10 **        .22	    bpl .33		; copy key frame data for each flag b
  764 1E01:B1 0B        	    lda (audio_ptr),y	; get new value
  765 1E03:9D ** **     	    sta freql,x		; this presumes specific array order
  766 1E06:C8           	    iny
  767 1E07:B1 0B        	    lda (audio_ptr),y
  768 1E09:9D ** **     	    sta freqh,x
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   40
                        6502:src/hsfx.src               14:37:01  

  769 1E0C:C8           	    iny
  770 1E0D:             .33
  771      TRUE          #IF HSFX_REGSIZE*HSFX_CHANNELCOUNT > 4
  772 1E0D:18           	    clc
  773 1E0E:8A           	    txa	 ; Offset X to next accumulator/interpolator 
  774 1E0F:69 08        	    adc #HSFX_REGSIZE*HSFX_CHANNELCOUNT
  775 1E11:AA           	    tax
  776                    #ELSE
  780                    #ENDIF
  781 1E12:06 0D        	    asl hsfx_temp	; stop when no more flags are set
  782 1E14:D0 E9        	   bne .22
  783                   
  784 1E16:FA           	 plx	; Restore the channel number
  785                   
  786 1E17:BD ** **     	lda flagsh,x
  787 1E1A:29 04        	and #>SHIFT_ACCUM	; New absolute_shifter?
  788 1E1C:F0 **        	beq .55		;no
  789 1E1E:A9 80        	lda #$80
  790 1E20:9D ** **     .55	sta shift_flag,x	; Set 'store once' flag
  791                   
  792 1E23:BD ** **     	lda flagsl,x
  793 1E26:29 08        	and #INTEGRATE		; This is a 'force on/off' flag
  794 1E28:0A           	asl a			; Move into pos for hardware register
  795 1E29:0A           	asl a
  796 1E2A:9D ** **     	sta integrate,x
  797                   
  798 1E2D:BD ** **     	lda flagsl,x
  799 1E30:29 01        	and #END_OF_EFFECT	; Are we at end of this effect?
  800 1E32:D0 **        	bne end_of_effect
  801                   
  802                   	; Advance hsfx_basel,h to point to next key frame ent
  803 1E34:98           	tya
  804 1E35:18           	clc
  805 1E36:65 0B        	adc audio_ptr
  806 1E38:9D ** **     	sta hsfx_basel,x
  807 1E3B:A9 00        	lda #0
  808 1E3D:65 0C        	adc audio_ptr+1
  809 1E3F:9D ** **     	sta hsfx_baseh,x
  810                   
  811 1E42:B1 0B        	lda (audio_ptr),y	;get next key frames' frame #
  812 1E44:9D ** **     	sta next_keyframel,x
  813 1E47:C8           	iny
  814 1E48:B1 0B        	lda (audio_ptr),y
  815 1E4A:9D ** **     	sta next_keyframeh,x
  816                   
  817 1E4D:60           	rts			;end of key frame entry
  818                   
  819                   
  820 1E4E:             end_of_effect
  821 1E4E:4C 74 1C     	jmp freeChannelX
  822                   
  823                   
  824                   
  825                   
  826 1E51:             calc_next_audio
  827                   * ====================================================
  828                   * This routuine converts the channel's accumulators in
  829                   * designed for easy hardware loading.  This is done be
  830                   * audio frame, so that at the start of the audio frame
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   41
                        6502:src/hsfx.src               14:37:01  

  831                   * values can be picked up and jammed into the audio re
  832                   * delay, thereby creating purer sounds.
  833                   *
  834                   * This routine trashes A and Y, leaves X intact
  835                   
  836                   
  837                   * Select the clock by normalizing the frequency accumu
  838                   * (the algorithm and proof is actually a rather hairy 
  839 1E51:A0 07        	ldy #7
  840 1E53:BD ** **     	lda freql,x
  841 1E56:85 0D        	sta hsfx_temp
  842 1E58:BD ** **     	lda freqh,x
  843                   
  844 1E5B:06 0D        .00	  asl hsfx_temp
  845 1E5D:2A           	  rol a
  846 1E5E:88           	  dey
  847 1E5F:B0 **        	  bcs .01
  848 1E61:D0 F8        	 bne .00
  849                   
  850 1E63:6A           .01	ror a
  851                   
  852 1E64:             end_freq
  853 1E64:9D ** **     	sta preload_temp,x
  854 1E67:98           	tya
  855 1E68:9D ** **     	sta clock_temp,x
  856                   
  857                   
  858                   * Preset the 12-bit shifter values
  859 1E6B:BD ** **     	lda shifth,x
  860 1E6E:0A           	asl a
  861 1E6F:0A           	asl a
  862 1E70:0A           	asl a
  863 1E71:0A           	asl a
  864 1E72:9D ** **     	sta shift_temp,x
  865                   
  866                   * Preset the lower 8 feedback enables
  867 1E75:BD ** **     	lda feedbackl,x
  868 1E78:0A           	asl
  869 1E79:85 0D        	sta hsfx_temp
  870 1E7B:BD ** **     	lda feedbackh,x
  871 1E7E:2A           	rol a
  872 1E7F:06 0D        	asl hsfx_temp
  873 1E81:2A           	rol a
  874 1E82:06 0D        	asl hsfx_temp
  875 1E84:2A           	rol a
  876 1E85:06 0D        	asl hsfx_temp
  877 1E87:2A           	rol a
  878 1E88:C9 80        	cmp #$80		; sec if high bit set
  879 1E8A:5D ** **     	eor feedbackh,x		; merge in top two bits of feedbackh
  880 1E8D:29 3F        	and #$3f
  881 1E8F:5D ** **     	eor feedbackh,x
  882 1E92:9D ** **     	sta data_temp,x
  883                   
  884                   * Grab the other feedback enable, or'ing it into the o
  885 1E95:A9 00        	lda #0
  886 1E97:6A           	ror a			; bring carry into top bit
  887 1E98:1D ** **     	ora integrate,x		; OR with integration
  888 1E9B:1D ** **     	ora clock_temp,x	; OR in with clock
  889 1E9E:9D ** **     	sta clock_temp,x
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   42
                        6502:src/hsfx.src               14:37:01  

  890                   
  891                   
  892                   * Increment this sound effect's current frame counter
  893 1EA1:FE ** **     	inc current_framel,x
  894 1EA4:D0 **        	bne .11
  895 1EA6:FE ** **     	inc current_frameh,x
  896                   
  897 1EA9:60           .11	rts
  898                   
  899                   
  900                   
  901                   
  902                   
  903                   * === ================================================
  904                   * ===               ==================================
  905                   * ===      Data     ==================================
  906                   * ===               ==================================
  907                   * === ================================================
  908                   
  909                   
  910 1EAA:00 08 10 18  audio_offsets	.by $00,$08,$10,$18 ; Offsets into the h
  910                   
  911                   
  912                   
  148                   		.IN	6502:src/hmusic.src
    1                   ; Tue Sep 18 17:44:11 1990
    2                   * == hmusic.src ======================================
    3                   *
    4                   * Handy Music Driver  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 24-Apr-90	SHL		PlayMusic and AddMusic now kill any n
   12                   *				sound effects played by previous song
   13                   *				Minor code tightening
   14                   *				ring0_flag and ring1_flag arrays replaced by
   15                   *				ring_flag array
   16                   * 18-Apr-90	SHL		InitHMusic now zeroes all HMUSIC vari
   17                   *				Rests now don't play a 1MHz tone
   18                   *				HMUSIC_DEFAULT_PRIORITY added to give music
   19                   *				a default priority level
   20                   * 26-Mar-90	SHL		Removed PHA, PHX from hmusic_driver
   21                   *				Changed driver exit to match new IRQ handler
   22                   * 6 Oct 89	SHL		Modified driver to catch dropped frame
   23                   * 11 Sept 89	SJ		Used song header offset definitions
   24                   *				Fixed variable initialization and moved vars
   25                   *				out of ROM
   26                   *				Kill a voice's note only if it has a defined
   27                   *				HSFX channel
   28                   *				Fixed handling of muted state
   29                   * 5 Sept 89	Stephen Jungels	Changed most public calls 
   30                   *				audio interrupts, not all interrupts
   31                   * 11 Aug 89	-RJ		Restore I flag at end of int. driver 
   32                   *				clearing audio_interruptus
   33                   * 13 Jul 89	RG		Added PLP to StartVoice return
   34                   * 16 Jun 89	-RJ		Reset Mute_flag in InitHMusic
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   43
                        6502:src/hmusic.src             14:37:01  

   35                   *  8 Jun 89	Greg Omi	Added Mute function
   36                   *  1 Jun 89	Steve Landrum	Changed HMUSIC call into HSF
   37                   *				to hsfx_driver_grunt
   38                   * 31 May 89	-RJ		Removed ChannelInUse from this file
   39                   *  1 May 89	-RJ		Changed all IntTable references to sy
   40                   *				which is defined now in the sys.mac file
   41                   * 18 Apr 89	-RJ		Added PlayMusic
   42                   * 17 Apr 89	-RJ		Changed AddVoice to StartVoice
   43                   * 11 Apr 89	-RJ		Tightened up ESCAPE code a bit, got r
   44                   *				infinites, using loop count of 0 for same
   45                   *  9 Apr 89	-RJ		StopMusic and StopVoice disable inter
   46                   *				Added lots more comments while bug-hunting,
   47                   *				fixed many little bugs while bug-hunting.
   48                   *				skip_inner and _outer now not arrays, and
   49                   *				renamed to did_inner and _outer.  Changed
   50                   *				StopHSFX calls to FreeAudio.  mflagsl,h
   51                   *				now not arrays.  ignore_RING now not array and
   52                   *				renamed to did_ring_end
   53                   *  7 Apr 89	-RJ		Put in a deadbolt JSR StopHSFX once a
   54                   *				supposed to end.  Solves gating overshot errors
   55                   *  6 Apr 89	-RJ		The setNewVoice routine nows clears s
   56                   *				ring arrays for that voice.  Also, both
   57                   *				ring_return levels now share common code.
   58                   *  5 Apr 89	-RJ		Added audio_interruptus, now music in
   59                   *				code safely clears interrupt disable while
   60                   *				it's working, allowing other interrupts to
   61                   *				run without risking reentrancy
   62                   *  4 Apr 89	-RJ		InitMusic zeroes out VoiceInUse array
   63                   *  3 Apr 89	-RJ		Disable interrupts before setting Use
   64                   * 25 Mar 89	-RJ		Made mods too numerous to itemize.  M
   65                   *				significant:  StartMusic calls AddVoice;
   66                   *				AddVoice expects arg of song table voice index;
   67                   *				ClearUser calls into SetUser; StopMusic calls
   68                   *				StopVoice.  Altogether about 200 bytes smaller.
   69                   * 24 Mar 89	-RJ		Made countless changes, including:  r
   70                   *				technique for calling user programs, grouping
   71                   *				all reassignments of audioptr at top of mloop
   72                   * 23 Mar 89	-RJ		Changed AddVoice routine to expect th
   73                   *				voice number in A
   74                   * 22 Mar 89	-RJ		Changed name of voice_in_use to Voice
   75                   * 21 Mar 89	-RJ Mical-	Added comments, name changes, t
   76                   *				in preparation for first release
   77                   * 24 Jan 89	RG Goudy	Created this file!
   78                   *
   79                   *=====================================================
   80                   
   81                   
   82                   ; Changes to do:
   83                   
   84                   
   85                   ; Major Bugs
   86                   
   87                   ; hspl dumps a direct copy of the muslist into the voi
   88                   ; it also sets a field to the total number of voices a
   89                   ; need.  HSPL should sort the voice offsets so that ma
   90                   ; come first, and the field should be set to the numbe
   91                   ; which we do need to know.
   92                   
   93                   ;The ADSR keyframes for each channel don't have to eat
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   44
                        6502:src/hmusic.src             14:37:01  

   94                   ;Write a build ADSR routine that fills in the necessar
   95                   ;Define the ADSR keyframe flags using HSFX.i const def
   96                   
   97                   
   98                   		BEGIN_ZPAGE
    1      1EAE       + TEMPORG	  .= *
    2 1EAE:           + 	  .ORG NEXTZPG
    3                 + 
   99 000E:             frequency_ptr	.DS 2
  100 0010:             duration_ptr	.DS 2
  101 0012:             voiceoffsets_ptr .DS 2
  102                   		END_ZPAGE
    1      0014       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 0014:           + 	  .ORG TEMPORG
    6                 + 
  103                   
  104                   
  105                   
  106 1EAE:             InitHMusic
  107                   * ====================================================
  108                   * Call this routine to initialize the music driver.  T
  109                   * initializes the HSFX driver.
  110                   
  111 1EAE:08           	 php		; Disable IRQs before writing to the vector tab
  112 1EAF:78           	  sei
  113                   
  114 1EB0:20 DC 1B     	  jsr InitHSFX				; Init sound effects driver
  115                   
  116 1EB3:A2 **        	  ldx #HMusicVarEnd-HMusicVarStart	; zero all music v
  117 1EB5:9E ** **     .10	    stz HMusicVarStart-1,x
  118 1EB8:CA           	    dex
  119 1EB9:D0 FA        	   bne .10
  120                   
  121 1EBB:A9 **        	  lda #<hmusic_driver			; link into IRQ vector table
  122 1EBD:8D AD 08     	  sta sysIntTable+{AUDIO_TIMER*2}
  123 1EC0:A9 **        	  lda #>hmusic_driver
  124 1EC2:8D AE 08     	  sta sysIntTable+{AUDIO_TIMER*2}+1
  125                   
  126 1EC5:28           	 plp
  127                   
  128 1EC6:60           	rts
  129                   
  130                   
  131                   
  132 1EC7:             PlayMusic
  133                   * ====================================================
  134                   * The PlayMusic routine initializes the specified song
  135                   * pointers to the offsets of the first 4 voices.  Then
  136                   *
  137                   * On entry:  the address of a song table is in A,X (lo
  138                   * On exit:  X has the highest instance number assigned
  139                   *           song doesn't specify any initial voices th
  140                   
  141                   	START_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1EC7:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   45
                        6502:src/hmusic.src             14:37:01  

    6                 + 		#ENDIF
    7                 + 
  142                   
  143 1ECA:20 ** **     	jsr setUpMusicPtrs
  144                   
  145 1ECD:A9 00        	lda #0			; Zero out the 4 voice indices
  146 1ECF:A0 07        	ldy #SONG_STARTUPVOICE3+1
  147 1ED1:91 0B        .0a	  sta (audio_ptr),Y
  148 1ED3:88           	  dey
  149 1ED4:10 FB        	 bpl .0a
  150                   
  151 1ED6:A0 08        	ldy #SONG_MAINVOICES		; Get total number of available
  152 1ED8:B1 0B        	lda (audio_ptr),Y
  153 1EDA:C9 05        	cmp #HMUSIC_CHANNELCOUNT+1
  154 1EDC:90 **        	blt .10
  155 1EDE:A9 04        	lda #HMUSIC_CHANNELCOUNT	; Clip to maximum
  156 1EE0:0A           .10	asl				; Turn this into an index for moving
  157 1EE1:3A           	dec				; that many 2-byte offsets
  158 1EE2:A8           	tay
  159 1EE3:B1 12        .20	  lda (voiceoffsets_ptr),Y	; Copy the first n voic
  160 1EE5:91 0B        	  sta (audio_ptr),Y		; table's play-voice array
  161 1EE7:88           	  dey
  162 1EE8:10 F9        	 bpl	.20
  163                   
  164 1EEA:80 **        	bra addMusicEntry	; branch into middle of AddMusic
  165                   
  166                   
  167                   
  168 1EEC:             AddMusic
  169                   * ====================================================
  170                   * The AddMusic routine performs two functions:  it ins
  171                   * song data table into the hmusic driver, and if the s
  172                   * any voices that should start playing immediately (ty
  173                   * AddMusic launches those voices.
  174                   *
  175                   * Each voice launched by AddMusic (if any) gets a uniq
  176                   * in ascending order, starting from 0.
  177                   *
  178                   * If another song is playing when this routine is call
  179                   * the previous song are completely removed.
  180                   *
  181                   * This routine sets up the hmusic variable hmusic_base
  182                   * of the hmusic routines and interrupt code to referen
  183                   *
  184                   * On entry:  the address of a song table is in A,X (lo
  185                   * On exit:  X has the highest instance number assigned
  186                   *           song doesn't specify any initial voices th
  187                   
  188                   	START_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1EEC:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
  189                   
  190 1EEF:20 ** **     	jsr setUpMusicPtrs
  191                   
  192 1EF2:             addMusicEntry
  193                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   46
                        6502:src/hmusic.src             14:37:01  

  194 1EF2:9C ** **     	stz instance		; Unique ID for referencing voices
  195                   
  196 1EF5:A9 6A        	lda #HMUSIC_DEFAULT_PRIORITY+{{HMUSIC_CHANNELCOUNT-1}
  197 1EF7:8D ** **     	sta voice0		; initialize default priorities
  198      TRUE          #IF HMUSIC_CHANNELCOUNT>1
  199 1EFA:A9 68        	lda #HMUSIC_DEFAULT_PRIORITY+{{HMUSIC_CHANNELCOUNT-2}
  200 1EFC:8D ** **     	sta voice1
  201                    #ENDIF
  202      TRUE          #IF HMUSIC_CHANNELCOUNT>2
  203 1EFF:A9 66        	lda #HMUSIC_DEFAULT_PRIORITY+{{HMUSIC_CHANNELCOUNT-3}
  204 1F01:8D ** **     	sta voice2
  205                    #ENDIF
  206      TRUE          #IF HMUSIC_CHANNELCOUNT>3
  207 1F04:A9 64        	lda #HMUSIC_DEFAULT_PRIORITY+{{HMUSIC_CHANNELCOUNT-4}
  208 1F06:8D ** **     	sta voice3
  209                    #ENDIF
  210                   
  211                   	;-- For each of the initial voices (if any), load up 
  212                   	;-- hmusic voice arrays using the song table data
  213                   
  214 1F09:A2 03        	ldx #HMUSIC_CHANNELCOUNT-1	; Voice index
  215 1F0B:A0 00        	ldy #0				; Song table index
  216                   
  217 1F0D:9E ** **     .05	  stz VoiceInUse,x		; Start by presuming no voice
  218 1F10:9E ** **     	  stz SFX_to_cancel,x		; Wipe out MSFX calls
  219 1F13:A9 04        	  lda #HSFX_CHANNELCOUNT	; Set this voice to no chann
  220 1F15:9D ** **     	  sta VoiceHSFXChannel,x
  221                   
  222 1F18:B1 0B        	  lda (audio_ptr),y		; Get offset of individual voice
  223 1F1A:C8           	  iny
  224 1F1B:9D ** **     	  sta voicedata_ptrl,x
  225 1F1E:B1 0B        	  lda (audio_ptr),y
  226 1F20:C8           	  iny
  227 1F21:9D ** **     	  sta voicedata_ptrh,x
  228 1F24:1D ** **     	  ora voicedata_ptrl,x	; Was offset zero?
  229 1F27:F0 **        	  beq .09			; If so, voice not specified
  230 1F29:20 ** **     	  jsr setNewVoice		; else set up to launch new voice
  231                   
  232 1F2C:CA           .09	  dex		; Next voice
  233 1F2D:10 DE        	 bpl .05	; Branch if another to do
  234                   
  235 1F2F:             voiceReturn
  236 1F2F:AE ** **     	ldx instance		; Return highest number assigned
  237 1F32:CA           	dex
  238                   
  239                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1F33:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  240                   
  241 1F36:18           	clc			; Return with success
  242 1F37:60           	rts
  243                   
  244                   
  245                   
  246                   
  247 1F38:             setUpMusicPtrs
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   47
                        6502:src/hmusic.src             14:37:01  

  248 1F38:48           	 pha
  249 1F39:DA           	   phx
  250 1F3A:20 ** **     	    jsr stopAllVoices
  251 1F3D:FA           	   plx
  252 1F3E:68           	 pla
  253                   
  254 1F3F:85 0B        	sta audio_ptr		; Set up pointers to copy the voice of
  255 1F41:8D ** **     	sta hmusic_base
  256 1F44:86 0C        	stx audio_ptr+1
  257 1F46:8E ** **     	stx hmusic_base+1
  258                   
  259 1F49:18           	clc
  260 1F4A:69 09        	adc #<SONG_VOICEFX_OFFSETS
  261 1F4C:85 12        	sta voiceoffsets_ptr
  262 1F4E:8A           	txa
  263 1F4F:69 00        	adc #>SONG_VOICEFX_OFFSETS
  264 1F51:85 13        	sta voiceoffsets_ptr+1
  265                   
  266 1F53:60           	rts
  267                   
  268                   
  269                   
  270                   
  271                   
  272 1F54:             setNewVoice
  273                   * ====================================================
  274                   * Set up to launch a new voice.
  275                   *
  276                   * On entry:
  277                   *    - voicedata_ptrl,h has the song table offset of t
  278                   *    - X has the voice channel number
  279                   * On exit:
  280                   *    - A is trashed
  281                   *    - voicedata_ptrl,h points to the actual address o
  282                   *    - Everything is set up for hmusic to launch the n
  283                   
  284                   
  285 1F54:18           	clc		; Turn the voice data offset into a voice data p
  286 1F55:AD ** **     	lda hmusic_base
  287 1F58:7D ** **     	adc voicedata_ptrl,x
  288 1F5B:9D ** **     	sta voicedata_ptrl,x
  289 1F5E:AD ** **     	lda hmusic_base+1
  290 1F61:7D ** **     	adc voicedata_ptrh,x
  291 1F64:9D ** **     	sta voicedata_ptrh,x
  292                   
  293 1F67:FE ** **     	inc VoiceInUse,x	; set VoiceInUse non-zero
  294                   
  295 1F6A:9E ** **     	stz voice_endframel,x	; Set voice frame to 0, frames 
  296 1F6D:9E ** **     	stz voice_endframeh,x	;  Fool the hmusic driver into 
  297 1F70:A9 FF        	lda #$ff		;   it's time to load the "next" (actually 
  298 1F72:9D ** **     	sta frames_alivel,x	;    first) data for this voice
  299 1F75:9D ** **     	sta frames_aliveh,x
  300                   
  301 1F78:AD ** **     	lda instance		; This voice gets the next instance num
  302 1F7B:9D ** **     	sta VoiceInstance,x
  303 1F7E:EE ** **     	inc instance		; Bump instance number for next voice
  304                   
  305 1F81:9E ** **     	stz ring_flag,x		; Zero out any ring state
  306                   ;	stz ring1_flag,x
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   48
                        6502:src/hmusic.src             14:37:01  

  307                   
  308 1F84:9E ** **     	stz restore_ds,x	; Zero the decay/sustain restore fla
  309                   
  310 1F87:             musicReturn			; This RTS is referenced several times
  311 1F87:60           	rts
  312                   
  313                   
  314                   
  315      FALSE         #IFDEF STARTVOICE_USER
  361                    #ENDIF ; of #IFDEF STARTVOICE_USER
  362                   
  363                   
  364                   
  365                   
  366      TRUE          #IFDEF STOPMUSIC_USER
  367 1F88:             StopMusic
  368                   * ====================================================
  369                   * StopMusic immediately stops and silences all current
  370                   * voices.
  371                   *
  372                   * After the voices are stopped, the HMUSIC voice chann
  373                   * and the HSFX audio channels used by the voices are a
  374                   *
  375                   * This routine doesn't disturb the song in the hmusic 
  376                   * this routine, subseuent calls to StartVoice can be m
  377                   *
  378                   * Note:  the effects of this routine occur immediately
  379                   * next audio interrupt.
  380                   
  381                   	 START_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1F88:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
  382                   
  383 1F8B:20 ** **     	  jsr stopAllVoices
  384                   
  385                   	 END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 1F8E:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  386                   
  387 1F91:60           	rts
  388                    #ENDIF ; of #IFDEF STOPMUSIC_USER
  389                   
  390                   
  391                   
  392 1F92:             stopAllVoices
  393                   * ====================================================
  394                   * stopAllVoices immediately stops and silences all cur
  395                   * voices.
  396                   *
  397                   * After the voices are stopped, the HMUSIC voice chann
  398                   * and the HSFX audio channels used by the voices are a
  399                   *
  400                   * This routine doesn't disturb the song in the hmusic 
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   49
                        6502:src/hmusic.src             14:37:01  

  401                   * this routine, subseuent calls to StartVoice can be m
  402                   *
  403                   * Note:  the effects of this routine occur immediately
  404                   * next audio interrupt.
  405                   
  406 1F92:A2 03        	ldx #HMUSIC_CHANNELCOUNT-1
  407 1F94:DA           .10	   phx
  408 1F95:20 ** **     	    jsr stopVoiceX
  409 1F98:FA           	   plx
  410 1F99:CA           	  dex
  411 1F9A:10 F8        	 bpl .10
  412                   
  413 1F9C:60           	rts
  414                   
  415                   
  416      FALSE         #IFDEF STOPVOICE_USER
  450                    #ENDIF ; of #IFDEF STOPVOICE_USER
  451                   
  452                   
  453                   
  454 1F9D:             stopVoiceX
  455 1F9D:BD ** **     	lda VoiceInUse,x	; is voice already stopped?
  456 1FA0:D0 **        	bne .00
  457 1FA2:60           	rts
  458                   
  459 1FA3:9E ** **     .00	stz VoiceInUse,x	; Remove from music queue
  460                   
  461 1FA6:             muteVoiceX
  462 1FA6:BC ** **     	ldy voice_offsets,x	; Get offset to this voice's data
  463 1FA9:B9 ** **     	lda voice0,y		; Get the priority of this voice
  464 1FAC:1D ** **     	ora SFX_to_cancel,x	; or the sound effect being playe
  465 1FAF:A8           .10	tay
  466 1FB0:4C 37 1C     	jmp StopHSFX		; Tell HSFX to kill current note/MSFX
  467                   
  468                   
  469                   
  470      FALSE         #IFDEF USERCALLS_USER
  508                    #ENDIF ; of #IFDEF USERCALLS_USER
  509                   
  510                   
  511                   
  512      FALSE         #IFDEF MUTE_USER
  541                    #ENDIF	; of #IFDEF MUTE_USER
  542                   
  543                   
  544                   
  545                   * === ================================================
  546                   * ===                     ============================
  547                   * ===    Interrupt Code   ============================
  548                   * ===                     ============================
  549                   * === ================================================
  550                   
  551                   
  552                   
  553 1FB3:             hmusic_driver
  554                   * ====================================================
  555                   * Here's the hmusic driver interrupt code
  556                   * If you *have* to understand what this code does, goo
  557                   *
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   50
                        6502:src/hmusic.src             14:37:01  

  558                   * The audio driver turns itself into "low-priority" in
  559                   * enabling interrupts as soon as it has protected itse
  560                   * reentered.  This will allow more important (especial
  561                   * interrupt routines to wrest control away from audio 
  562                   
  563                   	;-- Test if this is a music interrupt re-entering
  564                   	;-- If audio_interruptus is zero, this is a top-level
  565                   	;-- into the interrupt code so it's safe to proceed. 
  566                   	;-- if audio_interruptus isn't zero we're re-entering
  567                   	;-- got so pushed so deep in the queue that another a
  568                   	;-- interrupt occurred!  It's not safe to re-enter, s
  569                   	;-- (causing the audio to skip a beat, it's true).
  570 1FB3:EE ** **     	inc audio_dropout	; count frame
  571 1FB6:AD ** **     	lda audio_lockout	; are we being locked out?
  572 1FB9:D0 **        	bne .12
  573 1FBB:AD ** **     	lda audio_interruptus	; are we interrupting ourself?
  574 1FBE:F0 **        	beq .10
  575 1FC0:EE ** **     .12	inc audio_dropout	; count frames we've dropped
  576                   
  577 1FC3:FA           	plx			; exit IRQ
  578 1FC4:68           	pla
  579 1FC5:40           	rti
  580                   
  581 1FC6:EE ** **     .10	inc audio_interruptus	; Mark that we are here
  582 1FC9:58           	cli			; and let other interrupts run
  583                   
  584 1FCA:             hmusic_interrupt_core
  585 1FCA:5A           	 phy
  586                   
  587      FALSE         #IFDEF	USERCALLS_USER
  589                    #ENDIF
  590                   
  591                   * For each active voice, check if we need to start the
  592                   * note's volume has fallen to zero
  593                   
  594 1FCB:A2 03        	  ldx #HMUSIC_CHANNELCOUNT-1	; Loop for voices
  595 1FCD:             voiceLoop
  596 1FCD:BD ** **     	    lda VoiceInUse,x	; Voice active?
  597 1FD0:F0 **        	    beq voiceLoopEnd	; Branch if not
  598                   
  599 1FD2:FE ** **     	    inc frames_alivel,x	; increment number of frames 
  600 1FD5:D0 **        	    bne .18
  601 1FD7:FE ** **     	    inc frames_aliveh,x
  602                   
  603 1FDA:BD ** **     .18	    lda frames_alivel,x		; is it time to get a new
  604 1FDD:DD ** **     	    cmp voice_endframel,x
  605 1FE0:D0 **        	    bne .17
  606 1FE2:BD ** **     	    lda frames_aliveh,x
  607 1FE5:DD ** **     	    cmp voice_endframeh,x
  608 1FE8:D0 **        	    bne .17
  609                   
  610 1FEA:BD ** **     	    lda VoiceHSFXChannel,x	; Get this voice's HSFX ch
  611 1FED:C9 04        	    cmp #HSFX_CHANNELCOUNT	; does this voice have a c
  612 1FEF:B0 **        	    bcs .cd
  613 1FF1:DA           	     phx
  614 1FF2:BC ** **     	      ldy voice_offsets,x	; Get offset to this voice'
  615 1FF5:AA           	      tax
  616 1FF6:B9 ** **     	      lda voice0,y		; See if this voice still has cha
  617 1FF9:DD ** **     	      cmp ChannelInUse,x
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   51
                        6502:src/hmusic.src             14:37:01  

  618 1FFC:D0 **        	      bne .ce
  619 1FFE:20 74 1C     	      jsr freeChannelX		; free the channel
  620 2001:FA           .ce	     plx
  621                   
  622 2002:20 ** **     .cd	    jsr getNextData	; Load next note data
  623 2005:9E ** **     	    stz frames_alivel,x	; Reset the number of frames 
  624 2008:9E ** **     	    stz frames_aliveh,x
  625 200B:80 **        	    bra voiceLoopEnd
  626                   
  627 200D:BC ** **     .17	    ldy voice_offsets,x		; Get offset of voice's k
  628 2010:BD ** **     	    lda frames_alivel,x		; Are we in release stage?
  629 2013:D9 ** **     	    cmp releaseframe_v0,y
  630 2016:BD ** **     	    lda frames_aliveh,x
  631 2019:F9 ** **     	    sbc releaseframe_v0+1,y
  632 201C:90 **        	    bcc voiceLoopEnd
  633                   
  634 201E:BD ** **     .22	    lda VoiceHSFXChannel,x	; Get HSFX channel of t
  635 2021:C9 04        	    cmp #HSFX_CHANNELCOUNT	; ignore if this voice has
  636 2023:B0 **        	    bcs voiceLoopEnd
  637 2025:DA           	     phx
  638 2026:AA           	      tax
  639 2027:B9 ** **     	      lda voice0,y		; See if we still own channel
  640 202A:DD ** **     	      cmp ChannelInUse,x
  641 202D:D0 **        	      bne .29
  642 202F:BD ** **     	      lda volumel,x		; check for volume close to zero
  643 2032:D9 ** **     	      cmp releaseframe_v0+8,y
  644 2035:BD ** **     	      lda volumeh,x
  645 2038:F0 **        	      beq .27
  646 203A:F9 ** **     	      sbc releaseframe_v0+9,y
  647 203D:90 **        	      bcc .29
  648                   
  649 203F:20 74 1C     .27	      jsr freeChannelX		; close enough to zero, ki
  650                   
  651 2042:FA           .29	     plx
  652                   
  653 2043:             voiceLoopEnd	;-- Process the next channel
  654 2043:CA           	    dex
  655 2044:10 87        	   bpl voiceLoop
  656                   
  657 2046:             .10
  658                   * Check each of the voices.  If it's at the start of a
  659                   * launch the note's pre-calculated HSFX sound effect k
  660                   
  661 2046:A2 03        	  ldx #HMUSIC_CHANNELCOUNT-1
  662 2048:             voiceLaunchLoop
  663 2048:1E ** **     	    asl new_note,x	; Top bit of new_note set?
  664 204B:90 **        	    bcc .c0		; Branch if not
  665                   
  666      FALSE         #IFDEF MUTE_USER
  669                    #ENDIF
  670                   
  671 204D:DA           	     phx		; Launch new keyframe set for new note
  672 204E:BC ** **     	      ldy voice_offsets,x	; Get offset to this voice'
  673 2051:B9 ** **     	      lda voice0,y		; Get the priority of this voice
  674 2054:A8           	      tay			; Copy the priority for StartHSFX
  675                   
  676 2055:BD ** **     	      lda voice_offsets,x	; Get offset to this voice'
  677 2058:18           	      clc			; Add address of first keyframe
  678 2059:69 **        	      adc #<attackframe_v0
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   52
                        6502:src/hmusic.src             14:37:01  

  679 205B:A2 **        	      ldx #>attackframe_v0	; Get high byte into X
  680 205D:90 **        	      bcc .b8
  681 205F:E8           	      inx
  682 2060:20 FA 1B     .b8	      jsr StartHSFX		; Start this note "sound effe
  683 2063:8A           	      txa			; Grab copy of channel
  684 2064:FA           	     plx
  685 2065:9D ** **     	    sta VoiceHSFXChannel,x	; Save copy of this voice'
  686                   
  687 2068:CA           .c0	    dex
  688 2069:10 DD        	   bpl voiceLaunchLoop
  689                   
  690                   
  691      FALSE         #IFDEF	USERCALLS_USER
  700                    #ENDIF	; of #IFDEF USERCALLS_USER
  701                   
  702 206B:20 8D 1C     	  jsr hsfx_driver_grunt	; Call HSFX driver
  703                   
  704 206E:7A           	 ply
  705                   
  706 206F:CE ** **     	dec audio_dropout	; count off frame
  707 2072:F0 **        	beq .00
  708 2074:4C CA 1F     	jmp hmusic_interrupt_core	; catch dropped frames
  709                   
  710 2077:9C ** **     .00	stz audio_interruptus	; reset flag so we know it's
  711 207A:FA           	plx			; exit IRQ
  712 207B:68           	pla
  713 207C:40           	rti
  714                   
  715                   
  716                   
  717 207D:             getNextData
  718                   * ====================================================
  719                   * Load up the data for the voice's next note.  This in
  720                   * or more CFW's until an honest note is found which is
  721                   * HSFX keyframes.
  722                   *
  723                   * On entry:  X has the voice channel number
  724 207D:BC ** **     	ldy voice_offsets,x	; Get offset to this voice's data
  725                   
  726 2080:1E ** **     	asl restore_ds,x	; Should we restore the decay and su
  727 2083:90 **        	bcc .10
  728                   
  729 2085:BD ** **     	lda save_decayl,x	; Restore time to start decay
  730 2088:99 ** **     	sta decayframe_v0,y
  731 208B:BD ** **     	lda save_decayh,x
  732 208E:99 ** **     	sta decayframe_v0+1,y
  733 2091:BD ** **     	lda save_sustainl,x	; Restore time to start sustain
  734 2094:99 ** **     	sta sustainframe_v0,y
  735 2097:BD ** **     	lda save_sustainh,x
  736 209A:99 ** **     	sta sustainframe_v0+1,y
  737                   
  738 209D:9C ** **     .10	stz did_innernext	; Reset loop skip flags
  739 20A0:9C ** **     	stz did_outernext
  740 20A3:9C ** **     	stz did_ring_end	; Reset ring end flag
  741                   
  742                   	;-- Check if there's an HSFX currently playing for th
  743 20A6:BD ** **     	lda SFX_to_cancel,x	; Maybe active.  Got a cancel sta
  744 20A9:F0 **        	beq mloop_frame		; If not, then skip
  745                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   53
                        6502:src/hmusic.src             14:37:01  

  746                   	;-- There's currently an HSFX for this voice.  Kill i
  747 20AB:99 ** **     	sta voice0,y		; Restore music priority from stash
  748 20AE:A8           	tay			; and specifically stop sfx
  749 20AF:DA           	 phx
  750 20B0:20 37 1C     	  jsr StopHSFX
  751 20B3:FA           	 plx
  752 20B4:9E ** **     	stz SFX_to_cancel,x	; Set sfx as stopped (clear stash
  753                   
  754                   
  755 20B7:             mloop_frame
  756                   * Here, we process the next block of data in the note 
  757 20B7:BD ** **     	  lda voicedata_ptrl,x	; Get a z-page pointer to voic
  758 20BA:85 0B        	  sta audio_ptr
  759 20BC:BD ** **     	  lda voicedata_ptrh,x
  760 20BF:85 0C        	  sta audio_ptr+1
  761                   
  762 20C1:B2 0B        	  lda (audio_ptr)		; Find out what to do this time
  763 20C3:30 **        	  bmi do_CFW		; If high bit clear, this is a note
  764 20C5:4C ** **     	  jmp do_note		; else this is a CFW
  765                   
  766                   
  767                   
  768 20C8:             do_CFW
  769                   * ----------------------------------------------------
  770                   * Next note table entry is a Command Flags Word (not a
  771                   
  772 20C8:8D ** **     	  sta hmflagsl		; Grab a copy of these new command fl
  773 20CB:A0 01        	  ldy #1		; Y will be the voice data index
  774 20CD:B1 0B        	  lda (audio_ptr),y
  775 20CF:8D ** **     	  sta hmflagsh
  776 20D2:C8           	  iny
  777                   
  778                   * --- Rings ---
  779 20D3:AD ** **     	  lda hmflagsh		; is RING flag set?
  780 20D6:29 08        	  and #>RING
  781 20D8:F0 **        	  beq ring_considered	; Branch if not RING
  782                   
  783 20DA:4E ** **     	  lsr did_ring_end	; Did we loop to the CFW that sent
  784 20DD:B0 **        	  bcs post_ring		; Branch if returning to ring starte
  785                   
  786 20DF:BD ** **     	  lda ring_flag,x	; Are we already doing level 0 ring
  787 20E2:F0 **        	  beq first_RING
  788                   
  789 20E4:A5 0B        	  lda audio_ptr		; Nested ring, do level '1'
  790 20E6:9D ** **     	  sta ring1_returnl,x	: Stash the current note table
  791 20E9:A5 0C        	  lda audio_ptr+1	; pointer as our return location
  792 20EB:9D ** **     	  sta ring1_returnh,x	; at end of ring 1
  793                   
  794 20EE:A9 02        	  lda #2
  795 20F0:9D ** **     	  sta ring_flag,x	; Mark RING1 as active
  796 20F3:80 **        	  bra new_RING		; and go set up this new ring
  797                   
  798 20F5:             first_RING			; We've got the start of a level 0 ring
  799 20F5:A5 0B        	  lda audio_ptr		: Stash the current note table
  800 20F7:9D ** **     	  sta ring0_returnl,x	; pointer as our return locatio
  801 20FA:A5 0C        	  lda audio_ptr+1	; at end of ring 0
  802 20FC:9D ** **     	  sta ring0_returnh,x
  803                   
  804 20FF:FE ** **     	  inc ring_flag,x	; Mark RING0 as active
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   54
                        6502:src/hmusic.src             14:37:01  

  805                   
  806 2102:             new_RING			; Set up the pointers to handle this new ri
  807 2102:B1 0B        	  lda (audio_ptr),y	; Get voice index
  808 2104:0A           	  asl a			; Change to word index
  809 2105:A8           	  tay
  810                   ;	  clc	; true from above
  811 2106:B1 12        	  lda (voiceoffsets_ptr),y ; Get offset of voice data
  812 2108:6D ** **     	  adc hmusic_base	; and use it to create new voice da
  813 210B:9D ** **     	  sta voicedata_ptrl,x
  814 210E:C8           	  iny
  815 210F:B1 12        	  lda (voiceoffsets_ptr),y
  816 2111:6D ** **     	  adc hmusic_base+1
  817 2114:9D ** **     	  sta voicedata_ptrh,x
  818                   
  819 2117:4C B7 20     	 jmp mloop_frame	; Take it from the top with voice's 
  820                   
  821 211A:             post_ring	;-- Just returned from the ring, so ignore i
  822 211A:C8           	iny			; Skip ring index byte
  823                   
  824                   
  825 211B:             ring_considered	;-- Done thinking about rings for now
  826                   
  827                   
  828                   * --- Loops ---
  829                   
  830                   ; Inner loop - bottom
  831                   
  832 211B:AD ** **     	  lda did_innernext	; Did we get here after processin
  833 211E:0D ** **     	  ora did_outernext	; either an inner or outer NEXT?
  834 2121:D0 **        	  bne mnext0_done	; If so, skip processing NEXTs
  835                   
  836 2123:AD ** **     	  lda hmflagsh
  837 2126:29 10        	  and #>NEXT1		; At the bottom of an inner loop?
  838 2128:F0 **        	  beq mnext1_done	; No
  839                   
  840 212A:BD ** **     	  lda mloop_count1,x	; Infinite loop?
  841 212D:F0 **        	  beq takeloop1		; Yes, don't count
  842 212F:DE ** **     	  dec mloop_count1,x	; No, are we done?
  843 2132:F0 **        	  beq mnext1_done	; Yes, go check next flag
  844                   
  845 2134:             takeloop1
  846 2134:BD ** **     	  lda mloop_adrl1,x	; Reload pointer to top of loop
  847 2137:9D ** **     	  sta voicedata_ptrl,x
  848 213A:BD ** **     	  lda mloop_adrh1,x
  849 213D:9D ** **     	  sta voicedata_ptrh,x
  850 2140:EE ** **     	  inc did_innernext	; Set to skip LOOP1 we'll find th
  851 2143:4C B7 20     	 jmp mloop_frame	; and go do top of loop
  852 2146:             mnext1_done
  853                   
  854                   
  855                   
  856                   ; Outer loop - bottom
  857                   ;;;	  lda did_innernext	; Did we get here after proces
  858                   ;;;	  ora did_outernext	; either an inner or outer NEX
  859                   ;;;	  bne mnext0_done	; If so, skip processing outer N
  860                   
  861 2146:AD ** **     	  lda hmflagsh
  862 2149:29 40        	  and #>NEXT0		; Are we at the bottom of an outer loo
  863 214B:F0 **        	  beq mnext0_done	; Branch if not
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   55
                        6502:src/hmusic.src             14:37:01  

  864                   
  865 214D:BD ** **     	  lda mloop_count0,x	; Infinite loop?
  866 2150:F0 **        	  beq takeloop0		; Yes, don't count
  867 2152:DE ** **     	  dec mloop_count0,x	; No, are we done?
  868 2155:F0 **        	  beq mnext0_done	; Yes, go check next flag
  869                   
  870 2157:             takeloop0	;-- Loop back to the top of the outer loop
  871 2157:BD ** **     	  lda mloop_adrl0,x	; Reload pointer to top of loop
  872 215A:9D ** **     	  sta voicedata_ptrl,x
  873 215D:BD ** **     	  lda mloop_adrh0,x
  874 2160:9D ** **     	  sta voicedata_ptrh,x
  875 2163:EE ** **     	  inc did_outernext	; Set to skip LOOP0 we'll find th
  876 2166:4C B7 20     	 jmp mloop_frame	; and go do top of loop
  877 2169:             mnext0_done
  878                   
  879                   
  880                   
  881                   ; Outer loop stuff - top
  882 2169:AD ** **     	  lda hmflagsh
  883 216C:29 80        	  and #>LOOP0		; Are we starting an outer loop?
  884 216E:F0 **        	  beq mloop0_considered	; Branch if not
  885                   
  886 2170:AD ** **     	  lda did_innernext	; Did we get here after processin
  887 2173:0D ** **     	  ora did_outernext	; either an inner or outer NEXT?
  888 2176:D0 **        	  bne mstuff0		; If so, skip processing outer LOOP0
  889                   
  890 2178:A5 0B        	  lda audio_ptr		; Stash current data pointer
  891 217A:9D ** **     	  sta mloop_adrl0,x
  892 217D:A5 0C        	  lda audio_ptr+1
  893 217F:9D ** **     	  sta mloop_adrh0,x
  894 2182:B1 0B        	  lda (audio_ptr),y	; Get # of loops to do
  895 2184:9D ** **     	  sta mloop_count0,x	; (if 0, infinite loop!)
  896 2187:             mstuff0
  897 2187:C8           	  iny			; Bump index past loop count
  898                   
  899 2188:             mloop0_considered
  900                   
  901                   
  902                   
  903                   ; Inner loop - top
  904 2188:AD ** **     	  lda hmflagsh
  905 218B:29 20        	  and #>LOOP1		; Are we starting an inner loop?
  906 218D:F0 **        	  beq mloop1_considered	; Branch if not
  907                   
  908 218F:AD ** **     	  lda did_innernext	; If we've done an inner loop NEX
  909 2192:D0 **        	  bne mstuff1		; then skip processing this loop start
  910                   
  911 2194:A5 0B        	  lda audio_ptr		; Stash current data pointer
  912 2196:9D ** **     	  sta mloop_adrl1,x
  913 2199:A5 0C        	  lda audio_ptr+1
  914 219B:9D ** **     	  sta mloop_adrh1,x
  915 219E:B1 0B        	  lda (audio_ptr),y	; Get # of loops to do
  916 21A0:9D ** **     	  sta mloop_count1,x	; (if 0, infinite loop!)
  917 21A3:             mstuff1
  918 21A3:C8           	  iny			; Bump index past loop count
  919                   
  920 21A4:             mloop1_considered
  921                   
  922                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   56
                        6502:src/hmusic.src             14:37:01  

  923                   * --- Gating ---
  924                   
  925 21A4:AD ** **     	  lda hmflagsh
  926 21A7:29 03        	  and #>ASD+AGD		; Either ASD or ADG gate value?
  927 21A9:F0 **        	  beq asd_agd_considered	; Branch if not
  928                   
  929 21AB:9D ** **     	  sta gating,x		; Save new gating flags
  930 21AE:B1 0B        	  lda (audio_ptr),y	; and get new gating value
  931 21B0:9D ** **     	  sta gatel,x
  932 21B3:C8           	  iny
  933 21B4:B1 0B        	  lda (audio_ptr),y
  934 21B6:9D ** **     	  sta gateh,x
  935 21B9:C8           	  iny
  936                   
  937 21BA:             asd_agd_considered
  938                   
  939                   
  940                   * --- Music HSFX ---
  941 21BA:AD ** **     	  lda hmflagsl
  942 21BD:29 20        	  and #MSFX		; Should this voice be a sound effect?
  943 21BF:F0 **        	  beq msfx_considered	; Branch if not
  944                   
  945 21C1:DA           	   phx
  946 21C2:5A           	     phy
  947                   
  948 21C3:BC ** **     	      ldy voice_offsets,x	; Get offset to this voice'
  949 21C6:B9 ** **     	      lda voice0,y		; Get this voice's current priori
  950 21C9:9D ** **     	      sta SFX_to_cancel,x	; Save for killing effect l
  951 21CC:85 0D        	      sta hsfx_temp
  952 21CE:A9 00        	      lda #0			; Temporarily set this note's priority
  953 21D0:99 ** **     	      sta voice0,y		; to 0 to prevent HSFX conflict
  954                   
  955      FALSE        	#IFDEF MUTE_USER
  958                   	#ENDIF
  959                   
  960 21D3:7A           	     ply			; Restore argument index
  961 21D4:5A           	     phy
  962 21D5:B1 0B        	      lda (audio_ptr),y	; Get index into SFX offset t
  963 21D7:0A           	      asl a			; Make it a word index
  964 21D8:A8           	      tay
  965 21D9:B1 12        	      lda (voiceoffsets_ptr),y ; Get offset of first 
  966 21DB:18           	      clc
  967 21DC:6D ** **     	      adc hmusic_base		; and create the keyframe addr
  968 21DF:48           	       pha
  969 21E0:C8           		iny
  970 21E1:B1 12        		lda (voiceoffsets_ptr),y
  971 21E3:6D ** **     		adc hmusic_base+1
  972 21E6:AA           		tax			; High byte of address
  973 21E7:68           	       pla			; Low  byte of address
  974 21E8:A4 0D        	      ldy hsfx_temp		; Priority of voice/effect
  975 21EA:20 FA 1B     	      jsr StartHSFX		; Start this note "sound effect"
  976                   
  977 21ED:7A           .b9	     ply
  978 21EE:C8           	    iny
  979 21EF:FA           	   plx
  980 21F0:BD ** **     	  lda voicedata_ptrl,x	; Restore our voice data point
  981 21F3:85 0B        	  sta audio_ptr		; (trashed by StartHSFX)
  982 21F5:BD ** **     	  lda voicedata_ptrh,x
  983 21F8:85 0C        	  sta audio_ptr+1
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   57
                        6502:src/hmusic.src             14:37:01  

  984 21FA:             msfx_considered
  985                   
  986                   
  987                   * --- User Call ---
  988 21FA:AD ** **     	  lda hmflagsl
  989 21FD:29 10        	  and #USER		; Some USER data to send?
  990 21FF:F0 **        	  beq user_considered	; Branch if not
  991                   
  992      FALSE        	#IFDEF	USERCALLS_USER
 1001                   	#ENDIF ; of #IFDEF USERCALLS_USER
 1002 2201:C8           	  iny
 1003                   
 1004 2202:             user_considered
 1005                   
 1006                   
 1007                   * --- Duration Table Selector ---
 1008 2202:AD ** **     	  lda hmflagsl
 1009 2205:29 08        	  and #DURATION		; New duration table?
 1010 2207:F0 **        	  beq dur_tbl_considered
 1011                   
 1012 2209:B1 0B        	  lda (audio_ptr),y	; Yes, get offset to duration tab
 1013 220B:18           	  clc
 1014 220C:6D ** **     	  adc hmusic_base	; and convert to absolute address
 1015 220F:9D ** **     	  sta voice_dur_ptrl,x	; and store new address of dur
 1016 2212:C8           	  iny
 1017 2213:B1 0B        	  lda (audio_ptr),y
 1018 2215:6D ** **     	  adc hmusic_base+1
 1019 2218:9D ** **     	  sta voice_dur_ptrh,x
 1020 221B:C8           	  iny
 1021                   
 1022 221C:             dur_tbl_considered
 1023                   
 1024                   
 1025                   * --- Pitch Table Selector ---
 1026 221C:AD ** **     	  lda hmflagsl
 1027 221F:29 04        	  and #PITCH		; New pitch table?
 1028 2221:F0 **        	  beq freq_tbl_considered
 1029                   
 1030 2223:B1 0B        	  lda (audio_ptr),y	; Yes, get offset to pitch table
 1031 2225:18           	  clc
 1032 2226:6D ** **     	  adc hmusic_base
 1033 2229:9D ** **     	  sta voice_freq_ptrl,x	; and convert to absolute add
 1034 222C:C8           	  iny			; and store new address of pitch table
 1035 222D:B1 0B        	  lda (audio_ptr),y
 1036 222F:6D ** **     	  adc hmusic_base+1
 1037 2232:9D ** **     	  sta voice_freq_ptrh,x
 1038 2235:C8           	  iny
 1039                   
 1040 2236:             freq_tbl_considered
 1041                   
 1042                   
 1043                   * --- Keyframe Raw Data ---
 1044                   * This is how the normal ADSR for a voice gets loaded.
 1045                   * the sound guys can slip in craazy sound effects with
 1046                   * First comes an optional byte that designates Standar
 1047                   * causes a bunch of keyframe fields to be cleared.
 1048                   * Next, escape data comes in 3 bytes:  offset into son
 1049                   * data, next two bytes are low and high data to go in 
 1050                   * Lastly the end of the escape data is designated eith
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   58
                        6502:src/hmusic.src             14:37:01  

 1051                   * music note or a byte of $FF (meaning End Of Escape).
 1052                   
 1053 2236:AD ** **     	  lda hmflagsl
 1054 2239:29 02        	  and #ESCAPE		; Load raw data into keyframe set?
 1055 223B:F0 **        	  beq escape_considered	; Branch if not
 1056                   
 1057 223D:DA           	   phx
 1058 223E:BD ** **     	    lda voice_offsets,x	; Get offset to this voice's 
 1059 2241:85 0D        	    sta hsfx_temp
 1060                   
 1061 2243:B1 0B        	    lda (audio_ptr),y	; Get first ESCAPE argument
 1062 2245:C9 FF        	    cmp #$ff		; Clear some seldom used locations?
 1063 2247:D0 **        	    bne .44		; Branch if not
 1064                   
 1065 2249:5A           	     phy	; Clear several elements in this voice's key
 1066 224A:A0 **        	      ldy #clear_voice_end-clear_voice-1 ; Get max cl
 1067 224C:B9 ** **     .22		lda clear_voice,y	; Create offset to the voice's 
 1068                   ;		clc	; clear from above
 1069 224F:65 0D        		adc hsfx_temp
 1070 2251:AA           		tax
 1071 2252:9E ** **     		stz voice0,x
 1072 2255:9E ** **     		stz voice0+1,x
 1073 2258:88           		dey
 1074 2259:10 F1        	       bpl .22
 1075 225B:7A           	     ply
 1076 225C:C8           	    iny
 1077                   
 1078 225D:B1 0B        .44	    lda (audio_ptr),y	; get next note or ESCAPE fl
 1079 225F:10 **        	    bpl end_escape	; High bit off = end of escape seq
 1080                   
 1081 2261:C8           	    iny			; Advance index past this byte
 1082                   
 1083                   	    ; If byte is the special "end of escape" value th
 1084 2262:C9 FF        	    cmp #$ff		; Note: only needed if two adjacent
 1085 2264:F0 **        	    beq end_escape	;  CFWs - i.e.: consecutive RING
 1086                   
 1087                   	    ;-- Else this is normal escape data, so get the d
 1088                   	    ;-- store it into the keyframe and try again
 1089 2266:29 7F        	    and #$7f		; Mask off upper bit
 1090 2268:18           	    clc
 1091 2269:65 0D        	    adc hsfx_temp	; Add voice offset
 1092 226B:AA           	    tax
 1093 226C:B1 0B        	    lda (audio_ptr),y	; Copy value
 1094 226E:9D ** **     	    sta voice0,x
 1095 2271:C8           	    iny
 1096 2272:B1 0B        	    lda (audio_ptr),y
 1097 2274:9D ** **     	    sta voice0+1,x
 1098 2277:C8           	    iny
 1099 2278:80 E3        	    bra .44
 1100                   
 1101 227A:             end_escape
 1102 227A:FA           	   plx
 1103                   
 1104 227B:5A           	   phy
 1105 227C:BC ** **     	    ldy voice_offsets,x		; Get offset to this voice's
 1106 227F:B9 ** **     	    lda decayframe_v0,y		; back up decay times
 1107 2282:9D ** **     	    sta save_decayl,x
 1108 2285:B9 ** **     	    lda decayframe_v0+1,y
 1109 2288:9D ** **     	    sta save_decayh,x
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   59
                        6502:src/hmusic.src             14:37:01  

 1110 228B:B9 ** **     	    lda sustainframe_v0,y	; back up sustain times
 1111 228E:9D ** **     	    sta save_sustainl,x
 1112 2291:B9 ** **     	    lda sustainframe_v0+1,y
 1113 2294:9D ** **     	    sta save_sustainh,x
 1114 2297:7A           	   ply
 1115                   
 1116                   
 1117 2298:             escape_considered
 1118                   * --- Almost at End ---
 1119 2298:AD ** **     	  lda hmflagsl		; check for final CFW
 1120 229B:29 01        	  and #END_OF_VOICE
 1121 229D:D0 **        	  bne end_voice		; Branch if so
 1122                   
 1123 229F:98           	  tya			; skip bytes just processed
 1124 22A0:18           	  clc
 1125 22A1:65 0B        	  adc audio_ptr
 1126 22A3:9D ** **     	  sta voicedata_ptrl,x
 1127 22A6:A9 00        	  lda #0
 1128 22A8:65 0C        	  adc audio_ptr+1
 1129 22AA:9D ** **     	  sta voicedata_ptrh,x
 1130 22AD:4C B7 20     	 jmp mloop_frame	; else go to top and do it all again
 1131                   
 1132                   
 1133 22B0:             end_voice
 1134                   * --- End of Voice ---
 1135 22B0:5E ** **     	  lsr ring_flag,x	; Is a 'RING' ending?
 1136 22B3:D0 **        	  bne return_from_ring1	; Branch if RING1 ending
 1137 22B5:B0 **        	  bcs return_from_ring0	; Branch if RING0 ending
 1138 22B7:9E ** **     	  stz VoiceInUse,x	; else this voice is done!
 1139 22BA:60           	rts			; RG sez:  Ttfn
 1140                   
 1141 22BB:             return_from_ring1
 1142 22BB:BD ** **     	  lda ring1_returnl,x	; Restore 'RING0' address
 1143 22BE:BC ** **     	  ldy ring1_returnh,x
 1144 22C1:80 **        	  bra ring_return
 1145                   
 1146 22C3:             return_from_ring0
 1147 22C3:BD ** **     	  lda ring0_returnl,x	; Restore main voice address
 1148 22C6:BC ** **     	  ldy ring0_returnh,x
 1149                   
 1150 22C9:             ring_return
 1151 22C9:9D ** **     	  sta voicedata_ptrl,x	; restore CFW to return from r
 1152 22CC:98           	  tya
 1153 22CD:9D ** **     	  sta voicedata_ptrh,x
 1154 22D0:EE ** **     	  inc did_ring_end
 1155 22D3:4C B7 20     	 jmp mloop_frame
 1156                   
 1157                   
 1158                   
 1159                   
 1160 22D6:             do_note
 1161                   * ----------------------------------------------------
 1162                   * Next note table entry is an actual note (not a Comma
 1163                   
 1164 22D6:DA           	 phx
 1165                   
 1166 22D7:29 0F        	  and #SONG_PITCHBITS	; turn note entry into frequenc
 1167 22D9:0A           	  asl a			;  0dddpppp -> 000pppp0
 1168 22DA:A8           	  tay
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   60
                        6502:src/hmusic.src             14:37:01  

 1169                   
 1170 22DB:A9 04        	  lda #HSFX_CHANNELCOUNT	; mark that we have no chann
 1171 22DD:9D ** **     	  sta VoiceHSFXChannel,x
 1172                   
 1173 22E0:BD ** **     	  lda voice_freq_ptrl,x		; Set up note's frequency po
 1174 22E3:85 0E        	  sta frequency_ptr
 1175 22E5:BD ** **     	  lda voice_freq_ptrh,x
 1176 22E8:85 0F        	  sta frequency_ptr+1
 1177                   
 1178 22EA:BD ** **     	  lda voice_dur_ptrl,x		; Set up note's duration poin
 1179 22ED:85 10        	  sta duration_ptr
 1180 22EF:BD ** **     	  lda voice_dur_ptrh,x
 1181 22F2:85 11        	  sta duration_ptr+1
 1182                   
 1183 22F4:BD ** **     	  lda voice_offsets,x		; get offset to voice's HSFX k
 1184 22F7:AA           	  tax
 1185                   
 1186 22F8:B1 0E        	  lda (frequency_ptr),y		; Load up the frequency for 
 1187 22FA:9D ** **     	  sta attackfreq_v0,x
 1188 22FD:C8           	  iny
 1189 22FE:B1 0E        	  lda (frequency_ptr),y
 1190 2300:9D ** **     	  sta attackfreq_v0+1,x
 1191 2303:1D ** **     	  ora attackfreq_v0,x		; check for zero frequency
 1192 2306:48           	   pha				; save for later
 1193                   
 1194 2307:B2 0B        	    lda (audio_ptr)		; turn note entry into duration 
 1195 2309:29 70        	    and #SONG_DURATIONBITS	;  0dddpppp -> 0000ddd0
 1196 230B:4A           	    lsr a
 1197 230C:4A           	    lsr a
 1198 230D:4A           	    lsr a
 1199 230E:A8           	    tay
 1200                   
 1201 230F:B1 10        	    lda (duration_ptr),y	; Jam value into the end not
 1202 2311:9D ** **     	    sta endframe_v0,x
 1203 2314:C8           	    iny
 1204 2315:B1 10        	    lda (duration_ptr),y
 1205 2317:9D ** **     	    sta endframe_v0+1,x
 1206                   
 1207 231A:68           	   pla			; restore zero frequency check
 1208 231B:FA           	 plx			; Restore the voice channel number
 1209                   
 1210 231C:C9 00        	cmp #0			; test for pitch set to 0
 1211 231E:F0 **        	beq .00
 1212                   
 1213 2320:A9 80        	lda #$80	; if non-zero pitch, set flag marking new no
 1214 2322:9D ** **     	sta new_note,x
 1215                   
 1216 2325:B1 10        .00	lda (duration_ptr),y	; save duration value for mus
 1217 2327:9D ** **     	sta voice_endframeh,x
 1218 232A:88           	dey
 1219 232B:B1 10        	lda (duration_ptr),y
 1220 232D:9D ** **     	sta voice_endframel,x
 1221                   
 1222 2330:BC ** **     	ldy voice_offsets,x	; Get offset to this voice's keyf
 1223 2333:BD ** **     	lda gating,x		; Get gating flags, check for AGS or AG
 1224 2336:29 01        	and #>AGD		; AGD?
 1225 2338:D0 **        	bne .10			; Branch if AGD (not AGS)
 1226                   
 1227 233A:38           	sec			; Set up AGS
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   61
                        6502:src/hmusic.src             14:37:01  

 1228 233B:BD ** **     	lda voice_endframel,x	;  (start of release = duration
 1229 233E:FD ** **     	sbc gatel,x
 1230 2341:99 ** **     	sta releaseframe_v0,y
 1231 2344:BD ** **     	lda voice_endframeh,x
 1232 2347:FD ** **     	sbc gateh,x
 1233                   ;	sta releaseframe_v0+1,y	; done below
 1234 234A:80 **        	bra .19
 1235                   
 1236 234C:BD ** **     .10	lda gatel,x		; Set up AGD (start of release = gate
 1237 234F:99 ** **     	sta releaseframe_v0,y
 1238 2352:BD ** **     	lda gateh,x
 1239 2355:99 ** **     .19	sta releaseframe_v0+1,y
 1240                   
 1241 2358:B9 ** **     	lda sustainframe_v0,y	; Check that sustain starts bef
 1242 235B:D9 ** **     	cmp releaseframe_v0,y
 1243 235E:B9 ** **     	lda sustainframe_v0+1,y
 1244 2361:F9 ** **     	sbc releaseframe_v0+1,y
 1245 2364:90 **        	bcc .40
 1246                   
 1247 2366:A9 80        	lda #$80		; Mark need to restore decay and sus
 1248 2368:9D ** **     	sta restore_ds,x
 1249                   
 1250 236B:38           	sec			; Set sustain time to (release time - 1)
 1251 236C:B9 ** **     	lda releaseframe_v0,y
 1252 236F:E9 01        	sbc #1
 1253 2371:99 ** **     	sta sustainframe_v0,y
 1254 2374:B9 ** **     	lda releaseframe_v0+1,y
 1255 2377:E9 00        	sbc #0
 1256 2379:99 ** **     	sta sustainframe_v0+1,y
 1257                   
 1258 237C:B9 ** **     	lda decayframe_v0,y	; Check that decay starts before 
 1259 237F:D9 ** **     	cmp sustainframe_v0,y
 1260 2382:B9 ** **     	lda decayframe_v0+1,y
 1261 2385:F9 ** **     	sbc sustainframe_v0+1,y
 1262 2388:90 **        	bcc .40
 1263                   
 1264 238A:38           	sec			; Set decay time to (sustain time - 1)
 1265 238B:B9 ** **     	lda sustainframe_v0,y
 1266 238E:E9 01        	sbc #1
 1267 2390:99 ** **     	sta decayframe_v0,y
 1268 2393:B9 ** **     	lda sustainframe_v0+1,y
 1269 2396:E9 00        	sbc #0
 1270 2398:99 ** **     	sta decayframe_v0+1,y
 1271                   
 1272 239B:FE ** **     .40	inc voicedata_ptrl,x	; Point to next entry in voic
 1273 239E:D0 **        	bne .7d
 1274 23A0:FE ** **     	inc voicedata_ptrh,x
 1275                   
 1276 23A3:60           .7d	rts
 1277                   
 1278                   
 1279                   
 1280                   
 1281                   * === ================================================
 1282                   * ===               ==================================
 1283                   * ===      Data     ==================================
 1284                   * ===               ==================================
 1285                   * === ================================================
 1286                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   62
                        6502:src/hmusic.src             14:37:01  

 1287                   
 1288                   
 1289                   
 1290                   * The voice_offsets describe the number of bytes betwe
 1291                   * first byte of voice 0's data and the first byte of v
 1292                   
 1293 23A4:00           voice_offsets	.by 0
 1294                   
 1295      TRUE         	#if HMUSIC_CHANNELCOUNT > 1
 1296 23A5:00           		.by voice1-voice0
 1297      TRUE         	 #if HMUSIC_CHANNELCOUNT > 2
 1298 23A6:00           		.by voice2-voice0
 1299      TRUE         	  #if HMUSIC_CHANNELCOUNT > 3
 1300 23A7:00           		.by voice3-voice0
 1301                   	  #endif ; > 3
 1302                   	 #endif ; > 2
 1303                   	#endif ; > 1
 1304                   
 1305                   
 1306                   
 1307                   
 1308                   * NOTE:  =============================================
 1309                   * NOTE:  The position of the following note arrays is 
 1310                   * NOTE:  of the above code depends on the exact arrang
 1311                   * NOTE:  You would have to be mad to rearrange this st
 1312                   
 1313 23A8:08           clear_voice	.by $08		; Attack  keyframe  shifter   acc
 1314 23A9:0C           		.by $0c		; Attack  keyframe  volume    accumulator
 1315 23AA:0E           		.by $0e		; Attack  keyframe  frequency interpolator
 1316 23AB:10           		.by $10		; Attack  keyframe  feedback  interpolator
 1317 23AC:18           		.by $18		; Decay   keyframe  frequency interpolator
 1318 23AD:1A           		.by $1a		; Decay   keyframe  feedback  interpolator
 1319 23AE:22           		.by $22		; Sustain keyframe  frequency interpolator
 1320 23AF:24           		.by $24		; Sustain keyframe  feedback  interpolator
 1321 23B0:26           		.by $26		; Sustain keyframe  volume    interpolator
 1322 23B1:2C           		.by $2c		; Release keyframe  frequency interpolator
 1323 23B2:2E           		.by $2e		; Release keyframe  feedback  interpolator
 1324 23B3:             clear_voice_end
 1325                   
 1326                   
 1327                   * ----- HSFX flag sets ----- *
 1328                   
 1329      0F00         ALL_ACCUM	.EQU	FREQ_ACCUM+SHIFT_ACCUM+FBACK_ACCUM+VOL_
 1330      00B0         INTERP		.EQU	FREQ_INTERP+FBACK_INTERP+VOL_INTERP
 1331                   
 1332 23B3:             voice0		; --- Voice 0 --------------------------------
 1333 23B3:6A 00        		.wo HMUSIC_DEFAULT_PRIORITY+{{HMUSIC_CHANNELCOUNT-1}
 1334 23B5:00 00        attackframe_v0	.wo 0		; === Time to start attack
 1335 23B7:B0 0F        		.wo ALL_ACCUM+INTERP
 1336 23B9:00 00        attackfreq_v0	.wo 0		; Frequency accumulator
 1337 23BB:00 00        		.wo 0		; Shifter accumulator
 1338 23BD:00 00        		.wo 0		; Feedback accumulator
 1339 23BF:00 00        		.wo 0		; Volume accumulator
 1340 23C1:00 00        		.wo 0		; Frequency interpolation
 1341 23C3:00 00        		.wo 0		; Feedback interpolation
 1342 23C5:00 00        		.wo 0		; Volume interpolation
 1343 23C7:01 00        decayframe_v0	.wo 1		; === Time to start decay
 1344 23C9:B0 00        		.wo INTERP
 1345 23CB:00 00        		.wo 0		; Frequency interpolation
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   63
                        6502:src/hmusic.src             14:37:01  

 1346 23CD:00 00        		.wo 0		; Feedback interpolation
 1347 23CF:00 00        		.wo 0		; Volume interpolation
 1348 23D1:01 00        sustainframe_v0	.wo 1		; === Time to start sustain
 1349 23D3:B0 00        		.wo INTERP
 1350 23D5:00 00        		.wo 0		; Frequency interpolation
 1351 23D7:00 00        		.wo 0		; Feedback interpolation
 1352 23D9:00 00        		.wo 0		; Volume interpolation
 1353 23DB:01 00        releaseframe_v0	.wo 1		; === Time to start release
 1354 23DD:B0 00        		.wo INTERP
 1355 23DF:00 00        		.wo 0		; Frequency interpolation
 1356 23E1:00 00        		.wo 0		; Feedback interpolation
 1357 23E3:00 00        		.wo 0		; Volume interpolation
 1358 23E5:01 00        endframe_v0	.wo 1		; End release & end effect
 1359 23E7:01 00        		.wo END_OF_EFFECT
 1360 23E9:             voice1		; --- Voice 1 --------------------------------
 1361      TRUE         	#IF HMUSIC_CHANNELCOUNT > 1
 1362 23E9:68 00        		.wo HMUSIC_DEFAULT_PRIORITY+{{HMUSIC_CHANNELCOUNT-2}
 1363 23EB:00 00        attackframe_v1	.wo 0		; === Time to start attack
 1364 23ED:B0 0F        		.wo ALL_ACCUM+INTERP
 1365 23EF:00 00        		.wo 0		; Frequency accumulator
 1366 23F1:00 00        		.wo 0		; Shifter accumulator
 1367 23F3:00 00        		.wo 0		; Feedback accumulator
 1368 23F5:00 00        		.wo 0		; Volume accumulator
 1369 23F7:00 00        		.wo 0		; Frequency interpolation
 1370 23F9:00 00        		.wo 0		; Feedback interpolation
 1371 23FB:00 00        		.wo 0		; Volume interpolation
 1372 23FD:01 00        decayframe_v1	.wo 1		; === Time to start decay
 1373 23FF:B0 00        		.wo INTERP
 1374 2401:00 00        		.wo 0		; Frequency interpolation
 1375 2403:00 00        		.wo 0		; Feedback interpolation
 1376 2405:00 00        		.wo 0		; Volume interpolation
 1377 2407:01 00        sustainframe_v1	.wo 1		; === Time to start sustain
 1378 2409:B0 00        		.wo INTERP
 1379 240B:00 00        		.wo 0		; Frequency interpolation
 1380 240D:00 00        		.wo 0		; Feedback interpolation
 1381 240F:00 00        		.wo 0		; Volume interpolation
 1382 2411:01 00        releaseframe_v1	.wo 1		; === Time to start release
 1383 2413:B0 00        		.wo INTERP
 1384 2415:00 00        		.wo 0		; Frequency interpolation
 1385 2417:00 00        		.wo 0		; Feedback interpolation
 1386 2419:00 00        		.wo 0		; Volume interpolation
 1387 241B:01 00        endframe_v1	.wo 1		; End release & end effect
 1388 241D:01 00        		.wo END_OF_EFFECT
 1389                   	#ENDIF ; of #IF HMUSIC_CHANNELCOUNT > 1
 1390 241F:             voice2		; --- Voice 2 --------------------------------
 1391      TRUE         	#IF HMUSIC_CHANNELCOUNT > 2
 1392 241F:66 00        		.wo HMUSIC_DEFAULT_PRIORITY+{{HMUSIC_CHANNELCOUNT-3}
 1393 2421:00 00        attackframe_v2	.wo 0		; === Time to start attack
 1394 2423:B0 0F        		.wo ALL_ACCUM+INTERP
 1395 2425:00 00        		.wo 0		; Frequency accumulator
 1396 2427:00 00        		.wo 0		; Shifter accumulator
 1397 2429:00 00        		.wo 0		; Feedback accumulator
 1398 242B:00 00        		.wo 0		; Volume accumulator
 1399 242D:00 00        		.wo 0		; Frequency interpolation
 1400 242F:00 00        		.wo 0		; Feedback interpolation
 1401 2431:00 00        		.wo 0		; Volume interpolation
 1402 2433:01 00        decayframe_v2	.wo 1		; === Time to start decay
 1403 2435:B0 00        		.wo INTERP
 1404 2437:00 00        		.wo 0		; Frequency interpolation
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   64
                        6502:src/hmusic.src             14:37:01  

 1405 2439:00 00        		.wo 0		; Feedback interpolation
 1406 243B:00 00        		.wo 0		; Volume interpolation
 1407 243D:01 00        sustainframe_v2	.wo 1		; === Time to start sustain
 1408 243F:B0 00        		.wo INTERP
 1409 2441:00 00        		.wo 0		; Frequency interpolation
 1410 2443:00 00        		.wo 0		; Feedback interpolation
 1411 2445:00 00        		.wo 0		; Volume interpolation
 1412 2447:01 00        releaseframe_v2	.wo 1		; === Time to start release
 1413 2449:B0 00        		.wo INTERP
 1414 244B:00 00        		.wo 0		; Frequency interpolation
 1415 244D:00 00        		.wo 0		; Feedback interpolation
 1416 244F:00 00        		.wo 0		; Volume interpolation
 1417 2451:01 00        endframe_v2	.wo 1		; End release & end effect
 1418 2453:01 00        		.wo END_OF_EFFECT
 1419                   	#ENDIF ; of #IF HMUSIC_CHANNELCOUNT > 2
 1420 2455:             voice3		; --- Voice 3 --------------------------------
 1421      TRUE         	#IF HMUSIC_CHANNELCOUNT > 3
 1422 2455:64 00        		.wo HMUSIC_DEFAULT_PRIORITY+{{HMUSIC_CHANNELCOUNT-4}
 1423 2457:00 00        attackframe_v3	.wo 0		; === Time to start attack
 1424 2459:B0 0F        		.wo ALL_ACCUM+INTERP
 1425 245B:00 00        		.wo 0		; Frequency accumulator
 1426 245D:00 00        		.wo 0		; Shifter accumulator
 1427 245F:00 00        		.wo 0		; Feedback accumulator
 1428 2461:00 00        		.wo 0		; Volume accumulator
 1429 2463:00 00        		.wo 0		; Frequency interpolation
 1430 2465:00 00        		.wo 0		; Feedback interpolation
 1431 2467:00 00        		.wo 0		; Volume interpolation
 1432 2469:01 00        decayframe_v3	.wo 1		; === Time to start decay
 1433 246B:B0 00        		.wo INTERP
 1434 246D:00 00        		.wo 0		; Frequency interpolation
 1435 246F:00 00        		.wo 0		; Feedback interpolation
 1436 2471:00 00        		.wo 0		; Volume interpolation
 1437 2473:01 00        sustainframe_v3	.wo 1		; === Time to start sustain
 1438 2475:B0 00        		.wo INTERP
 1439 2477:00 00        		.wo 0		; Frequency interpolation
 1440 2479:00 00        		.wo 0		; Feedback interpolation
 1441 247B:00 00        		.wo 0		; Volume interpolation
 1442 247D:01 00        releaseframe_v3	.wo 1		; === Time to start release
 1443 247F:B0 00        		.wo INTERP
 1444 2481:00 00        		.wo 0		; Frequency interpolation
 1445 2483:00 00        		.wo 0		; Feedback interpolation
 1446 2485:00 00        		.wo 0		; Volume interpolation
 1447 2487:01 00        endframe_v3	.wo 1		; End release & end effect
 1448 2489:01 00        		.wo END_OF_EFFECT
 1449                   	#ENDIF ; of #IF HMUSIC_CHANNELCOUNT > 3
 1450                   * NOTE:  The position of the above note arrays is very
 1451                   * NOTE:  =============================================
 1452                   
 1453                   
 1454                   
 1455                   
  149                   
  150                   		.IN 6502:src/hsfx.var
    1                   ; Thursday 19-Apr-90 16:17:32
    2                   * === hsfx.var =======================================
    3                   *
    4                   * Handy Sound Effects Driver  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   65
                        6502:src/hsfx.var               14:37:01  

    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 19-Apr-90	SHL		Moved top_of_loop0,1 variables from h
   12                   *				Moved hsfx_temp to zero page in hsfx.src
   13                   * 18-Apr-90	SHL		Added HSFXVarStart and HSFXVarEnd mar
   14                   * 31-Aug-89	Stephen Jungels	Split this file from hsfx.
   15                   *
   16                   * ====================================================
   17                   
   18                   
   19                   ; Variables used by the HSFX driver
   20                   
   21                   ; If you are using HSFX you must include this file
   22                   
   23                   
   24 248B:             HSFXVarStart
   25                   
   26                   
   27 248B:             audio_interruptus .ds 1	; Set on entry to audio interr
   28 248C:             audio_lockout	.ds 1	; flag to lock out audio interrupt
   29 248D:             audio_dropout	.ds 1	; count of audio frames that have 
   30                   
   31 248E:             top_of_loop0	.ds 1	; recursion flag
   32 248F:             top_of_loop1	.ds 1	; recursion flag
   33                   
   34                   
   35                   * ChannelInUse is used to denote both that the HSFX ch
   36                   * and the priority of the effect currently playing on 
   37                   * A ChannelInUse value of 0 (HSFX_FREECHANNEL) denotes
   38                   * A value of $FF (HSFX_NOCHANNEL) denotes channel not 
   39                   * Any other value is a channel-priority value, where s
   40                   * odd priorities and music notes get even priorities.
   41                   * Note that ChannelInUse has 5 elements, allowing for 
   42                   * "mock channel" which is guaranteed to always have a 
   43                   * Channel 4 is returned by StartHSFX when the effect c
   44                   
   45 2490:             ChannelInUse	.ds HSFX_CHANNELCOUNT+1
   46                   
   47                   
   48                   * NOTE:  The above software depends on the exact order
   49                   * accumulators and interpolators.
   50                   * Also, the software presumes that:  there are HSFX_AC
   51                   * accumulators; there are a total of HSFX_REGCOUNT arr
   52                   * and each pair is (HSFX_CHANNELCOUNT * HSFX_REGSIZE) 
   53                   
   54 2495:             freql		.ds HSFX_CHANNELCOUNT
   55 2499:             freqh		.ds HSFX_CHANNELCOUNT
   56 249D:             shiftl		.ds HSFX_CHANNELCOUNT
   57 24A1:             shifth		.ds HSFX_CHANNELCOUNT
   58 24A5:             feedbackl	.ds HSFX_CHANNELCOUNT
   59 24A9:             feedbackh	.ds HSFX_CHANNELCOUNT
   60 24AD:             volumel		.ds HSFX_CHANNELCOUNT
   61 24B1:             volumeh		.ds HSFX_CHANNELCOUNT
   62 24B5:             freq_interpl	.ds HSFX_CHANNELCOUNT
   63 24B9:             freq_interph	.ds HSFX_CHANNELCOUNT
   64 24BD:             shift_interpl	.ds HSFX_CHANNELCOUNT
   65 24C1:             shift_interph	.ds HSFX_CHANNELCOUNT
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   66
                        6502:src/hsfx.var               14:37:01  

   66 24C5:             feed_interpl	.ds HSFX_CHANNELCOUNT
   67 24C9:             feed_interph	.ds HSFX_CHANNELCOUNT
   68 24CD:             vol_interpl	.ds HSFX_CHANNELCOUNT
   69 24D1:             vol_interph	.ds HSFX_CHANNELCOUNT
   70                   
   71 24D5:             flagsl		.ds HSFX_CHANNELCOUNT	;16 bit flags
   72 24D9:             flagsh		.ds HSFX_CHANNELCOUNT
   73                   
   74 24DD:             next_keyframel	.ds HSFX_CHANNELCOUNT	;next 'change of 
   75 24E1:             next_keyframeh	.ds HSFX_CHANNELCOUNT
   76                   
   77 24E5:             current_framel	.ds HSFX_CHANNELCOUNT	;current frame be
   78 24E9:             current_frameh	.ds HSFX_CHANNELCOUNT
   79                   
   80 24ED:             loop_count0	.ds HSFX_CHANNELCOUNT	;# loops to perform
   81 24F1:             loop_adrl0	.ds HSFX_CHANNELCOUNT	;'top of loop' addres
   82 24F5:             loop_adrh0	.ds HSFX_CHANNELCOUNT
   83                   
   84 24F9:             loop_count1	.ds HSFX_CHANNELCOUNT	;# loops to perform
   85 24FD:             loop_adrl1	.ds HSFX_CHANNELCOUNT	;'top of loop' addres
   86 2501:             loop_adrh1	.ds HSFX_CHANNELCOUNT
   87                   
   88 2505:             shift_flag	.ds HSFX_CHANNELCOUNT
   89                   
   90 2509:             clock_temp	.ds HSFX_CHANNELCOUNT	;something wrong here
   91 250D:             preload_temp	.ds HSFX_CHANNELCOUNT
   92 2511:             data_temp	.ds HSFX_CHANNELCOUNT
   93 2515:             shift_temp	.ds HSFX_CHANNELCOUNT
   94 2519:             integrate	.ds HSFX_CHANNELCOUNT
   95                   
   96 251D:             hsfx_basel	.ds HSFX_CHANNELCOUNT	;pointers to data tab
   97 2521:             hsfx_baseh	.ds HSFX_CHANNELCOUNT
   98                   
   99 2525:             launch_channel	.ds HSFX_CHANNELCOUNT	;for out of phase
  100                   
  101                   
  102 2529:             HSFXVarEnd
  103                   
  151                   		.IN 6502:src/hmusic.var
    1                   ; Tuesday 24-Apr-90 13:46:38
    2                   * === hmusic.src =====================================
    3                   *
    4                   * Handy Music Driver  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 24-Apr-90	SHL		ring0_flag and ring1_flag arrays repl
   12                   *				ring_flag array
   13                   * 18-Apr-90	SHL		HMUSIC_DEFAULT_PRIORITY added to give
   14                   *				a default priority level
   15                   *				Added HMusicVarStart and HMusicVarEnd markers
   16                   * 31-Aug-89	Stephen Jungels	Split this file from hsfx.
   17                   *
   18                   * ====================================================
   19                   
   20                   
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   67
                        6502:src/hmusic.var             14:37:01  

   21                   ; Variables used by the HMUSIC driver
   22                   
   23                   ; If you are using HMUSIC you must include this file
   24                   
   25 2529:             HMusicVarStart
   26                   
   27                   
   28 2529:             VoiceInUse	.DS HMUSIC_CHANNELCOUNT	; Flags whether thi
   29                   
   30 252D:             instance	.DS 1			; Holds next 'instance' value
   31 252E:             VoiceInstance	.DS HMUSIC_CHANNELCOUNT	; Instances for 
   32                   
   33 2532:             restore_ds	.DS HMUSIC_CHANNELCOUNT ; Flag for modified
   34 2536:             save_decayl	.DS HMUSIC_CHANNELCOUNT ; Save location fo
   35 253A:             save_decayh	.DS HMUSIC_CHANNELCOUNT
   36 253E:             save_sustainl	.DS HMUSIC_CHANNELCOUNT ; Save location 
   37 2542:             save_sustainh	.DS HMUSIC_CHANNELCOUNT
   38                   
   39 2546:             voice_freq_ptrl	.DS HMUSIC_CHANNELCOUNT ; Address of p
   40 254A:             voice_freq_ptrh	.DS HMUSIC_CHANNELCOUNT
   41 254E:             voice_dur_ptrl	.DS HMUSIC_CHANNELCOUNT ; Address of du
   42 2552:             voice_dur_ptrh	.DS HMUSIC_CHANNELCOUNT
   43                   
   44 2556:             gatel		.DS HMUSIC_CHANNELCOUNT	; Gate timing
   45 255A:             gateh		.DS HMUSIC_CHANNELCOUNT
   46                   
   47 255E:             voicedata_ptrl	.DS HMUSIC_CHANNELCOUNT ; Current addre
   48 2562:             voicedata_ptrh	.DS HMUSIC_CHANNELCOUNT
   49                   
   50 2566:             frames_alivel	.DS HMUSIC_CHANNELCOUNT ; Number of audi
   51 256A:             frames_aliveh	.DS HMUSIC_CHANNELCOUNT ; has been alive
   52 256E:             voice_endframel	.DS HMUSIC_CHANNELCOUNT ; When current
   53 2572:             voice_endframeh	.DS HMUSIC_CHANNELCOUNT
   54                   
   55 2576:             hmflagsl	.DS 1		; Last CFW read
   56 2577:             hmflagsh	.DS 1
   57                   
   58 2578:             gating		.DS HMUSIC_CHANNELCOUNT ; Last AGD/AGS flag re
   59                   
   60 257C:             new_note	.DS HMUSIC_CHANNELCOUNT ; Flag - send new not
   61                   
   62 2580:             SFX_to_cancel	.DS HMUSIC_CHANNELCOUNT ; Priority of SF
   63                   
   64 2584:             did_outernext	.DS 1
   65 2585:             did_innernext	.DS 1
   66 2586:             did_ring_end	.DS 1	; One-shot prevention of recursive 
   67                   
   68 2587:             mloop_count0	.DS HMUSIC_CHANNELCOUNT
   69 258B:             mloop_adrl0	.DS HMUSIC_CHANNELCOUNT
   70 258F:             mloop_adrh0	.DS HMUSIC_CHANNELCOUNT
   71 2593:             mloop_count1	.DS HMUSIC_CHANNELCOUNT
   72 2597:             mloop_adrl1	.DS HMUSIC_CHANNELCOUNT
   73 259B:             mloop_adrh1	.DS HMUSIC_CHANNELCOUNT
   74                   
   75 259F:             ring_flag	.DS HMUSIC_CHANNELCOUNT
   76 25A3:             ring0_returnl	.DS HMUSIC_CHANNELCOUNT ; RING0 info
   77 25A7:             ring0_returnh	.DS HMUSIC_CHANNELCOUNT
   78 25AB:             ring1_returnl	.DS HMUSIC_CHANNELCOUNT ; RING1 info
   79 25AF:             ring1_returnh	.DS HMUSIC_CHANNELCOUNT
Epyx HandyAsm 1.12      testhmusic                      15-Apr-12514:37:01 Page   68
                        6502:src/hmusic.var             14:37:01  

   80                   
   81 25B3:             hmusic_base	.DS 2		; Address of music data
   82                   
   83 25B5:             VoiceHSFXChannel .DS HMUSIC_CHANNELCOUNT ; Hardware ch
   84                   
   85                   
   86      FALSE        	#IFDEF MUTE_USER
   88                   	#ENDIF
   89                   
   90      FALSE        	#IFDEF	USERCALLS_USER
   93                   	#ENDIF ; of #IFDEF USERCALLS_USER
   94                   
   95                   
   96 25B9:             HMusicVarEnd
   97                   
  152                   
  153                   
  154                   
  155                   
  156                   
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:37:01 Page   69
                                                        14:37:01  

$0040 ACCUMULATE                        MACRO ADDMUSIC
$0100 AGD                               $0040 ALGO_3
$0F00 ALL_ACCUM                         $0200 ASD
$0000 ASM.EQUSYMS                       $010C ASM.VERSION
$FD40 ATTENREG0                         $FD41 ATTENREG1
$FD42 ATTENREG2                         $FD43 ATTENREG3
$FD86 AUDIN                             $0010 AUDIN_BIT
$FD20 AUDIO0                            $FD28 AUDIO1
$FD30 AUDIO2                            $FD38 AUDIO3
$0006 AUDIO_CLOCK_MASK                  $0001 AUDIO_DISABLE
$0040 AUDIO_PRELOAD                     $0006 AUDIO_TIMER
$0000 AUD_1                             $0004 AUD_16
$0001 AUD_2                             $0005 AUD_32
$0002 AUD_4                             $0006 AUD_64
$0003 AUD_8                             $0004 AUD_BACKUP
$0007 AUD_CLOCK_MASK                    $0005 AUD_CONTROL
$0006 AUD_COUNTER                       $0001 AUD_FEEDBACK
$0007 AUD_LINKING                       $0007 AUD_OTHER
$0002 AUD_OUTPUT                        $0003 AUD_SHIFT
$0000 AUD_VOLCNTRL                      $0001 A_BUTTON
$0000 A_OFFSET                          $1EEC AddMusic
$0000 BACKGROUND_SPRITE                 $0001 BACKNONCOLL_SPRITE
$0000 BACK_SHADOW_SPRITE                MACRO BEGIN_ALLOCATE_ZEROPAGE
MACRO BEGIN_ZPAGE                       $00C0 BITS_MASK
$FDB0 BLUERED0                          $FDB1 BLUERED1
$FDB2 BLUERED2                          $FDB3 BLUERED3
$FDB4 BLUERED4                          $FDB5 BLUERED5
$FDB6 BLUERED6                          $FDB7 BLUERED7
$FDB8 BLUERED8                          $FDB9 BLUERED9
$FDBA BLUEREDA                          $FDBB BLUEREDB
$FDBC BLUEREDC                          $FDBD BLUEREDD
$FDBE BLUEREDE                          $FDBF BLUEREDF
$0002 BORROW_IN                         $0001 BORROW_OUT
$0003 BOUNDARY_SPRITE                   $0015 BREAK_CONTROLS
$0001 BRK_USER                          $1BD8 BRK_vector
$0002 BSHADOW_SPRITE                    $0013 BUS_MONITOR
$0002 B_BUTTON                          $0002 CART0_IO_INACTIVE
$0004 CART1_IO_INACTIVE                 $0002 CART_ADDR_DATA
$0001 CART_ADDR_STROBE                  $0002 CART_POWER_OFF
MACRO CLEARUSER                         $FC0F COLLADRH
$FC0E COLLADRL                          $FC0B COLLBASH
$FC0A COLLBASL                          $FC25 COLLOFFH
$FC24 COLLOFFL                          $0080 COMMAND
$0003 CONTINUE_REQUEST                  $FD91 CPUSLEEP
$FFFE CPU_IRQ                           $FFFA CPU_NMI
$FFFC CPU_RESET                         $2490 ChannelInUse
$0002 DATA                              $FD95 DISPADRH
$FD94 DISPADRL                          $FD92 DISPCTL
$1BA3 DISPCTL_RAM                       $1FE0 DISPLAY_BUFSIZE
$0080 DISPLAY_EOFFLAG                   $0040 DISPLAY_EOLFLAG
$0008 DISP_COLOR                        $0002 DISP_FLIP
$0004 DISP_FOURBIT                      $0001 DMA_ENABLE
$0001 DOWNLOAD_REQUEST                  $0001 DRAW_LEFT
$0002 DRAW_UP                           $0008 DURATION
$1BA8 DisplayBuffer                     $1BAB DisplayFlags
MACRO ECHO_VALUE                        $0008 ENABLE_COUNT
$0080 ENABLE_INT                        $0020 ENABLE_INTEGRATE
$0010 ENABLE_RELOAD                     MACRO END_ALLOCATE_ZEROPAGE
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:37:01 Page   70
                                                        14:37:01  

MACRO END_DISABLE                       $0001 END_OF_EFFECT
$0000 END_OF_FILE                       $0001 END_OF_VOICE
MACRO END_ZPAGE                         $0002 ESCAPE
$0004 EVER_ON                           $0040 EXPAND_CFW
$0001 EXTERNAL_POWER                    $0200 FBACK_ACCUM
$0020 FBACK_INTERP                      $0080 FEEDBACK_7
$0011 FILL_MEM                          $0004 FLIP_BUTTON
$00C0 FOUR_PER_PIXEL                    $0004 FRAMERR
$0800 FREQ_ACCUM                        $0080 FREQ_INTERP
$1C52 FreeAudio                         $0005 GO_REQUEST
$FDA0 GREEN0                            $FDA1 GREEN1
$FDA2 GREEN2                            $FDA3 GREEN3
$FDA4 GREEN4                            $FDA5 GREEN5
$FDA6 GREEN6                            $FDA7 GREEN7
$FDA8 GREEN8                            $FDA9 GREEN9
$FDAA GREENA                            $FDAB GREENB
$FDAC GREENC                            $FDAD GREEND
$FDAE GREENE                            $FDAF GREENF
$0001 HANDYMUSIC                        $FC00 HARDWARE_START
MACRO HBRK                              $FD00 HCOUNT
$0020 HFLIP                             $0007 HIDE_HOWARD_REQUEST
$0004 HMUSIC_CHANNELCOUNT               $0064 HMUSIC_DEFAULT_PRIORITY
$0004 HMUSIC_USERCOUNT                  $25B9 HMusicVarEnd
$2529 HMusicVarStart                    $FC05 HOFFH
$FC04 HOFFL                             $0001 HORIZONTAL_INT
$0016 HOWARD_ABUS                       $0017 HOWARD_BBUS
$0018 HOWARD_CBUS                       $0019 HOWARD_DBUS
$FCC4 HOWIE                             $FC15 HPOSSTRTH
$FC14 HPOSSTRTL                         $2529 HSFXVarEnd
$248B HSFXVarStart                      $0004 HSFX_ACCUMCOUNT
$00FE HSFX_BIGPRIORITY                  $0004 HSFX_CHANNELCOUNT
$0000 HSFX_FREECHANNEL                  $0001 HSFX_LILPRIORITY
$00FF HSFX_NOCHANNEL                    $0008 HSFX_REGCOUNT
$0002 HSFX_REGSIZE                      $FC29 HSIZOFFH
$FC28 HSIZOFFL                          MACRO INITHMUSIC
MACRO INITHSFX                          MACRO INITINT
$0831 INITINT.0006                      MACRO INITSYS
$0002 INNER_BUTTON                      $0008 INTEGRATE
$00B0 INTERP                            $FD80 INTRST
$FD81 INTSET                            $1BAA INTSET_RAM
$FD8B IODAT                             $1BA4 IODAT_RAM
$FD8A IODIR                             $1BA5 IODIR_RAM
$FCC3 IOData                            $FCC2 IOStatus
$1EAE InitHMusic                        $1BDC InitHSFX
$1BCD IntReturn                         $FBF0 IntTable
$08A1 InterruptTable                    $FCB0 JOYSTICK
$0080 JOY_DOWN                          $0010 JOY_LEFT
$0020 JOY_RIGHT                         $0040 JOY_UP
$0012 LARGE_DATA                        $0004 LAST_CLOCK
$FCC0 LEDS                              $0010 LEFT0_SELECT
$0020 LEFT1_SELECT                      $0040 LEFT2_SELECT
$0080 LEFT3_SELECT                      $0008 LEFTHAND
$0008 LEFTHANDED                        $00F0 LEFT_ATTENMASK
$0080 LITERAL                           $8000 LOOP0
$2000 LOOP1                             $FFF9 MAPCTL
$FC55 MATHA                             $FC54 MATHB
$FC53 MATHC                             $0020 MATHCARRY
$FC52 MATHD                             $FC63 MATHE
$FC62 MATHF                             $FC61 MATHG
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:37:01 Page   71
                                                        14:37:01  

$FC60 MATHH                             $FC6F MATHJ
$FC6E MATHK                             $FC6D MATHL
$FC6C MATHM                             $FC57 MATHN
$FC56 MATHP                             $0040 MATHWARNING
$0080 MATHWORKING                       $FD88 MIKEYHREV
$FD89 MIKEYSREV                         $FD00 MIKEY_BASE
$0002 MIKEY_SPACE                       $0010 MONITOR_BYTECOUNT
$0001 MONITOR_I                         $F900 MONITOR_RAM_RESERVED
$00F8 MONITOR_ZP_RESERVED               $FD44 MPAN
$0020 MSFX                              $FD50 MSTEREO
$FD9C MTEST0                            $FD9D MTEST1
$FD9E MTEST2                            MACRO MUTE
$4000 NEXT0                             $1000 NEXT1
$0014 NEXTZPG                           $0004 NOEXP
$0005 NONCOLL_SPRITE                    $0000 NOP_REQUEST
$0004 NORMAL_SPRITE                     $0020 NO_COLLIDE
$0000 ONE_PER_PIXEL                     $0008 OPTION1_BUTTON
$0004 OPTION2_BUTTON                    $0001 ORIGIN
$0001 OUTER_BUTTON                      $0008 OVERRUN
$0001 PARBIT                            $0010 PAREN
$0010 PARERR                            $0001 PAREVEN
$0001 PAUSE_SWITCH                      $FD93 PBKUP
$0004 PC_OFFSET                         $0004 PITCH
MACRO PLAYHSFX                          MACRO PLAYMUSIC
$0002 POWERON                           $FC2F PROCADRH
$FC2E PROCADRL                          $0006 P_OFFSET
$1EC7 PlayMusic                         $FCB2 RCART_0
$FCB3 RCART_1                           $0010 READ_ENABLE
$0010 REGISTER                          $0007 REGISTER_BYTECOUNT
$0010 RELOAD_HV                         $0020 RELOAD_HVS
$0030 RELOAD_HVST                       $0030 RELOAD_MASK
$0000 RELOAD_NONE                       $0008 RESETERR
MACRO RESETHSFX                         $0040 RESET_DONE
MACRO RESET_TIMEOUT                     $0008 RESTART_BUTTON
$0008 RESTLESS                          $0008 REUSE_PALETTE
$0001 RIGHT0_SELECT                     $0002 RIGHT1_SELECT
$0004 RIGHT2_SELECT                     $0008 RIGHT3_SELECT
$000F RIGHT_ATTENMASK                   $0800 RING
$001A ROM                               $0004 ROM_SPACE
$0003 RUN_ADDRESS                       $0002 RXBRK
$0040 RXINTEN                           $0040 RXRDY
$1BA6 RenderBuffer                      $1BE6 ResetHSFX
$FC2D SCBADRH                           $FC2C SCBADRL
$FC11 SCBNEXTH                          $FC10 SCBNEXTL
$FC23 SCVPOSH                           $FC22 SCVPOSL
$FD90 SDONEACK                          $0006 SEE_HOWARD_REQUEST
$FD8C SERCTL                            $FD8D SERDAT
$FD10 SERIALRATE                        $0010 SERIAL_INT
MACRO SETUSER                           MACRO SET_AUDIO_CLOCK
MACRO SET_BRK                           $2580 SFX_to_cancel
$0007 SHADOW_SPRITE                     $0400 SHIFT_ACCUM
$0004 SHIFT_ALWAYS                      $0040 SHIFT_INTERP
$0080 SIGNMATH                          $0004 SKIP_SPRITE
$0004 SLAVE_REQUEST                     $0004 SONG_COUNT
$0070 SONG_DURATIONBITS                 $0008 SONG_MAINVOICES
$000F SONG_PITCHBITS                    $0000 SONG_STARTUPVOICE0
$0002 SONG_STARTUPVOICE1                $0004 SONG_STARTUPVOICE2
$0006 SONG_STARTUPVOICE3                $0009 SONG_VOICEFX_OFFSETS
$FC82 SPRCOLL                           $FC80 SPRCTL0
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:37:01 Page   72
                                                        14:37:01  

$FC81 SPRCTL1                           $FC13 SPRDLINEH
$FC12 SPRDLINEL                         $FC21 SPRDOFFH
$FC20 SPRDOFFL                          $FC91 SPRGO
$FC19 SPRHSIZH                          $FC18 SPRHSIZL
$FC83 SPRINIT                           $0002 SPRITESTOP
$0002 SPRITETOSTOP                      $0001 SPRITEWORKING
$0001 SPRITE_GO                         $FC92 SPRSYS
$1BA2 SPRSYS_RAM                        $FC1B SPRVSIZH
$FC1A SPRVSIZL                          MACRO STARTVOICE
MACRO START_DISABLE                     MACRO STOPMUSIC
$0001 STOPMUSIC_USER                    MACRO STOPVOICE
$FC1D STRETCHH                          $FC1C STRETCHL
$FC90 SUZYBUSEN                         $FC88 SUZYHREV
$FC89 SUZYSREV                          $FC00 SUZY_BASE
$0001 SUZY_SPACE                        $FCB1 SWITCHES
$FD87 SYSCTL1                           $0003 S_OFFSET
$0898 SafeReturn                        $000A SongSelect
$089D SongsHigh                         $0899 SongsLow
$0800 Start                             $1BFA StartHSFX
$1C37 StopHSFX                          $1F88 StopMusic
$1EAE TEMPORG                           $0080 THREE_PER_PIXEL
$FC03 TILTACUMH                         $FC02 TILTACUML
$FC1F TILTH                             $FC1E TILTL
$FD00 TIMER0                            $0001 TIMER0_INT
$FD04 TIMER1                            $0002 TIMER1_INT
$FD08 TIMER2                            $0004 TIMER2_INT
$FD0C TIMER3                            $0008 TIMER3_INT
$FD10 TIMER4                            $FD14 TIMER5
$0020 TIMER5_INT                        $FD18 TIMER6
$0040 TIMER6_INT                        $FD1C TIMER7
$0080 TIMER7_INT                        $0008 TIMER_DONE
$0000 TIM_BACKUP                        $0001 TIM_CONTROLA
$0003 TIM_CONTROLB                      $0002 TIM_COUNT
$FC01 TMPADRH                           $FC00 TMPADRL
$0014 TRACE                             $0080 TURBO_DISABLE
$0040 TWO_PER_PIXEL                     $0002 TXBRK
$0020 TXEMPTY                           $0080 TXINTEN
$0004 TXOPEN                            $0080 TXRDY
$0004 UNSAFEACCESS                      $0004 UNSAFEACCESSRST
$0002 UPLOAD_REQUEST                    $0002 UP_CURRENT_PAGE
$0005 UP_HAHDATA                        $0004 UP_MEMWATCH
$0003 UP_REGISTERS                      $0001 UP_THIS_PAGE
$0010 USER                              $1BAC UserIntHandler
$FD08 VCOUNT                            $0008 VECTOR_SPACE
$0004 VERTICAL_INT                      $0010 VFLIP
$FC0D VIDADRH                           $FC0C VIDADRL
$FC09 VIDBASH                           $FC08 VIDBASL
$FC07 VOFFH                             $FC06 VOFFL
$0100 VOL_ACCUM                         $0010 VOL_INTERP
$FC17 VPOSSTRTH                         $FC16 VPOSSTRTL
$FC27 VSIZACUMH                         $FC26 VSIZACUML
$FC2B VSIZOFFH                          $FC2A VSIZOFFL
$0010 VSTRETCH                          $0010 VSTRETCHING
$25B5 VoiceHSFXChannel                  $2529 VoiceInUse
$252E VoiceInstance                     $0006 XOR_SHADOW_SPRITE
$0006 XOR_SPRITE                        $0001 X_OFFSET
$0002 Y_OFFSET                          $1EF2 addMusicEntry
$1D06 advance_channels                  $21BA asd_agd_considered
$23B5 attackframe_v0                    $23EB attackframe_v1
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:37:01 Page   73
                                                        14:37:01  

$2421 attackframe_v2                    $2457 attackframe_v3
$23B9 attackfreq_v0                     $1BA0 audioClock
$1BA1 audioPreload                      $248D audio_dropout
$248B audio_interruptus                 $248C audio_lockout
$1EAA audio_offsets                     $000B audio_ptr
$1BD6 brkInt                            $1E51 calc_next_audio
$23A8 clear_voice                       $23B3 clear_voice_end
$2509 clock_temp                        $24E9 current_frameh
$24E5 current_framel                    $2511 data_temp
$23C7 decayframe_v0                     $23FD decayframe_v1
$2433 decayframe_v2                     $2469 decayframe_v3
$2585 did_innernext                     $2584 did_outernext
$2586 did_ring_end                      $20C8 do_CFW
$22D6 do_note                           $221C dur_tbl_considered
$0010 duration_ptr                      $227A end_escape
$1E64 end_freq                          $1E4E end_of_effect
$22B0 end_voice                         $23E5 endframe_v0
$241B endframe_v1                       $2451 endframe_v2
$2487 endframe_v3                       $2298 escape_considered
$24C9 feed_interph                      $24C5 feed_interpl
$24A9 feedbackh                         $24A5 feedbackl
$1C5D find_lesser_channel               $20F5 first_RING
$24D9 flagsh                            $24D5 flagsl
$256A frames_aliveh                     $2566 frames_alivel
$1C74 freeChannelX                      $24B9 freq_interph
$24B5 freq_interpl                      $2236 freq_tbl_considered
$2499 freqh                             $2495 freql
$000E frequency_ptr                     $255A gateh
$2556 gatel                             $2578 gating
$207D getNextData                       $1BB9 hardInt
$2577 hmflagsh                          $2576 hmflagsl
$25B3 hmusic_base                       $1FB3 hmusic_driver
$1FCA hmusic_interrupt_core             $0001 hsfxSysCancel
$2521 hsfx_baseh                        $251D hsfx_basel
$1C8D hsfx_driver_grunt                 $000D hsfx_temp
$1D85 infinite0                         $1DC3 infinite1
$252D instance                          $2519 integrate
$1BD0 jumpIntTable                      $1C76 killChannelX
$2525 launch_channel                    $1CE7 launch_channels
$1CEA launch_next_channel               $24F5 loop_adrh0
$2501 loop_adrh1                        $24F1 loop_adrl0
$24FD loop_adrl1                        $24ED loop_count0
$24F9 loop_count1                       $1D56 loop_frame
$2188 mloop0_considered                 $21A4 mloop1_considered
$258F mloop_adrh0                       $259B mloop_adrh1
$258B mloop_adrl0                       $2597 mloop_adrl1
$2587 mloop_count0                      $2593 mloop_count1
$20B7 mloop_frame                       $2169 mnext0_done
$2146 mnext1_done                       $21FA msfx_considered
$2187 mstuff0                           $21A3 mstuff1
$1F87 musicReturn                       $1FA6 muteVoiceX
$2102 new_RING                          $257C new_note
$1D96 next0_done                        $1DD5 next1_done
$24E1 next_keyframeh                    $24DD next_keyframel
$1DAD no_loop0                          $1DEC no_loop1
$211A post_ring                         $250D preload_temp
$23DB releaseframe_v0                   $2411 releaseframe_v1
$2447 releaseframe_v2                   $247D releaseframe_v3
$2532 restore_ds                        $22C3 return_from_ring0
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:37:01 Page   74
                                                        14:37:01  

$22BB return_from_ring1                 $25A7 ring0_returnh
$25A3 ring0_returnl                     $25AF ring1_returnh
$25AB ring1_returnl                     $211B ring_considered
$259F ring_flag                         $22C9 ring_return
$253A save_decayh                       $2536 save_decayl
$2542 save_sustainh                     $253E save_sustainl
$1F54 setNewVoice                       $1F38 setUpMusicPtrs
$2505 shift_flag                        $24C1 shift_interph
$24BD shift_interpl                     $2515 shift_temp
$24A1 shifth                            $249D shiftl
$08B1 song1                             $097C song2
$0C66 song3                             $1123 song4
$0006 songptr                           $0008 songptr2
$1F92 stopAllVoices                     $1F9D stopVoiceX
$1DAC stuff0                            $1DEB stuff1
$23D1 sustainframe_v0                   $2407 sustainframe_v1
$243D sustainframe_v2                   $2473 sustainframe_v3
$08A1 sysIntTable                       $0000 sysptr
$0002 sysptr2                           $0004 sysptr3
$2157 takeloop0                         $2134 takeloop1
$0853 testMusicLoop                     $248E top_of_loop0
$248F top_of_loop1                      $1D4C update_frame
$2202 user_considered                   $23B3 voice0
$23E9 voice1                            $241F voice2
$2455 voice3                            $2048 voiceLaunchLoop
$1FCD voiceLoop                         $2043 voiceLoopEnd
$1F2F voiceReturn                       $2552 voice_dur_ptrh
$254E voice_dur_ptrl                    $2572 voice_endframeh
$256E voice_endframel                   $254A voice_freq_ptrh
$2546 voice_freq_ptrl                   $23A4 voice_offsets
$2562 voicedata_ptrh                    $255E voicedata_ptrl
$0012 voiceoffsets_ptr                  $24D1 vol_interph
$24CD vol_interpl                       $24B1 volumeh
$24AD volumel                           
