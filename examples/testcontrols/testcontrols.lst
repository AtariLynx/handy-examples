Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page    1
                                                        14:50:57  

    1                   
    2                   * === testcontrols.src ===============================
    3                   * 
    4                   * Test Controls Macros and Subroutines  --  Handy Soft
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   * 
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 9-Feb-90	SHL		Updated for compatibility with 1.1 rel
   12                   * 6 Apr 89	-RJ		Added sys.mac, sys.src, and INITSYS
   13                   * 2 Jan 89	-RJ		Added TAPE_RECORDING definition and ex
   14                   *				of calling tape-recording macros
   15                   * Mid 88	=RJ Mical=	Created this file!
   16                   * 
   17                   * ====================================================
   18                   
   19                   
   20                   		.65C02
   21                   
   22                   
   23                   * Define BRK_USER to do debugging.
   24      0001         BRK_USER	.EQU	1
   25                   
   26                   
   27                   		.IN	6502:include/monitor.i
    1                   
    2                   * === monitor.i ======================================
    3                   *
    4                   * 6502 Debugger Monitor Definitions File  --  Handy So
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 26-Feb-90	SHL		Minor cleanup
   12                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   13                   * 1 May 89	-RJ		Changed MONITOR_ZP_RESERVED to $F8
   14                   * 19 Mar 89	-RJ		Changed MONITOR_RAM_RESERVED to $F800
   15                   * 16 Mar 89	-RJ		Changed values of BUS_MONITOR and TRA
   16                   *				added LARGE_DATA
   17                   * 14 Mar 89	-RJ		Changed value of MONITOR_RAM_RESERVED
   18                   * 26-Dec-88	-RJ		Added HANDEM_NEWDISPLAY
   19                   * Early 88	=RJ Mical=	Created this file!
   20                   *
   21                   * ====================================================
   22                   
   23                   
   24                   
   25      FALSE        	#IFDEF	MONITOR_I	; prevent multiple inclusion
   27                   	#ENDIF
   28      0001         MONITOR_I	.EQU	1
   29                   
   30                   
   31                   
   32                   * The hardware interrupt vector table starts at this a
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page    2
                        6502:include/monitor.i          14:50:57  

   33      FBF0         IntTable		.=	$FC00-{8*2}
   34                   
   35                   
   36                   
   37                   * These constants define the memory locations reserved
   38                   * program.  The zero-page definition describes the fir
   39                   * in zero-page; all locations from there to the end of
   40                   * reserved.  With the RAM definition, all locations
   41                   * are reserved from that address to the start of Handy
   42                   * currently lives at $FC00
   43                   * Note that the Howard board does not require RAM for 
   44      00F8         MONITOR_ZP_RESERVED	.EQU	$00F8
   45      F900         MONITOR_RAM_RESERVED	.EQU	$F900
   46                   
   47                   
   48                   
   49                   * These are the offsets of the register data both in t
   50                   * data stream when host and monitor are passing the re
   51      0000         A_OFFSET		.EQU	0
   52      0001         X_OFFSET		.EQU	1
   53      0002         Y_OFFSET		.EQU	2
   54      0003         S_OFFSET		.EQU	3
   55      0004         PC_OFFSET		.EQU	4
   56      0006         P_OFFSET		.EQU	6
   57                   
   58                   
   59                   
   60                   * These define the monitor memory block sizes
   61      0007         REGISTER_BYTECOUNT	.EQU	7
   62      0010         MONITOR_BYTECOUNT	.EQU	16
   63                   
   64                   
   65                   
   66                   * These are the definitions of the signals that can be
   67                   * the Handebug monitor program after a warm restart.
   68      0000         NOP_REQUEST		.EQU	0
   69      0001         DOWNLOAD_REQUEST	.EQU	1
   70      0002         UPLOAD_REQUEST		.EQU	2
   71      0003         CONTINUE_REQUEST	.EQU	3
   72      0004         SLAVE_REQUEST		.EQU	4
   73      0005         GO_REQUEST		.EQU	5
   74      0006         SEE_HOWARD_REQUEST	.EQU	6
   75      0007         HIDE_HOWARD_REQUEST	.EQU	7
   76                   
   77                   
   78                   
   79                   * These are the definitions of the upload/download typ
   80      0000         END_OF_FILE		.EQU	$00
   81      0001         ORIGIN			.EQU	$01
   82      0002         DATA			.EQU	$02
   83      0003         RUN_ADDRESS		.EQU	$03
   84                   * The assembler reserves the remainder of the low defi
   85      0010         REGISTER		.EQU	$10
   86      0011         FILL_MEM		.EQU	$11
   87      0012         LARGE_DATA		.EQU	$12
   88      0013         BUS_MONITOR		.EQU	$13
   89      0014         TRACE			.EQU	$14
   90      0015         BREAK_CONTROLS		.EQU	$15
   91      0016         HOWARD_ABUS		.EQU	$16
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page    3
                        6502:include/monitor.i          14:50:57  

   92      0017         HOWARD_BBUS		.EQU	$17
   93      0018         HOWARD_CBUS		.EQU	$18
   94      0019         HOWARD_DBUS		.EQU	$19
   95      001A         ROM			.EQU	$1A
   96                   
   97                   
   98                   * These are the monitor to host slave requests
   99      0001         UP_THIS_PAGE		.EQU	1
  100      0002         UP_CURRENT_PAGE		.EQU	2
  101      0003         UP_REGISTERS		.EQU	3
  102      0004         UP_MEMWATCH		.EQU	4
  103      0005         UP_HAHDATA		.EQU	5
  104                   
  105                   
  106                   
   28                   		.IN	6502:include/harddefs.i
    1                   ; Wednesday 27-Jun-90 10:45:41
    2                   * === harddefs.i =====================================
    3                   *
    4                   * Hardware Definitions  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 27-Jun-90	SHL		Removed MAGxx alternate names for tim
   12                   *				Added READ_ENABLE definition for IODAT
   13                   * 12-Apr-90	SHL		Added SUZY_BASE and MIKEY_BASE defini
   14                   *				Removed SUZY_ADDRESS definition
   15                   *				Corrected LEFT_ATTENMASK and RIGHT_ATTENMASK
   16                   * 9-Mar-90	SHL		Added new stereo register definitions
   17                   * 7-Mar-90	SHL		Removed MAGRDYx definitions
   18                   *				Commented out MSTEREO until get real info
   19                   * 26-Feb-90	SHL		Corrected some bit definitions
   20                   * 13-Feb-90	SHL		Added a few more missing definitions
   21                   * 9-Feb-90	SHL		Added rest of the hardware definitions
   22                   *				Added CPU interrupt and reset vectors
   23                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   24                   * 25 May 89	-RJ		Deleted LEFT_ and RIGHT_FIRE_BUTTON d
   25                   * 22 May 89	-RJ		Added RESTLESS definition, changed LI
   26                   *				to EXTERNAL_POWER
   27                   * 11 May 89	-RJ		Changed sprite definitions to track t
   28                   *				definitions caused by the Shadow-E chip bug
   29                   * 10 May 89	-RJ		Added INNER_ and OUTER_BUTTON and MST
   30                   *				CART0,1_IO_INACTIVE definitions
   31                   * 20 Apr 89	-RJ		Changed the game button definitions t
   32                   *				the new way to handle Pause, Restart, Flip and
   33                   *				Game Options 1 & 2.  Added bit defs to DISPCTL
   34                   * 19 Apr 89	RG Goudy	Added serial port bit definitions
   35                   * 18 Apr 89	-RJ		The RELOAD_ definition comments say "
   36                   * 19 Mar 89	-RJ		Added TURBO_DISABLE definition to MAP
   37                   * 17 Jan 89	-RJ		Added POWERON and MOTORON of SYSCTL1
   38                   *				Renamed RCART to RCART_0 and added RCART_1
   39                   *				Deleted VIDEO/MIKEYTEST, added MTEST0/1/2
   40                   * 2 Jan 89	-RJ		Added EVER_ON and NO_COLLIDE
   41                   * 31 Dec 88	-RJ		When HANDYMATH is non-zero, the hardw
   42                   *				math registers now aren't defined here either
   43                   *				Added JOYSTICK and SWITCHES flag definitions
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page    4
                        6502:include/harddefs.i         14:50:57  

   44                   * 30 Dec 88	-RJ		Added sprite type defs.  Renamed REUS
   45                   *				et al to the more accurate RELOAD_NONE et al
   46                   * 24-Dec-88	-RJ		Added sprite control register and aud
   47                   *				channel declarations and control bits
   48                   * 22 Dec 88	-RJ		Redefined all addresses, turning them
   49                   *				symbols that Handebug will recognize
   50                   *
   51                   * Mid 87	=RJ Mical=	Created this file!
   52                   *
   53                   * ====================================================
   54                   
   55                   
   56                   * Size of a display buffer
   57      1FE0         DISPLAY_BUFSIZE	.EQ $1FE0
   58                   
   59                   
   60                   * First address of the block of hardware addresses.
   61      FC00         HARDWARE_START	.EQ $FC00
   62                   
   63                   
   64                   
   65                   * SUZY chip functions are mapped into the $FC00 page
   66 0000:             		.OR $FC00
   67 FC00:             SUZY_BASE		; FC00
   68                   
   69                   * SUZY registers from $FC00-$FC7F (both sprite and MAT
   70                   * when the lower byte is stored to.
   71                   
   72                   * Sprite engine registers - *'ed values are used inter
   73                   * cannot be usefully initialized externally.
   74                   
   75 FC00:             TMPADRL		.DS 1	; FC00 *
   76 FC01:             TMPADRH		.DS 1	; FC01 *
   77 FC02:             TILTACUML	.DS 1	; FC02 *
   78 FC03:             TILTACUMH	.DS 1	; FC03 *
   79 FC04:             HOFFL		.DS 1	; FC04
   80 FC05:             HOFFH		.DS 1	; FC05
   81 FC06:             VOFFL		.DS 1	; FC06
   82 FC07:             VOFFH		.DS 1	; FC07
   83 FC08:             VIDBASL		.DS 1	; FC08
   84 FC09:             VIDBASH		.DS 1	; FC09
   85 FC0A:             COLLBASL	.DS 1	; FC0A
   86 FC0B:             COLLBASH	.DS 1	; FC0B
   87 FC0C:             VIDADRL		.DS 1	; FC0C *
   88 FC0D:             VIDADRH		.DS 1	; FC0D *
   89 FC0E:             COLLADRL	.DS 1	; FC0E *
   90 FC0F:             COLLADRH	.DS 1	; FC0F *
   91 FC10:             SCBNEXTL	.DS 1	; FC10
   92 FC11:             SCBNEXTH	.DS 1	; FC11
   93 FC12:             SPRDLINEL	.DS 1	; FC12 *
   94 FC13:             SPRDLINEH	.DS 1	; FC13 *
   95 FC14:             HPOSSTRTL	.DS 1	; FC14 *
   96 FC15:             HPOSSTRTH	.DS 1	; FC15 *
   97 FC16:             VPOSSTRTL	.DS 1	; FC16 *
   98 FC17:             VPOSSTRTH	.DS 1	; FC17 *
   99 FC18:             SPRHSIZL	.DS 1	; FC18
  100 FC19:             SPRHSIZH	.DS 1	; FC19
  101 FC1A:             SPRVSIZL	.DS 1	; FC1A
  102 FC1B:             SPRVSIZH	.DS 1	; FC1B
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page    5
                        6502:include/harddefs.i         14:50:57  

  103 FC1C:             STRETCHL	.DS 1	; FC1C *
  104 FC1D:             STRETCHH	.DS 1	; FC1D *
  105 FC1E:             TILTL		.DS 1	; FC1E *
  106 FC1F:             TILTH		.DS 1	; FC1F *
  107 FC20:             SPRDOFFL	.DS 1	; FC20 *
  108 FC21:             SPRDOFFH	.DS 1	; FC21 *
  109 FC22:             SCVPOSL		.DS 1	; FC22 *
  110 FC23:             SCVPOSH		.DS 1	; FC23 *
  111 FC24:             COLLOFFL	.DS 1	; FC24
  112 FC25:             COLLOFFH	.DS 1	; FC25
  113 FC26:             VSIZACUML	.DS 1	; FC26 *
  114 FC27:             VSIZACUMH	.DS 1	; FC27 *
  115 FC28:             HSIZOFFL	.DS 1	; FC28
  116 FC29:             HSIZOFFH	.DS 1	; FC29
  117 FC2A:             VSIZOFFL	.DS 1	; FC2A
  118 FC2B:             VSIZOFFH	.DS 1	; FC2B
  119 FC2C:             SCBADRL		.DS 1	; FC2C *
  120 FC2D:             SCBADRH		.DS 1	; FC2D *
  121 FC2E:             PROCADRL	.DS 1	; FC2E *
  122 FC2F:             PROCADRH	.DS 1	; FC2F *
  123                   
  124                   
  125                   * Math engine registers
  126                   
  127 FC30:             		.OR $FC52
  128 FC52:             MATHD		.DS 1	; FC52
  129 FC53:             MATHC		.DS 1	; FC53
  130 FC54:             MATHB		.DS 1	; FC54
  131 FC55:             MATHA		.DS 1	; FC55
  132 FC56:             MATHP		.DS 1	; FC56
  133 FC57:             MATHN		.DS 1	; FC57
  134 FC58:             		.OR $FC60
  135 FC60:             MATHH		.DS 1	; FC60
  136 FC61:             MATHG		.DS 1	; FC61
  137 FC62:             MATHF		.DS 1	; FC62
  138 FC63:             MATHE		.DS 1	; FC63
  139 FC64:             		.OR $FC6C
  140 FC6C:             MATHM		.DS 1	; FC6C
  141 FC6D:             MATHL		.DS 1	; FC6D
  142 FC6E:             MATHK		.DS 1	; FC6E
  143 FC6F:             MATHJ		.DS 1	; FC6F
  144                   
  145                   
  146                   * More SUZY control registers
  147                   
  148 FC70:             		.OR $FC80
  149 FC80:             SPRCTL0		.DS 1	; FC80
  150                   * Sprite control 0 bit definitions
  151      00C0         BITS_MASK	.EQ %11000000	; Mask for settings bits per p
  152                   * Sprite bits-per-pixel definitions
  153      0000         ONE_PER_PIXEL	.EQ %00000000
  154      0040         TWO_PER_PIXEL	.EQ %01000000
  155      0080         THREE_PER_PIXEL	.EQ %10000000
  156      00C0         FOUR_PER_PIXEL	.EQ %11000000
  157                   * More sprite control 0 bit definitions
  158      0020         HFLIP		.EQ %00100000
  159      0010         VFLIP		.EQ %00010000
  160                   * Sprite types - redefined to reflect the reality caus
  161                   ; NORMAL_SPRITE		.EQ %00000111
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page    6
                        6502:include/harddefs.i         14:50:57  

  162      0007         SHADOW_SPRITE		.EQ %00000111
  163                   
  164      0006         XOR_SPRITE		.EQ %00000110
  165      0006         XOR_SHADOW_SPRITE	.EQ %00000110
  166                   
  167      0005         NONCOLL_SPRITE		.EQ %00000101
  168                   
  169                   ; SHADOW_SPRITE		.EQ %00000100
  170      0004         NORMAL_SPRITE		.EQ %00000100
  171                   
  172                   ; BSHADOW_SPRITE	.EQ %00000011
  173      0003         BOUNDARY_SPRITE		.EQ %00000011
  174                   
  175                   ; BOUNDARY_SPRITE	.EQ %00000010
  176      0002         BSHADOW_SPRITE		.EQ %00000010
  177                   
  178      0001         BACKNONCOLL_SPRITE	.EQ %00000001
  179                   
  180      0000         BACKGROUND_SPRITE	.EQ %00000000
  181      0000         BACK_SHADOW_SPRITE	.EQ %00000000
  182                   
  183                   
  184 FC81:             SPRCTL1		.DS 1	; FC81
  185                   * Sprite control 1 bit definitions
  186      0080         LITERAL		.EQ %10000000
  187      0040         ALGO_3		.EQ %01000000	; broken, do not set this bit!
  188      0030         RELOAD_MASK	.EQ %00110000
  189                   * Sprite reload mask definitions
  190      0000         RELOAD_NONE	.EQ %00000000	; Reload nothing
  191      0010         RELOAD_HV	.EQ %00010000	; Reload hsize, vsize
  192      0020         RELOAD_HVS	.EQ %00100000	; Reload hsize, vsize, stretc
  193      0030         RELOAD_HVST	.EQ %00110000	; Reload hsize, vsize, stret
  194                   * More sprite control 1 bit definitions
  195      0008         REUSE_PALETTE	.EQ %00001000
  196      0004         SKIP_SPRITE	.EQ %00000100
  197      0002         DRAW_UP		.EQ %00000010
  198      0001         DRAW_LEFT	.EQ %00000001
  199                   
  200                   
  201 FC82:             SPRCOLL		.DS 1	; FC82
  202                   * SPRCOLL bit definitions
  203      0020         NO_COLLIDE	.EQ %00100000
  204                   
  205 FC83:             SPRINIT		.DS 1	; FC83
  206                   
  207 FC84:             		.OR $FC88
  208 FC88:             SUZYHREV	.DS 1	; FC88
  209 FC89:             SUZYSREV	.DS 1	; FC89
  210                   
  211 FC8A:             		.OR $FC90
  212 FC90:             SUZYBUSEN	.DS 1	; FC90
  213                   
  214 FC91:             SPRGO		.DS 1	; FC91
  215                   * These are the SPRGO flag definitions
  216      0004         EVER_ON		.EQ %00000100
  217      0001         SPRITE_GO	.EQ %00000001
  218                   
  219 FC92:             SPRSYS		.DS 1	; FC92
  220                   * These are the SPRSYS flag definitions when writing
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page    7
                        6502:include/harddefs.i         14:50:57  

  221      0080         SIGNMATH	.EQ %10000000
  222      0040         ACCUMULATE	.EQ %01000000
  223                   ;NO_COLLIDE	.EQ %00100000	; same as for SPRCOLL
  224      0010         VSTRETCH	.EQ %00010000
  225      0008         LEFTHAND	.EQ %00001000
  226      0004         UNSAFEACCESSRST	.EQ %00000100
  227      0002         SPRITESTOP	.EQ %00000010
  228                   * These are the SPRSYS flag definitions when reading
  229      0080         MATHWORKING	.EQ %10000000
  230      0040         MATHWARNING	.EQ %01000000
  231      0020         MATHCARRY	.EQ %00100000
  232      0010         VSTRETCHING	.EQ %00010000
  233      0008         LEFTHANDED	.EQ %00001000
  234      0004         UNSAFEACCESS	.EQ %00000100
  235      0002         SPRITETOSTOP	.EQ %00000010
  236      0001         SPRITEWORKING	.EQ %00000001
  237                   
  238 FC93:             		.OR $FCB0
  239 FCB0:             JOYSTICK	.DS 1	; FCB0
  240      0080         JOY_DOWN	.EQ %10000000
  241      0040         JOY_UP		.EQ %01000000
  242      0020         JOY_RIGHT	.EQ %00100000
  243      0010         JOY_LEFT	.EQ %00010000
  244      0008         OPTION1_BUTTON	.EQ %00001000
  245      0004         OPTION2_BUTTON	.EQ %00000100
  246      0002         INNER_BUTTON	.EQ %00000010
  247      0001         OUTER_BUTTON	.EQ %00000001
  248      0001         A_BUTTON	.EQ OUTER_BUTTON
  249      0002         B_BUTTON	.EQ INNER_BUTTON
  250      0008         RESTART_BUTTON	.EQ OPTION1_BUTTON
  251      0004         FLIP_BUTTON	.EQ OPTION2_BUTTON
  252                   
  253 FCB1:             SWITCHES	.DS 1	; FCB1
  254      0004         CART1_IO_INACTIVE .EQ %00000100
  255      0002         CART0_IO_INACTIVE .EQ %00000010
  256      0001         PAUSE_SWITCH	.EQ %00000001
  257                   
  258 FCB2:             RCART_0		.DS 1	; FCB2
  259 FCB3:             RCART_1		.DS 1	; FCB3
  260                   
  261                   
  262                   * LEDS output register only exists on early wire-wrap 
  263 FCB4:             		.OR $FCC0
  264 FCC0:             LEDS		.DS 1	; FCC0
  265                   
  266                   
  267                   * The parallel IO port only exists on early wire-wrap 
  268 FCC1:             		.OR $FCC2
  269 FCC2:             IOStatus	.DS 1	; FCC2
  270 FCC3:             IOData		.DS 1	; FCC3
  271                   
  272 FCC4:             HOWIE		.DS 1	; FCC4
  273                   
  274                   
  275                   
  276                   
  277                   * MIKEY chip functions are mapped into the $FD00 page
  278                   
  279 FCC5:             		.OR $FD00
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page    8
                        6502:include/harddefs.i         14:50:57  

  280 FD00:             MIKEY_BASE	; FD00
  281                   
  282                   * The Mikey Timers
  283                   * First the logical timer names are defined, then the 
  284 FD00:             HCOUNT		; FD00
  285 FD00:             TIMER0		; FD00
  286 FD00:             	.DS 4
  287 FD04:             TIMER1		; FD04
  288 FD04:             	.DS 4
  289 FD08:             VCOUNT		; FD08
  290 FD08:             TIMER2		; FD08
  291 FD08:             	.DS 4
  292 FD0C:             TIMER3		; FD0C
  293 FD0C:             	.DS 4
  294 FD10:             SERIALRATE	; FD10
  295 FD10:             TIMER4		; FD10
  296 FD10:             	.DS 4
  297 FD14:             TIMER5		; FD14
  298 FD14:             	.DS 4
  299 FD18:             TIMER6		; FD18
  300 FD18:             	.DS 4
  301 FD1C:             TIMER7		; FD1C
  302 FD1C:             	.DS 4
  303                   
  304                   * Here's the timer offsets
  305      0000         TIM_BACKUP	.EQ 0
  306      0001         TIM_CONTROLA	.EQ 1
  307      0002         TIM_COUNT	.EQ 2
  308      0003         TIM_CONTROLB	.EQ 3
  309                   
  310                   * TIM_CONTROLA control bits
  311      0080         ENABLE_INT	.EQ %10000000
  312      0040         RESET_DONE	.EQ %01000000
  313      0010         ENABLE_RELOAD	.EQ %00010000
  314      0008         ENABLE_COUNT	.EQ %00001000
  315      0007         AUD_CLOCK_MASK	.EQ %00000111
  316                   * Clock settings
  317      0007         AUD_LINKING	.EQ %00000111
  318      0006         AUD_64		.EQ %00000110
  319      0005         AUD_32		.EQ %00000101
  320      0004         AUD_16		.EQ %00000100
  321      0003         AUD_8		.EQ %00000011
  322      0002         AUD_4		.EQ %00000010
  323      0001         AUD_2		.EQ %00000001
  324      0000         AUD_1		.EQ %00000000
  325                   
  326                   * TIM_CONTROLB control bits
  327      0008         TIMER_DONE	.EQ %00001000
  328      0004         LAST_CLOCK	.EQ %00000100
  329      0002         BORROW_IN	.EQ %00000010
  330      0001         BORROW_OUT	.EQ %00000001
  331                   
  332                   
  333 FD20:             AUDIO0		.DS 8	; FD20
  334 FD28:             AUDIO1		.DS 8	; FD28
  335 FD30:             AUDIO2		.DS 8	; FD30
  336 FD38:             AUDIO3		.DS 8	; FD38
  337                   * Here's the audio channel offsets
  338      0000         AUD_VOLCNTRL	.EQ 0
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page    9
                        6502:include/harddefs.i         14:50:57  

  339      0001         AUD_FEEDBACK	.EQ 1
  340      0002         AUD_OUTPUT	.EQ 2
  341      0003         AUD_SHIFT	.EQ 3
  342      0004         AUD_BACKUP	.EQ 4
  343      0005         AUD_CONTROL	.EQ 5
  344      0006         AUD_COUNTER	.EQ 6
  345      0007         AUD_OTHER	.EQ 7
  346                   * The AUD_CONTROL bits are almost identical to the TIM
  347                   * Here's the AUD_CONTROL control bits that are differe
  348                   * control bits.
  349                   * See TIM_CONTROLA above for the other definitions
  350      0080         FEEDBACK_7		.EQ %10000000
  351      0020         ENABLE_INTEGRATE	.EQ %00100000
  352                   
  353                   
  354                   ; Stereo control registers follow
  355                   ; Stereo capability does not exist in all Lynxes
  356                   ; Left and right may be reversed, and if so will be co
  357                   ; release
  358                   
  359 FD40:             		.OR $FD40
  360 FD40:             ATTENREG0	.DS 1	; FD40	; Stereo attenuation registers
  361 FD41:             ATTENREG1	.DS 1	; FD41
  362 FD42:             ATTENREG2	.DS 1	; FD42
  363 FD43:             ATTENREG3	.DS 1	; FD43
  364      00F0         LEFT_ATTENMASK	.EQ %11110000
  365      000F         RIGHT_ATTENMASK	.EQ %00001111
  366                   
  367 FD44:             MPAN		.DS 1	; FD44	; Stereo attenuation select registe
  368                   
  369 FD45:             		.OR $FD50
  370 FD50:             MSTEREO		.DS 1	; FD50	; Stereo channel disable registe
  371                   
  372                   ; bit definitions for MPAN and MSTEREO registers
  373      0080         LEFT3_SELECT	.EQ %10000000
  374      0040         LEFT2_SELECT	.EQ %01000000
  375      0020         LEFT1_SELECT	.EQ %00100000
  376      0010         LEFT0_SELECT	.EQ %00010000
  377      0008         RIGHT3_SELECT	.EQ %00001000
  378      0004         RIGHT2_SELECT	.EQ %00000100
  379      0002         RIGHT1_SELECT	.EQ %00000010
  380      0001         RIGHT0_SELECT	.EQ %00000001
  381                   
  382                   
  383 FD51:             		.OR $FD80
  384 FD80:             INTRST		.DS 1	; FD80	; Interrupt Reset and Set registe
  385 FD81:             INTSET		.DS 1	; FD81
  386                   
  387                   * Interrupt Reset and Set bit definitions
  388      0080         TIMER7_INT	.EQ %10000000
  389      0040         TIMER6_INT	.EQ %01000000
  390      0020         TIMER5_INT	.EQ %00100000
  391      0010         SERIAL_INT	.EQ %00010000
  392      0008         TIMER3_INT	.EQ %00001000
  393      0004         TIMER2_INT	.EQ %00000100
  394      0002         TIMER1_INT	.EQ %00000010
  395      0001         TIMER0_INT	.EQ %00000001
  396      0004         VERTICAL_INT	.EQ TIMER2_INT
  397      0001         HORIZONTAL_INT	.EQ TIMER0_INT
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page   10
                        6502:include/harddefs.i         14:50:57  

  398                   
  399 FD82:             		.OR $FD86
  400 FD86:             AUDIN		.DS 1	; FD86	; Audio in -or- cartridge r/w line
  401 FD87:             SYSCTL1		.DS 1	; FD87
  402                   * SYSCTL1 bit definitions
  403      0002         POWERON		.EQ %00000010
  404      0001         CART_ADDR_STROBE .EQ %00000001
  405                   
  406 FD88:             MIKEYHREV	.DS 1	; FD88	; Mikey hardware rev
  407 FD89:             MIKEYSREV	.DS 1	; FD89	; Mikey software rev
  408 FD8A:             IODIR		.DS 1	; FD8A
  409 FD8B:             IODAT		.DS 1	; FD8B
  410                   * Here's the IODIR and IODAT bit definitions
  411      0010         AUDIN_BIT	.EQ %00010000	; note that there is also the 
  412      0010         READ_ENABLE	.EQ %00010000	; same bit for AUDIN_BIT
  413      0008         RESTLESS	.EQ %00001000
  414      0004         NOEXP		.EQ %00000100	; If set, redeye is not connected
  415      0002         CART_ADDR_DATA	.EQ %00000010
  416      0002         CART_POWER_OFF	.EQ %00000010	; same bit for CART_ADDR_
  417      0001         EXTERNAL_POWER	.EQ %00000001
  418                   
  419 FD8C:             SERCTL		.DS 1	; FD8C	; Serial control
  420                   * Here's the SERCTL bit definitions when writing
  421      0080         TXINTEN		.EQ %10000000
  422      0040         RXINTEN		.EQ %01000000
  423                   ;unused		.EQ %00100000	; Leave unused bit 0 for future
  424      0010         PAREN		.EQ %00010000
  425      0008         RESETERR	.EQ %00001000
  426      0004         TXOPEN		.EQ %00000100
  427      0002         TXBRK		.EQ %00000010
  428      0001         PAREVEN		.EQ %00000001
  429                   * Here's the SERCTL bit definitions when reading
  430      0080         TXRDY		.EQ %10000000
  431      0040         RXRDY		.EQ %01000000
  432      0020         TXEMPTY		.EQ %00100000
  433      0010         PARERR		.EQ %00010000
  434      0008         OVERRUN		.EQ %00001000
  435      0004         FRAMERR		.EQ %00000100
  436      0002         RXBRK		.EQ %00000010
  437      0001         PARBIT		.EQ %00000001
  438                   
  439 FD8D:             SERDAT		.DS 1	; FD8D	; Serial data
  440                   
  441                   
  442                   
  443 FD8E:             		.OR $FD90
  444 FD90:             SDONEACK	.DS 1	; FD90	; Suzy done ack
  445 FD91:             CPUSLEEP	.DS 1	; FD91	; zzz
  446 FD92:             DISPCTL		.DS 1	; FD92	; Display control
  447                   * Here are the DISPCTL bit definitions
  448      0008         DISP_COLOR	.EQ %00001000	; must be set to 1
  449      0004         DISP_FOURBIT	.EQ %00000100	; must be set to 1
  450      0002         DISP_FLIP	.EQ %00000010
  451      0001         DMA_ENABLE	.EQ %00000001	; must be set to 1
  452                   
  453 FD93:             PBKUP		.DS 1	; FD93	; Display's magic 'P' count
  454 FD94:             DISPADRL	.DS 1	; FD94	; Start of display
  455 FD95:             DISPADRH	.DS 1	; FD95
  456                   
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page   11
                        6502:include/harddefs.i         14:50:57  

  457 FD96:             		.OR $FD9C
  458 FD9C:             MTEST0		.DS 1	; FD9C	; System test vectors, see spec f
  459 FD9D:             MTEST1		.DS 1	; FD9D
  460 FD9E:             MTEST2		.DS 1	; FD9E
  461                   
  462                   * The Color registers
  463 FD9F:             		.OR $FDA0
  464 FDA0:             GREEN0		.DS 1	; FDA0
  465 FDA1:             GREEN1		.DS 1	; FDA1
  466 FDA2:             GREEN2		.DS 1	; FDA2
  467 FDA3:             GREEN3		.DS 1	; FDA3
  468 FDA4:             GREEN4		.DS 1	; FDA4
  469 FDA5:             GREEN5		.DS 1	; FDA5
  470 FDA6:             GREEN6		.DS 1	; FDA6
  471 FDA7:             GREEN7		.DS 1	; FDA7
  472 FDA8:             GREEN8		.DS 1	; FDA8
  473 FDA9:             GREEN9		.DS 1	; FDA9
  474 FDAA:             GREENA		.DS 1	; FDAA
  475 FDAB:             GREENB		.DS 1	; FDAB
  476 FDAC:             GREENC		.DS 1	; FDAC
  477 FDAD:             GREEND		.DS 1	; FDAD
  478 FDAE:             GREENE		.DS 1	; FDAE
  479 FDAF:             GREENF		.DS 1	; FDAF
  480                   
  481 FDB0:             BLUERED0	.DS 1	; FDB0
  482 FDB1:             BLUERED1	.DS 1	; FDB1
  483 FDB2:             BLUERED2	.DS 1	; FDB2
  484 FDB3:             BLUERED3	.DS 1	; FDB3
  485 FDB4:             BLUERED4	.DS 1	; FDB4
  486 FDB5:             BLUERED5	.DS 1	; FDB5
  487 FDB6:             BLUERED6	.DS 1	; FDB6
  488 FDB7:             BLUERED7	.DS 1	; FDB7
  489 FDB8:             BLUERED8	.DS 1	; FDB8
  490 FDB9:             BLUERED9	.DS 1	; FDB9
  491 FDBA:             BLUEREDA	.DS 1	; FDBA
  492 FDBB:             BLUEREDB	.DS 1	; FDBB
  493 FDBC:             BLUEREDC	.DS 1	; FDBC
  494 FDBD:             BLUEREDD	.DS 1	; FDBD
  495 FDBE:             BLUEREDE	.DS 1	; FDBE
  496 FDBF:             BLUEREDF	.DS 1	; FDBF
  497                   
  498                   
  499                   * The Map Control register
  500 FDC0:             		.OR $FFF9
  501 FFF9:             MAPCTL		.DS 1	; FFF9
  502                   * These are the MAPCTL flag definitions
  503      0080         TURBO_DISABLE	.EQ %10000000
  504      0008         VECTOR_SPACE	.EQ %00001000	; 1 maps RAM into specified
  505      0004         ROM_SPACE	.EQ %00000100
  506      0002         MIKEY_SPACE	.EQ %00000010
  507      0001         SUZY_SPACE	.EQ %00000001
  508                   
  509                   * 65C02 hardware interrupt and reset vectors
  510 FFFA:             CPU_NMI		.DS 2	; FFFA
  511 FFFC:             CPU_RESET	.DS 2	; FFFC
  512 FFFE:             CPU_IRQ			; FFFE
  513                   
  514                   
  515                   
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page   12
                                                        14:50:57  

   29                   
   30                   		;------	Include the system's zpage data declarations
   31                   		;------	after the include file inclusions and 
   32                   		;------	before any code or data declarations
   33                   		.IN	6502:macros/zpage.mac
    1                   ; ----------------------------------------------------
    2                   ; Zero-Page memory allocation macros
    3                   ;  Created:  Mike Ireton, 10/07/88
    4                   ; Modified:  RJ Mical, 14 Nov 88
    5                   ; 
    6                   ; BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPAGE) 
    7                   ; and END_ZPAGE (or END_ALLOCATE_ZEROPAGE) are two ver
    8                   ; for safely allocating zero-page memory space in any 
    9                   ; If you use these macros around every z-page memory a
   10                   ; the macros will track your allocations and dole out 
   11                   ; memory locations every time you ask for them.  This 
   12                   ; emulator to make z-page allocations without stepping
   13                   ; allows you to make z-page allocations locally in the
   14                   ; rather than making all your allocations in one file 
   15                   ; down all free zero page locations and figuring out w
   16                   ; 
   17                   ; -- TO USE ---
   18                   ; This file defines a redefinable value named NEXTZPG,
   19                   ; to 0.  NEXTZPG holds the address of the next availab
   20                   ; which in most cases will be at memory location $00. 
   21                   ; zero-page memory locations starting from $00, you ca
   22                   ; a value of your own choice after you've included thi
   23                   ; used any of this file's macros.  For example, say th
   24                   ; to stash away memory locations $00 through $0F.  At 
   25                   ; before calling BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPA
   26                   ;                .IN    6502:macros/zpage.mac
   27                   ;   NEXTZPG     .=     $10
   28                   ; 
   29                   ; Then, when the need arises for zero page variables, 
   30                   ; BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPAGE).  This will
   31                   ; labels and re-assign the assembler's location counte
   32                   ; zero-page (as pointed to by the current NEXTZPG).  A
   33                   ; end with END_ZPAGE (or END_ALLOCATE_ZEROPAGE), which
   34                   ; z-page offset and restore the program counter.  For 
   35                   ;   RoutineX                        RoutineX
   36                   ;           BEGIN_ZPAGE                     BEGIN_ALLO
   37                   ;   ZPG1    .DS    2      - or -    ZPG1    .DS    2
   38                   ;   COUNT   .DS    1                COUNT   .DS    1
   39                   ;           END_ZPAGE                       END_ALLOCA
   40                   ;           STA    ZPG1                     STA    ZPG
   41                   ; 
   42                   ; Remember that you should only define data areas betw
   43                   ; Anything else is dangerous and should be avoided (an
   44                   ; you should find another line of work... :-)  )
   45                   ; 
   46                   ; Also, note that these macros use another redefinable
   47                   ; record and restore the program counter 
   48                   
   49      0000         NEXTZPG	.= $00
   50                   
   51                   	#MACRO BEGIN_ZPAGE
   52 MACRO             TEMPORG	  .= *
   53 MACRO             	  .ORG NEXTZPG
   54                   	#ENDM
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page   13
                        6502:macros/zpage.mac           14:50:57  

   55                   
   56                   	#MACRO BEGIN_ALLOCATE_ZEROPAGE
   57 MACRO             	  BEGIN_ZPAGE
   58                   	#ENDM
   59                   
   60                   
   61                   	#MACRO END_ZPAGE
   62 MACRO             NEXTZPG	  .= *
   63 MACRO             	  #IF NEXTZPG > $0100
   64 MACRO             	    .ECHO "ERROR:  z-page allocations went out of pag
   65 MACRO             	  #ENDIF
   66 MACRO             	  .ORG TEMPORG
   67                   	#ENDM
   68                   
   69                   	#MACRO END_ALLOCATE_ZEROPAGE
   70 MACRO             	  END_ZPAGE
   71                   	#ENDM
   72                   
   73                   
   74                   
   34                   		.IN	6502:src/syszpage.src
    1                   
    2                   * === syszpage.src ===================================
    3                   *
    4                   * System Zero-Page Data Allocations  --  the 6502 Side
    5                   *
    6                   * Copyright (C) 1988, Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   *
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   13                   * 19 Apr 89	-RJ		Added description of rule for using s
   14                   * 22 Mar 89	-RJ		Removed the audio variables from this
   15                   * 20 Mar 89	RG Goudy	Added several new zpage pointers
   16                   * 26 Jan 89	-RJ		Got rid of Interruptus
   17                   * 26-Dec-88	=RJ Mical=	Created this file from sysdata.
   18                   *
   19                   * ====================================================
   20                   
   21                   
   22                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   23                   *
   24                   * This file should be included before any source code 
   25                   *
   26                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   27                   
   28                   
   29                   
   30                   * System programmers note:  the sysptrs are defined as
   31                   * pointers.  These can't be used during interrupt code
   32                   * no promises regarding the usage of these for anythin
   33                   * while using one of these is a dangerous thing to do
   34                   		BEGIN_ZPAGE
    1      FFFE       + TEMPORG	  .= *
    2 FFFE:           + 	  .ORG NEXTZPG
    3                 + 
   35 0000:             sysptr		.DS 2
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page   14
                        6502:src/syszpage.src           14:50:57  

   36 0002:             sysptr2		.DS 2
   37 0004:             sysptr3		.DS 2
   38                   		END_ZPAGE
    1      0006       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 0006:           + 	  .ORG TEMPORG
    6                 + 
   39                   
   40                   
   41                   
   35                   
   36                   		.IN	6502:macros/sys.mac
    1                   ; Wednesday 27-Jun-90 11:49:43
    2                   * == sys.mac =========================================
    3                   *
    4                   * System Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 20-Jun-90	SHL		RAMCART_USER support added
   12                   * 28-Mar-90	SHL		INITINT new clears and resets serial 
   13                   *				if SERIALPORT_USER defined
   14                   * 22-Mar-90	SHL		INITINT now vectors all IRQS to IntRe
   15                   *				instead of user supplied RTS
   16                   * 20-Mar-90	SHL		Removed SEI, CLI from INITINT macro
   17                   * 7-Mar-90	SHL		DISPCTL_RAM now initialized in INITSYS
   18                   * 9-Feb-90	SHL		Modified BRK_USER support to force bre
   19                   *				Howard board, unless user uses the SET_BRK
   20                   *				macro to redirect breaks
   21                   *				INITINT is now required before any use of
   22                   *				INITEOF, INITEOL or SET_DISPLAY... macros
   23                   *				Added HBRK macro
   24                   *				Moved initialization of MAPCTL to INITSYS
   25                   *				Removed HFIX1 macros
   26                   * 31 May 89	-RJ		Added BRK_USER support to INITINT mac
   27                   *				Killed call to InitSys
   28                   *				Added SET_BRK macro
   29                   * 25 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   30                   * 22 May 89	-RJ		Changed init'ing of IODIR's LIGHT_OFF
   31                   *				RESTLESS, also now init IODAT too
   32                   * 16 May 89	-RJ		Added setting TXOPEN to SERCTL in INI
   33                   * 11 May 89	-RJ		Moved declaration of sysIntTable to s
   34                   * 10 May 89	-RJ		Changed CART_STROBE to CART_ADDR_DATA
   35                   * 1 May 89	-RJ		Added the INITINTS macro for user-cont
   36                   *				interrupt table handling.  Also defined
   37                   *				and allow redefinition of sysIntTable, which
   38                   *				is now used in the display.src file
   39                   * 20 Apr 89	-RJ		Added initialization of IODIR and IOD
   40                   * 6 Apr 89	-RJ		Moved init of SPRSYS into INITSYS
   41                   * 19 Mar 89	-RJ		Added HFIX1 macros, modified INITSYS 
   42                   * 18 Mar 89	=RJ Mical=	Created this file!
   43                   *
   44                   * ====================================================
   45                   
   46                   
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page   15
                        6502:macros/sys.mac             14:50:57  

   47                   * HBRK macro forces a break on a Howard board.  On a c
   48                   * executed as one-byte one-cycle NOP.
   49                   	#MACRO HBRK
   50 MACRO             	.HS 13
   51                   	#ENDM
   52                   
   53                   
   54                   * Do some needed hardware initialization to get system
   55                   	#MACRO INITSYS
   56 MACRO             
   57 MACRO             	LDA #DISP_COLOR+DISP_FOURBIT+DMA_ENABLE
   58 MACRO             	STA DISPCTL_RAM
   59 MACRO             
   60 MACRO             	LDA #LEFTHAND		; the equates have been defined to pre
   61 MACRO             	STA SPRSYS_RAM
   62 MACRO             	STA SPRSYS
   63 MACRO             
   64 MACRO             	LDA #VECTOR_SPACE	; map in all RAM except for CPU vec
   65 MACRO             	STA MAPCTL
   66 MACRO             
   67 MACRO             	;------	Set parallel CART_ADDR_DATA and RESTLESS as o
   68 MACRO             	;------ If RAMCART_USER, set AUDIN (READ_ENABLE) as o
   69 MACRO             	;------	all others as input
   70 MACRO              #IFDEF RAMCART_USER
   71 MACRO             	LDA #CART_ADDR_DATA+RESTLESS+READ_ENABLE
   72 MACRO              #ELSE
   73 MACRO             	LDA #CART_ADDR_DATA+RESTLESS
   74 MACRO              #ENDIF
   75 MACRO             	STA IODAT_RAM
   76 MACRO             	STA IODAT
   77 MACRO             	STA IODIR_RAM
   78 MACRO             	STA IODIR
   79 MACRO             
   80 MACRO             	LDA #TXOPEN	; Turn off serial IRQs before starting
   81 MACRO             	STA SERCTL	;  and make sure serial port is open-colle
   82 MACRO             
   83 MACRO             	  #IFDEF AUTO_TIMEOUT_USER
   84 MACRO             		STZ TimeoutCount+1
   85 MACRO             		STZ TimeoutCount+2
   86 MACRO             	  #ENDIF
   87 MACRO             
   88                   	#ENDMACRO
   89                   
   90                   
   91                   	#MACRO	INITINT
   92 MACRO             sysIntTable	.EQ ?0
   93 MACRO             
   94 MACRO             		;------	Set the break and int vectors to point to ou
   95 MACRO             		LDA #<UserIntHandler
   96 MACRO             		STA CPU_IRQ
   97 MACRO             		LDA #>UserIntHandler
   98 MACRO             		STA CPU_IRQ+1
   99 MACRO             
  100 MACRO             		LDX #8*2-1
  101 MACRO             ??	.= *
  102 MACRO             		  LDA #>IntReturn
  103 MACRO             		  STA ?0,X
  104 MACRO             		  DEX
  105 MACRO             		  LDA #<IntReturn
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page   16
                        6502:macros/sys.mac             14:50:57  

  106 MACRO             		  STA ?0,X
  107 MACRO             		  DEX
  108 MACRO             		 BPL ??
  109 MACRO             
  110 MACRO             	  #IFDEF BRK_USER
  111 MACRO             		LDA CPU_NMI
  112 MACRO             		STA BRK_vector+2
  113 MACRO             		LDA CPU_NMI+1
  114 MACRO             		STA BRK_vector+3
  115 MACRO             	  #ENDIF ; of #IFDEF BRK_USER
  116 MACRO             
  117 MACRO             	  #IFDEF SERIALPORT_USER
  118 MACRO             		lda #TXOPEN
  119 MACRO             		sta SERCTL
  120 MACRO             		lda #SERIAL_INT
  121 MACRO             		sta INTRST
  122 MACRO             	  #ENDIF
  123 MACRO             
  124                   	#ENDMACRO
  125                   
  126                   
  127                   	#MACRO SET_BRK
  128 MACRO             		LDA #<?0
  129 MACRO             		STA BRK_vector+2
  130 MACRO             		LDA #>?0
  131 MACRO             		STA BRK_vector+3
  132 MACRO             		LDA #$EA	; nop
  133 MACRO             		STA BRK_vector
  134                   	#ENDMACRO
  135                   
  136                   
  137                   	#MACRO RESET_TIMEOUT
  138 MACRO             		STZ TimeoutCount+1	; else reset timeout counter
  139 MACRO             		STZ TimeoutCount+2
  140                   	#ENDMACRO
  141                   
  142                   
  143                   	#MACRO ECHO_VALUE
  144 MACRO             		.ECHO "Value of ?0 is ?%d0 ($?%x0)"
  145                   	#ENDMACRO
  146                   
  147                   
   37                   		.IN	6502:macros/controls.mac
    1                   
    2                   * === controls.mac ===================================
    3                   * 
    4                   * Apple Joystick / Switches Input Macros  --  Handy So
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, 1989, Epyx, Inc.
    8                   * 
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   12                   *				Removed GETINPUT
   13                   * 3 July 89	-RJ		The RESET_TIMEOUT logic is moved from
   14                   *				input macros to the display TIMEOUT macro
   15                   * 15 Jun 89	Carl Mey	Modified GETSWITCH to test PAUSE_
   16                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page   17
                        6502:macros/controls.mac        14:50:57  

   17                   *  2 Jan 89	-RJ		Added GETINPUT, which you must call b
   18                   *				GETJOY and/or GETSWITCH.
   19                   * Mid 88	=RJ Mical=	Created this file!
   20                   * 
   21                   * ====================================================
   22                   
   23                   
   24                   
   25                   	#MACRO GETJOY
   26 MACRO             	  LDA JOYSTICK
   27                   	#ENDMACRO
   28                   
   29                   
   30                   
   31                   	#MACRO GETSWITCH
   32 MACRO             	  LDA SWITCHES
   33                   	#ENDMACRO
   34                   
   35                   
   36                   
   38                   
   39 FFFE:             		.ORG	$2000
   40                   		.RUN	$2000
   41                   
   42 2000:             Start
   43                   * Set up for normal operation
   44                   		INITSYS
    1 2000:A9 0D      + 	LDA #DISP_COLOR+DISP_FOURBIT+DMA_ENABLE
    2 2002:8D ** **   + 	STA DISPCTL_RAM
    3 2005:A9 08      + 	LDA #LEFTHAND		
    4 2007:8D ** **   + 	STA SPRSYS_RAM
    5 200A:8D 92 FC   + 	STA SPRSYS
    6 200D:A9 08      + 	LDA #VECTOR_SPACE	
    7 200F:8D F9 FF   + 	STA MAPCTL
    8      FALSE         #IFDEF RAMCART_USER
   10                 +  #ELSE
   11 2012:A9 0A      + 	LDA #CART_ADDR_DATA+RESTLESS
   12                 +  #ENDIF
   13 2014:8D ** **   + 	STA IODAT_RAM
   14 2017:8D 8B FD   + 	STA IODAT
   15 201A:8D ** **   + 	STA IODIR_RAM
   16 201D:8D 8A FD   + 	STA IODIR
   17 2020:A9 04      + 	LDA #TXOPEN	
   18 2022:8D 8C FD   + 	STA SERCTL	
   19      FALSE        	  #IFDEF AUTO_TIMEOUT_USER
   22                 + 	  #ENDIF
   23                 + 
   45                   		INITINT	InterruptTable,SafeReturn
    1      ****       + sysIntTable	.EQ InterruptTable
    2 2025:A9 **      + 		LDA #<UserIntHandler
    3 2027:8D FE FF   + 		STA CPU_IRQ
    4 202A:A9 **      + 		LDA #>UserIntHandler
    5 202C:8D FF FF   + 		STA CPU_IRQ+1
    6 202F:A2 0F      + 		LDX #8*2-1
    7      2031       + INITINT.0004	.= *
    8 2031:A9 **      + 		  LDA #>IntReturn
    9 2033:9D ** **   + 		  STA InterruptTable,X
   10 2036:CA         + 		  DEX
   11 2037:A9 **      + 		  LDA #<IntReturn
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page   18
                        testcontrols.src                14:50:57  

   12 2039:9D ** **   + 		  STA InterruptTable,X
   13 203C:CA         + 		  DEX
   14 203D:10 F2      + 		 BPL INITINT.0004
   15      TRUE       + 	  #IFDEF BRK_USER
   16 203F:AD FA FF   + 		LDA CPU_NMI
   17 2042:8D ** **   + 		STA BRK_vector+2
   18 2045:AD FB FF   + 		LDA CPU_NMI+1
   19 2048:8D ** **   + 		STA BRK_vector+3
   20                 + 	  #ENDIF 
   21      FALSE        	  #IFDEF SERIALPORT_USER
   26                 + 	  #ENDIF
   27                 + 
   46                   
   47 204B:58           		CLI
   48 204C:D8           		CLD
   49 204D:A2 FF        		LDX	#$FF
   50 204F:9A           		TXS
   51                   
   52                   
   53 2050:             Loop
   54                   * We're going to get the JOYSTICK value into A, SWITCH
   55                   * then break so the programmer can see what we've got.
   56                   		GETSWITCH
    1 2050:AD B1 FC   + 	  LDA SWITCHES
    2                 + 
   57 2053:48           		PHA
   58                   		GETJOY
    1 2054:AD B0 FC   + 	  LDA JOYSTICK
    2                 + 
   59 2057:7A           		PLY
   60                   
   61                   		HBRK
    1 2058:13         + 	.HS 13
    2                 + 
   62 2059:00           		BRK
   63 205A:EA           		NOP
   64 205B:80 F3        		BRA	Loop
   65                   
   66                   
   67 205D:             SafeReturn
   68 205D:60           		RTS
   69                   
   70                   
   71                   * ====================================================
   72                   
   73 205E:             InterruptTable	.DS	8*2
   74                   
   75                   		.IN	6502:src/sysdata.src
    1                   ; Tuesday 27-Mar-90 10:58:04
    2                   * === sysdata.src ====================================
    3                   * 
    4                   * System Data Allocations  --  the 6502 Side of Handy
    5                   * 
    6                   * Copyright (c) 1988,1990 Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   * 
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page   19
                        6502:src/sysdata.src            14:50:57  

   12                   * 27-Mar-90	SHL		Removed BufferAddrL, BufferAddrH
   13                   * 22-Mar-90	SHL		Added INTSET_RAM shadow for IRQs
   14                   * 9-Feb-90	SHL		Removed Apple emulation compatibility
   15                   * 30 May 89	-RJ		Added IODAT_RAM
   16                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   17                   * 20 Apr 89	-RJ		Added IODIR_RAM
   18                   * 19 Apr 89	-RJ		Moved DisplayFrameCount to display.sr
   19                   * 20 Mar 89	-RJ		Added DisplayFrameCount
   20                   * 13 Feb 89	-RJ		Added DisplayBuffer
   21                   * 26 Jan 88	-RJ		Ended Interruptus
   22                   * 24 Dec 88	-RJ		Added Interruptus
   23                   * 22 Dec 88	-RJ		Added DISPCTL_RAM, RenderBuffer, 
   24                   *				BufferAddrL/H, and DisplayFlags with its defs
   25                   *				Added note about .ORGing to non-zpage
   26                   * Early 88	=RJ Mical=	Created this file!
   27                   * 
   28                   * ====================================================
   29                   
   30                   
   31                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   32                   * 
   33                   * This file should be included before any of the 6502:
   34                   * 
   35                   * Note that you should .ORG to a non-zero page address
   36                   * this file.  This is because this file includes data 
   37                   * don't need to be in zero-page memory.
   38                   * 
   39                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   40                   
   41                   
   42                   * Here are the declarations of the local copies of wri
   43                   * (and read-doesn't-equal-write registers such as SPRS
   44                   * Whenever you want to make a change to one of the har
   45                   * that's write-only, you should read from this RAM cop
   46                   * and then write the value out to both the RAM copy an
   47 206E:             SPRSYS_RAM	.DS 1
   48 206F:             DISPCTL_RAM	.DS 1
   49 2070:             IODAT_RAM	.DS 1
   50 2071:             IODIR_RAM	.DS 1
   51                   
   52                   
   53                   * Display buffer pointers for use by the system displa
   54 2072:             RenderBuffer	.DS 2
   55 2074:             DisplayBuffer	.DS 2
   56                   
   57                   * Shadow of INTSET used in IRQ handler
   58 2076:             INTSET_RAM	.DS 1
   59                   
   60                   
   61      FALSE        	#IFDEF AUTO_TIMEOUT_USER
   63                   	#ENDIF
   64                   
   65                   
   66                   * The DisplayFlags field is a field that may enjoy mul
   67                   * read-modify-write operations peformed by both interr
   68                   * Because of this, any code must make sure that interr
   69                   * beginning a read-modify-write cycle, or use the TSB/
   70 2077:             DisplayFlags	.DS	1
   71                   * Here's the definitions of DisplayFlags
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page   20
                        6502:src/sysdata.src            14:50:57  

   72      0080         DISPLAY_EOFFLAG		.EQ $80	; Set every EOF
   73      0040         DISPLAY_EOLFLAG		.EQ $40	; Set every EOL
   74                   
   75                   
   76                   
   76                   		.IN	6502:src/sys.src
    1                   ; Tue Sep 18 17:43:25 1990
    2                   * === sys.src ========================================
    3                   *
    4                   * General System Source Code  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 28-Mar-90	SHL		IRQ handler quick checks for serial I
   12                   *				if SERIALPORT_USER defined now.
   13                   * 22-Mar-90	SHL		IRQ handler only touches 1 IRQ at a t
   14                   *				Individual handlers need not preserve X and A
   15                   *				IRQ handlers now required to PLX PLA RTI
   16                   *				instead of RTS
   17                   *				Renamed SafeIntRts to IntReturn, which now
   18                   *				does PLX PLA RTI
   19                   * 16-Mar-90	SHL		Modified BRK detect for 1 cycle impro
   20                   *				in the case of IRQ
   21                   * 15-Mar-90	SHL		Provided faster vector to Redeye inte
   22                   *				Serial interrupts now must PLX PLA RTI to
   23                   *				exit.
   24                   * 14-Mar-90	SHL		Added SafeIntRts
   25                   *				INITINT now vectors all IRQS to SafeIntRts
   26                   *				instead of user supplied RTS
   27                   * 26-Feb-90	SHL		Minor code tightening
   28                   * 9-Feb-90	SHL		INITINT is now required before any use
   29                   *				INITEOF, INITEOL or SET_DISPLAY... macros
   30                   *				This file can now be included before user
   31                   *				calls INITINT
   32                   * 7-Feb-90	SHL		Modified BRK_USER to force Howard Brea
   33                   * 31 May 89	-RJ		Added BRK_USER support code to UserIn
   34                   *				Removed InitSys routine
   35                   * 6 Apr 89	=RJ Mical=	Created this file!
   36                   *
   37                   * ====================================================
   38                   
   39                   
   40                   * This code is called whenever a non-NMI interrupt occ
   41                   * interrupt or execution of a software BRK).
   42                   
   43 2078:             UserIntHandler
   44 2078:48           		PHA
   45 2079:DA           		PHX
   46                   
   47      TRUE         	  #IFDEF BRK_USER
   48                   	  ;-- Check if we got here because of a BRK instructi
   49                   	  ;-- the BRK routine if so, else branch to the inter
   50 207A:BA           		TSX
   51 207B:E8           		INX
   52 207C:E8           		INX
   53 207D:E8           		INX
Epyx HandyAsm 1.12      testcontrols                    15-Apr-12514:50:57 Page   21
                        6502:src/sys.src                14:50:57  

   54 207E:BD 00 01     		LDA $0100,X		; Get a copy of the status byte
   55 2081:89 10        		bit #$10		; Check break bit
   56 2083:D0 **        		BNE brkInt		; and branch if clear (hardware int)
   57                   	  #ENDIF ; of #IFDEF BRK_USER
   58                   
   59 2085:             hardInt
   60                   		;------	We had a hardware interrupt.
   61                   		;------	Get the interrupt flags value, reset the bit
   62 2085:AD 81 FD     		LDA INTSET		; This gets the bits
   63                   
   64      FALSE        	  #IFDEF SERIALPORT_USER
   68                   	  #ENDIF
   69                   
   70 2088:8D 76 20     .02		STA INTSET_RAM
   71                   
   72                   		;------	For least set bit in the interrupt value,
   73                   		;------	vector to the routine
   74 208B:A2 00        		LDX #0
   75 208D:A9 01        		lda #1
   76 208F:2C 76 20     .00		  bit INTSET_RAM
   77 2092:D0 **        		  bne jumpIntTable
   78 2094:E8           		  INX
   79 2095:E8           		  INX
   80 2096:0A           		  asl a
   81 2097:D0 F6        		 bne .00
   82 2099:             IntReturn
   83                   		;------	At end of interrupt processing, restore the
   84                   		;------	registers and return from interrupt
   85                   
   86 2099:FA           		PLX
   87 209A:68           		PLA
   88 209B:40           		RTI
   89                   
   90                   
   91                   
   92                   
   93                   * The above interrupt dispatcher does a JSR to this li
   94                   * This code jumps to the particular handler.  The inte
   95                   * should end with an RTS, which will return control to
   96                   
   97 209C:             jumpIntTable
   98 209C:8D 80 FD     		sta INTRST	; clear interrupt we're processing
   99 209F:7C 5E 20     		JMP	(sysIntTable,X)
  100                   
  101                   
  102      TRUE         	  #IFDEF BRK_USER
  103 20A2:             brkInt
  104 20A2:FA           		PLX
  105 20A3:68           		PLA
  106                   BRK_vector	HBRK			; force BRK on Howard board
    1 20A4:13         + 	.HS 13
    2                 + 
  107 20A5:4C A4 20     		JMP BRK_vector		; Will be modified by INITINT call
  108                   	  #ENDIF ; of #IFDEF BRK_USER
  109                   
  110                   
  111                   
   77                   
   78                   		.END
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:50:57 Page   22
                                                        14:50:57  

$0040 ACCUMULATE                        $0040 ALGO_3
$0000 ASM.EQUSYMS                       $010C ASM.VERSION
$FD40 ATTENREG0                         $FD41 ATTENREG1
$FD42 ATTENREG2                         $FD43 ATTENREG3
$FD86 AUDIN                             $0010 AUDIN_BIT
$FD20 AUDIO0                            $FD28 AUDIO1
$FD30 AUDIO2                            $FD38 AUDIO3
$0000 AUD_1                             $0004 AUD_16
$0001 AUD_2                             $0005 AUD_32
$0002 AUD_4                             $0006 AUD_64
$0003 AUD_8                             $0004 AUD_BACKUP
$0007 AUD_CLOCK_MASK                    $0005 AUD_CONTROL
$0006 AUD_COUNTER                       $0001 AUD_FEEDBACK
$0007 AUD_LINKING                       $0007 AUD_OTHER
$0002 AUD_OUTPUT                        $0003 AUD_SHIFT
$0000 AUD_VOLCNTRL                      $0001 A_BUTTON
$0000 A_OFFSET                          $0000 BACKGROUND_SPRITE
$0001 BACKNONCOLL_SPRITE                $0000 BACK_SHADOW_SPRITE
MACRO BEGIN_ALLOCATE_ZEROPAGE           MACRO BEGIN_ZPAGE
$00C0 BITS_MASK                         $FDB0 BLUERED0
$FDB1 BLUERED1                          $FDB2 BLUERED2
$FDB3 BLUERED3                          $FDB4 BLUERED4
$FDB5 BLUERED5                          $FDB6 BLUERED6
$FDB7 BLUERED7                          $FDB8 BLUERED8
$FDB9 BLUERED9                          $FDBA BLUEREDA
$FDBB BLUEREDB                          $FDBC BLUEREDC
$FDBD BLUEREDD                          $FDBE BLUEREDE
$FDBF BLUEREDF                          $0002 BORROW_IN
$0001 BORROW_OUT                        $0003 BOUNDARY_SPRITE
$0015 BREAK_CONTROLS                    $0001 BRK_USER
$20A4 BRK_vector                        $0002 BSHADOW_SPRITE
$0013 BUS_MONITOR                       $0002 B_BUTTON
$0002 CART0_IO_INACTIVE                 $0004 CART1_IO_INACTIVE
$0002 CART_ADDR_DATA                    $0001 CART_ADDR_STROBE
$0002 CART_POWER_OFF                    $FC0F COLLADRH
$FC0E COLLADRL                          $FC0B COLLBASH
$FC0A COLLBASL                          $FC25 COLLOFFH
$FC24 COLLOFFL                          $0003 CONTINUE_REQUEST
$FD91 CPUSLEEP                          $FFFE CPU_IRQ
$FFFA CPU_NMI                           $FFFC CPU_RESET
$0002 DATA                              $FD95 DISPADRH
$FD94 DISPADRL                          $FD92 DISPCTL
$206F DISPCTL_RAM                       $1FE0 DISPLAY_BUFSIZE
$0080 DISPLAY_EOFFLAG                   $0040 DISPLAY_EOLFLAG
$0008 DISP_COLOR                        $0002 DISP_FLIP
$0004 DISP_FOURBIT                      $0001 DMA_ENABLE
$0001 DOWNLOAD_REQUEST                  $0001 DRAW_LEFT
$0002 DRAW_UP                           $2074 DisplayBuffer
$2077 DisplayFlags                      MACRO ECHO_VALUE
$0008 ENABLE_COUNT                      $0080 ENABLE_INT
$0020 ENABLE_INTEGRATE                  $0010 ENABLE_RELOAD
MACRO END_ALLOCATE_ZEROPAGE             $0000 END_OF_FILE
MACRO END_ZPAGE                         $0004 EVER_ON
$0001 EXTERNAL_POWER                    $0080 FEEDBACK_7
$0011 FILL_MEM                          $0004 FLIP_BUTTON
$00C0 FOUR_PER_PIXEL                    $0004 FRAMERR
MACRO GETJOY                            MACRO GETSWITCH
$0005 GO_REQUEST                        $FDA0 GREEN0
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:50:57 Page   23
                                                        14:50:57  

$FDA1 GREEN1                            $FDA2 GREEN2
$FDA3 GREEN3                            $FDA4 GREEN4
$FDA5 GREEN5                            $FDA6 GREEN6
$FDA7 GREEN7                            $FDA8 GREEN8
$FDA9 GREEN9                            $FDAA GREENA
$FDAB GREENB                            $FDAC GREENC
$FDAD GREEND                            $FDAE GREENE
$FDAF GREENF                            $FC00 HARDWARE_START
MACRO HBRK                              $FD00 HCOUNT
$0020 HFLIP                             $0007 HIDE_HOWARD_REQUEST
$FC05 HOFFH                             $FC04 HOFFL
$0001 HORIZONTAL_INT                    $0016 HOWARD_ABUS
$0017 HOWARD_BBUS                       $0018 HOWARD_CBUS
$0019 HOWARD_DBUS                       $FCC4 HOWIE
$FC15 HPOSSTRTH                         $FC14 HPOSSTRTL
$FC29 HSIZOFFH                          $FC28 HSIZOFFL
MACRO INITINT                           $2031 INITINT.0004
MACRO INITSYS                           $0002 INNER_BUTTON
$FD80 INTRST                            $FD81 INTSET
$2076 INTSET_RAM                        $FD8B IODAT
$2070 IODAT_RAM                         $FD8A IODIR
$2071 IODIR_RAM                         $FCC3 IOData
$FCC2 IOStatus                          $2099 IntReturn
$FBF0 IntTable                          $205E InterruptTable
$FCB0 JOYSTICK                          $0080 JOY_DOWN
$0010 JOY_LEFT                          $0020 JOY_RIGHT
$0040 JOY_UP                            $0012 LARGE_DATA
$0004 LAST_CLOCK                        $FCC0 LEDS
$0010 LEFT0_SELECT                      $0020 LEFT1_SELECT
$0040 LEFT2_SELECT                      $0080 LEFT3_SELECT
$0008 LEFTHAND                          $0008 LEFTHANDED
$00F0 LEFT_ATTENMASK                    $0080 LITERAL
$2050 Loop                              $FFF9 MAPCTL
$FC55 MATHA                             $FC54 MATHB
$FC53 MATHC                             $0020 MATHCARRY
$FC52 MATHD                             $FC63 MATHE
$FC62 MATHF                             $FC61 MATHG
$FC60 MATHH                             $FC6F MATHJ
$FC6E MATHK                             $FC6D MATHL
$FC6C MATHM                             $FC57 MATHN
$FC56 MATHP                             $0040 MATHWARNING
$0080 MATHWORKING                       $FD88 MIKEYHREV
$FD89 MIKEYSREV                         $FD00 MIKEY_BASE
$0002 MIKEY_SPACE                       $0010 MONITOR_BYTECOUNT
$0001 MONITOR_I                         $F900 MONITOR_RAM_RESERVED
$00F8 MONITOR_ZP_RESERVED               $FD44 MPAN
$FD50 MSTEREO                           $FD9C MTEST0
$FD9D MTEST1                            $FD9E MTEST2
$0006 NEXTZPG                           $0004 NOEXP
$0005 NONCOLL_SPRITE                    $0000 NOP_REQUEST
$0004 NORMAL_SPRITE                     $0020 NO_COLLIDE
$0000 ONE_PER_PIXEL                     $0008 OPTION1_BUTTON
$0004 OPTION2_BUTTON                    $0001 ORIGIN
$0001 OUTER_BUTTON                      $0008 OVERRUN
$0001 PARBIT                            $0010 PAREN
$0010 PARERR                            $0001 PAREVEN
$0001 PAUSE_SWITCH                      $FD93 PBKUP
$0004 PC_OFFSET                         $0002 POWERON
$FC2F PROCADRH                          $FC2E PROCADRL
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:50:57 Page   24
                                                        14:50:57  

$0006 P_OFFSET                          $FCB2 RCART_0
$FCB3 RCART_1                           $0010 READ_ENABLE
$0010 REGISTER                          $0007 REGISTER_BYTECOUNT
$0010 RELOAD_HV                         $0020 RELOAD_HVS
$0030 RELOAD_HVST                       $0030 RELOAD_MASK
$0000 RELOAD_NONE                       $0008 RESETERR
$0040 RESET_DONE                        MACRO RESET_TIMEOUT
$0008 RESTART_BUTTON                    $0008 RESTLESS
$0008 REUSE_PALETTE                     $0001 RIGHT0_SELECT
$0002 RIGHT1_SELECT                     $0004 RIGHT2_SELECT
$0008 RIGHT3_SELECT                     $000F RIGHT_ATTENMASK
$001A ROM                               $0004 ROM_SPACE
$0003 RUN_ADDRESS                       $0002 RXBRK
$0040 RXINTEN                           $0040 RXRDY
$2072 RenderBuffer                      $FC2D SCBADRH
$FC2C SCBADRL                           $FC11 SCBNEXTH
$FC10 SCBNEXTL                          $FC23 SCVPOSH
$FC22 SCVPOSL                           $FD90 SDONEACK
$0006 SEE_HOWARD_REQUEST                $FD8C SERCTL
$FD8D SERDAT                            $FD10 SERIALRATE
$0010 SERIAL_INT                        MACRO SET_BRK
$0007 SHADOW_SPRITE                     $0080 SIGNMATH
$0004 SKIP_SPRITE                       $0004 SLAVE_REQUEST
$FC82 SPRCOLL                           $FC80 SPRCTL0
$FC81 SPRCTL1                           $FC13 SPRDLINEH
$FC12 SPRDLINEL                         $FC21 SPRDOFFH
$FC20 SPRDOFFL                          $FC91 SPRGO
$FC19 SPRHSIZH                          $FC18 SPRHSIZL
$FC83 SPRINIT                           $0002 SPRITESTOP
$0002 SPRITETOSTOP                      $0001 SPRITEWORKING
$0001 SPRITE_GO                         $FC92 SPRSYS
$206E SPRSYS_RAM                        $FC1B SPRVSIZH
$FC1A SPRVSIZL                          $FC1D STRETCHH
$FC1C STRETCHL                          $FC90 SUZYBUSEN
$FC88 SUZYHREV                          $FC89 SUZYSREV
$FC00 SUZY_BASE                         $0001 SUZY_SPACE
$FCB1 SWITCHES                          $FD87 SYSCTL1
$0003 S_OFFSET                          $205D SafeReturn
$2000 Start                             $FFFE TEMPORG
$0080 THREE_PER_PIXEL                   $FC03 TILTACUMH
$FC02 TILTACUML                         $FC1F TILTH
$FC1E TILTL                             $FD00 TIMER0
$0001 TIMER0_INT                        $FD04 TIMER1
$0002 TIMER1_INT                        $FD08 TIMER2
$0004 TIMER2_INT                        $FD0C TIMER3
$0008 TIMER3_INT                        $FD10 TIMER4
$FD14 TIMER5                            $0020 TIMER5_INT
$FD18 TIMER6                            $0040 TIMER6_INT
$FD1C TIMER7                            $0080 TIMER7_INT
$0008 TIMER_DONE                        $0000 TIM_BACKUP
$0001 TIM_CONTROLA                      $0003 TIM_CONTROLB
$0002 TIM_COUNT                         $FC01 TMPADRH
$FC00 TMPADRL                           $0014 TRACE
$0080 TURBO_DISABLE                     $0040 TWO_PER_PIXEL
$0002 TXBRK                             $0020 TXEMPTY
$0080 TXINTEN                           $0004 TXOPEN
$0080 TXRDY                             $0004 UNSAFEACCESS
$0004 UNSAFEACCESSRST                   $0002 UPLOAD_REQUEST
$0002 UP_CURRENT_PAGE                   $0005 UP_HAHDATA
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:50:57 Page   25
                                                        14:50:57  

$0004 UP_MEMWATCH                       $0003 UP_REGISTERS
$0001 UP_THIS_PAGE                      $2078 UserIntHandler
$FD08 VCOUNT                            $0008 VECTOR_SPACE
$0004 VERTICAL_INT                      $0010 VFLIP
$FC0D VIDADRH                           $FC0C VIDADRL
$FC09 VIDBASH                           $FC08 VIDBASL
$FC07 VOFFH                             $FC06 VOFFL
$FC17 VPOSSTRTH                         $FC16 VPOSSTRTL
$FC27 VSIZACUMH                         $FC26 VSIZACUML
$FC2B VSIZOFFH                          $FC2A VSIZOFFL
$0010 VSTRETCH                          $0010 VSTRETCHING
$0006 XOR_SHADOW_SPRITE                 $0006 XOR_SPRITE
$0001 X_OFFSET                          $0002 Y_OFFSET
$20A2 brkInt                            $2085 hardInt
$209C jumpIntTable                      $205E sysIntTable
$0000 sysptr                            $0002 sysptr2
$0004 sysptr3                           
