
* === testhprint.src ========================================================
* 
* Test HandyPrint Routines  --  Handy Software
* 
* Confidential and Proprietary
* Copyright (C) 1988, 1989, Epyx, Inc.
* 
* Date		Name		Description
* ---------	--------------	----------------------------------------------
* 7-Mar-90	SHL		Remove DISPLAY_ON call
* 6-Mar-90	SHL		Now waits for button press instead of continue
*				command from Handebug
* 9-Feb-90	SHL		Updated for compatibility with 1.1 release
* 18 Apr 89	-RJ		Made all sprites non-colliding
* 6 Apr 89	-RJ		Added sys.mac, sys.src, and INITSYS
* 23 Mar 89	-RJ		Include sys.mac, invoke INITSYS
* 17 Mar 89	-RJ		Added outline text sprites
* 10 Mar 89	-RJ		Turn off all collisions
* 9-Feb-89	=RJ Mical=	Created this file!
* 
* ===========================================================================



		.65C02


* Define BRK_USER to do debugging.
BRK_USER	.EQU	1

EOF_USER	.EQU	1
; EOL_USER	.EQU	1


HOFFSET_PRESET	.EQU	10
VOFFSET_PRESET	.EQU	10
TEXT_X		.EQU	HOFFSET_PRESET+1
TEXT_Y		.EQU	VOFFSET_PRESET+30



		.LIST	OFF

		.IN	6502:include/harddefs.i
		.IN	6502:include/monitor.i
		.IN	6502:include/sprite.i
		.IN	6502:include/hprint.i

		;------	Include the system's zpage data declarations 
		;------	after the include file inclusions and 
		;------	before any code or data declarations
		.IN	6502:macros/zpage.mac
		.IN	6502:src/syszpage.src

		.IN	6502:macros/sys.mac
		.IN	6502:macros/controls.mac
		.IN	6502:macros/handymath.mac
		.IN	6502:macros/sprite.mac
		.IN	6502:macros/display.mac
		.IN	6502:macros/hprint.mac

		.LIST	ON



; Here we declare the type and height of font we want
; NOTE:  both of these constants must be declared
FONT_TYPE	.EQU	HPR_DIGIT+HPR_UPPER+HPR_PUNC
FONT_HEIGHT	.EQU	7



TEXT_BUF_WIDTH	.EQU	{20+1}


		;------	Make sure all our ASCII is defined in the alternate 
		;------	character set that will match our font
		HPR_CHARSET


		.ORG	$2000
		.RUN	Start

Start
		INITSYS
		INITINT	InterruptTable,SafeReturn

		CLI
		CLD
		LDX	#$FF
		TXS

		;------	Set up the display, and then turn it on
		SETDISP_60
		INITEOF
		INITSUZY
		SETDBUF	Buffer1,Buffer2
		RGB16	TestPalette

		LDA	#HOFFSET_PRESET
		HOFF8
		LDA	#VOFFSET_PRESET
		VOFF8

		STZ	TextIndex
		INITLIT	TextBuffer,TEXT_BUF_WIDTH

		;------	Turn off all collisions
		LDA	SPRSYS_RAM
		ORA	#NO_COLLIDE
		STA	SPRSYS_RAM
		STA	SPRSYS

TextLoop
		LDX	TextIndex
		CPX	#TextsHigh-TextsLow
		BCC	.00
		LDX	#0
.00		LDA	TextsLow,X
		STA	TextPointer
		LDA	TextsHigh,X
		STA	TextPointer+1

		INX
		STX	TextIndex

		;------	Print text into our buffer
		HPRINT	TextPointer,1,TextBuffer

		;------	Display our buffer
		SPRITES	EraseSprite,0
		DBUF_DISPLAY
		WAITEOF

.01		GETJOY
		BNE .01

		WAITEOF

.02		GETJOY
		BEQ .02

		JMP	TextLoop


SafeReturn
		RTS


		.LIST	OFF
		.IN	6502:src/sysdata.src
		.IN	6502:src/sys.src
		.IN	6502:src/display.src
		.IN	6502:src/hprint.src

		;------	Load the plain font
		HPRFONT	plain
		.LIST	ON



; === Variables and Data ====================================================

TextIndex	.DS	1
TextsLow	.BYTE	<HelloWorld,<HelloWorld1,<HelloWorld2,<HelloWorld3
TextsHigh	.BYTE	>HelloWorld,>HelloWorld1,>HelloWorld2,>HelloWorld3
HelloWorld	.ZS	"HELLO, WORLD!"
HelloWorld1	.ZS	"ABCDEFGHIJKLMNOPQRS"
HelloWorld2	.ZS	"TUVWXYZ 0123456789"
HelloWorld3	.ZS	z!"'(),-.:;?z
TextBuffer	.DS	{TEXT_BUF_WIDTH*FONT_HEIGHT}+1
TextPointer	.DS	2
InterruptTable	.DS	8*2


		.ALIGN	4
; Align the PC to the next multiple of 4, which is required by the hardware 
; for the placement of the display buffers
Buffer1		.DS	DISPLAY_BUFSIZE
		.ALIGN	4
Buffer2		.DS	DISPLAY_BUFSIZE

EraseSprite
; Handy Sprite
		.BYTE	ONE_PER_PIXEL+BACKNONCOLL_SPRITE	; Control 0
		.BYTE	RELOAD_HVST+LITERAL		; Control 1
		.BYTE	$00	; Control 2
		.WORD	TextDrop1Sprite	; Next sprite's address
		.WORD	EraseSpriteData
		.WORD	HOFFSET_PRESET	; HPos
		.WORD	VOFFSET_PRESET	; VPos
		.WORD	$A000	; HSize
		.WORD	$6600	; VSize
		.WORD	$0000	; Stretch
		.WORD	$0000	; Tilt
		.BYTE	$00	; Palette

TextDrop1Sprite
; Handy Sprite
		.BYTE	ONE_PER_PIXEL+NONCOLL_SPRITE	; Control 0
		.BYTE	RELOAD_HV+LITERAL			; Control 1
		.BYTE	$00	; Control 2
		.WORD	TextDrop2Sprite	; Next sprite's address
		.WORD	TextBuffer
		.WORD	TEXT_X-1	; HPos
		.WORD	TEXT_Y-1	; VPos
		.WORD	$0100	; HSize
		.WORD	$0100	; VSize
		.BYTE	$02	; Palette

TextDrop2Sprite
; Handy Sprite
		.BYTE	ONE_PER_PIXEL+NONCOLL_SPRITE	; Control 0
		.BYTE	RELOAD_HV+LITERAL			; Control 1
		.BYTE	$00	; Control 2
		.WORD	TextDrop3Sprite	; Next sprite's address
		.WORD	TextBuffer
		.WORD	TEXT_X-1	; HPos
		.WORD	TEXT_Y+1	; VPos
		.WORD	$0100	; HSize
		.WORD	$0100	; VSize
		.BYTE	$02	; Palette

TextDrop3Sprite
; Handy Sprite
		.BYTE	ONE_PER_PIXEL+NONCOLL_SPRITE	; Control 0
		.BYTE	RELOAD_HV+LITERAL			; Control 1
		.BYTE	$00	; Control 2
		.WORD	TextDrop4Sprite	; Next sprite's address
		.WORD	TextBuffer
		.WORD	TEXT_X+1	; HPos
		.WORD	TEXT_Y-1	; VPos
		.WORD	$0100	; HSize
		.WORD	$0100	; VSize
		.BYTE	$02	; Palette

TextDrop4Sprite
; Handy Sprite
		.BYTE	ONE_PER_PIXEL+NONCOLL_SPRITE	; Control 0
		.BYTE	RELOAD_HV+LITERAL			; Control 1
		.BYTE	$00	; Control 2
		.WORD	TextSprite	; Next sprite's address
		.WORD	TextBuffer
		.WORD	TEXT_X+1	; HPos
		.WORD	TEXT_Y+1	; VPos
		.WORD	$0100	; HSize
		.WORD	$0100	; VSize
		.BYTE	$02	; Palette

TextSprite
; Handy Sprite
		.BYTE	ONE_PER_PIXEL+NONCOLL_SPRITE	; Control 0
		.BYTE	RELOAD_HV+LITERAL			; Control 1
		.BYTE	$00	; Control 2
		.WORD	0	; Next sprite's address
		.WORD	TextBuffer
		.WORD	TEXT_X	; HPos
		.WORD	TEXT_Y	; VPos
		.WORD	$0100	; HSize
		.WORD	$0100	; VSize
		.BYTE	$01	; Palette

EraseSpriteData
; Handy Sprite Image Data
; Bits per Pixel = 1
; Next data is down-right
		.BYTE	$02,$00
		.BYTE	$00


TestPalette
		.BYTE	$00,$0F,$00,$0F,$00,$0F,$00,$0F
		.BYTE	$01,$03,$05,$07,$09,$0B,$0D,$0F
		.BYTE	$00,$FF,$0F,$00,$F0,$0F,$FF,$F0
		.BYTE	$11,$33,$55,$77,$99,$BB,$DD,$FF


		.END

* this line not left blank to satisfy the last-line eater
