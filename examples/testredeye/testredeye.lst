Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page    1
                                                        14:13:52  

    1                   ; Thu Oct 18 11:51:44 1990
    2                   * == testredeye.src ==================================
    3                   *
    4                   * Redeye test program  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1990 Epyx, Inc.
    8                   *
    9                   * Date		Name	Description
   10                   * ---------	------	-----------------------------------
   11                   * 15-Oct-90	SHL	Added SPLIT_SEND_RECEIVE switch
   12                   * 11-Oct-90	SHL	Added REDEYE_SLOWNESS constant
   13                   * 28-Mar-90	SHL	Split out glue code into file redeye_g
   14                   * 22-Mar-90	SHL	Added AUTO_TIMEOUT_USER support, reset
   15                   *			timeout on input from anyone
   16                   * 20-Mar-90	SHL	Cleaned up getinput routine, added RES
   17                   *			support if communication goes down
   18                   * 14-Mar-90	SHL	Working with new version of Redeye
   19                   *
   20                   * Jan-90	SHL	Created this file to work with Gauntlet's
   21                   *			version of Redeye
   22                   *
   23                   * ====================================================
   24                   
   25                   * System required equates
   26                   
   27      0001         EOF_USER	.EQ 1	; enable use of WAITEOF macros
   28      0001         BRK_USER	.EQ 1	; enable for debugging on Mandy/Pinky s
   29                   
   30      0001         AUTO_TIMEOUT_USER .EQ 1	; enables power-off timeout ro
   31                   
   32      0001         SERIALPORT_USER	.EQ 1	; we use the serial port (redeye
   33                   
   34                   *-----------------------------------------------------
   35                   * Currently defined Redeye game IDs:
   36                   *	0 - test programs
   37                   *	1 - Gauntlet the Third Encounter
   38                   *	2 - Zarlor Mercenary
   39                   *	3 - California Games
   40                   *	4 - Xenophobe
   41                   *	5 - Slime World
   42                   *	$ffff - test programs
   43                   *-----------------------------------------------------
   44                   
   45                   * Redeye constants
   46                   
   47      0000         REDEYE_SLOWNESS .EQ 0	; set to 0,1,2,3 for 62500,31250
   48                   
   49      FFFF         GAME_ID		.EQ -1	; change this to be your unique redeye
   50      0010         MAX_PLAYERS	.EQ 16	; maximum number of players for thi
   51                   
   52      0002         PLAYER_DATA_SIZE .EQ 2	; maximum size of player messag
   53                   
   54      0001         VAR_SIZE_DATA	.EQ 1	; switch enables variable length d
   55                   
   56                   ;SPLIT_SEND_RECEIVE .EQ 1 ; enable switch if splitting
   57                   
   58                   *-----------------------------------------------------
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page    2
                                                        14:13:52  

   59                   
   60                   * Required system equates and macros
   61                   
   62                   		.IN 6502:include/harddefs.i
    1                   ; Wednesday 27-Jun-90 10:45:41
    2                   * === harddefs.i =====================================
    3                   *
    4                   * Hardware Definitions  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 27-Jun-90	SHL		Removed MAGxx alternate names for tim
   12                   *				Added READ_ENABLE definition for IODAT
   13                   * 12-Apr-90	SHL		Added SUZY_BASE and MIKEY_BASE defini
   14                   *				Removed SUZY_ADDRESS definition
   15                   *				Corrected LEFT_ATTENMASK and RIGHT_ATTENMASK
   16                   * 9-Mar-90	SHL		Added new stereo register definitions
   17                   * 7-Mar-90	SHL		Removed MAGRDYx definitions
   18                   *				Commented out MSTEREO until get real info
   19                   * 26-Feb-90	SHL		Corrected some bit definitions
   20                   * 13-Feb-90	SHL		Added a few more missing definitions
   21                   * 9-Feb-90	SHL		Added rest of the hardware definitions
   22                   *				Added CPU interrupt and reset vectors
   23                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   24                   * 25 May 89	-RJ		Deleted LEFT_ and RIGHT_FIRE_BUTTON d
   25                   * 22 May 89	-RJ		Added RESTLESS definition, changed LI
   26                   *				to EXTERNAL_POWER
   27                   * 11 May 89	-RJ		Changed sprite definitions to track t
   28                   *				definitions caused by the Shadow-E chip bug
   29                   * 10 May 89	-RJ		Added INNER_ and OUTER_BUTTON and MST
   30                   *				CART0,1_IO_INACTIVE definitions
   31                   * 20 Apr 89	-RJ		Changed the game button definitions t
   32                   *				the new way to handle Pause, Restart, Flip and
   33                   *				Game Options 1 & 2.  Added bit defs to DISPCTL
   34                   * 19 Apr 89	RG Goudy	Added serial port bit definitions
   35                   * 18 Apr 89	-RJ		The RELOAD_ definition comments say "
   36                   * 19 Mar 89	-RJ		Added TURBO_DISABLE definition to MAP
   37                   * 17 Jan 89	-RJ		Added POWERON and MOTORON of SYSCTL1
   38                   *				Renamed RCART to RCART_0 and added RCART_1
   39                   *				Deleted VIDEO/MIKEYTEST, added MTEST0/1/2
   40                   * 2 Jan 89	-RJ		Added EVER_ON and NO_COLLIDE
   41                   * 31 Dec 88	-RJ		When HANDYMATH is non-zero, the hardw
   42                   *				math registers now aren't defined here either
   43                   *				Added JOYSTICK and SWITCHES flag definitions
   44                   * 30 Dec 88	-RJ		Added sprite type defs.  Renamed REUS
   45                   *				et al to the more accurate RELOAD_NONE et al
   46                   * 24-Dec-88	-RJ		Added sprite control register and aud
   47                   *				channel declarations and control bits
   48                   * 22 Dec 88	-RJ		Redefined all addresses, turning them
   49                   *				symbols that Handebug will recognize
   50                   *
   51                   * Mid 87	=RJ Mical=	Created this file!
   52                   *
   53                   * ====================================================
   54                   
   55                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page    3
                        6502:include/harddefs.i         14:13:52  

   56                   * Size of a display buffer
   57      1FE0         DISPLAY_BUFSIZE	.EQ $1FE0
   58                   
   59                   
   60                   * First address of the block of hardware addresses.
   61      FC00         HARDWARE_START	.EQ $FC00
   62                   
   63                   
   64                   
   65                   * SUZY chip functions are mapped into the $FC00 page
   66 0000:             		.OR $FC00
   67 FC00:             SUZY_BASE		; FC00
   68                   
   69                   * SUZY registers from $FC00-$FC7F (both sprite and MAT
   70                   * when the lower byte is stored to.
   71                   
   72                   * Sprite engine registers - *'ed values are used inter
   73                   * cannot be usefully initialized externally.
   74                   
   75 FC00:             TMPADRL		.DS 1	; FC00 *
   76 FC01:             TMPADRH		.DS 1	; FC01 *
   77 FC02:             TILTACUML	.DS 1	; FC02 *
   78 FC03:             TILTACUMH	.DS 1	; FC03 *
   79 FC04:             HOFFL		.DS 1	; FC04
   80 FC05:             HOFFH		.DS 1	; FC05
   81 FC06:             VOFFL		.DS 1	; FC06
   82 FC07:             VOFFH		.DS 1	; FC07
   83 FC08:             VIDBASL		.DS 1	; FC08
   84 FC09:             VIDBASH		.DS 1	; FC09
   85 FC0A:             COLLBASL	.DS 1	; FC0A
   86 FC0B:             COLLBASH	.DS 1	; FC0B
   87 FC0C:             VIDADRL		.DS 1	; FC0C *
   88 FC0D:             VIDADRH		.DS 1	; FC0D *
   89 FC0E:             COLLADRL	.DS 1	; FC0E *
   90 FC0F:             COLLADRH	.DS 1	; FC0F *
   91 FC10:             SCBNEXTL	.DS 1	; FC10
   92 FC11:             SCBNEXTH	.DS 1	; FC11
   93 FC12:             SPRDLINEL	.DS 1	; FC12 *
   94 FC13:             SPRDLINEH	.DS 1	; FC13 *
   95 FC14:             HPOSSTRTL	.DS 1	; FC14 *
   96 FC15:             HPOSSTRTH	.DS 1	; FC15 *
   97 FC16:             VPOSSTRTL	.DS 1	; FC16 *
   98 FC17:             VPOSSTRTH	.DS 1	; FC17 *
   99 FC18:             SPRHSIZL	.DS 1	; FC18
  100 FC19:             SPRHSIZH	.DS 1	; FC19
  101 FC1A:             SPRVSIZL	.DS 1	; FC1A
  102 FC1B:             SPRVSIZH	.DS 1	; FC1B
  103 FC1C:             STRETCHL	.DS 1	; FC1C *
  104 FC1D:             STRETCHH	.DS 1	; FC1D *
  105 FC1E:             TILTL		.DS 1	; FC1E *
  106 FC1F:             TILTH		.DS 1	; FC1F *
  107 FC20:             SPRDOFFL	.DS 1	; FC20 *
  108 FC21:             SPRDOFFH	.DS 1	; FC21 *
  109 FC22:             SCVPOSL		.DS 1	; FC22 *
  110 FC23:             SCVPOSH		.DS 1	; FC23 *
  111 FC24:             COLLOFFL	.DS 1	; FC24
  112 FC25:             COLLOFFH	.DS 1	; FC25
  113 FC26:             VSIZACUML	.DS 1	; FC26 *
  114 FC27:             VSIZACUMH	.DS 1	; FC27 *
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page    4
                        6502:include/harddefs.i         14:13:52  

  115 FC28:             HSIZOFFL	.DS 1	; FC28
  116 FC29:             HSIZOFFH	.DS 1	; FC29
  117 FC2A:             VSIZOFFL	.DS 1	; FC2A
  118 FC2B:             VSIZOFFH	.DS 1	; FC2B
  119 FC2C:             SCBADRL		.DS 1	; FC2C *
  120 FC2D:             SCBADRH		.DS 1	; FC2D *
  121 FC2E:             PROCADRL	.DS 1	; FC2E *
  122 FC2F:             PROCADRH	.DS 1	; FC2F *
  123                   
  124                   
  125                   * Math engine registers
  126                   
  127 FC30:             		.OR $FC52
  128 FC52:             MATHD		.DS 1	; FC52
  129 FC53:             MATHC		.DS 1	; FC53
  130 FC54:             MATHB		.DS 1	; FC54
  131 FC55:             MATHA		.DS 1	; FC55
  132 FC56:             MATHP		.DS 1	; FC56
  133 FC57:             MATHN		.DS 1	; FC57
  134 FC58:             		.OR $FC60
  135 FC60:             MATHH		.DS 1	; FC60
  136 FC61:             MATHG		.DS 1	; FC61
  137 FC62:             MATHF		.DS 1	; FC62
  138 FC63:             MATHE		.DS 1	; FC63
  139 FC64:             		.OR $FC6C
  140 FC6C:             MATHM		.DS 1	; FC6C
  141 FC6D:             MATHL		.DS 1	; FC6D
  142 FC6E:             MATHK		.DS 1	; FC6E
  143 FC6F:             MATHJ		.DS 1	; FC6F
  144                   
  145                   
  146                   * More SUZY control registers
  147                   
  148 FC70:             		.OR $FC80
  149 FC80:             SPRCTL0		.DS 1	; FC80
  150                   * Sprite control 0 bit definitions
  151      00C0         BITS_MASK	.EQ %11000000	; Mask for settings bits per p
  152                   * Sprite bits-per-pixel definitions
  153      0000         ONE_PER_PIXEL	.EQ %00000000
  154      0040         TWO_PER_PIXEL	.EQ %01000000
  155      0080         THREE_PER_PIXEL	.EQ %10000000
  156      00C0         FOUR_PER_PIXEL	.EQ %11000000
  157                   * More sprite control 0 bit definitions
  158      0020         HFLIP		.EQ %00100000
  159      0010         VFLIP		.EQ %00010000
  160                   * Sprite types - redefined to reflect the reality caus
  161                   ; NORMAL_SPRITE		.EQ %00000111
  162      0007         SHADOW_SPRITE		.EQ %00000111
  163                   
  164      0006         XOR_SPRITE		.EQ %00000110
  165      0006         XOR_SHADOW_SPRITE	.EQ %00000110
  166                   
  167      0005         NONCOLL_SPRITE		.EQ %00000101
  168                   
  169                   ; SHADOW_SPRITE		.EQ %00000100
  170      0004         NORMAL_SPRITE		.EQ %00000100
  171                   
  172                   ; BSHADOW_SPRITE	.EQ %00000011
  173      0003         BOUNDARY_SPRITE		.EQ %00000011
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page    5
                        6502:include/harddefs.i         14:13:52  

  174                   
  175                   ; BOUNDARY_SPRITE	.EQ %00000010
  176      0002         BSHADOW_SPRITE		.EQ %00000010
  177                   
  178      0001         BACKNONCOLL_SPRITE	.EQ %00000001
  179                   
  180      0000         BACKGROUND_SPRITE	.EQ %00000000
  181      0000         BACK_SHADOW_SPRITE	.EQ %00000000
  182                   
  183                   
  184 FC81:             SPRCTL1		.DS 1	; FC81
  185                   * Sprite control 1 bit definitions
  186      0080         LITERAL		.EQ %10000000
  187      0040         ALGO_3		.EQ %01000000	; broken, do not set this bit!
  188      0030         RELOAD_MASK	.EQ %00110000
  189                   * Sprite reload mask definitions
  190      0000         RELOAD_NONE	.EQ %00000000	; Reload nothing
  191      0010         RELOAD_HV	.EQ %00010000	; Reload hsize, vsize
  192      0020         RELOAD_HVS	.EQ %00100000	; Reload hsize, vsize, stretc
  193      0030         RELOAD_HVST	.EQ %00110000	; Reload hsize, vsize, stret
  194                   * More sprite control 1 bit definitions
  195      0008         REUSE_PALETTE	.EQ %00001000
  196      0004         SKIP_SPRITE	.EQ %00000100
  197      0002         DRAW_UP		.EQ %00000010
  198      0001         DRAW_LEFT	.EQ %00000001
  199                   
  200                   
  201 FC82:             SPRCOLL		.DS 1	; FC82
  202                   * SPRCOLL bit definitions
  203      0020         NO_COLLIDE	.EQ %00100000
  204                   
  205 FC83:             SPRINIT		.DS 1	; FC83
  206                   
  207 FC84:             		.OR $FC88
  208 FC88:             SUZYHREV	.DS 1	; FC88
  209 FC89:             SUZYSREV	.DS 1	; FC89
  210                   
  211 FC8A:             		.OR $FC90
  212 FC90:             SUZYBUSEN	.DS 1	; FC90
  213                   
  214 FC91:             SPRGO		.DS 1	; FC91
  215                   * These are the SPRGO flag definitions
  216      0004         EVER_ON		.EQ %00000100
  217      0001         SPRITE_GO	.EQ %00000001
  218                   
  219 FC92:             SPRSYS		.DS 1	; FC92
  220                   * These are the SPRSYS flag definitions when writing
  221      0080         SIGNMATH	.EQ %10000000
  222      0040         ACCUMULATE	.EQ %01000000
  223                   ;NO_COLLIDE	.EQ %00100000	; same as for SPRCOLL
  224      0010         VSTRETCH	.EQ %00010000
  225      0008         LEFTHAND	.EQ %00001000
  226      0004         UNSAFEACCESSRST	.EQ %00000100
  227      0002         SPRITESTOP	.EQ %00000010
  228                   * These are the SPRSYS flag definitions when reading
  229      0080         MATHWORKING	.EQ %10000000
  230      0040         MATHWARNING	.EQ %01000000
  231      0020         MATHCARRY	.EQ %00100000
  232      0010         VSTRETCHING	.EQ %00010000
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page    6
                        6502:include/harddefs.i         14:13:52  

  233      0008         LEFTHANDED	.EQ %00001000
  234      0004         UNSAFEACCESS	.EQ %00000100
  235      0002         SPRITETOSTOP	.EQ %00000010
  236      0001         SPRITEWORKING	.EQ %00000001
  237                   
  238 FC93:             		.OR $FCB0
  239 FCB0:             JOYSTICK	.DS 1	; FCB0
  240      0080         JOY_DOWN	.EQ %10000000
  241      0040         JOY_UP		.EQ %01000000
  242      0020         JOY_RIGHT	.EQ %00100000
  243      0010         JOY_LEFT	.EQ %00010000
  244      0008         OPTION1_BUTTON	.EQ %00001000
  245      0004         OPTION2_BUTTON	.EQ %00000100
  246      0002         INNER_BUTTON	.EQ %00000010
  247      0001         OUTER_BUTTON	.EQ %00000001
  248      0001         A_BUTTON	.EQ OUTER_BUTTON
  249      0002         B_BUTTON	.EQ INNER_BUTTON
  250      0008         RESTART_BUTTON	.EQ OPTION1_BUTTON
  251      0004         FLIP_BUTTON	.EQ OPTION2_BUTTON
  252                   
  253 FCB1:             SWITCHES	.DS 1	; FCB1
  254      0004         CART1_IO_INACTIVE .EQ %00000100
  255      0002         CART0_IO_INACTIVE .EQ %00000010
  256      0001         PAUSE_SWITCH	.EQ %00000001
  257                   
  258 FCB2:             RCART_0		.DS 1	; FCB2
  259 FCB3:             RCART_1		.DS 1	; FCB3
  260                   
  261                   
  262                   * LEDS output register only exists on early wire-wrap 
  263 FCB4:             		.OR $FCC0
  264 FCC0:             LEDS		.DS 1	; FCC0
  265                   
  266                   
  267                   * The parallel IO port only exists on early wire-wrap 
  268 FCC1:             		.OR $FCC2
  269 FCC2:             IOStatus	.DS 1	; FCC2
  270 FCC3:             IOData		.DS 1	; FCC3
  271                   
  272 FCC4:             HOWIE		.DS 1	; FCC4
  273                   
  274                   
  275                   
  276                   
  277                   * MIKEY chip functions are mapped into the $FD00 page
  278                   
  279 FCC5:             		.OR $FD00
  280 FD00:             MIKEY_BASE	; FD00
  281                   
  282                   * The Mikey Timers
  283                   * First the logical timer names are defined, then the 
  284 FD00:             HCOUNT		; FD00
  285 FD00:             TIMER0		; FD00
  286 FD00:             	.DS 4
  287 FD04:             TIMER1		; FD04
  288 FD04:             	.DS 4
  289 FD08:             VCOUNT		; FD08
  290 FD08:             TIMER2		; FD08
  291 FD08:             	.DS 4
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page    7
                        6502:include/harddefs.i         14:13:52  

  292 FD0C:             TIMER3		; FD0C
  293 FD0C:             	.DS 4
  294 FD10:             SERIALRATE	; FD10
  295 FD10:             TIMER4		; FD10
  296 FD10:             	.DS 4
  297 FD14:             TIMER5		; FD14
  298 FD14:             	.DS 4
  299 FD18:             TIMER6		; FD18
  300 FD18:             	.DS 4
  301 FD1C:             TIMER7		; FD1C
  302 FD1C:             	.DS 4
  303                   
  304                   * Here's the timer offsets
  305      0000         TIM_BACKUP	.EQ 0
  306      0001         TIM_CONTROLA	.EQ 1
  307      0002         TIM_COUNT	.EQ 2
  308      0003         TIM_CONTROLB	.EQ 3
  309                   
  310                   * TIM_CONTROLA control bits
  311      0080         ENABLE_INT	.EQ %10000000
  312      0040         RESET_DONE	.EQ %01000000
  313      0010         ENABLE_RELOAD	.EQ %00010000
  314      0008         ENABLE_COUNT	.EQ %00001000
  315      0007         AUD_CLOCK_MASK	.EQ %00000111
  316                   * Clock settings
  317      0007         AUD_LINKING	.EQ %00000111
  318      0006         AUD_64		.EQ %00000110
  319      0005         AUD_32		.EQ %00000101
  320      0004         AUD_16		.EQ %00000100
  321      0003         AUD_8		.EQ %00000011
  322      0002         AUD_4		.EQ %00000010
  323      0001         AUD_2		.EQ %00000001
  324      0000         AUD_1		.EQ %00000000
  325                   
  326                   * TIM_CONTROLB control bits
  327      0008         TIMER_DONE	.EQ %00001000
  328      0004         LAST_CLOCK	.EQ %00000100
  329      0002         BORROW_IN	.EQ %00000010
  330      0001         BORROW_OUT	.EQ %00000001
  331                   
  332                   
  333 FD20:             AUDIO0		.DS 8	; FD20
  334 FD28:             AUDIO1		.DS 8	; FD28
  335 FD30:             AUDIO2		.DS 8	; FD30
  336 FD38:             AUDIO3		.DS 8	; FD38
  337                   * Here's the audio channel offsets
  338      0000         AUD_VOLCNTRL	.EQ 0
  339      0001         AUD_FEEDBACK	.EQ 1
  340      0002         AUD_OUTPUT	.EQ 2
  341      0003         AUD_SHIFT	.EQ 3
  342      0004         AUD_BACKUP	.EQ 4
  343      0005         AUD_CONTROL	.EQ 5
  344      0006         AUD_COUNTER	.EQ 6
  345      0007         AUD_OTHER	.EQ 7
  346                   * The AUD_CONTROL bits are almost identical to the TIM
  347                   * Here's the AUD_CONTROL control bits that are differe
  348                   * control bits.
  349                   * See TIM_CONTROLA above for the other definitions
  350      0080         FEEDBACK_7		.EQ %10000000
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page    8
                        6502:include/harddefs.i         14:13:52  

  351      0020         ENABLE_INTEGRATE	.EQ %00100000
  352                   
  353                   
  354                   ; Stereo control registers follow
  355                   ; Stereo capability does not exist in all Lynxes
  356                   ; Left and right may be reversed, and if so will be co
  357                   ; release
  358                   
  359 FD40:             		.OR $FD40
  360 FD40:             ATTENREG0	.DS 1	; FD40	; Stereo attenuation registers
  361 FD41:             ATTENREG1	.DS 1	; FD41
  362 FD42:             ATTENREG2	.DS 1	; FD42
  363 FD43:             ATTENREG3	.DS 1	; FD43
  364      00F0         LEFT_ATTENMASK	.EQ %11110000
  365      000F         RIGHT_ATTENMASK	.EQ %00001111
  366                   
  367 FD44:             MPAN		.DS 1	; FD44	; Stereo attenuation select registe
  368                   
  369 FD45:             		.OR $FD50
  370 FD50:             MSTEREO		.DS 1	; FD50	; Stereo channel disable registe
  371                   
  372                   ; bit definitions for MPAN and MSTEREO registers
  373      0080         LEFT3_SELECT	.EQ %10000000
  374      0040         LEFT2_SELECT	.EQ %01000000
  375      0020         LEFT1_SELECT	.EQ %00100000
  376      0010         LEFT0_SELECT	.EQ %00010000
  377      0008         RIGHT3_SELECT	.EQ %00001000
  378      0004         RIGHT2_SELECT	.EQ %00000100
  379      0002         RIGHT1_SELECT	.EQ %00000010
  380      0001         RIGHT0_SELECT	.EQ %00000001
  381                   
  382                   
  383 FD51:             		.OR $FD80
  384 FD80:             INTRST		.DS 1	; FD80	; Interrupt Reset and Set registe
  385 FD81:             INTSET		.DS 1	; FD81
  386                   
  387                   * Interrupt Reset and Set bit definitions
  388      0080         TIMER7_INT	.EQ %10000000
  389      0040         TIMER6_INT	.EQ %01000000
  390      0020         TIMER5_INT	.EQ %00100000
  391      0010         SERIAL_INT	.EQ %00010000
  392      0008         TIMER3_INT	.EQ %00001000
  393      0004         TIMER2_INT	.EQ %00000100
  394      0002         TIMER1_INT	.EQ %00000010
  395      0001         TIMER0_INT	.EQ %00000001
  396      0004         VERTICAL_INT	.EQ TIMER2_INT
  397      0001         HORIZONTAL_INT	.EQ TIMER0_INT
  398                   
  399 FD82:             		.OR $FD86
  400 FD86:             AUDIN		.DS 1	; FD86	; Audio in -or- cartridge r/w line
  401 FD87:             SYSCTL1		.DS 1	; FD87
  402                   * SYSCTL1 bit definitions
  403      0002         POWERON		.EQ %00000010
  404      0001         CART_ADDR_STROBE .EQ %00000001
  405                   
  406 FD88:             MIKEYHREV	.DS 1	; FD88	; Mikey hardware rev
  407 FD89:             MIKEYSREV	.DS 1	; FD89	; Mikey software rev
  408 FD8A:             IODIR		.DS 1	; FD8A
  409 FD8B:             IODAT		.DS 1	; FD8B
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page    9
                        6502:include/harddefs.i         14:13:52  

  410                   * Here's the IODIR and IODAT bit definitions
  411      0010         AUDIN_BIT	.EQ %00010000	; note that there is also the 
  412      0010         READ_ENABLE	.EQ %00010000	; same bit for AUDIN_BIT
  413      0008         RESTLESS	.EQ %00001000
  414      0004         NOEXP		.EQ %00000100	; If set, redeye is not connected
  415      0002         CART_ADDR_DATA	.EQ %00000010
  416      0002         CART_POWER_OFF	.EQ %00000010	; same bit for CART_ADDR_
  417      0001         EXTERNAL_POWER	.EQ %00000001
  418                   
  419 FD8C:             SERCTL		.DS 1	; FD8C	; Serial control
  420                   * Here's the SERCTL bit definitions when writing
  421      0080         TXINTEN		.EQ %10000000
  422      0040         RXINTEN		.EQ %01000000
  423                   ;unused		.EQ %00100000	; Leave unused bit 0 for future
  424      0010         PAREN		.EQ %00010000
  425      0008         RESETERR	.EQ %00001000
  426      0004         TXOPEN		.EQ %00000100
  427      0002         TXBRK		.EQ %00000010
  428      0001         PAREVEN		.EQ %00000001
  429                   * Here's the SERCTL bit definitions when reading
  430      0080         TXRDY		.EQ %10000000
  431      0040         RXRDY		.EQ %01000000
  432      0020         TXEMPTY		.EQ %00100000
  433      0010         PARERR		.EQ %00010000
  434      0008         OVERRUN		.EQ %00001000
  435      0004         FRAMERR		.EQ %00000100
  436      0002         RXBRK		.EQ %00000010
  437      0001         PARBIT		.EQ %00000001
  438                   
  439 FD8D:             SERDAT		.DS 1	; FD8D	; Serial data
  440                   
  441                   
  442                   
  443 FD8E:             		.OR $FD90
  444 FD90:             SDONEACK	.DS 1	; FD90	; Suzy done ack
  445 FD91:             CPUSLEEP	.DS 1	; FD91	; zzz
  446 FD92:             DISPCTL		.DS 1	; FD92	; Display control
  447                   * Here are the DISPCTL bit definitions
  448      0008         DISP_COLOR	.EQ %00001000	; must be set to 1
  449      0004         DISP_FOURBIT	.EQ %00000100	; must be set to 1
  450      0002         DISP_FLIP	.EQ %00000010
  451      0001         DMA_ENABLE	.EQ %00000001	; must be set to 1
  452                   
  453 FD93:             PBKUP		.DS 1	; FD93	; Display's magic 'P' count
  454 FD94:             DISPADRL	.DS 1	; FD94	; Start of display
  455 FD95:             DISPADRH	.DS 1	; FD95
  456                   
  457 FD96:             		.OR $FD9C
  458 FD9C:             MTEST0		.DS 1	; FD9C	; System test vectors, see spec f
  459 FD9D:             MTEST1		.DS 1	; FD9D
  460 FD9E:             MTEST2		.DS 1	; FD9E
  461                   
  462                   * The Color registers
  463 FD9F:             		.OR $FDA0
  464 FDA0:             GREEN0		.DS 1	; FDA0
  465 FDA1:             GREEN1		.DS 1	; FDA1
  466 FDA2:             GREEN2		.DS 1	; FDA2
  467 FDA3:             GREEN3		.DS 1	; FDA3
  468 FDA4:             GREEN4		.DS 1	; FDA4
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   10
                        6502:include/harddefs.i         14:13:52  

  469 FDA5:             GREEN5		.DS 1	; FDA5
  470 FDA6:             GREEN6		.DS 1	; FDA6
  471 FDA7:             GREEN7		.DS 1	; FDA7
  472 FDA8:             GREEN8		.DS 1	; FDA8
  473 FDA9:             GREEN9		.DS 1	; FDA9
  474 FDAA:             GREENA		.DS 1	; FDAA
  475 FDAB:             GREENB		.DS 1	; FDAB
  476 FDAC:             GREENC		.DS 1	; FDAC
  477 FDAD:             GREEND		.DS 1	; FDAD
  478 FDAE:             GREENE		.DS 1	; FDAE
  479 FDAF:             GREENF		.DS 1	; FDAF
  480                   
  481 FDB0:             BLUERED0	.DS 1	; FDB0
  482 FDB1:             BLUERED1	.DS 1	; FDB1
  483 FDB2:             BLUERED2	.DS 1	; FDB2
  484 FDB3:             BLUERED3	.DS 1	; FDB3
  485 FDB4:             BLUERED4	.DS 1	; FDB4
  486 FDB5:             BLUERED5	.DS 1	; FDB5
  487 FDB6:             BLUERED6	.DS 1	; FDB6
  488 FDB7:             BLUERED7	.DS 1	; FDB7
  489 FDB8:             BLUERED8	.DS 1	; FDB8
  490 FDB9:             BLUERED9	.DS 1	; FDB9
  491 FDBA:             BLUEREDA	.DS 1	; FDBA
  492 FDBB:             BLUEREDB	.DS 1	; FDBB
  493 FDBC:             BLUEREDC	.DS 1	; FDBC
  494 FDBD:             BLUEREDD	.DS 1	; FDBD
  495 FDBE:             BLUEREDE	.DS 1	; FDBE
  496 FDBF:             BLUEREDF	.DS 1	; FDBF
  497                   
  498                   
  499                   * The Map Control register
  500 FDC0:             		.OR $FFF9
  501 FFF9:             MAPCTL		.DS 1	; FFF9
  502                   * These are the MAPCTL flag definitions
  503      0080         TURBO_DISABLE	.EQ %10000000
  504      0008         VECTOR_SPACE	.EQ %00001000	; 1 maps RAM into specified
  505      0004         ROM_SPACE	.EQ %00000100
  506      0002         MIKEY_SPACE	.EQ %00000010
  507      0001         SUZY_SPACE	.EQ %00000001
  508                   
  509                   * 65C02 hardware interrupt and reset vectors
  510 FFFA:             CPU_NMI		.DS 2	; FFFA
  511 FFFC:             CPU_RESET	.DS 2	; FFFC
  512 FFFE:             CPU_IRQ			; FFFE
  513                   
  514                   
  515                   
   63                   		.IN 6502:include/monitor.i
    1                   
    2                   * === monitor.i ======================================
    3                   *
    4                   * 6502 Debugger Monitor Definitions File  --  Handy So
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 26-Feb-90	SHL		Minor cleanup
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   11
                        6502:include/monitor.i          14:13:52  

   12                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   13                   * 1 May 89	-RJ		Changed MONITOR_ZP_RESERVED to $F8
   14                   * 19 Mar 89	-RJ		Changed MONITOR_RAM_RESERVED to $F800
   15                   * 16 Mar 89	-RJ		Changed values of BUS_MONITOR and TRA
   16                   *				added LARGE_DATA
   17                   * 14 Mar 89	-RJ		Changed value of MONITOR_RAM_RESERVED
   18                   * 26-Dec-88	-RJ		Added HANDEM_NEWDISPLAY
   19                   * Early 88	=RJ Mical=	Created this file!
   20                   *
   21                   * ====================================================
   22                   
   23                   
   24                   
   25      FALSE        	#IFDEF	MONITOR_I	; prevent multiple inclusion
   27                   	#ENDIF
   28      0001         MONITOR_I	.EQU	1
   29                   
   30                   
   31                   
   32                   * The hardware interrupt vector table starts at this a
   33      FBF0         IntTable		.=	$FC00-{8*2}
   34                   
   35                   
   36                   
   37                   * These constants define the memory locations reserved
   38                   * program.  The zero-page definition describes the fir
   39                   * in zero-page; all locations from there to the end of
   40                   * reserved.  With the RAM definition, all locations
   41                   * are reserved from that address to the start of Handy
   42                   * currently lives at $FC00
   43                   * Note that the Howard board does not require RAM for 
   44      00F8         MONITOR_ZP_RESERVED	.EQU	$00F8
   45      F900         MONITOR_RAM_RESERVED	.EQU	$F900
   46                   
   47                   
   48                   
   49                   * These are the offsets of the register data both in t
   50                   * data stream when host and monitor are passing the re
   51      0000         A_OFFSET		.EQU	0
   52      0001         X_OFFSET		.EQU	1
   53      0002         Y_OFFSET		.EQU	2
   54      0003         S_OFFSET		.EQU	3
   55      0004         PC_OFFSET		.EQU	4
   56      0006         P_OFFSET		.EQU	6
   57                   
   58                   
   59                   
   60                   * These define the monitor memory block sizes
   61      0007         REGISTER_BYTECOUNT	.EQU	7
   62      0010         MONITOR_BYTECOUNT	.EQU	16
   63                   
   64                   
   65                   
   66                   * These are the definitions of the signals that can be
   67                   * the Handebug monitor program after a warm restart.
   68      0000         NOP_REQUEST		.EQU	0
   69      0001         DOWNLOAD_REQUEST	.EQU	1
   70      0002         UPLOAD_REQUEST		.EQU	2
   71      0003         CONTINUE_REQUEST	.EQU	3
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   12
                        6502:include/monitor.i          14:13:52  

   72      0004         SLAVE_REQUEST		.EQU	4
   73      0005         GO_REQUEST		.EQU	5
   74      0006         SEE_HOWARD_REQUEST	.EQU	6
   75      0007         HIDE_HOWARD_REQUEST	.EQU	7
   76                   
   77                   
   78                   
   79                   * These are the definitions of the upload/download typ
   80      0000         END_OF_FILE		.EQU	$00
   81      0001         ORIGIN			.EQU	$01
   82      0002         DATA			.EQU	$02
   83      0003         RUN_ADDRESS		.EQU	$03
   84                   * The assembler reserves the remainder of the low defi
   85      0010         REGISTER		.EQU	$10
   86      0011         FILL_MEM		.EQU	$11
   87      0012         LARGE_DATA		.EQU	$12
   88      0013         BUS_MONITOR		.EQU	$13
   89      0014         TRACE			.EQU	$14
   90      0015         BREAK_CONTROLS		.EQU	$15
   91      0016         HOWARD_ABUS		.EQU	$16
   92      0017         HOWARD_BBUS		.EQU	$17
   93      0018         HOWARD_CBUS		.EQU	$18
   94      0019         HOWARD_DBUS		.EQU	$19
   95      001A         ROM			.EQU	$1A
   96                   
   97                   
   98                   * These are the monitor to host slave requests
   99      0001         UP_THIS_PAGE		.EQU	1
  100      0002         UP_CURRENT_PAGE		.EQU	2
  101      0003         UP_REGISTERS		.EQU	3
  102      0004         UP_MEMWATCH		.EQU	4
  103      0005         UP_HAHDATA		.EQU	5
  104                   
  105                   
  106                   
   64                   
   65                   		.IN 6502:include/msgmgr.i
    1                   ; Fri Oct 12 11:48:01 1990
    2                   *=====================================================
    3                   * 
    4                   * Handy ComLink
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   * 
    9                   * Date		Name	Description
   10                   * ---------	------	-----------------------------------
   11                   * 11-Oct-90	SHL	Added REDEYE_SLOWNESS support for "slo
   12                   * 15-Mar-90	SHL	Added Long_TIMEOUT
   13                   * 12-Mar-90	SHL	Added InterMsgTimeout support
   14                   * 26-Feb-90	SHL	Moved hardware bit definitions to hard
   15                   * Aug 28 89	LEA	Created this file
   16                   *=====================================================
   17                   
   18                   
   19                   
   20                   *-----------------------------------------------------
   21                   * COMPILE TIME DEFS
   22                   *
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   13
                        6502:include/msgmgr.i           14:13:52  

   23                   *=====================================================
   24                   
   25      FALSE         #IFNDEF REDEYE_SLOWNESS
   27                    #ENDIF
   28                   
   29      0014         STDCOM		.eq	PAREN+TXOPEN	; default communication param
   30                   
   31      0001         COMLINK_TIMER	.eq	1	; used by message manager
   32      FD04         COMLINK_TIMER_ADDR .eq TIMER0+{COMLINK_TIMER*4}
   33                   
   34                   
   35                   
   36      0002         MSG_GAP_Divider	.EQ	AUD_4
   37      005F         MSG_GAP_TIMEOUT .eq	380/4	; actual value stuffed into 
   38                   
   39      0000         TxToRx_Divider	.EQ	AUD_1
   40      0074         TxToRx_TIMEOUT	.EQ	176-60	; actual value stuffed into 
   41                   
   42      TRUE          #IF REDEYE_SLOWNESS = 0
   43      0074         TxToRx_SLOW	.eq	176-60	; actual value stuffed into tim
   44                    #ENDIF
   45      FALSE         #IF REDEYE_SLOWNESS = 1
   47                    #ENDIF
   48      FALSE         #IF REDEYE_SLOWNESS = 2
   50                    #ENDIF
   51      FALSE         #IF REDEYE_SLOWNESS = 3
   53                    #ENDIF
   54                   
   55      0002         InterMsg_Divider .EQ	AUD_4
   56      00FA         InterMsg_TIMEOUT .eq	1000/4
   57                   
   58      0006         Long_Divider	.eq	AUD_64
   59      00FA         Long_TIMEOUT	.eq	16000/64
   60                   
   61                   
   62                   
   63                   * RxMsgStat bit definitions
   64      0080         MSG_CHECKSUM_ERR	.eq $80
   65      0040         MSG_SIZE_ERR		.eq $40
   66                   ;PARERR			.eq $10		; same as SERCTL bit
   67                   ;OVERRUN		.eq $08		; same as SERCTL bit
   68                   ;FRAMERR		.eq $04		; same as SERCTL bit
   69                   
   70                   
   71                   
   66                   		.IN 6502:include/sprite.i
    1                   * Here are the sprite control block offsets
    2                   * The final offset, SCB_SIZEOF, contains the byte-size
    3                   * Note that the palette will move up if any of HSIZE, 
    4                   * are not used
    5      0000         SCB_CTRL0	.EQ 0
    6      0001         SCB_CTRL1	.EQ {SCB_CTRL0+1}
    7      0002         SCB_CTRL2	.EQ {SCB_CTRL1+1}
    8      0003         SCB_NEXT	.EQ {SCB_CTRL2+1}
    9      0005         SCB_DATA	.EQ {SCB_NEXT+2}
   10      0007         SCB_HPOS	.EQ {SCB_DATA+2}
   11      0009         SCB_VPOS	.EQ {SCB_HPOS+2}
   12      000B         SCB_HSIZE	.EQ {SCB_VPOS+2}
   13      000D         SCB_VSIZE	.EQ {SCB_HSIZE+2}
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   14
                        6502:include/sprite.i           14:13:52  

   14      000F         SCB_STRETCH	.EQ {SCB_VSIZE+2}
   15      0011         SCB_TILT	.EQ {SCB_STRETCH+2}
   16      0013         SCB_PALETTE	.EQ {SCB_TILT+2}
   17                   
   18      001B         SCB_SIZEOF	.EQ {SCB_PALETTE+8}
   19                   
   20                   
   21                   
   67                   
   68                   		.IN 6502:macros/zpage.mac
    1                   ; ----------------------------------------------------
    2                   ; Zero-Page memory allocation macros
    3                   ;  Created:  Mike Ireton, 10/07/88
    4                   ; Modified:  RJ Mical, 14 Nov 88
    5                   ; 
    6                   ; BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPAGE) 
    7                   ; and END_ZPAGE (or END_ALLOCATE_ZEROPAGE) are two ver
    8                   ; for safely allocating zero-page memory space in any 
    9                   ; If you use these macros around every z-page memory a
   10                   ; the macros will track your allocations and dole out 
   11                   ; memory locations every time you ask for them.  This 
   12                   ; emulator to make z-page allocations without stepping
   13                   ; allows you to make z-page allocations locally in the
   14                   ; rather than making all your allocations in one file 
   15                   ; down all free zero page locations and figuring out w
   16                   ; 
   17                   ; -- TO USE ---
   18                   ; This file defines a redefinable value named NEXTZPG,
   19                   ; to 0.  NEXTZPG holds the address of the next availab
   20                   ; which in most cases will be at memory location $00. 
   21                   ; zero-page memory locations starting from $00, you ca
   22                   ; a value of your own choice after you've included thi
   23                   ; used any of this file's macros.  For example, say th
   24                   ; to stash away memory locations $00 through $0F.  At 
   25                   ; before calling BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPA
   26                   ;                .IN    6502:macros/zpage.mac
   27                   ;   NEXTZPG     .=     $10
   28                   ; 
   29                   ; Then, when the need arises for zero page variables, 
   30                   ; BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPAGE).  This will
   31                   ; labels and re-assign the assembler's location counte
   32                   ; zero-page (as pointed to by the current NEXTZPG).  A
   33                   ; end with END_ZPAGE (or END_ALLOCATE_ZEROPAGE), which
   34                   ; z-page offset and restore the program counter.  For 
   35                   ;   RoutineX                        RoutineX
   36                   ;           BEGIN_ZPAGE                     BEGIN_ALLO
   37                   ;   ZPG1    .DS    2      - or -    ZPG1    .DS    2
   38                   ;   COUNT   .DS    1                COUNT   .DS    1
   39                   ;           END_ZPAGE                       END_ALLOCA
   40                   ;           STA    ZPG1                     STA    ZPG
   41                   ; 
   42                   ; Remember that you should only define data areas betw
   43                   ; Anything else is dangerous and should be avoided (an
   44                   ; you should find another line of work... :-)  )
   45                   ; 
   46                   ; Also, note that these macros use another redefinable
   47                   ; record and restore the program counter 
   48                   
   49      0000         NEXTZPG	.= $00
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   15
                        6502:macros/zpage.mac           14:13:52  

   50                   
   51                   	#MACRO BEGIN_ZPAGE
   52 MACRO             TEMPORG	  .= *
   53 MACRO             	  .ORG NEXTZPG
   54                   	#ENDM
   55                   
   56                   	#MACRO BEGIN_ALLOCATE_ZEROPAGE
   57 MACRO             	  BEGIN_ZPAGE
   58                   	#ENDM
   59                   
   60                   
   61                   	#MACRO END_ZPAGE
   62 MACRO             NEXTZPG	  .= *
   63 MACRO             	  #IF NEXTZPG > $0100
   64 MACRO             	    .ECHO "ERROR:  z-page allocations went out of pag
   65 MACRO             	  #ENDIF
   66 MACRO             	  .ORG TEMPORG
   67                   	#ENDM
   68                   
   69                   	#MACRO END_ALLOCATE_ZEROPAGE
   70 MACRO             	  END_ZPAGE
   71                   	#ENDM
   72                   
   73                   
   74                   
   69                   		.IN 6502:src/syszpage.src
    1                   
    2                   * === syszpage.src ===================================
    3                   *
    4                   * System Zero-Page Data Allocations  --  the 6502 Side
    5                   *
    6                   * Copyright (C) 1988, Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   *
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   13                   * 19 Apr 89	-RJ		Added description of rule for using s
   14                   * 22 Mar 89	-RJ		Removed the audio variables from this
   15                   * 20 Mar 89	RG Goudy	Added several new zpage pointers
   16                   * 26 Jan 89	-RJ		Got rid of Interruptus
   17                   * 26-Dec-88	=RJ Mical=	Created this file from sysdata.
   18                   *
   19                   * ====================================================
   20                   
   21                   
   22                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   23                   *
   24                   * This file should be included before any source code 
   25                   *
   26                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   27                   
   28                   
   29                   
   30                   * System programmers note:  the sysptrs are defined as
   31                   * pointers.  These can't be used during interrupt code
   32                   * no promises regarding the usage of these for anythin
   33                   * while using one of these is a dangerous thing to do
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   16
                        6502:src/syszpage.src           14:13:52  

   34                   		BEGIN_ZPAGE
    1      FFFE       + TEMPORG	  .= *
    2 FFFE:           + 	  .ORG NEXTZPG
    3                 + 
   35 0000:             sysptr		.DS 2
   36 0002:             sysptr2		.DS 2
   37 0004:             sysptr3		.DS 2
   38                   		END_ZPAGE
    1      0006       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 0006:           + 	  .ORG TEMPORG
    6                 + 
   39                   
   40                   
   41                   
   70                   		.IN 6502:macros/display.mac
    1                   ; Tuesday 27-Mar-90 10:58:38
    2                   * === display.mac ====================================
    3                   *
    4                   * Display Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1988,1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 27-Mar-90	SHL		Removed BufferAddrL, BufferAddrH
   12                   * 20-Mar-90	SHL		SETDISP... macros no longer SEI/CLI a
   13                   *				be invoked when IRQs disabled
   14                   *				Tightened up WAITEOF, WAITNEOF macros
   15                   * 7-Mar-90	SHL		Removed the DISPLAY_ON and DISPLAY_OFF
   16                   *				Moved initialization of DISPCTL_RAM to INITSYS
   17                   *				in sys.mac
   18                   * 27-Feb-90	SHL		Removed unnecessary STZs from HOFF8,V
   19                   * 26-Feb-90	SHL		Minor code tightening
   20                   * 9-Feb-90	SHL		Removed all references to HFIX1
   21                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   22                   *				General cleanup and prettification
   23                   * 31 May 89	Larry Abel	Changed WAITEOF and WAITEOL to 
   24                   * 27 Apr 89	RG Goudy	Changed SETDISP_50 PCOUNT to $31
   25                   * 19 Apr 89	-RJ		DISPCTL bit definitions now used
   26                   * 6 Apr 89	-RJ		Added SETDISP_75
   27                   * 19 Mar 89	-RJ		Added HFIX1 macros to SETDISP
   28                   * 16 Mar 89	-RJ		Changed the DISPLAY macro to remove t
   29                   *				forward reference to DisplayBuffer forbidden
   30                   *				by the new assembler
   31                   * 13 Feb 89	-RJ		Added JSR InitDisplayer to SETDISP wh
   32                   *				EOF_USER isn't defined.  Also, removed the
   33                   *				invocation of DISPLAY from DBUF_DISPLAY.
   34                   *				DISPLAY now happens during EOF processing.
   35                   *				Because of this, the EOF interrupt is now
   36                   *				always turned on even if not EOF_USER.
   37                   *				DBUF_DISPLAY now writes RenderBuffer to
   38                   *				DisplayBuffer.  DISPLAY now reads from there.
   39                   * 26 Jan 89	-RJ		Deleted SETDISP_30/25/20/15/10 macros
   40                   * 16 Jan 89	SHL		Modified SETDISP macro to only enable
   41                   *				interrupts needed according to the EOF_USER
   42                   *				and EOL_USER flags
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   17
                        6502:macros/display.mac         14:13:52  

   43                   * 5 Jan 89	-RJ		Set interrupt disable before writing t
   44                   *				display hardware addresses.
   45                   *				Removed writing of DISPCTL from FLIP macro.
   46                   *				Added writing of DISPCTL to DISPLAY macro.
   47                   * 30 Dec 88	-RJ		Moved DISPLAY macro to top of DBUF_DI
   48                   *				rid of redundant assignment there
   49                   * 28 Dec 88	-RJ		Changed SETCOLL to store to COLLBASL,
   50                   * 27 Dec 88	-RJ		Added DISPLAY, DISP_AX, DISP_AY,
   51                   *				SETDISP_20/15/10
   52                   * 24-Dec-88	-RJ		Renamed DISPLAY to DBUF_DISPLAY.  Cha
   53                   *				ptr references to sysptr
   54                   * 23-Dec-88	-RJ		Modified the DISPLAY macro to support
   55                   *				Added RGB16_I macro.
   56                   * 22-Dec-88	-RJ		Added many display macros:  SETDISP_6
   57                   *				SETDISP, SETDBUF, SETCOLL, DISPLAY_ON,
   58                   *				DISPLAY_OFF, INITEOF, WAITEOF, and FLIP.
   59                   * Early 88	=RJ Mical=	Created this file!
   60                   *
   61                   * ====================================================
   62                   
   63                   
   64                   
   65                   * The SETDISP macro sets up the horizontal and vertica
   66                   * (thereby defining the frame rate) and sets the magic
   67                   * initializes the DISPCTL_RAM shadow mask of the hardw
   68                   * The macro expects 5 arguments:
   69                   *     - the backup value for the horizontal timer
   70                   *     - the control bits for the horiz timer
   71                   *     - the backup value for the vertical timer
   72                   *     - the control bits for the vertical timer
   73                   *     - the magic 'P' value
   74                   		#MACRO	SETDISP
   75 MACRO             
   76 MACRO             		LDA	#?0
   77 MACRO             		STA	HCOUNT+TIM_BACKUP
   78 MACRO             	#IFDEF EOL_USER
   79 MACRO             		lda #?1|%10000000
   80 MACRO             	#ELSE
   81 MACRO             		lda #?1&%01111111
   82 MACRO             	#ENDIF
   83 MACRO             		STA	HCOUNT+TIM_CONTROLA
   84 MACRO             		LDA	#?2
   85 MACRO             		STA	VCOUNT+TIM_BACKUP
   86 MACRO             		lda #?3|%10000000
   87 MACRO             		STA	VCOUNT+TIM_CONTROLA
   88 MACRO             
   89 MACRO             		LDA	#?4
   90 MACRO             		STA	PBKUP
   91 MACRO             	#IFNDEF	EOF_USER
   92 MACRO             		JSR	InitDisplayer
   93 MACRO             	#ENDIF
   94                   		#ENDMACRO
   95                   
   96                   
   97                   
   98                   * These macros allow you to easily set up a 'standard'
   99                   		#MACRO SETDISP_75
  100 MACRO             		SETDISP	$7E,$98,$68,$9F,$20
  101                   		#ENDMACRO
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   18
                        6502:macros/display.mac         14:13:52  

  102                   
  103                   		#MACRO SETDISP_60
  104 MACRO             		SETDISP	$9E,$98,$68,$9F,$29
  105                   		#ENDMACRO
  106                   
  107                   		#MACRO SETDISP_50
  108 MACRO             		SETDISP	$BD,$98,$68,$9F,$31
  109                   		#ENDMACRO
  110                   
  111                   
  112                   
  113                   * The SETDBUF macro sets up the systems awareness of t
  114                   * to use for the display.  The macro wants two argumen
  115                   * the two buffers you will be using for your displays.
  116                   * the two buffers by calling this macro, DBUF_DISPLAY 
  117                   * do all the double-buffer display work for you automa
  118                   * At any time after calling this routine, the address 
  119                   * off-display buffer can be found in the variable Rend
  120                   		#MACRO	SETDBUF
  121 MACRO             		LDA	#<?0
  122 MACRO             		STA	RenderBuffer
  123 MACRO             		LDA	#>?0
  124 MACRO             		STA	RenderBuffer+1
  125 MACRO             		LDA	#<?1
  126 MACRO             		STA	DisplayBuffer
  127 MACRO             		LDA	#>?1
  128 MACRO             		STA	DisplayBuffer+1
  129 MACRO             		STZ	DisplayFlags
  130                   		#ENDMACRO
  131                   
  132                   
  133                   * The SETCOLL macro sets up the hardware and system so
  134                   * hardware collisions for you.  The macro expects two 
  135                   * the address of your 8K collision buffer, and the off
  136                   * byte of your SCB to the SCB's collision depository b
  137                   		#MACRO	SETCOLL
  138 MACRO             		LDA	#<?0
  139 MACRO             		STA	COLLBASL
  140 MACRO             		LDA	#>?0
  141 MACRO             		STA	COLLBASH
  142 MACRO             		LDA	#<?1
  143 MACRO             		STA	COLLOFFL
  144 MACRO             		LDA	#>?1
  145 MACRO             		STA	COLLOFFH
  146                   		#ENDMACRO
  147                   
  148                   
  149                   
  150                   * The INITEOF macro is used to initialize the end-of-f
  151                   * You should invoke this macro only once, any time bef
  152                   * of WAITEOF.
  153      TRUE         	#IFDEF	EOF_USER
  154                   		#MACRO	INITEOF
  155 MACRO             		JSR	InitEOF
  156                   		#ENDMACRO
  157                   	#ENDIF
  158                   
  159                   
  160                   * The INITEOL macro is used to initialize the end-of-l
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   19
                        6502:macros/display.mac         14:13:52  

  161                   * You should invoke this macro only once, any time bef
  162                   * of WAITEOL.
  163      FALSE        	#IFDEF	EOL_USER
  167                   	#ENDIF
  168                   
  169                   
  170                   * The WAITEOF macro allows the programmer to wait unti
  171                   * hardware has just finished displaying the end-of-fra
  172                   * There's a short while (about 3 display lines of time
  173                   * hardware starts working on the first line of the new
  174                   * after end-of-frame it's safe to do stuff like change
  175                   * palette and things like that there
  176                   *??? Note that this macro currently provides only a cl
  177                   *??? EOF timing.  The EOF interrupt handler needs a bi
  178                   *??? get timing just right
  179                   		#MACRO	WAITEOF
  180 MACRO             		LDA	#DISPLAY_EOFFLAG
  181 MACRO             		TRB	DisplayFlags
  182 MACRO             systemp		.=	*
  183 MACRO             		BIT	DisplayFlags
  184 MACRO             		BEQ	systemp
  185                   		#ENDMACRO
  186                   
  187                   * The WAITNEOF macro waits until at least one EOF inte
  188                   * the last time the DISPLAY_EOFFLAG bit was reset
  189                   
  190                   		#MACRO	WAITNEOF
  191 MACRO             systemp		.=	*
  192 MACRO             		bit	DisplayFlags
  193 MACRO             		BPL	systemp		; assumes DISPLAY_EOFFLAG = $80
  194                   		#ENDMACRO
  195                   
  196                   
  197                   
  198                   * The WAITEOL macro allows the programmer to wait unti
  199                   * hardware has just finished displaying the end-of-lin
  200                   * There's a short while (many pixels of time) before t
  201                   * hardware starts working on the first pixel of the ne
  202                   * after end-of-line it's safe to do stuff like change 
  203                   * palette and things like that there
  204                   *??? Note that this macro currently provides only a cl
  205                   *??? EOL timing.  The EOL interrupt handler needs a bi
  206                   *??? get the timing just right
  207                   		#MACRO	WAITEOL
  208 MACRO             
  209 MACRO             		LDA	#DISPLAY_EOLFLAG
  210 MACRO             		TRB	DisplayFlags
  211 MACRO             systemp		.=	*
  212 MACRO             		BIT	DisplayFlags
  213 MACRO             		BEQ	systemp
  214                   		#ENDMACRO
  215                   
  216                   
  217                   		#MACRO	WAITNEOL
  218 MACRO             systemp		.=	*
  219 MACRO             		BIT	DisplayFlags
  220 MACRO             		BVC	systemp		; presumes that EOLFLAG equals $40
  221                   		#ENDMACRO
  222                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   20
                        6502:macros/display.mac         14:13:52  

  223                   
  224                   
  225                   * The FLIP macro does everything you need to flip the 
  226                   * The current orientation of the display should be tra
  227                   * code unless you happen to be rendering directly into
  228                   * can check the DISPLAY_SWAPFLAG of the DisplayFlags v
  229                   * whether or not the display is currently flipped.
  230                   		#MACRO	FLIP
  231 MACRO             		LDA	DISPCTL_RAM
  232 MACRO             		EOR	#DISP_FLIP
  233 MACRO             		STA	DISPCTL_RAM
  234 MACRO             		LDA	SPRSYS_RAM
  235 MACRO             		EOR	#LEFTHAND
  236 MACRO             		STA	SPRSYS_RAM
  237 MACRO             		STA	SPRSYS
  238                   		#ENDMACRO
  239                   
  240                   
  241                   
  242                   * The DBUF_DISPLAY macro does the double-buffering swa
  243                   * The macro causes the current offscreen buffer to be 
  244                   * as the buffer that will be displayed starting with t
  245                   * Also, it sets things up such that the current displa
  246                   * the new off-display rendering buffer that sprites wi
  247                   * with subsequent calls to SPRITES.
  248                   * Note that this macro doesn't swap the display buffer
  249                   * rather it sets things up for the buffers to be swapp
  250                   * the display is finished displaying the current on-di
  251                   * If you want to wait until just after the buffers are
  252                   * then you should use the WAITEOF macro immediately af
  253                   		#MACRO	DBUF_DISPLAY
  254 MACRO             ;!!! DISPLAY used to be called here in the DBUF macro.
  255 MACRO             ;!!! called during the end-of-frame handling
  256 MACRO             ;!!!		DISPLAY
  257 MACRO             
  258 MACRO             		PHP
  259 MACRO             		SEI
  260 MACRO             
  261 MACRO             
  262 MACRO             		;------	While still protected by the SEI,
  263 MACRO             		;------	copy RenderBuffer to DisplayBuffer
  264 MACRO             		LDA	RenderBuffer
  265 MACRO             		ldx	DisplayBuffer
  266 MACRO             		STA	DisplayBuffer
  267 MACRO             		stx	RenderBuffer
  268 MACRO             		LDA	RenderBuffer+1
  269 MACRO             		ldx	DisplayBuffer+1
  270 MACRO             		STA	DisplayBuffer+1
  271 MACRO             		stx	RenderBuffer+1
  272 MACRO             
  273 MACRO             		PLP
  274 MACRO             
  275                   		#ENDMACRO
  276                   
  277                   
  278                   
  279                   * The DISPLAY macro, after flipping DisplayBuffer as a
  280                   * state of FLIP, tells Handy hardware that DisplayBuff
  281                   * to be displayed
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   21
                        6502:macros/display.mac         14:13:52  

  282                   		#MACRO	DISPLAY
  283 MACRO             		LDA	DISPCTL_RAM
  284 MACRO             		STA	DISPCTL
  285 MACRO             		AND	#DISP_FLIP
  286 MACRO             		BEQ	??
  287 MACRO             		LDA	DisplayBuffer
  288 MACRO             		CLC
  289 MACRO             		ADC	#<DISPLAY_BUFSIZE-1
  290 MACRO             		TAX
  291 MACRO             		LDA	DisplayBuffer+1
  292 MACRO             		ADC	#>DISPLAY_BUFSIZE-1
  293 MACRO             		BRA	??2
  294 MACRO             ??
  295 MACRO             		LDX	DisplayBuffer
  296 MACRO             		LDA	DisplayBuffer+1
  297 MACRO             ??2
  298 MACRO             		DISP_AX
  299                   		#ENDMACRO
  300                   
  301                   
  302                   * The DISP_AX and DISP_AY macros set up the address co
  303                   * A (high-byte) and X or Y (low byte) as the next buff
  304                   * after the next end-of-frame
  305                   		#MACRO	DISP_AX
  306 MACRO             		PHP
  307 MACRO             		SEI
  308 MACRO             		STX	DISPADRL
  309 MACRO             		STA	DISPADRH
  310 MACRO             		PLP
  311                   		#ENDMACRO
  312                   
  313                   		#MACRO	DISP_AY
  314 MACRO             		PHP
  315 MACRO             		SEI
  316 MACRO             		STY	DISPADRL
  317 MACRO             		STA	DISPADRH
  318 MACRO             		PLP
  319                   		#ENDMACRO
  320                   
  321                   
  322                   
  323                   * The RGB_AXY macro presumes that you have Red, Green 
  324                   * registers A, X and Y respectively, and that you want
  325                   * to the color pen specified by the macro argument whe
  326                   * address of the GREEN register for the pen you want t
  327                   * Example setting pen 4 to yellow:
  328                   *     LDA     #$0F
  329                   *     LDX     #$0F
  330                   *     LDY     #$00
  331                   *     RGB_AXY GREEN4
  332                   		#MACRO	RGB_AXY
  333 MACRO             		STX	?0
  334 MACRO             		STA	sysptr
  335 MACRO             		TYA
  336 MACRO             		ASL
  337 MACRO             		ASL
  338 MACRO             		ASL
  339 MACRO             		ASL
  340 MACRO             		ORA	sysptr
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   22
                        6502:macros/display.mac         14:13:52  

  341 MACRO             		STA	?0+16
  342                   		#ENDMACRO
  343                   
  344                   
  345                   
  346                   * The RGB16 macros let you set up all the color regist
  347                   * One way or another, you supply to the macro with the
  348                   * that has an exact image of the sort of data that the
  349                   * registers expect, which is to say a table of 16 byte
  350                   * in the lower nybble your 16 green values,
  351                   * followed by a table of 16 bytes each with the upper 
  352                   * blue and the lower nybble containing red.
  353                   * The RGB16 macro expects an absolute address of the R
  354                   * The RGB16_I macro expects the address of a variable 
  355                   * the absolute address of the RGB table.
  356                   * Note that this macro presumes that 16 Green register
  357                   * sequentially by 16 BlueRed registers.
  358                   
  359                   		#MACRO	RGB16
  360 MACRO             		;------	Write the absolute address to sysptr
  361 MACRO             		LDA	#<?0
  362 MACRO             		STA	sysptr
  363 MACRO             		LDA	#>?0
  364 MACRO             		STA	sysptr+1
  365 MACRO             		;------	copy the palette
  366 MACRO             		LDY	#31
  367 MACRO             		LDA	(sysptr),Y
  368 MACRO             		STA	GREEN0,Y
  369 MACRO             		DEY
  370 MACRO             		BPL	*-6
  371                   		#ENDMACRO
  372                   
  373                   		#MACRO	RGB16_I
  374 MACRO             		LDA	?0
  375 MACRO             		STA	sysptr
  376 MACRO             		LDA	?0+1
  377 MACRO             		STA	sysptr+1
  378 MACRO             		;------	copy the palette
  379 MACRO             		LDY	#31
  380 MACRO             		LDA	(sysptr),Y
  381 MACRO             		STA	GREEN0,Y
  382 MACRO             		DEY
  383 MACRO             		BPL	*-6
  384                   		#ENDMACRO
  385                   
  386                   
  387                   
  388                   * The HOFF and VOFF macros set up the HOFF and VOFF fo
  389                   * display list rendering.
  390                   * HOFF8 and VOFF8 are used with 8-bit positioning wher
  391                   * is in A (the upper byte is set to zero for you)
  392                   *
  393                   * HOFF16 and VOFF16 are used with 16-bit positioning w
  394                   * your offset value is in A, the upper byte is in Y
  395                   		#MACRO	HOFF8
  396 MACRO             		STA	HOFFL
  397                   		#ENDMACRO
  398                   
  399                   		#MACRO	VOFF8
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   23
                        6502:macros/display.mac         14:13:52  

  400 MACRO             		STA	VOFFL
  401                   		#ENDMACRO
  402                   
  403                   		#MACRO	HOFF16
  404 MACRO             		STA	HOFFL
  405 MACRO             		STY	HOFFH
  406                   		#ENDMACRO
  407                   
  408                   		#MACRO	VOFF16
  409 MACRO             		STA	VOFFL
  410 MACRO             		STY	VOFFH
  411                   		#ENDMACRO
  412                   
  413                   
  414                   
  415                   * If AUTO_TIMEOUT_USER is defined, then add body to th
  416      TRUE         	  #IFDEF AUTO_TIMEOUT_USER
  417                   	    #MACRO TIMEOUT
  418 MACRO             
  419 MACRO             	    LDA SWITCHES
  420 MACRO             	    AND #PAUSE_SWITCH
  421 MACRO             	    ORA JOYSTICK
  422 MACRO             	    BEQ ??3		; If no bits set, do nothing
  423 MACRO             	    RESET_TIMEOUT
  424 MACRO             
  425 MACRO             ??3	.= *
  426 MACRO             	    INC TimeoutCount	 ;-- Has TimeoutCount counted to
  427 MACRO             	    BPL ??
  428 MACRO             	    STZ TimeoutCount
  429 MACRO             	    INC TimeoutCount+1
  430 MACRO             	    BPL ??
  431 MACRO             	    STZ TimeoutCount+1
  432 MACRO             
  433 MACRO             	    LDA IODAT	 	;-- TimeoutCount hit $8000.  Power pl
  434 MACRO             	    AND #EXTERNAL_POWER
  435 MACRO             	    BEQ ??2	; No power cord, so go turn off the juice
  436 MACRO             
  437 MACRO             	    INC TimeoutCount+2	;-- Plugged in.  Let above cou
  438 MACRO             	    LDA TimeoutCount+2
  439 MACRO             	    CMP #13	; Lucky 13!
  440 MACRO             	    BLT ??
  441 MACRO             ??2	.= *
  442 MACRO             	    STZ SYSCTL1	; Time's up, turn power off
  443 MACRO             ??	.= *
  444                   	    #ENDM
  445                   	  #ELSE
  448                   	  #ENDIF
  449                   
  450                   
  451                   
   71                   		.IN 6502:macros/sprite.mac
    1                   ; Tue Sep 18 16:53:24 1990
    2                   * == sprite.mac ======================================
    3                   *
    4                   * Sprite Rendering Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   24
                        6502:macros/sprite.mac          14:13:52  

    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 18-Sep-90	SHL		Added code to work around RICOH bug
   12                   *				and support for the NO_RICOH_PATCH switch
   13                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   14                   *				Shortened INITSUZY (removed unneeded STZs)
   15                   *				Shortened WAITSUZY (removed NOPs)
   16                   * 8 May 89	-RJ		Rewrote the SPRITES macro to use the f
   17                   *				of the new assembler, added the RESPRITE macro
   18                   * 6 Apr 89	-RJ		Moved SPRSYS init out of INITSUZY into
   19                   * 2 Feb 89	James Donald	Fix to WAITSUZY macro makes BC
   20                   *				to the correct location
   21                   * 26 Jan 89	-RJ		Incorporated Steve's WAITSUZY change,
   22                   *				rid of all references to Interruptus
   23                   * 18 Jan 89	-RJ		INITSUZY nows initializes SPRSYS and
   24                   *				SPRSYS_RAM to zero
   25                   * 16 Jan 89	SHL		Modified WAITSUZY to wait until SUZY 
   26                   *				instead of waiting for interrupts to not
   27                   *				happen.
   28                   * 30 Dec 88	-RJ		Changed errant #<?0 to #>?0 in SPRITE
   29                   *				Non-HANDYIO SPRITES macro no longer sets a
   30                   *				DISPLAY-request bit in X register
   31                   *				Moved WAITSUZY above SPRITES
   32                   * 26 Dec 88	-RJ		Added INITSUZY and WAITSUZY macros
   33                   * 24 Dec 88	-RJ		Got rid of the PSPRITE macro.  Redefi
   34                   *				SPRITES so that it doesn't automatically do
   35                   *				a DISPLAY anymore.
   36                   * Early 88	=RJ Mical=	Created this file!
   37                   *
   38                   * ====================================================
   39                   
   40                   
   41                   
   42                   * The INITSUZY macro sets up Suzy to do sprites correc
   43                   * to render sprites (which you do with the SPRITES mac
   44                   * the INITSUZY macro first
   45                   		#MACRO	INITSUZY
   46 MACRO             		LDA	#$F3
   47 MACRO             		STA	SPRINIT
   48 MACRO             		LDA	#$7F
   49 MACRO             		STA	HSIZOFFL
   50 MACRO             		STA	VSIZOFFL
   51 MACRO             		LDA	#$01
   52 MACRO             		STA	SUZYBUSEN
   53 MACRO             		STZ	SDONEACK
   54                   		#ENDMACRO
   55                   
   56                   
   57                   
   58                   * The WAITSUZY macro allows us to wait for Suzy to be 
   59                   * 16-Jan-89 - SHL - modified to wait until SUZY is fin
   60                   * politely if she is done yet.
   61                   * NOTE:  this macro now presumes that the SPRITEWORKIN
   62                   * is bit 0.
   63                   
   64      FALSE        	#IFDEF NO_RICOH_PATCH
   75                   	#ELSE
   76                   
   77                   		#MACRO	WAITSUZY
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   25
                        6502:macros/sprite.mac          14:13:52  

   78 MACRO             ??1	.= *
   79 MACRO             		lda #SUZY_SPACE
   80 MACRO             		tsb MAPCTL		; disable SUZY addresses
   81 MACRO             		STZ	CPUSLEEP
   82 MACRO             		trb MAPCTL		; reenable SUZY addresses
   83 MACRO             		LDA	SPRSYS		; check to see if SUZY is done
   84 MACRO             		LSR	A		; get bit 0 into carry
   85 MACRO             		BCS	??1		; nope, let's wait some more
   86 MACRO             		STZ	SDONEACK
   87                   		#ENDMACRO
   88                   
   89                   	#ENDIF ;DEF NO_RICOH_PATCH
   90                   
   91                   
   92                   
   93                   * The SPRITES macro causes sprites to be rendered star
   94                   * sprite address arg.
   95                   *
   96                   * If you are going to render more than one sprite list
   97                   * display, you should use the SPRITES macro for the fi
   98                   * the RESPRITE macro for all following lists.
   99                   *
  100                   * Note that this macro does not cause the buffer to be
  101                   * the buffer displayed, you need to use a display macr
  102                   *
  103                   * The first arg is an address of either the first SCB 
  104                   * the address of a variable that contains the address 
  105                   * The second arg to the SPRITES macro describes whethe
  106                   * an absolute or indirect SCB address.
  107                   * The second arg should be 0 or 1, standing for:
  108                   *     0 = first arg is the address is the first SCB to
  109                   *     1 = first arg is the addr of a variable pointing
  110                   		#MACRO	SPRITES
  111 MACRO             		#IF	?1 <> 0
  112 MACRO             		  LDA	?0
  113 MACRO             		  STA	SCBNEXTL
  114 MACRO             		  LDA	?0+1
  115 MACRO             		  STA	SCBNEXTH
  116 MACRO             		#ELSE
  117 MACRO             		  LDA	#<?0
  118 MACRO             		  STA	SCBNEXTL
  119 MACRO             		  LDA	#>?0
  120 MACRO             		  STA	SCBNEXTH
  121 MACRO             		#ENDIF
  122 MACRO             
  123 MACRO             		LDA	RenderBuffer
  124 MACRO             		STA	VIDBASL
  125 MACRO             		LDA	RenderBuffer+1
  126 MACRO             		STA	VIDBASH
  127 MACRO             
  128 MACRO             		STZ	SDONEACK
  129 MACRO             
  130 MACRO             		LDA	#$01
  131 MACRO             		STA	SPRGO
  132 MACRO             		WAITSUZY
  133                   		#ENDMACRO
  134                   
  135                   
  136                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   26
                        6502:macros/sprite.mac          14:13:52  

  137                   * The RESPRITE macro causes sprites to be rendered sta
  138                   * sprite address arg.  This macro should be used by th
  139                   * want to render more than one sprite list when buildi
  140                   * This macro is identical to the SPRITES macro except 
  141                   * startup code isn't included.  You should call You sh
  142                   * RESPRITE macro only after a call to the SPRITES macr
  143                   *
  144                   * Note that this macro does not cause the buffer to be
  145                   * the buffer displayed, you need to use a display macr
  146                   *
  147                   * The first arg is an address of either the first SCB 
  148                   * the address of a variable that contains the address 
  149                   * The second arg to the SPRITES macro describes whethe
  150                   * an absolute or indirect SCB address.
  151                   * The second arg should be 0 or 1, standing for:
  152                   *     0 = first arg is the address is the first SCB to
  153                   *     1 = first arg is the addr of a variable pointing
  154                   		#MACRO	RESPRITE
  155 MACRO             		#IF	?1 <> 0
  156 MACRO             		  LDA	?0
  157 MACRO             		  STA	SCBNEXTL
  158 MACRO             		  LDA	?0+1
  159 MACRO             		  STA	SCBNEXTH
  160 MACRO             		#ELSE
  161 MACRO             		  LDA	#<?0
  162 MACRO             		  STA	SCBNEXTL
  163 MACRO             		  LDA	#>?0
  164 MACRO             		  STA	SCBNEXTH
  165 MACRO             		#ENDIF
  166 MACRO             
  167 MACRO             		STZ	SDONEACK
  168 MACRO             
  169 MACRO             		LDA	#$01
  170 MACRO             		STA	SPRGO
  171 MACRO             		WAITSUZY
  172                   		#ENDMACRO
  173                   
  174                   
  175                   
   72                   		.IN 6502:macros/sys.mac
    1                   ; Wednesday 27-Jun-90 11:49:43
    2                   * == sys.mac =========================================
    3                   *
    4                   * System Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 20-Jun-90	SHL		RAMCART_USER support added
   12                   * 28-Mar-90	SHL		INITINT new clears and resets serial 
   13                   *				if SERIALPORT_USER defined
   14                   * 22-Mar-90	SHL		INITINT now vectors all IRQS to IntRe
   15                   *				instead of user supplied RTS
   16                   * 20-Mar-90	SHL		Removed SEI, CLI from INITINT macro
   17                   * 7-Mar-90	SHL		DISPCTL_RAM now initialized in INITSYS
   18                   * 9-Feb-90	SHL		Modified BRK_USER support to force bre
   19                   *				Howard board, unless user uses the SET_BRK
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   27
                        6502:macros/sys.mac             14:13:52  

   20                   *				macro to redirect breaks
   21                   *				INITINT is now required before any use of
   22                   *				INITEOF, INITEOL or SET_DISPLAY... macros
   23                   *				Added HBRK macro
   24                   *				Moved initialization of MAPCTL to INITSYS
   25                   *				Removed HFIX1 macros
   26                   * 31 May 89	-RJ		Added BRK_USER support to INITINT mac
   27                   *				Killed call to InitSys
   28                   *				Added SET_BRK macro
   29                   * 25 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   30                   * 22 May 89	-RJ		Changed init'ing of IODIR's LIGHT_OFF
   31                   *				RESTLESS, also now init IODAT too
   32                   * 16 May 89	-RJ		Added setting TXOPEN to SERCTL in INI
   33                   * 11 May 89	-RJ		Moved declaration of sysIntTable to s
   34                   * 10 May 89	-RJ		Changed CART_STROBE to CART_ADDR_DATA
   35                   * 1 May 89	-RJ		Added the INITINTS macro for user-cont
   36                   *				interrupt table handling.  Also defined
   37                   *				and allow redefinition of sysIntTable, which
   38                   *				is now used in the display.src file
   39                   * 20 Apr 89	-RJ		Added initialization of IODIR and IOD
   40                   * 6 Apr 89	-RJ		Moved init of SPRSYS into INITSYS
   41                   * 19 Mar 89	-RJ		Added HFIX1 macros, modified INITSYS 
   42                   * 18 Mar 89	=RJ Mical=	Created this file!
   43                   *
   44                   * ====================================================
   45                   
   46                   
   47                   * HBRK macro forces a break on a Howard board.  On a c
   48                   * executed as one-byte one-cycle NOP.
   49                   	#MACRO HBRK
   50 MACRO             	.HS 13
   51                   	#ENDM
   52                   
   53                   
   54                   * Do some needed hardware initialization to get system
   55                   	#MACRO INITSYS
   56 MACRO             
   57 MACRO             	LDA #DISP_COLOR+DISP_FOURBIT+DMA_ENABLE
   58 MACRO             	STA DISPCTL_RAM
   59 MACRO             
   60 MACRO             	LDA #LEFTHAND		; the equates have been defined to pre
   61 MACRO             	STA SPRSYS_RAM
   62 MACRO             	STA SPRSYS
   63 MACRO             
   64 MACRO             	LDA #VECTOR_SPACE	; map in all RAM except for CPU vec
   65 MACRO             	STA MAPCTL
   66 MACRO             
   67 MACRO             	;------	Set parallel CART_ADDR_DATA and RESTLESS as o
   68 MACRO             	;------ If RAMCART_USER, set AUDIN (READ_ENABLE) as o
   69 MACRO             	;------	all others as input
   70 MACRO              #IFDEF RAMCART_USER
   71 MACRO             	LDA #CART_ADDR_DATA+RESTLESS+READ_ENABLE
   72 MACRO              #ELSE
   73 MACRO             	LDA #CART_ADDR_DATA+RESTLESS
   74 MACRO              #ENDIF
   75 MACRO             	STA IODAT_RAM
   76 MACRO             	STA IODAT
   77 MACRO             	STA IODIR_RAM
   78 MACRO             	STA IODIR
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   28
                        6502:macros/sys.mac             14:13:52  

   79 MACRO             
   80 MACRO             	LDA #TXOPEN	; Turn off serial IRQs before starting
   81 MACRO             	STA SERCTL	;  and make sure serial port is open-colle
   82 MACRO             
   83 MACRO             	  #IFDEF AUTO_TIMEOUT_USER
   84 MACRO             		STZ TimeoutCount+1
   85 MACRO             		STZ TimeoutCount+2
   86 MACRO             	  #ENDIF
   87 MACRO             
   88                   	#ENDMACRO
   89                   
   90                   
   91                   	#MACRO	INITINT
   92 MACRO             sysIntTable	.EQ ?0
   93 MACRO             
   94 MACRO             		;------	Set the break and int vectors to point to ou
   95 MACRO             		LDA #<UserIntHandler
   96 MACRO             		STA CPU_IRQ
   97 MACRO             		LDA #>UserIntHandler
   98 MACRO             		STA CPU_IRQ+1
   99 MACRO             
  100 MACRO             		LDX #8*2-1
  101 MACRO             ??	.= *
  102 MACRO             		  LDA #>IntReturn
  103 MACRO             		  STA ?0,X
  104 MACRO             		  DEX
  105 MACRO             		  LDA #<IntReturn
  106 MACRO             		  STA ?0,X
  107 MACRO             		  DEX
  108 MACRO             		 BPL ??
  109 MACRO             
  110 MACRO             	  #IFDEF BRK_USER
  111 MACRO             		LDA CPU_NMI
  112 MACRO             		STA BRK_vector+2
  113 MACRO             		LDA CPU_NMI+1
  114 MACRO             		STA BRK_vector+3
  115 MACRO             	  #ENDIF ; of #IFDEF BRK_USER
  116 MACRO             
  117 MACRO             	  #IFDEF SERIALPORT_USER
  118 MACRO             		lda #TXOPEN
  119 MACRO             		sta SERCTL
  120 MACRO             		lda #SERIAL_INT
  121 MACRO             		sta INTRST
  122 MACRO             	  #ENDIF
  123 MACRO             
  124                   	#ENDMACRO
  125                   
  126                   
  127                   	#MACRO SET_BRK
  128 MACRO             		LDA #<?0
  129 MACRO             		STA BRK_vector+2
  130 MACRO             		LDA #>?0
  131 MACRO             		STA BRK_vector+3
  132 MACRO             		LDA #$EA	; nop
  133 MACRO             		STA BRK_vector
  134                   	#ENDMACRO
  135                   
  136                   
  137                   	#MACRO RESET_TIMEOUT
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   29
                        6502:macros/sys.mac             14:13:52  

  138 MACRO             		STZ TimeoutCount+1	; else reset timeout counter
  139 MACRO             		STZ TimeoutCount+2
  140                   	#ENDMACRO
  141                   
  142                   
  143                   	#MACRO ECHO_VALUE
  144 MACRO             		.ECHO "Value of ?0 is ?%d0 ($?%x0)"
  145                   	#ENDMACRO
  146                   
  147                   
   73                   		.IN 6502:macros/msgmgr.mac
    1                   ; Tue Aug 29 10:01:14 1989
    2                   *=====================================================
    3                   * 
    4                   * ComLink  --  Handy Software
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, 1989, Epyx, Inc.
    8                   * 
    9                   * Date       Name	Description
   10                   * ---------  ---------- ------------------------------
   11                   *
   12                   * Aug 24 89  LEA	Created this file.
   13                   *=====================================================
   14                   
   15                   
   16                   
   17                   
   18                   
   19                   
   20                   #MACRO INIT_ONESHOT
   21 MACRO             *-----------------------------------------------------
   22 MACRO             * Set up timer for one-shot operation with interrupts 
   23 MACRO             * first arg is timer number, second arg is the clock s
   24 MACRO             *=====================================================
   25 MACRO             		#IF  ?1 > 7
   26 MACRO             		.echo	"Bogus timer clock select value"
   27 MACRO             		.end
   28 MACRO             		#ENDIF
   29 MACRO             ??		.=	TIMER0+?0*4
   30 MACRO             
   31 MACRO             		stz	??+TIM_CONTROLA	; inhibit all timer activity
   32 MACRO             
   33 MACRO             		lda	#255		; preset count far above zero
   34 MACRO             		sta	??+TIM_COUNT
   35 MACRO             
   36 MACRO             		lda	#TIMER_DONE	; inhibit down-counting
   37 MACRO             		sta	??+TIM_CONTROLB
   38 MACRO             
   39 MACRO             		lda	#ENABLE_INT+ENABLE_COUNT+?1
   40 MACRO             		sta	??+TIM_CONTROLA	; put it in one-shot mode
   41                   #ENDMACRO
   42                   
   43                   
   44                   #MACRO START_ONESHOT
   45 MACRO             *-----------------------------------------------------
   46 MACRO             * first arg is timer number, second is count
   47 MACRO             *=====================================================
   48 MACRO             ??		.=	TIMER0+?0*4
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   30
                        6502:macros/msgmgr.mac          14:13:52  

   49 MACRO             
   50 MACRO             		lda	#?1-1		; timer runs for count+1 clocks
   51 MACRO             		sta	??+TIM_COUNT
   52 MACRO             
   53 MACRO             		stz	??+TIM_CONTROLB	; reset the timer-done bit
   54                   #ENDMACRO
   55                   
   56                   
   57                   #MACRO STOP_ONESHOT
   58 MACRO             *-----------------------------------------------------
   59 MACRO             * arg is timer number
   60 MACRO             *=====================================================
   61 MACRO             ??		.=	TIMER0+?0*4
   62 MACRO             
   63 MACRO             		lda	#TIMER_DONE
   64 MACRO             		sta	??+TIM_CONTROLB
   65                   #ENDMACRO
   66                   
   67                   
   68                   
   69                   
   70                   
   71                   
   72                   
   74                   
   75                   		.IN 6502:macros/controls.mac
    1                   
    2                   * === controls.mac ===================================
    3                   * 
    4                   * Apple Joystick / Switches Input Macros  --  Handy So
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, 1989, Epyx, Inc.
    8                   * 
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   12                   *				Removed GETINPUT
   13                   * 3 July 89	-RJ		The RESET_TIMEOUT logic is moved from
   14                   *				input macros to the display TIMEOUT macro
   15                   * 15 Jun 89	Carl Mey	Modified GETSWITCH to test PAUSE_
   16                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   17                   *  2 Jan 89	-RJ		Added GETINPUT, which you must call b
   18                   *				GETJOY and/or GETSWITCH.
   19                   * Mid 88	=RJ Mical=	Created this file!
   20                   * 
   21                   * ====================================================
   22                   
   23                   
   24                   
   25                   	#MACRO GETJOY
   26 MACRO             	  LDA JOYSTICK
   27                   	#ENDMACRO
   28                   
   29                   
   30                   
   31                   	#MACRO GETSWITCH
   32 MACRO             	  LDA SWITCHES
   33                   	#ENDMACRO
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   31
                        6502:macros/controls.mac        14:13:52  

   34                   
   35                   
   36                   
   76                   		.IN 6502:macros/handymath.mac
    1                   
    2                   * === handymath.mac ==================================
    3                   *
    4                   * Handy Math Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 9-Feb-90	SHL		Removed Apple emulation compatibility
   12                   *				Removed all references to HANDYMATH
   13                   * 2 Jan 89	-RJ		Changed HANDYMATH so that it must be d
   14                   *				0 = Handy hardware exists, so use it
   15                   *				1 = Use Handy math software
   16                   *				2 = Use math software with fast fat multiply
   17                   * 30-Dec-88	=RJ Mical=	Changed define throughout file 
   18                   *				HANDYMATH rather than HANDYIO to be defined
   19                   *				to use Handy math hardware or fake software
   20                   * Late 88	=RJ Mical=	Created this file!
   21                   *
   22                   * ====================================================
   23                   
   24                   
   25                   * The WAITMATH macro is used if you don't have anythin
   26                   * Suzy is executing your math.  You must wait for Suzy
   27                   * reading the results, but you don't have to wait if y
   28                   * else to do in the meanwhile.
   29                   	#MACRO WAITMATH
   30 MACRO             ??0	.= *
   31 MACRO             	BIT SPRSYS
   32 MACRO             	BMI ??0
   33                   	#ENDM
   34                   
   35                   
   36                   * If you are doing multiply-and-accumulate, you need t
   37                   * to some known state.  If you want the accumulator se
   38                   * the CLEARACCUM macro.  This macro is good because it
   39                   * the autoreset math register scheme when your code is
   40                   	#MACRO CLEARACCUM
   41 MACRO             	STZ MATHK
   42 MACRO             	STZ MATHM
   43                   	#ENDM
   44                   
   45                   
   46                   
   77                   
   78                   *-----------------------------------------------------
   79                   
   80                   * Other constants
   81                   
   82      0030         LEFTEDGE	.EQ 128-80	; left edge of screen (centered at
   83      004D         TOPEDGE		.EQ 128-51	; top edge of screen
   84                   
   85                   *-----------------------------------------------------
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   32
                                                        14:13:52  

   86                   
   87                   		BEGIN_ZPAGE
    1      FFFE       + TEMPORG	  .= *
    2 FFFE:           + 	  .ORG NEXTZPG
    3                 + 
   88 0006:             ZSTART
   89                   
   90                   * Required by Redeye
   91 0006:             NumberOfPlayers	.DS 1	; number of players in this game
   92 0007:             PlayerNumber	.DS 1	; resident player number in multi-p
   93                   
   94                   * Required by the glue code
   95 0008:             restartflag	.DS 1
   96 0009:             restartcount	.DS 1
   97                   
   98 000A:             oldjoystick	.DS MAX_PLAYERS
   99 001A:             joystick	.DS MAX_PLAYERS
  100 002A:             oldswitch	.DS MAX_PLAYERS
  101 003A:             switch		.DS MAX_PLAYERS
  102                   
  103                   * Other zero page usage
  104 004A:             ind0		.DS 2
  105 004C:             ind1		.DS 2
  106 004E:             ind2		.DS 2
  107                   
  108 0050:             temp0		.DS 1
  109 0051:             temp1		.DS 1
  110 0052:             temp2		.DS 1
  111 0053:             temp3		.DS 1
  112 0054:             temp4		.DS 1
  113 0055:             temp5		.DS 1
  114                   
  115 0056:             direction	.DS MAX_PLAYERS
  116 0066:             xpos		.DS MAX_PLAYERS
  117 0076:             ypos		.DS MAX_PLAYERS
  118 0086:             transitions	.DS MAX_PLAYERS
  119                   
  120                   
  121                   * Only used when debugging redeye system code
  122      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  130                    #ENDIF
  131                   
  132                   
  133 0096:             ZEND
  134                   		END_ZPAGE
    1      0096       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 0096:           + 	  .ORG TEMPORG
    6                 + 
  135                   
  136                   *-----------------------------------------------------
  137                   
  138 FFFE:             	.OR $200
  139                   	.RU
  140                   
  141 0200:             start
  142 0200:D8           	cld
  143 0201:A2 FF        	ldx #$ff
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   33
                                                        14:13:52  

  144 0203:9A           	txs
  145                   	INITSYS		; should only be done once!
    1 0204:A9 0D      + 	LDA #DISP_COLOR+DISP_FOURBIT+DMA_ENABLE
    2 0206:8D ** **   + 	STA DISPCTL_RAM
    3 0209:A9 08      + 	LDA #LEFTHAND		
    4 020B:8D ** **   + 	STA SPRSYS_RAM
    5 020E:8D 92 FC   + 	STA SPRSYS
    6 0211:A9 08      + 	LDA #VECTOR_SPACE	
    7 0213:8D F9 FF   + 	STA MAPCTL
    8      FALSE         #IFDEF RAMCART_USER
   10                 +  #ELSE
   11 0216:A9 0A      + 	LDA #CART_ADDR_DATA+RESTLESS
   12                 +  #ENDIF
   13 0218:8D ** **   + 	STA IODAT_RAM
   14 021B:8D 8B FD   + 	STA IODAT
   15 021E:8D ** **   + 	STA IODIR_RAM
   16 0221:8D 8A FD   + 	STA IODIR
   17 0224:A9 04      + 	LDA #TXOPEN	
   18 0226:8D 8C FD   + 	STA SERCTL	
   19      TRUE       + 	  #IFDEF AUTO_TIMEOUT_USER
   20 0229:9C ** **   + 		STZ TimeoutCount+1
   21 022C:9C ** **   + 		STZ TimeoutCount+2
   22                 + 	  #ENDIF
   23                 + 
  146                   
  147 022F:             restart			; restart label needed by glue code - RESET 
  148 022F:78           	sei
  149 0230:20 ** **     	jsr erasezpage	; erase all of my variables (garantee 
  150                   
  151                   	INITINT	MyIntTable	; set up IRQ handler
    1      ****       + sysIntTable	.EQ MyIntTable
    2 0233:A9 **      + 		LDA #<UserIntHandler
    3 0235:8D FE FF   + 		STA CPU_IRQ
    4 0238:A9 **      + 		LDA #>UserIntHandler
    5 023A:8D FF FF   + 		STA CPU_IRQ+1
    6 023D:A2 0F      + 		LDX #8*2-1
    7      023F       + INITINT.0006	.= *
    8 023F:A9 **      + 		  LDA #>IntReturn
    9 0241:9D ** **   + 		  STA MyIntTable,X
   10 0244:CA         + 		  DEX
   11 0245:A9 **      + 		  LDA #<IntReturn
   12 0247:9D ** **   + 		  STA MyIntTable,X
   13 024A:CA         + 		  DEX
   14 024B:10 F2      + 		 BPL INITINT.0006
   15      TRUE       + 	  #IFDEF BRK_USER
   16 024D:AD FA FF   + 		LDA CPU_NMI
   17 0250:8D ** **   + 		STA BRK_vector+2
   18 0253:AD FB FF   + 		LDA CPU_NMI+1
   19 0256:8D ** **   + 		STA BRK_vector+3
   20                 + 	  #ENDIF 
   21      TRUE       + 	  #IFDEF SERIALPORT_USER
   22 0259:A9 04      + 		lda #TXOPEN
   23 025B:8D 8C FD   + 		sta SERCTL
   24 025E:A9 10      + 		lda #SERIAL_INT
   25 0260:8D 80 FD   + 		sta INTRST
   26                 + 	  #ENDIF
   27                 + 
  152                   
  153                   	SETDBUF buffer1,buffer2	; initialize system pointers 
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   34
                        testredeye.src                  14:13:52  

    1 0263:A9 **      + 		LDA	#<buffer1
    2 0265:8D ** **   + 		STA	RenderBuffer
    3 0268:A9 **      + 		LDA	#>buffer1
    4 026A:8D ** **   + 		STA	RenderBuffer+1
    5 026D:A9 **      + 		LDA	#<buffer2
    6 026F:8D ** **   + 		STA	DisplayBuffer
    7 0272:A9 **      + 		LDA	#>buffer2
    8 0274:8D ** **   + 		STA	DisplayBuffer+1
    9 0277:9C ** **   + 		STZ	DisplayFlags
   10                 + 
  154                   
  155                   	SETDISP_60	; initialize display to 60hz
    1                   		SETDISP	$9E,$98,$68,$9F,$29
    1 027A:A9 9E      + 		LDA	#$9E
    2 027C:8D 00 FD   + 		STA	HCOUNT+TIM_BACKUP
    3      FALSE        	#IFDEF EOL_USER
    5                 + 	#ELSE
    6 027F:A9 18      + 		lda #$98&%01111111
    7                 + 	#ENDIF
    8 0281:8D 01 FD   + 		STA	HCOUNT+TIM_CONTROLA
    9 0284:A9 68      + 		LDA	#$68
   10 0286:8D 08 FD   + 		STA	VCOUNT+TIM_BACKUP
   11 0289:A9 9F      + 		lda #$9F|%10000000
   12 028B:8D 09 FD   + 		STA	VCOUNT+TIM_CONTROLA
   13 028E:A9 29      + 		LDA	#$29
   14 0290:8D 93 FD   + 		STA	PBKUP
   15      FALSE        	#IFNDEF	EOF_USER
   17                 + 	#ENDIF
   18                 + 
    2                 + 
  156                   	INITEOF		; start EOF handler
    1 0293:20 ** **   + 		JSR	InitEOF
    2                 + 
  157                   
  158                   	INITSUZY	; initialize SUZY
    1 0296:A9 F3      + 		LDA	#$F3
    2 0298:8D 83 FC   + 		STA	SPRINIT
    3 029B:A9 7F      + 		LDA	#$7F
    4 029D:8D 28 FC   + 		STA	HSIZOFFL
    5 02A0:8D 2A FC   + 		STA	VSIZOFFL
    6 02A3:A9 01      + 		LDA	#$01
    7 02A5:8D 90 FC   + 		STA	SUZYBUSEN
    8 02A8:9C 90 FD   + 		STZ	SDONEACK
    9                 + 
  159                   
  160 02AB:A9 30        	lda #LEFTEDGE	; set world coordinate for upper-left s
  161                   	HOFF8
    1 02AD:8D 04 FC   + 		STA	HOFFL
    2                 + 
  162 02B0:A9 4D        	lda #TOPEDGE
  163                   	VOFF8
    1 02B2:8D 06 FC   + 		STA	VOFFL
    2                 + 
  164                   
  165 02B5:58           	cli		; let the IRQs roll
  166                   
  167 02B6:AD ** **     	lda SPRSYS_RAM
  168 02B9:29 7F        	and #<~SIGNMATH	; set all math to unsigned
  169 02BB:09 20        	ora #NO_COLLIDE	; and globally disable hardware colli
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   35
                                                        14:13:52  

  170 02BD:8D ** **     	sta SPRSYS_RAM
  171 02C0:8D 92 FC     	sta SPRSYS
  172                   
  173 02C3:20 ** **     	jsr setpalette	; initialize palette
  174 02C6:20 ** **     	jsr erasescreen	; initialize screen
  175 02C9:20 ** **     	jsr dodbuf	; make sure display is showing
  176                   
  177                   	WAITEOF		; make sure DBUF takes hold
    1 02CC:A9 **      + 		LDA	#DISPLAY_EOFFLAG
    2 02CE:1C ** **   + 		TRB	DisplayFlags
    3      02D1       + systemp		.=	*
    4 02D1:2C ** **   + 		BIT	DisplayFlags
    5 02D4:F0 FB      + 		BEQ	systemp
    6                 + 
  178                   
  179 02D6:20 ** **     	jsr do_logon	; call glue routine logon handler
  180                   
  181 02D9:A2 0F        	ldx #MAX_PLAYERS-1	; initialize all players & their p
  182 02DB:A9 80        .20	  lda #$80
  183 02DD:95 66        	  sta xpos,x
  184 02DF:95 76        	  sta ypos,x
  185 02E1:8A           	  txa
  186 02E2:29 07        	  and #7
  187 02E4:95 56        	  sta direction,x
  188 02E6:CA           	  dex
  189 02E7:10 F2        	 bpl .20
  190                   
  191 02E9:20 ** **     	jsr do_start_comlink	; call glue routine redeye initi
  192                   
  193 02EC:             dogame
  194 02EC:20 ** **     	  jsr do_comlink_joysticks	; call glue routine redeye
  195                   
  196 02EF:20 ** **     	  jsr processplayers		; do a game frame
  197                   
  198      FALSE         #IFDEF SPLIT_SEND_RECEIVE
  200                    #ENDIF ;DEF SPLIT_SEND_RECEIVE
  201                   
  202 02F2:20 ** **     	  jsr showscreen		; show the screen
  203 02F5:20 ** **     	  jsr dodbuf
  204                   	  WAITEOF
    1 02F8:A9 **      + 		LDA	#DISPLAY_EOFFLAG
    2 02FA:1C ** **   + 		TRB	DisplayFlags
    3      02FD       + systemp		.=	*
    4 02FD:2C ** **   + 		BIT	DisplayFlags
    5 0300:F0 FB      + 		BEQ	systemp
    6                 + 
  205 0302:80 E8        	 bra dogame			; do it all again
  206                   
  207                   
  208 0304:             processplayers
  209 0304:A2 00        	ldx #0
  210 0306:B4 56        .00	  ldy direction,x
  211 0308:B5 1A        	  lda joystick,x
  212 030A:89 20        	  bit #JOY_RIGHT
  213 030C:F0 **        	  beq .01
  214 030E:C8           	  iny
  215 030F:89 10        .01	  bit #JOY_LEFT
  216 0311:F0 **        	  beq .02
  217 0313:88           	  dey
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   36
                                                        14:13:52  

  218 0314:98           .02	  tya
  219 0315:29 07        	  and #$07
  220 0317:A8           	  tay
  221 0318:95 56        	  sta direction,x
  222 031A:18           	  clc
  223 031B:B9 ** **     	  lda xvel,y
  224 031E:75 66        	  adc xpos,x
  225 0320:95 66        	  sta xpos,x
  226 0322:18           	  clc
  227 0323:B9 ** **     	  lda yvel,y
  228 0326:75 76        	  adc ypos,x
  229 0328:95 76        	  sta ypos,x
  230 032A:E4 06        	  cpx NumberOfPlayers
  231 032C:E8           	  inx
  232 032D:90 D7        	 bcc .00
  233                   
  234 032F:60           	rts
  235                   
  236                   
  237 0330:             showscreen
  238 0330:20 ** **     	jsr erasescreen
  239                   
  240 0333:A9 3A        	lda #LEFTEDGE+10
  241 0335:8D ** **     	sta hidigitscb+SCB_HPOS
  242 0338:A9 44        	lda #LEFTEDGE+20
  243 033A:8D ** **     	sta lodigitscb+SCB_HPOS
  244                   
  245 033D:A2 00        	ldx #0
  246 033F:E0 08        .00	  cpx #8
  247 0341:D0 **        	  bne .02
  248 0343:A9 58        	  lda #LEFTEDGE+40
  249 0345:8D ** **     	  sta hidigitscb+SCB_HPOS
  250 0348:A9 62        	  lda #LEFTEDGE+50
  251 034A:8D ** **     	  sta lodigitscb+SCB_HPOS
  252 034D:B5 0A        .02	  lda oldjoystick,x
  253 034F:49 FF        	  eor #$ff
  254 0351:35 1A        	  and joystick,x
  255 0353:F0 **        	  beq .01
  256 0355:F6 86        	  inc transitions,x
  257 0357:B4 56        .01	  ldy direction,x
  258 0359:B9 ** **     	  lda shipspriteslo,y
  259 035C:8D ** **     	  sta shipscb+SCB_DATA
  260 035F:B9 ** **     	  lda shipspriteshi,y
  261 0362:8D ** **     	  sta shipscb+SCB_DATA+1
  262 0365:AD ** **     	  lda shipscb+SCB_CTRL0
  263 0368:29 CF        	  and #~{HFLIP|VFLIP}
  264 036A:19 ** **     	  ora shipflips,y
  265 036D:8D ** **     	  sta shipscb+SCB_CTRL0
  266 0370:B5 66        	  lda xpos,x
  267 0372:8D ** **     	  sta shipscb+SCB_HPOS
  268 0375:B5 76        	  lda ypos,x
  269 0377:8D ** **     	  sta shipscb+SCB_VPOS
  270 037A:BD ** **     	  lda playercolors,x
  271 037D:8D ** **     	  sta shipscb+SCB_PALETTE-4
  272 0380:8D ** **     	  sta hidigitscb+SCB_PALETTE-8
  273 0383:BD ** **     	  lda transitionrows,x
  274 0386:8D ** **     	  sta hidigitscb+SCB_VPOS
  275 0389:8D ** **     	  sta lodigitscb+SCB_VPOS
  276 038C:BD ** **     	  lda playercolors,x
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   37
                                                        14:13:52  

  277 038F:B5 86        	  lda transitions,x
  278 0391:20 ** **     	  jsr showhex
  279 0394:DA           	  phx
  280 0395:A2 **        	   ldx #<shipscb
  281 0397:A0 **        	   ldy #>shipscb
  282 0399:20 ** **     	   jsr reshowsprites
  283 039C:FA           	  plx
  284 039D:E8           	  inx
  285 039E:E4 06        	  cpx NumberOfPlayers
  286 03A0:90 9D        	 bcc .00
  287 03A2:F0 9B        	 beq .00
  288                   
  289      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  325                    #ENDIF
  326                   
  327 03A4:60           	rts
  328                   
  329                   
  330 03A5:             showhex			; set up sprites to display a hex number
  331 03A5:48           	 pha
  332 03A6:4A           	  lsr a
  333 03A7:4A           	  lsr a
  334 03A8:4A           	  lsr a
  335 03A9:4A           	  lsr a
  336 03AA:A8           	  tay
  337 03AB:B9 ** **     	  lda digitslo,y
  338 03AE:8D ** **     	  sta hidigitscb+SCB_DATA
  339 03B1:B9 ** **     	  lda digitshi,y
  340 03B4:8D ** **     	  sta hidigitscb+SCB_DATA+1
  341 03B7:68           	 pla
  342 03B8:29 0F        	and #$f
  343 03BA:A8           	tay
  344 03BB:B9 ** **     	lda digitslo,y
  345 03BE:8D ** **     	sta lodigitscb+SCB_DATA
  346 03C1:B9 ** **     	lda digitshi,y
  347 03C4:8D ** **     	sta lodigitscb+SCB_DATA+1
  348                   
  349 03C7:60           	rts
  350                   
  351                   
  352                   
  353 03C8:             showlogonscreen			; show a screen during logon
  354 03C8:20 ** **     	jsr erasescreen		;  glue code calls showlogonscreen
  355                   
  356 03CB:A6 06        	ldx NumberOfPlayers
  357 03CD:BD ** **     	lda digitslo,x
  358 03D0:8D ** **     	sta totalscb+SCB_DATA
  359 03D3:BD ** **     	lda digitshi,x
  360 03D6:8D ** **     	sta totalscb+SCB_DATA+1
  361                   
  362 03D9:A6 07        	ldx PlayerNumber
  363 03DB:BD ** **     	lda digitslo,x
  364 03DE:8D ** **     	sta whoamiscb+SCB_DATA
  365 03E1:BD ** **     	lda digitshi,x
  366 03E4:8D ** **     	sta whoamiscb+SCB_DATA+1
  367                   
  368 03E7:A2 **        	ldx #<logonscb
  369 03E9:A0 **        	ldy #>logonscb
  370 03EB:20 ** **     	jsr reshowsprites
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   38
                                                        14:13:52  

  371                   ;	jmp dodbuf		; fall through
  372                   
  373 03EE:             dodbuf
  374                   	DBUF_DISPLAY
    1 03EE:08         + 		PHP
    2 03EF:78         + 		SEI
    3 03F0:AD ** **   + 		LDA	RenderBuffer
    4 03F3:AE ** **   + 		ldx	DisplayBuffer
    5 03F6:8D ** **   + 		STA	DisplayBuffer
    6 03F9:8E ** **   + 		stx	RenderBuffer
    7 03FC:AD ** **   + 		LDA	RenderBuffer+1
    8 03FF:AE ** **   + 		ldx	DisplayBuffer+1
    9 0402:8D ** **   + 		STA	DisplayBuffer+1
   10 0405:8E ** **   + 		stx	RenderBuffer+1
   11 0408:28         + 		PLP
   12                 + 
  375                   
  376 0409:60           	rts
  377                   
  378                   
  379 040A:             erasescreen
  380 040A:A2 **        	ldx #<erasescb
  381 040C:A0 **        	ldy #>erasescb
  382                   ;	jmp showsprites		; fall through
  383                   
  384 040E:             showsprites
  385 040E:AD ** **     	lda RenderBuffer
  386 0411:8D 08 FC     	sta VIDBASL
  387 0414:AD ** **     	lda RenderBuffer+1
  388 0417:8D 09 FC     	sta VIDBASH
  389                   ;	bra reshowsprites	; fall through
  390                   
  391 041A:             reshowsprites
  392 041A:8E 10 FC     	stx SCBNEXTL
  393 041D:8C 11 FC     	sty SCBNEXTH
  394 0420:A9 01        	lda #1
  395 0422:8D 91 FC     	sta SPRGO
  396                   	WAITSUZY
    1      0425       + WAITSUZY.00111	.= *
    2 0425:A9 01      + 		lda #SUZY_SPACE
    3 0427:0C F9 FF   + 		tsb MAPCTL		
    4 042A:9C 91 FD   + 		STZ	CPUSLEEP
    5 042D:1C F9 FF   + 		trb MAPCTL		
    6 0430:AD 92 FC   + 		LDA	SPRSYS		
    7 0433:4A         + 		LSR	A		
    8 0434:B0 EF      + 		BCS	WAITSUZY.00111		
    9 0436:9C 90 FD   + 		STZ	SDONEACK
   10                 + 
  397                   
  398 0439:60           	rts
  399                   
  400                   
  401 043A:             setpalette
  402 043A:A2 1F        	ldx #31
  403 043C:BD ** **     .0	  lda palette,x
  404 043F:9D A0 FD     	  sta GREEN0,x
  405 0442:CA           	  dex
  406 0443:10 F7        	 bpl .0
  407                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   39
                                                        14:13:52  

  408 0445:60           	rts
  409                   
  410                   
  411 0446:             erasezpage
  412 0446:A2 06        	ldx #ZSTART
  413 0448:74 00        .0	  stz 0,x
  414 044A:E8           	  inx
  415 044B:E0 96        	  cpx #ZEND
  416 044D:D0 F9        	 bne .0
  417                   
  418 044F:60           	rts
  419                   
  420                   
  421                   *-----------------------------------------------------
  422                   
  423                   	.in 6502:examples/redeye_glue.src
    1                   ; Wednesday 28-Mar-90 12:24:00
    2                   * === redeye_glue.src ================================
    3                   *
    4                   * Redeye test program  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 28-Mar-90	SHL		Split file off from testredeye.src
   12                   * 22-Mar-90	SHL		Added AUTO_TIMEOUT_USER support, rese
   13                   *				timeout on input from anyone
   14                   * 20-Mar-90	SHL		Cleaned up getinput routine, added RE
   15                   *				support if communication goes down
   16                   * 14-Mar-90	SHL		Working with new version of Redeye
   17                   *
   18                   * Jan-90	SHL		Created this file to work with Gauntlet'
   19                   *				version of Redeye
   20                   *
   21                   * ====================================================
   22                   *
   23                   *	When using this glue code, the variables restartflag
   24                   * need to be provided.  They do not need initializatio
   25                   * interfered with.  The glue code also expects the arr
   26                   * oldjoystick, and oldswitch (each MAX_PLAYERS long) t
   27                   * to do_start_comlink will (among other things) initia
   28                   * $FF's and the routine do_comlink_joysticks will copy
   29                   * oldjoystcik and oldswitch, and will get new input fr
   30                   * joystick and switch arrays.
   31                   *
   32                   *	The subroutine showlogonscreen should be provided, w
   33                   * called during the do_logon code.  The subroutine sho
   34                   * which provides some feedback to the user about the s
   35                   * should handle double-buffering.
   36                   *
   37                   *	The glue code also expects the WAITEOF to be availab
   38                   *
   39                   *-----------------------------------------------------
   40                   
   41                   * Glue code constants
   42                   
   43      0040         LOCALRESET	.EQ %01000000
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   40
                        6502:examples/redeye_glue.src   14:13:52  

   44      0080         GLOBALRESET	.EQ %10000000
   45                   
   46      0014         EOFS_TIL_RESTART .EQ 20	; how long we wait for communi
   47                   ; to reset machine - make sure EOFS_TIL_RESTART is big
   48                   ; possible game frame (allow reset message enough time
   49                   
   50                   *-----------------------------------------------------
   51                   
   52                   * Glue code
   53                   
   54                   
   55 0450:             glue_start_address
   56                   
   57                   
   58 0450:             do_logon
   59                   .20	  GETJOY	; make sure my buttons/joystick not being
    1 0450:AD B0 FC   + 	  LDA JOYSTICK
    2                 + 
   60 0453:D0 FB        	 bne .20	;  before coming up
   61                   
   62 0455:20 ** **     	jsr start_logon	; start logon process
   63                   
   64 0458:20 C8 03     .00	  jsr showlogonscreen	; show a screen during logon
   65                   	  WAITEOF
    1 045B:A9 **      + 		LDA	#DISPLAY_EOFFLAG
    2 045D:1C ** **   + 		TRB	DisplayFlags
    3      0460       + systemp		.=	*
    4 0460:2C ** **   + 		BIT	DisplayFlags
    5 0463:F0 FB      + 		BEQ	systemp
    6                 + 
   66                   
   67 0465:20 ** **     	  jsr checklogonover	; see if logon is over
   68 0468:30 EE        	 bmi .00
   69                   
   70 046A:60           	rts
   71                   
   72                   
   73 046B:             do_start_comlink
   74 046B:64 08        	stz restartflag
   75                   
   76 046D:20 ** **     	jsr start_comlink	; start up real communication
   77                   
   78 0470:A2 0F        	ldx #MAX_PLAYERS-1	; start everyone off with all butt
   79 0472:A9 FF        	lda #$ff		;  so that first frame with real inputs won
   80 0474:95 1A        .0	  sta joystick,x	;   get phantom positive edges
   81 0476:95 0A        	  sta oldjoystick,x
   82 0478:95 3A        	  sta switch,x
   83 047A:95 2A        	  sta oldswitch,x
   84 047C:CA           	  dex
   85 047D:10 F5        	 bpl .0
   86                   
   87 047F:4C ** **     	jmp preparejoysticks	; start first redeye transaction
   88                   
   89                   
   90 0482:             do_comlink_joysticks
   91 0482:20 ** **     	jsr getinput
   92 0485:A5 08        	lda restartflag
   93 0487:F0 **        	beq .00
   94 0489:4C 2F 02     	jmp restart
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   41
                        6502:examples/redeye_glue.src   14:13:52  

   95                   
   96 048C:A6 07        .00	ldx PlayerNumber
   97 048E:20 ** **     	jsr checkflip
   98                   
   99 0491:4C ** **     	jmp checkreset
  100                   
  101                   
  102                   
  103 0494:             checkflip
  104 0494:B5 1A        	lda joystick,x		; see if player is pressing FLIP
  105 0496:89 04        	bit #FLIP_BUTTON
  106 0498:F0 **        	beq .90
  107 049A:B5 3A        	lda switch,x
  108 049C:89 01        	bit #PAUSE_SWITCH
  109 049E:F0 **        	beq .90
  110                   
  111 04A0:B5 0A        	lda oldjoystick,x	; and wasn't pressing FLIP last fra
  112 04A2:89 04        	bit #FLIP_BUTTON
  113 04A4:F0 **        	beq .00
  114 04A6:B5 2A        	lda oldswitch,x
  115 04A8:89 01        	bit #PAUSE_SWITCH
  116 04AA:D0 **        	bne .90
  117                   
  118                   .00	FLIP			; signal EOF code to flip display
    1 04AC:AD ** **   + 		LDA	DISPCTL_RAM
    2 04AF:49 02      + 		EOR	#DISP_FLIP
    3 04B1:8D ** **   + 		STA	DISPCTL_RAM
    4 04B4:AD ** **   + 		LDA	SPRSYS_RAM
    5 04B7:49 08      + 		EOR	#LEFTHAND
    6 04B9:8D ** **   + 		STA	SPRSYS_RAM
    7 04BC:8D 92 FC   + 		STA	SPRSYS
    8                 + 
  119                   
  120 04BF:60           .90	rts
  121                   
  122                   
  123                   
  124 04C0:             getinput
  125 04C0:A2 00        	ldx #0		; index to player getting input from
  126 04C2:A0 00        	ldy #0		; relative offset to player's input buffer
  127 04C4:B5 1A        .00	  lda joystick,x	; copy last frame's inputs
  128 04C6:95 0A        	  sta oldjoystick,x
  129 04C8:B5 3A        	  lda switch,x
  130 04CA:95 2A        	  sta oldswitch,x
  131                   
  132 04CC:AD ** **     .13	  lda Seq		; are we receiving even or odd sequence
  133 04CF:F0 **        	  beq .20
  134                   
  135 04D1:BD ** **     .10	  lda PlayerFlag0,x	; has player's data come in ?
  136 04D4:10 **        	  bpl .15
  137 04D6:20 ** **     	  jsr checklocalreset	; if not, handle possible reset
  138 04D9:F0 F6        	  beq .10
  139                   	  WAITEOF
    1 04DB:A9 **      + 		LDA	#DISPLAY_EOFFLAG
    2 04DD:1C ** **   + 		TRB	DisplayFlags
    3      04E0       + systemp		.=	*
    4 04E0:2C ** **   + 		BIT	DisplayFlags
    5 04E3:F0 FB      + 		BEQ	systemp
    6                 + 
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   42
                        6502:examples/redeye_glue.src   14:13:52  

  140 04E5:C6 09        	  dec restartcount
  141 04E7:D0 E8        	  bne .10
  142 04E9:4C 2F 02     	  jmp restart
  143                   
  144 04EC:B9 ** **     .15	  lda PlayerData0,y	; get joystick data
  145 04EF:95 1A        	  sta joystick,x	; & store for program use
  146 04F1:B9 ** **     	  lda PlayerData0+1,y	; get switch data
  147 04F4:95 3A        	  sta switch,x		; & store for program use
  148 04F6:A9 80        	  lda #$80
  149 04F8:9D ** **     	  sta PlayerFlag0,x	; tell redeye it's been used
  150 04FB:80 **        	  bra .30
  151                   
  152 04FD:BD ** **     .20	  lda PlayerFlag1,x	;has player's data come in ?
  153 0500:10 **        	  bpl .25
  154 0502:20 ** **     	  jsr checklocalreset	; if not, handle possible reset
  155 0505:F0 F6        	  beq .20
  156                   	  WAITEOF
    1 0507:A9 **      + 		LDA	#DISPLAY_EOFFLAG
    2 0509:1C ** **   + 		TRB	DisplayFlags
    3      050C       + systemp		.=	*
    4 050C:2C ** **   + 		BIT	DisplayFlags
    5 050F:F0 FB      + 		BEQ	systemp
    6                 + 
  157 0511:C6 09        	  dec restartcount
  158 0513:D0 E8        	  bne .20
  159 0515:4C 2F 02     	  jmp restart
  160                   
  161 0518:B9 ** **     .25	  lda PlayerData1,y	; get joystick data
  162 051B:95 1A        	  sta joystick,x	; & store for program use
  163 051D:B9 ** **     	  lda PlayerData1+1,y	; get switch data
  164 0520:95 3A        	  sta switch,x		; & store for program use
  165 0522:A9 80        	  lda #$80
  166 0524:9D ** **     	  sta PlayerFlag1,x	; tell redeye it's been used
  167                   
  168 0527:18           .30	  clc
  169 0528:98           	  tya
  170 0529:69 02        	  adc #PLAYER_DATA_SIZE
  171 052B:A8           	  tay
  172 052C:E4 06        	  cpx NumberOfPlayers
  173 052E:E8           	  inx
  174 052F:90 93        	 bcc .00
  175                   
  176 0531:A9 40        .50	lda #LOCALRESET		; if we're getting input, don't r
  177 0533:14 08        	trb restartflag		;  we can let the other guys know
  178 0535:A9 14        	lda #EOFS_TIL_RESTART
  179 0537:85 09        	sta restartcount
  180                   
  181                   ;	jmp preparejoysticks	; fall through
  182                   
  183                   
  184 0539:             preparejoysticks
  185                   	GETJOY			; read this unit's joystick
    1 0539:AD B0 FC   + 	  LDA JOYSTICK
    2                 + 
  186 053C:8D ** **     	sta OutGoingData	; store joystick in output buffer
  187                   	GETSWITCH
    1 053F:AD B1 FC   + 	  LDA SWITCHES
    2                 + 
  188 0542:29 01        	and #PAUSE_SWITCH
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   43
                        6502:examples/redeye_glue.src   14:13:52  

  189 0544:8D ** **     	sta OutGoingData+1	; store switch in output buffer
  190                   
  191      TRUE          #IFDEF VAR_SIZE_DATA
  192 0547:A6 07         	ldx PlayerNumber
  193 0549:A0 02        	ldy #2			; if data is same as frame before last
  194 054B:AD ** **     	lda OutGoingData+1	;  no need to send it again
  195 054E:D5 2A        	cmp oldswitch,x
  196 0550:D0 **        	bne .00
  197 0552:88           	dey
  198 0553:AD ** **     	lda OutGoingData
  199 0556:D5 0A        	cmp oldjoystick,x
  200 0558:D0 **        	bne .00
  201 055A:88           	dey
  202 055B:8C ** **     .00	sty OutGoingSize
  203                    #ENDIF
  204                   
  205 055E:20 ** **     	jsr launch_redeye	; tell Redeye to take it away
  206 0561:60           	rts
  207                   
  208                   
  209 0562:             checkreset
  210      TRUE          #IFDEF AUTO_TIMEOUT_USER
  211 0562:A9 00        	lda #0			; check to see if there is activity on any
  212 0564:A6 06        	ldx NumberOfPlayers	; players joystick, and if so res
  213 0566:15 1A        .00	  ora joystick,x	; counter
  214 0568:15 3A        	  ora switch,x
  215 056A:CA           	  dex
  216 056B:10 F9        	 bpl .00
  217                   
  218 056D:AA           	tax
  219 056E:F0 **        	beq .10
  220                   
  221                   	RESET_TIMEOUT		; reset inactivity power-down timeout
    1 0570:9C ** **   + 		STZ TimeoutCount+1	
    2 0573:9C ** **   + 		STZ TimeoutCount+2
    3                 + 
  222                    #ENDIF
  223                   
  224 0576:A6 06        .10	ldx NumberOfPlayers
  225 0578:B5 1A        .11	  lda joystick,x	; see if player pressing OPTION 1
  226 057A:89 08        	  bit #RESTART_BUTTON
  227 057C:F0 **        	  beq .12
  228 057E:B5 3A        	  lda switch,x		;  and PAUSE at same time
  229 0580:89 01        	  bit #PAUSE_SWITCH
  230 0582:F0 **        	  beq .12
  231 0584:A9 80        	  lda #GLOBALRESET	; set bit that passes through geti
  232 0586:04 08        	  tsb restartflag
  233 0588:CA           .12	  dex
  234 0589:10 ED        	 bpl .11
  235                   
  236 058B:60           	rts
  237                   
  238                   
  239 058C:             checklogonover
  240 058C:20 ** **     	jsr checklocalreset	; allow player to trigger reset
  241 058F:F0 **        	beq .00
  242 0591:4C 2F 02     	jmp restart
  243                   
  244 0594:A5 1A        .00	lda joystick		; simple joystick handler while not 
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   44
                        6502:examples/redeye_glue.src   14:13:52  

  245 0596:85 0A        	sta oldjoystick
  246 0598:A5 3A        	lda switch
  247 059A:85 2A        	sta oldswitch
  248                   	GETJOY
    1 059C:AD B0 FC   + 	  LDA JOYSTICK
    2                 + 
  249 059F:85 1A        	sta joystick
  250                   	GETSWITCH
    1 05A1:AD B1 FC   + 	  LDA SWITCHES
    2                 + 
  251 05A4:85 3A        	sta switch
  252                   
  253 05A6:A2 00        	ldx #0			; handle display flip logic
  254 05A8:20 94 04     	jsr checkflip
  255                   
  256 05AB:A5 1A        	lda joystick		; see if I am pressing A/B buttons
  257 05AD:29 03        	and #OUTER_BUTTON|INNER_BUTTON
  258 05AF:F0 **        	beq .01
  259 05B1:A9 80        	lda #$80		; pressing button, request end of logon
  260 05B3:8D ** **     	sta EndLogonRequest
  261                   
  262 05B6:AD ** **     .01	lda LogonInProgress	; return current status of log
  263 05B9:60           	rts
  264                   
  265                   
  266 05BA:             checklocalreset
  267                   	GETJOY			; see if I am pressing RESET
    1 05BA:AD B0 FC   + 	  LDA JOYSTICK
    2                 + 
  268 05BD:89 08        	bit #RESTART_BUTTON
  269 05BF:F0 **        	beq .90
  270                   	GETSWITCH
    1 05C1:AD B1 FC   + 	  LDA SWITCHES
    2                 + 
  271 05C4:89 01        	bit #PAUSE_SWITCH
  272 05C6:F0 **        	beq .90
  273 05C8:A9 40        	lda #LOCALRESET		; set local reset bit
  274 05CA:04 08        	tsb restartflag
  275                   
  276 05CC:A5 08        .90	lda restartflag		; return state of restartflag
  277 05CE:60           	rts
  278                   
  279 05CF:             glue_end_address
  280                   
  281                   
  282                   
  424                   
  425                   *-----------------------------------------------------
  426                   
  427                   * Required system source files
  428                   
  429                   	.IN 6502:src/sysdata.src
    1                   ; Tuesday 27-Mar-90 10:58:04
    2                   * === sysdata.src ====================================
    3                   * 
    4                   * System Data Allocations  --  the 6502 Side of Handy
    5                   * 
    6                   * Copyright (c) 1988,1990 Epyx, Inc.
    7                   * All Rights Reserved
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   45
                        6502:src/sysdata.src            14:13:52  

    8                   * CONFIDENTIAL and PROPRIETARY
    9                   * 
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 27-Mar-90	SHL		Removed BufferAddrL, BufferAddrH
   13                   * 22-Mar-90	SHL		Added INTSET_RAM shadow for IRQs
   14                   * 9-Feb-90	SHL		Removed Apple emulation compatibility
   15                   * 30 May 89	-RJ		Added IODAT_RAM
   16                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   17                   * 20 Apr 89	-RJ		Added IODIR_RAM
   18                   * 19 Apr 89	-RJ		Moved DisplayFrameCount to display.sr
   19                   * 20 Mar 89	-RJ		Added DisplayFrameCount
   20                   * 13 Feb 89	-RJ		Added DisplayBuffer
   21                   * 26 Jan 88	-RJ		Ended Interruptus
   22                   * 24 Dec 88	-RJ		Added Interruptus
   23                   * 22 Dec 88	-RJ		Added DISPCTL_RAM, RenderBuffer, 
   24                   *				BufferAddrL/H, and DisplayFlags with its defs
   25                   *				Added note about .ORGing to non-zpage
   26                   * Early 88	=RJ Mical=	Created this file!
   27                   * 
   28                   * ====================================================
   29                   
   30                   
   31                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   32                   * 
   33                   * This file should be included before any of the 6502:
   34                   * 
   35                   * Note that you should .ORG to a non-zero page address
   36                   * this file.  This is because this file includes data 
   37                   * don't need to be in zero-page memory.
   38                   * 
   39                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   40                   
   41                   
   42                   * Here are the declarations of the local copies of wri
   43                   * (and read-doesn't-equal-write registers such as SPRS
   44                   * Whenever you want to make a change to one of the har
   45                   * that's write-only, you should read from this RAM cop
   46                   * and then write the value out to both the RAM copy an
   47 05CF:             SPRSYS_RAM	.DS 1
   48 05D0:             DISPCTL_RAM	.DS 1
   49 05D1:             IODAT_RAM	.DS 1
   50 05D2:             IODIR_RAM	.DS 1
   51                   
   52                   
   53                   * Display buffer pointers for use by the system displa
   54 05D3:             RenderBuffer	.DS 2
   55 05D5:             DisplayBuffer	.DS 2
   56                   
   57                   * Shadow of INTSET used in IRQ handler
   58 05D7:             INTSET_RAM	.DS 1
   59                   
   60                   
   61      TRUE         	#IFDEF AUTO_TIMEOUT_USER
   62 05D8:             TimeoutCount	.DS 3
   63                   	#ENDIF
   64                   
   65                   
   66                   * The DisplayFlags field is a field that may enjoy mul
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   46
                        6502:src/sysdata.src            14:13:52  

   67                   * read-modify-write operations peformed by both interr
   68                   * Because of this, any code must make sure that interr
   69                   * beginning a read-modify-write cycle, or use the TSB/
   70 05DB:             DisplayFlags	.DS	1
   71                   * Here's the definitions of DisplayFlags
   72      0080         DISPLAY_EOFFLAG		.EQ $80	; Set every EOF
   73      0040         DISPLAY_EOLFLAG		.EQ $40	; Set every EOL
   74                   
   75                   
   76                   
  430                   	.IN 6502:src/display.src
    1                   ; Tue Sep 18 17:51:17 1990
    2                   * === display.src ====================================
    3                   *
    4                   * Display and Color IO Routines --  the 6502 Side of H
    5                   *
    6                   * Copyright (C) 1988,1989,1990 Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   *
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 18-Sep-90	SHL		Added code to work around RICOH bug
   13                   *				and support for the NO_RICOH_PATCH switch
   14                   * 22-Mar-90	SHL		Removed PHA PHX and PLX PLA from IRQ 
   15                   * 20-Mar-90	SHL		Removed SEI, CLI from InitDisplayer, 
   16                   *				InitEOL
   17                   * 7-Feb-90	SHL		Apple compatibility removed
   18                   *				TIMEOUT macro moved to display.mac
   19                   *				General cleanup and prettification
   20                   * 3 July 89	-RJ		The RESET_TIMEOUT logic is moved from
   21                   *				input macros to the TIMEOUT macro here
   22                   * 16 Jun 89	Peter Engelbrite Timeout constant set to 1
   23                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   24                   * 1 May 89	-RJ		Changed all IntTable references to sys
   25                   *				which is defined now in the sys.mac file
   26                   * 20 Apr 89	-RJ		Changed DisplayFrameCount so that it'
   27                   *				included and incremented if FRAMECOUNT_UP is
   28                   *				defined, included and decremented if
   29                   *				FRAMECOUNT_DOWN is defined, else nothing.
   30                   *				Moved DisplayFrameCount to this file.
   31                   * 20 Mar 89	-RJ		Added increment of DisplayFrameCount 
   32                   *				handler that's included for EOF_USER's
   33                   * 13 Feb 89	-RJ		Added InitDisplayer routine.  Added i
   34                   *				of DISPLAY to normal EOF handler (FrameEnd).
   35                   * 12 Feb 89	-RJ		EOF and EOL code save and restore A
   36                   * 26-Dec-88	-RJ		Added EOL code
   37                   * 23-Dec-88	-RJ		Added EOF code
   38                   * Early 88	=RJ Mical=	Created this file!
   39                   *
   40                   * ====================================================
   41                   
   42                   
   43                   
   44                   * If either FRAMECOUNT_UP or _DOWN is defined, then de
   45      FALSE        	#IFDEF	FRAMECOUNT_UP | FRAMECOUNT_DOWN
   47                   	#ENDIF
   48                   
   49                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   47
                        6502:src/display.src            14:13:52  

   50      TRUE         	#IFDEF EOF_USER
   51                   * - - - - - - - - - - - - -  - - - - - - - - - - - - -
   52                   * - - - - - - - - - - - - -  - - - - - - - - - - - - -
   53                   * - - - - - - - - - - - - -  - - - - - - - - - - - - -
   54                   	;------	If an EOF user, create the elaborate version 
   55                   	;------	end-of-frame handler
   56                   
   57 05DC:             InitEOF
   58                   		;------	Copy old vector into our exit JMP instructio
   59 05DC:AD ** **     		LDA	sysIntTable+{2*2}
   60 05DF:8D ** **     		STA	FrameEndExit+1
   61 05E2:AD ** **     		LDA	sysIntTable+{2*2}+1
   62 05E5:8D ** **     		STA	FrameEndExit+2
   63                   		;------	Install our vector into the interrupt table
   64 05E8:A9 **        		LDA	#<FrameEnd
   65 05EA:8D ** **     		STA	sysIntTable+{2*2}
   66 05ED:A9 **        		LDA	#>FrameEnd
   67 05EF:8D ** **     		STA	sysIntTable+{2*2}+1
   68 05F2:60           		RTS
   69                   
   70 05F3:             FrameEnd
   71                   * End-of-Frame handler
   72 05F3:5A           		PHY
   73                   
   74                   		;------	The TIMEOUT macro will do nothing unless
   75                   		;------ AUTO_TIMEOUT_USER has been defined in which 
   76                   		;------	system will turn off after a given amount of
   77      TRUE         	  #IFNDEF NO_RICOH_PATCH
   78 05F4:AD F9 FF     		lda MAPCTL
   79 05F7:48           		pha
   80 05F8:09 01        		 ora #SUZY_SPACE
   81 05FA:8D F9 FF     		 sta MAPCTL
   82                   		 TIMEOUT
    1 05FD:AD B1 FC   + 	    LDA SWITCHES
    2 0600:29 01      + 	    AND #PAUSE_SWITCH
    3 0602:0D B0 FC   + 	    ORA JOYSTICK
    4 0605:F0 **      + 	    BEQ TIMEOUT.001E3		
    5                   	    RESET_TIMEOUT
    1 0607:9C D9 05   + 		STZ TimeoutCount+1	
    2 060A:9C DA 05   + 		STZ TimeoutCount+2
    3                 + 
    6      060D       + TIMEOUT.001E3	.= *
    7 060D:EE D8 05   + 	    INC TimeoutCount	 
    8 0610:10 **      + 	    BPL TIMEOUT.001E
    9 0612:9C D8 05   + 	    STZ TimeoutCount
   10 0615:EE D9 05   + 	    INC TimeoutCount+1
   11 0618:10 **      + 	    BPL TIMEOUT.001E
   12 061A:9C D9 05   + 	    STZ TimeoutCount+1
   13 061D:AD 8B FD   + 	    LDA IODAT	 	
   14 0620:29 01      + 	    AND #EXTERNAL_POWER
   15 0622:F0 **      + 	    BEQ TIMEOUT.001E2	
   16 0624:EE DA 05   + 	    INC TimeoutCount+2	
   17 0627:AD DA 05   + 	    LDA TimeoutCount+2
   18 062A:C9 0D      + 	    CMP #13	
   19 062C:90 **      + 	    BLT TIMEOUT.001E
   20      062E       + TIMEOUT.001E2	.= *
   21 062E:9C 87 FD   + 	    STZ SYSCTL1	
   22      0631       + TIMEOUT.001E	.= *
   23                 + 
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   48
                        6502:src/display.src            14:13:52  

   83 0631:68           		pla
   84 0632:8D F9 FF     		sta MAPCTL
   85                   	  #ELSE
   87                   	  #ENDIF ;NDEF NO_RICOH_PATCH
   88                   
   89                   		;------	Turn on the display, and then EOF flag
   90                   ;!!! New:  invoke the DISPLAY macro here during EOF pr
   91                   		DISPLAY
    1 0635:AD D0 05   + 		LDA	DISPCTL_RAM
    2 0638:8D 92 FD   + 		STA	DISPCTL
    3 063B:29 02      + 		AND	#DISP_FLIP
    4 063D:F0 **      + 		BEQ	DISPLAY.0020
    5 063F:AD D5 05   + 		LDA	DisplayBuffer
    6 0642:18         + 		CLC
    7 0643:69 DF      + 		ADC	#<DISPLAY_BUFSIZE-1
    8 0645:AA         + 		TAX
    9 0646:AD D6 05   + 		LDA	DisplayBuffer+1
   10 0649:69 1F      + 		ADC	#>DISPLAY_BUFSIZE-1
   11 064B:80 **      + 		BRA	DISPLAY.00202
   12 064D:           + DISPLAY.0020
   13 064D:AE D5 05   + 		LDX	DisplayBuffer
   14 0650:AD D6 05   + 		LDA	DisplayBuffer+1
   15 0653:           + DISPLAY.00202
   16                   		DISP_AX
    1 0653:08         + 		PHP
    2 0654:78         + 		SEI
    3 0655:8E 94 FD   + 		STX	DISPADRL
    4 0658:8D 95 FD   + 		STA	DISPADRH
    5 065B:28         + 		PLP
    6                 + 
   17                 + 
   92                   
   93      FALSE        	  #IFDEF FRAMECOUNT_UP
   96                   	  #ELSE ; put this #ELSE here to avoid both UP and DO
   97      FALSE        	    #IFDEF FRAMECOUNT_DOWN
  103                   	    #ENDIF
  104                   	  #ENDIF
  105                   
  106 065C:AD DB 05     		LDA	DisplayFlags
  107 065F:09 80        		ORA	#DISPLAY_EOFFLAG
  108 0661:8D DB 05     		STA	DisplayFlags
  109                   
  110 0664:7A           		PLY
  111 0665:             FrameEndExit
  112                   		;------	This vector ought to be patched by the Init 
  113 0665:4C ** **     		JMP	IntReturn
  114                   
  115                   
  116                   	#ELSE ; of #IFDEF EOF_USER
  160                   	#ENDIF	; of #IFDEF EOF_USER
  161                   
  162                   * - - - - - - - - - - - - -  - - - - - - - - - - - - -
  163                   
  164                   
  165                   
  166                   
  167      FALSE        	#IFDEF	EOL_USER
  192                   	#ENDIF	; of #IFDEF EOL_USER
  193                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   49
                        6502:src/display.src            14:13:52  

  194                   
  195                   
  196                   
  431                   	.IN 6502:src/sys.src
    1                   ; Tue Sep 18 17:43:25 1990
    2                   * === sys.src ========================================
    3                   *
    4                   * General System Source Code  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 28-Mar-90	SHL		IRQ handler quick checks for serial I
   12                   *				if SERIALPORT_USER defined now.
   13                   * 22-Mar-90	SHL		IRQ handler only touches 1 IRQ at a t
   14                   *				Individual handlers need not preserve X and A
   15                   *				IRQ handlers now required to PLX PLA RTI
   16                   *				instead of RTS
   17                   *				Renamed SafeIntRts to IntReturn, which now
   18                   *				does PLX PLA RTI
   19                   * 16-Mar-90	SHL		Modified BRK detect for 1 cycle impro
   20                   *				in the case of IRQ
   21                   * 15-Mar-90	SHL		Provided faster vector to Redeye inte
   22                   *				Serial interrupts now must PLX PLA RTI to
   23                   *				exit.
   24                   * 14-Mar-90	SHL		Added SafeIntRts
   25                   *				INITINT now vectors all IRQS to SafeIntRts
   26                   *				instead of user supplied RTS
   27                   * 26-Feb-90	SHL		Minor code tightening
   28                   * 9-Feb-90	SHL		INITINT is now required before any use
   29                   *				INITEOF, INITEOL or SET_DISPLAY... macros
   30                   *				This file can now be included before user
   31                   *				calls INITINT
   32                   * 7-Feb-90	SHL		Modified BRK_USER to force Howard Brea
   33                   * 31 May 89	-RJ		Added BRK_USER support code to UserIn
   34                   *				Removed InitSys routine
   35                   * 6 Apr 89	=RJ Mical=	Created this file!
   36                   *
   37                   * ====================================================
   38                   
   39                   
   40                   * This code is called whenever a non-NMI interrupt occ
   41                   * interrupt or execution of a software BRK).
   42                   
   43 0668:             UserIntHandler
   44 0668:48           		PHA
   45 0669:DA           		PHX
   46                   
   47      TRUE         	  #IFDEF BRK_USER
   48                   	  ;-- Check if we got here because of a BRK instructi
   49                   	  ;-- the BRK routine if so, else branch to the inter
   50 066A:BA           		TSX
   51 066B:E8           		INX
   52 066C:E8           		INX
   53 066D:E8           		INX
   54 066E:BD 00 01     		LDA $0100,X		; Get a copy of the status byte
   55 0671:89 10        		bit #$10		; Check break bit
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   50
                        6502:src/sys.src                14:13:52  

   56 0673:D0 **        		BNE brkInt		; and branch if clear (hardware int)
   57                   	  #ENDIF ; of #IFDEF BRK_USER
   58                   
   59 0675:             hardInt
   60                   		;------	We had a hardware interrupt.
   61                   		;------	Get the interrupt flags value, reset the bit
   62 0675:AD 81 FD     		LDA INTSET		; This gets the bits
   63                   
   64      TRUE         	  #IFDEF SERIALPORT_USER
   65 0678:89 10        		bit #SERIAL_INT		; quick check for serial interrupt
   66 067A:F0 **        		beq .02
   67 067C:6C ** **     		jmp (sysIntTable+{4*2})	; skip to serial IRQ now!
   68                   	  #ENDIF
   69                   
   70 067F:8D D7 05     .02		STA INTSET_RAM
   71                   
   72                   		;------	For least set bit in the interrupt value,
   73                   		;------	vector to the routine
   74 0682:A2 00        		LDX #0
   75 0684:A9 01        		lda #1
   76 0686:2C D7 05     .00		  bit INTSET_RAM
   77 0689:D0 **        		  bne jumpIntTable
   78 068B:E8           		  INX
   79 068C:E8           		  INX
   80 068D:0A           		  asl a
   81 068E:D0 F6        		 bne .00
   82 0690:             IntReturn
   83                   		;------	At end of interrupt processing, restore the
   84                   		;------	registers and return from interrupt
   85                   
   86 0690:FA           		PLX
   87 0691:68           		PLA
   88 0692:40           		RTI
   89                   
   90                   
   91                   
   92                   
   93                   * The above interrupt dispatcher does a JSR to this li
   94                   * This code jumps to the particular handler.  The inte
   95                   * should end with an RTS, which will return control to
   96                   
   97 0693:             jumpIntTable
   98 0693:8D 80 FD     		sta INTRST	; clear interrupt we're processing
   99 0696:7C ** **     		JMP	(sysIntTable,X)
  100                   
  101                   
  102      TRUE         	  #IFDEF BRK_USER
  103 0699:             brkInt
  104 0699:FA           		PLX
  105 069A:68           		PLA
  106                   BRK_vector	HBRK			; force BRK on Howard board
    1 069B:13         + 	.HS 13
    2                 + 
  107 069C:4C 9B 06     		JMP BRK_vector		; Will be modified by INITINT call
  108                   	  #ENDIF ; of #IFDEF BRK_USER
  109                   
  110                   
  111                   
  432                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   51
                                                        14:13:52  

  433 069F:             comlink_start_address
  434                   	.IN 6502:src/comlink.src
    1                   ; Thu Oct 11 21:27:32 1990
    2                   * = comlink.src ======================================
    3                   *
    4                   * Intermediate level handler for Redeye  --  Handy Sof
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 27-Mar-90	SHL		Added CLI before call to WaitAndSendM
   12                   * 23-Mar-90	SHL		Split off logon code to comlink_logon
   13                   *				Now checks for redeye in use before login
   14                   * 22-Mar-90	SHL		Removed PHA PHX and PLX PLA from time
   15                   * 20-Mar-90	SHL		Variable length message support added
   16                   * 16-Mar-90	SHL		Revamped logon code
   17                   *				Packdown happens after login instead of during
   18                   * 9-Mar-90	SHL		Added new Redeye support
   19                   * 6-Mar-90	SHL		Removed RG code support
   20                   * 28-Feb-90	SHL		Made compatible with Handy 1.1 releas
   21                   *				Removed lots of #IFDEF bracketed code
   22                   * 8-Sep-89	LEA		Added IFDEF NO_BRKS to change breaks t
   23                   * 7-Sep-89	James Donald	Version finished for Cal Games
   24                   *
   25                   * ====================================================
   26                   
   27                   
   28                   
   29                   
   30                   	#MACRO POWERTABLE
   31 MACRO             systemp	.= 1
   32 MACRO             	  #REP ?0
   33 MACRO             	    .BY systemp
   34 MACRO             systemp	    .= systemp*2
   35 MACRO             	  #ENDM
   36                   	#ENDM
   37                   
   38 069F:             power_of_two_table
   39      TRUE          #IF MAX_PLAYERS>8
   40 069F:01 02 04 08  	.hs 0102040810204080
   40      10 20 40 80  
   40                   
   41 06A7:00 00 00 00  	.hs 0000000000000000
   41      00 00 00 00  
   41                   
   42                   	POWERTABLE MAX_PLAYERS-8
    1      0001       + systemp	.= 1
    2                   	  #REP MAX_PLAYERS-8
    3 MACRO             	    .BY systemp
    4 MACRO             systemp	    .= systemp*2
    5                   	  #ENDM
    1 06AF:01         + 	    .BY systemp
    2      0002       + systemp	    .= systemp*2
    3 06B0:02         + 	    .BY systemp
    4      0004       + systemp	    .= systemp*2
    5 06B1:04         + 	    .BY systemp
    6      0008       + systemp	    .= systemp*2
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   52
                        6502:src/comlink.src            14:13:52  

    7 06B2:08         + 	    .BY systemp
    8      0010       + systemp	    .= systemp*2
    9 06B3:10         + 	    .BY systemp
   10      0020       + systemp	    .= systemp*2
   11 06B4:20         + 	    .BY systemp
   12      0040       + systemp	    .= systemp*2
   13 06B5:40         + 	    .BY systemp
   14      0080       + systemp	    .= systemp*2
   15 06B6:80         + 	    .BY systemp
   16      0100       + systemp	    .= systemp*2
   17                 + 
    6                 + 
   43                    #ELSE
   45                    #ENDIF
   46                   
   47 06B7:             PlrOffsets
   48      0000         systemp	.= 0
   49                   	#REP MAX_PLAYERS
   50 MACRO             	.BY systemp
   51 MACRO             systemp .= systemp+PLAYER_DATA_SIZE
   52                   	#ENDM
    1 06B7:00         + 	.BY systemp
    2      0002       + systemp .= systemp+PLAYER_DATA_SIZE
    3 06B8:02         + 	.BY systemp
    4      0004       + systemp .= systemp+PLAYER_DATA_SIZE
    5 06B9:04         + 	.BY systemp
    6      0006       + systemp .= systemp+PLAYER_DATA_SIZE
    7 06BA:06         + 	.BY systemp
    8      0008       + systemp .= systemp+PLAYER_DATA_SIZE
    9 06BB:08         + 	.BY systemp
   10      000A       + systemp .= systemp+PLAYER_DATA_SIZE
   11 06BC:0A         + 	.BY systemp
   12      000C       + systemp .= systemp+PLAYER_DATA_SIZE
   13 06BD:0C         + 	.BY systemp
   14      000E       + systemp .= systemp+PLAYER_DATA_SIZE
   15 06BE:0E         + 	.BY systemp
   16      0010       + systemp .= systemp+PLAYER_DATA_SIZE
   17 06BF:10         + 	.BY systemp
   18      0012       + systemp .= systemp+PLAYER_DATA_SIZE
   19 06C0:12         + 	.BY systemp
   20      0014       + systemp .= systemp+PLAYER_DATA_SIZE
   21 06C1:14         + 	.BY systemp
   22      0016       + systemp .= systemp+PLAYER_DATA_SIZE
   23 06C2:16         + 	.BY systemp
   24      0018       + systemp .= systemp+PLAYER_DATA_SIZE
   25 06C3:18         + 	.BY systemp
   26      001A       + systemp .= systemp+PLAYER_DATA_SIZE
   27 06C4:1A         + 	.BY systemp
   28      001C       + systemp .= systemp+PLAYER_DATA_SIZE
   29 06C5:1C         + 	.BY systemp
   30      001E       + systemp .= systemp+PLAYER_DATA_SIZE
   31 06C6:1E         + 	.BY systemp
   32      0020       + systemp .= systemp+PLAYER_DATA_SIZE
   33                 + 
   53                   
   54                   
   55                   * ====================================================
   56                   *
   57                   * The portion of comlink code to handle communication 
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   53
                        6502:src/comlink.src            14:13:52  

   58                   
   59 06C7:             start_comlink
   60                   ; starts up the normal comlink communication
   61 06C7:20 ** **     	jsr ZeroComlinkVariables
   62                   
   63 06CA:A5 06        	lda NumberOfPlayers
   64 06CC:D0 **        	bne .30
   65 06CE:60           	rts
   66                   
   67 06CF:08           .30	 php
   68 06D0:78           	  sei
   69 06D1:38           	  sec
   70 06D2:20 ** **     	  jsr initMessageManager
   71                   
   72 06D5:A9 **        	  lda #<RcvMsgInt	; set message manager vectors
   73 06D7:8D ** **     	  sta readMsgVector
   74      TRUE          #IFNDEF REDEYE_ERROR_COUNTS
   75 06DA:A9 **        	  lda #<msgMgrRtn
   76                    #ELSE
   78                    #ENDIF ;NDEF REDEYE_ERROR_COUNTS
   79 06DC:8D ** **     	  sta msgOverflowVector
   80 06DF:8D ** **     	  sta transmissionErrorVector
   81 06E2:8D ** **     	  sta msgTimeoutVector
   82                   
   83 06E5:A9 **        	  lda #>RcvMsgInt
   84 06E7:8D ** **     	  sta readMsgVector+1
   85      TRUE          #IFNDEF REDEYE_ERROR_COUNTS
   86 06EA:A9 **        	  lda #>msgMgrRtn
   87                    #ELSE
   89                    #ENDIF ;NDEF REDEYE_ERROR_COUNTS
   90 06EC:8D ** **     	  sta msgOverflowVector+1
   91 06EF:8D ** **     	  sta transmissionErrorVector+1
   92 06F2:8D ** **     	  sta msgTimeoutVector+1
   93                   
   94 06F5:A6 07        	  ldx PlayerNumber
   95 06F7:D0 **        	  bne .00
   96                   
   97 06F9:A9 **        	  lda #<TimeoutInt	; set vectors needed if master
   98 06FB:8D ** **     	  sta interMsgTimeoutVector
   99 06FE:A9 **        	  lda #<ChkResendQueue
  100 0700:8D ** **     	  sta messageSentVector
  101                   
  102 0703:A9 **        	  lda #>TimeoutInt
  103 0705:8D ** **     	  sta interMsgTimeoutVector+1
  104 0708:A9 **        	  lda #>ChkResendQueue
  105 070A:8D ** **     	  sta messageSentVector+1
  106                   
  107 070D:A9 40        	  lda #%01000000	; as master, mark that it's ok to se
  108 070F:8D ** **     	  sta OutGoingFlag
  109                   
  110 0712:9C ** **     .00	  stz RxMask		; mark that we are waiting for prece
  111      TRUE          #IF MAX_PLAYERS>8
  112 0715:9C ** **     	  stz RxMask+1
  113                    #ENDIF
  114 0718:38           .01	    sec
  115 0719:2E ** **     	    rol RxMask
  116      TRUE          #IF MAX_PLAYERS>8
  117 071C:2E ** **     	    rol RxMask+1
  118                    #ENDIF
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   54
                        6502:src/comlink.src            14:13:52  

  119 071F:CA           	    dex
  120 0720:10 F6        	   bpl .01
  121                   
  122 0722:A6 06        	  ldx NumberOfPlayers	; mark all "received data" as b
  123 0724:A9 80        	  lda #%10000000
  124 0726:9D ** **     .10	    sta PlayerFlag0,x
  125 0729:9D ** **     	    sta PlayerFlag1,x
  126 072C:CA           	    dex
  127 072D:10 F7        	   bpl .10
  128                   
  129      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  140                    #ENDIF
  141                   
  142 072F:28           	 plp
  143 0730:60           	rts
  144                   
  145      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  151                    #ENDIF ;DEF REDEYE_ERROR_COUNTS
  152                   
  153                   
  154 0731:             RcvMsgInt
  155 0731:A9 01        	lda #1
  156 0733:0C ** **     	tsb comlink_semaphore	; lock out overlapping interrup
  157      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  163                    #ELSE
  164 0736:D0 **        	bne .99
  165                    #ENDIF
  166                   
  167 0738:AD ** **     .9a	lda RxMsgStat
  168 073B:F0 **        	beq .00
  169      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  173                    #ELSE
  174 073D:             .91
  175                    #ENDIF
  176 073D:9C ** **     .90	stz comlink_semaphore	; garbled message, throw it 
  177 0740:60           .99	rts
  178                   
  179 0741:AD ** **     .00	lda RxMsgSize
  180 0744:F0 F7        	beq .90
  181 0746:AD ** **     	lda RxMsg	; what type of message is it
  182 0749:29 07        	and #%00000111
  183 074B:C9 06        	cmp #6
  184      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  190                    #ELSE
  191 074D:B0 EE        	bcs .90
  192                    #ENDIF
  193 074F:E9 02        .01	sbc #3-1	; cc subtracts one more
  194 0751:90 EA        	bcc .91
  195 0753:0A           	asl a
  196 0754:AA           	tax
  197 0755:7C ** **     	jmp (.e0,x)
  198                   
  199 0758:00 ** ** **  .e0	.DA RcvData, RcvSendReq, RcvResendReq
  199      ** **        
  200                   
  201                   
  202 075E:             RcvData
  203 075E:AD ** **     	lda RxMsgSize	; incoming message right size?
  204      TRUE          #IFDEF VAR_SIZE_DATA
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   55
                        6502:src/comlink.src            14:13:52  

  205 0761:C9 04        	cmp #PLAYER_DATA_SIZE+2
  206 0763:90 **        	bcc .00
  207                    #ELSE
  210                    #ENDIF
  211 0765:             .90
  212      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  216                    #ENDIF
  217 0765:9C ** **     .91	stz comlink_semaphore
  218 0768:60           	rts
  219                   
  220 0769:AD ** **     .00	lda RxMsg	; coming from a valid player?
  221 076C:29 78        	and #%01111000
  222 076E:4A           	lsr a
  223 076F:4A           	lsr a
  224 0770:4A           	lsr a
  225 0771:C5 06        	cmp NumberOfPlayers
  226 0773:F0 **        	beq .10
  227 0775:B0 EE        	bcs .90
  228                   
  229 0777:C5 07        .10	cmp PlayerNumber	; see if me, if so must be resend
  230 0779:F0 EA        	beq .91
  231 077B:AA           	tax
  232 077C:AD ** **     	lda RxMsg	; check sequence of incoming message
  233 077F:90 **        	bcc .11
  234 0781:49 80        	eor #%10000000
  235 0783:4D ** **     .11	eor Sequence
  236 0786:30 DD        	bmi .91
  237                   
  238 0788:BD ** **     	lda PlayerFlag0,x	; see if already received message
  239 078B:2C ** **     	bit RxMsg
  240 078E:10 **        	bpl .12
  241 0790:BD ** **     	lda PlayerFlag1,x
  242 0793:C9 00        .12	cmp #0
  243 0795:F0 **        	beq .30
  244 0797:BD 9F 06     	lda power_of_two_table,x
  245 079A:1C ** **     	trb RxMask
  246      TRUE          #IF MAX_PLAYERS>8
  247 079D:D0 **        	bne .20
  248 079F:BD A7 06     	lda power_of_two_table+8,x
  249 07A2:1C ** **     	trb RxMask+1
  250                    #ENDIF
  251 07A5:F0 **        	beq .30
  252                   
  253 07A7:BC B7 06     .20	ldy PlrOffsets,x
  254 07AA:DA           	 phx
  255 07AB:2C ** **     	  bit RxMsg
  256 07AE:30 **        	  bmi .25
  257                   
  258 07B0:9E ** **     	  stz PlayerFlag0,x
  259      TRUE          #IFDEF VAR_SIZE_DATA
  260 07B3:AD ** **     	  lda RxMsgSize
  261 07B6:3A           	  dec a
  262 07B7:9D ** **     	  sta PlayerDataSize0,x
  263 07BA:F0 **        	  beq .29
  264                    #ENDIF
  265 07BC:A2 01        	  ldx #1
  266 07BE:BD ** **     .21	    lda RxMsg,x
  267 07C1:99 ** **     	    sta PlayerData0,y
  268 07C4:E8           	    inx
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   56
                        6502:src/comlink.src            14:13:52  

  269 07C5:C8           	    iny
  270      TRUE          #IFDEF VAR_SIZE_DATA
  271 07C6:EC ** **     	    cpx RxMsgSize
  272                    #ELSE
  274                    #ENDIF
  275 07C9:90 F3        	   bcc .21
  276 07CB:80 **        	  bra .29
  277                   
  278 07CD:9E ** **     .25	  stz PlayerFlag1,x
  279      TRUE          #IFDEF VAR_SIZE_DATA
  280 07D0:AD ** **     	  lda RxMsgSize
  281 07D3:3A           	  dec a
  282 07D4:9D ** **     	  sta PlayerDataSize1,x
  283 07D7:F0 **        	  beq .29
  284                    #ENDIF
  285 07D9:A2 01        	  ldx #1
  286 07DB:BD ** **     .26	    lda RxMsg,x
  287 07DE:99 ** **     	    sta PlayerData1,y
  288 07E1:E8           	    inx
  289 07E2:C8           	    iny
  290      TRUE          #IFDEF VAR_SIZE_DATA
  291 07E3:EC ** **     	    cpx RxMsgSize
  292                    #ELSE
  294                    #ENDIF
  295 07E6:90 F3        	   bcc .26
  296                   
  297 07E8:FA           .29	 plx
  298                   
  299 07E9:A4 07        .30	ldy PlayerNumber	; am I the master?
  300 07EB:D0 **        	bne .31
  301 07ED:E4 06        	cpx NumberOfPlayers
  302 07EF:D0 **        	bne .40
  303 07F1:4C ** **     	jmp ChkResendQueueAndSend	; yep, see who's next to se
  304                   
  305 07F4:B9 9F 06     .31	lda power_of_two_table,y	; am I only one left to s
  306 07F7:4D ** **     	eor RxMask
  307 07FA:D0 **        	bne .40
  308      TRUE          #IF MAX_PLAYERS>8
  309 07FC:B9 A7 06      	lda power_of_two_table+8,y
  310 07FF:4D ** **     	eor RxMask+1
  311 0802:D0 **        	bne .40
  312                    #ENDIF
  313                   
  314 0804:E8           	inx
  315 0805:E4 07        	cpx PlayerNumber	; was message received from previous
  316 0807:D0 **        	bne .40
  317                   
  318 0809:20 ** **     	jsr TryToSendMyData	; Must be my turn to send data
  319                   
  320 080C:9C ** **     .40	stz comlink_semaphore
  321 080F:60           	rts
  322                   
  323                   
  324                   
  325 0810:             RcvSendReq
  326 0810:A6 07        	ldx PlayerNumber	; can't be for master
  327 0812:F0 **        	beq .90
  328                   
  329 0814:AD ** **     	lda RxMsgSize
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   57
                        6502:src/comlink.src            14:13:52  

  330 0817:3A           	dec a	; cmp #1
  331      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  337                    #ELSE
  338 0818:D0 **        	bne .90
  339                    #ENDIF
  340                   
  341 081A:AD ** **     .00	lda RxMsg		; request coming for me??
  342 081D:29 78        	and #%01111000
  343 081F:4A           	lsr a
  344 0820:4A           	lsr a
  345 0821:4A           	lsr a
  346 0822:C5 07        	cmp PlayerNumber
  347 0824:D0 **        	bne .90
  348                   
  349      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  353                    #ENDIF
  354                   
  355 0826:AD ** **     .01	lda RxMsg		; asking for current frame or previous?
  356 0829:4D ** **     	eor Sequence
  357 082C:30 **        	bmi .50
  358                   
  359 082E:BD 9F 06     	lda power_of_two_table,x	; am I waiting for data??
  360 0831:4D ** **     	eor RxMask
  361      TRUE          #IF MAX_PLAYERS>8
  362 0834:D0 **        	bne .10
  363 0836:BD A7 06      	lda power_of_two_table+8,x
  364 0839:4D ** **     	eor RxMask+1
  365                    #ENDIF
  366 083C:F0 **        	beq .20
  367                   
  368 083E:20 ** **     .10	jsr AskForResend
  369 0841:80 **        	bra .90
  370                   
  371 0843:20 ** **     .20	jsr TryToSendMyData
  372 0846:80 **        	bra .90
  373                   
  374 0848:AD ** **     .50	lda RxMsg
  375 084B:29 80        	and #%10000000
  376 084D:20 ** **     	jsr SendPlrXSequenceData
  377                   ;	bra .90
  378                   
  379 0850:9C ** **     .90	stz comlink_semaphore
  380 0853:60           	rts
  381                   
  382                   
  383 0854:             RcvResendReq
  384 0854:A6 07        	ldx PlayerNumber	; only for master to deal with
  385 0856:D0 **        	bne .90
  386                   
  387 0858:AD ** **     .00	lda RxMsgSize
  388 085B:C9 **        	cmp #MASK_SIZE+1
  389      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  395                    #ELSE
  396 085D:D0 **        	bne .90
  397                    #ENDIF
  398                   
  399      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  403                    #ENDIF
  404                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   58
                        6502:src/comlink.src            14:13:52  

  405 085F:20 ** **     .11	jsr FigureWhosNext
  406                   
  407 0862:AD ** **     	lda RxMsg		; if message out of order, don't deal with
  408 0865:29 78        	and #%01111000
  409 0867:4A           	lsr a
  410 0868:4A           	lsr a
  411 0869:4A           	lsr a
  412 086A:CD ** **     	cmp WhosNext
  413 086D:D0 **        	bne .20
  414                   
  415 086F:8D ** **     	sta WhosReTxReq		; Set up to resend messages
  416 0872:AD ** **     	lda RxMsg
  417 0875:29 80        	and #%10000000
  418 0877:8D ** **     	sta ReTxSequence
  419 087A:AD ** **     	lda RxMsg+1
  420 087D:8D ** **     	sta ReTxMask
  421      TRUE          #IF MAX_PLAYERS>8
  422 0880:AD ** **     	lda RxMsg+2
  423 0883:8D ** **     	sta ReTxMask+1
  424                    #ENDIF
  425 0886:4C ** **     	jmp ResendNext		; will clear comlink_semaphore
  426                   
  427 0889:20 ** **     .20	jsr AskForSend
  428                   ;	bra .90
  429                   
  430 088C:9C ** **     .90	stz comlink_semaphore
  431 088F:60           	rts
  432                   
  433                   
  434                   
  435 0890:             ChkResendQueue			; we get here following transmission
  436 0890:AD ** **     	lda LongTimeoutFlag
  437 0893:F0 **        	beq .00
  438 0895:20 ** **     	jsr startLongTimeout	; if we asked for send, set long
  439 0898:A9 01        .00	lda #1
  440 089A:0C ** **     	tsb comlink_semaphore
  441 089D:D0 **        	bne .91
  442 089F:AD ** **     	lda WhosReTxReq
  443 08A2:D0 **        	bne ResendNext
  444                   
  445 08A4:9C ** **     .90	stz comlink_semaphore
  446 08A7:60           .91	rts
  447                   
  448                   
  449 08A8:             TimeoutInt
  450 08A8:A9 01        	lda #1
  451 08AA:0C ** **     	tsb comlink_semaphore
  452 08AD:F0 **        	beq ChkResendQueueAndSend
  453 08AF:4C ** **     	jmp startInterMsgTimeout	; restart timer if locked ou
  454                   
  455 08B2:             ChkResendQueueAndSend
  456 08B2:AD ** **     	lda WhosReTxReq
  457 08B5:D0 **        	bne ResendNext
  458                   
  459 08B7:             FigureAndAskForSend
  460 08B7:20 ** **     	jsr FigureWhosNext
  461 08BA:20 ** **     	jsr AskForSend
  462                   
  463 08BD:9C ** **     .90	stz comlink_semaphore
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   59
                        6502:src/comlink.src            14:13:52  

  464 08C0:60           	rts
  465                   
  466                   
  467                   
  468 08C1:             ResendNext
  469 08C1:A2 FF        	ldx #$ff
  470 08C3:AD ** **     	lda ReTxMask
  471      TRUE          #IF MAX_PLAYERS>8
  472 08C6:D0 **        	bne .00
  473 08C8:A2 07        	ldx #7
  474 08CA:AD ** **     	lda ReTxMask+1
  475                    #ENDIF
  476 08CD:D0 **        	bne .00
  477 08CF:9C ** **     	stz WhosReTxReq
  478 08D2:80 E3        	bra FigureAndAskForSend
  479                   
  480 08D4:E8           .00	  inx
  481 08D5:4A           	  lsr a
  482 08D6:90 FC        	 bcc .00
  483                   
  484 08D8:BD 9F 06     .10	lda power_of_two_table,x
  485 08DB:1C ** **     	trb ReTxMask
  486      TRUE          #IF MAX_PLAYERS>8
  487 08DE:BD A7 06     	lda power_of_two_table+8,x
  488 08E1:1C ** **     	trb ReTxMask+1
  489                    #ENDIF
  490 08E4:AD ** **     	lda ReTxSequence
  491 08E7:EC ** **     	cpx WhosReTxReq
  492 08EA:90 **        	bcc .11
  493 08EC:49 80        	eor #%10000000
  494 08EE:20 ** **     .11	jsr SendPlrXSequenceData
  495 08F1:9C ** **     	stz comlink_semaphore
  496 08F4:60           	rts
  497                   
  498                   
  499 08F5:             TryToSendMyData
  500 08F5:AD ** **     	lda OutGoingFlag
  501 08F8:30 **        	bmi .20
  502 08FA:A9 40        	lda #%01000000		; signal that we couldn't send when w
  503 08FC:0C ** **     	tsb OutGoingFlag
  504 08FF:60           	rts
  505                   
  506 0900:A6 07        .20	ldx PlayerNumber
  507                   
  508      FALSE         #IFDEF REDEYE_DEBUG
  518                    #ENDIF
  519                   
  520 0902:AD ** **     .00	lda Sequence
  521 0905:30 **        	bmi .01
  522 0907:9E ** **     	stz PlayerFlag0,x	; mark data as sent/received
  523 090A:80 **        	bra .02
  524 090C:9E ** **     .01	stz PlayerFlag1,x
  525                   
  526 090F:20 ** **     .02	jsr SendPlrXSequenceData	; send the data
  527                   
  528 0912:AD ** **     	lda Sequence		; get ready to deal with next sequence
  529 0915:49 80        	eor #%10000000
  530 0917:8D ** **     	sta Sequence
  531                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   60
                        6502:src/comlink.src            14:13:52  

  532 091A:A6 06        	ldx NumberOfPlayers	; mark all players as data needed
  533 091C:BD 9F 06     	lda power_of_two_table,x
  534 091F:0A           	asl a
  535 0920:8D ** **     	sta RxMask
  536      TRUE          #IF MAX_PLAYERS>8
  537 0923:BD A7 06     	lda power_of_two_table+8,x
  538 0926:2A           	rol
  539                    #ENDIF
  540 0927:CE ** **     	dec RxMask
  541      TRUE          #IF MAX_PLAYERS>8
  542 092A:10 **        	bpl .03
  543 092C:3A           	dea
  544 092D:8D ** **     .03	sta RxMask+1
  545                    #ENDIF
  546                   
  547 0930:A9 01        	lda #1			; if master, expect next data from player 1
  548 0932:8D ** **     	sta WhosNext
  549 0935:9C ** **     	stz OutGoingFlag	; mark that we've used our data
  550                   
  551 0938:60           	rts
  552                   
  553                   
  554 0939:             SendPlrXSequenceData
  555      TRUE          #IFDEF VAR_SIZE_DATA
  556 0939:BC ** **     	ldy PlayerDataSize0,x
  557 093C:89 80        	bit #%10000000
  558 093E:F0 **        	beq .01
  559 0940:BC ** **     	ldy PlayerDataSize1,x
  560 0943:5A           .01	phy
  561                    #ENDIF
  562                   
  563 0944:BC B7 06     	ldy PlrOffsets,x
  564 0947:8D ** **     	sta XmitBuffer
  565 094A:8A           	txa
  566 094B:A2 00        	ldx #0
  567 094D:0A           	asl a
  568 094E:0A           	asl a
  569 094F:0A           	asl a
  570 0950:09 03        	ora #3
  571 0952:0D ** **     	ora XmitBuffer
  572 0955:8D ** **     	sta XmitBuffer
  573 0958:30 **        	bmi .10
  574                   
  575 095A:B9 ** **     .00	  lda PlayerData0,y
  576 095D:9D ** **     	  sta XmitBuffer+1,x
  577 0960:C8           	  iny
  578 0961:E8           	  inx
  579 0962:E0 02        	  cpx #PLAYER_DATA_SIZE
  580 0964:90 F4        	 bcc .00
  581 0966:80 **        	bra .20
  582                   
  583 0968:B9 ** **     .10	  lda PlayerData1,y
  584 096B:9D ** **     	  sta XmitBuffer+1,x
  585 096E:C8           	  iny
  586 096F:E8           	  inx
  587 0970:E0 02        	  cpx #PLAYER_DATA_SIZE
  588 0972:90 F4        	 bcc .10
  589                   
  590 0974:9C ** **     .20	stz LongTimeoutFlag
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   61
                        6502:src/comlink.src            14:13:52  

  591      TRUE          #IFDEF VAR_SIZE_DATA
  592 0977:68           	pla
  593 0978:1A           	inc a
  594                    #ELSE
  596                    #ENDIF
  597                   ;	jmp sendLengthMessage
  598 0979:80 **        	bra sendLengthMessage	; within range
  599                   
  600                   
  601 097B:             AskForSend
  602 097B:AD ** **     	lda WhosNext
  603 097E:D0 **        	bne .10
  604 0980:4C F5 08     	jmp TryToSendMyData
  605                   
  606 0983:             .10
  607      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  611                    #ENDIF
  612 0983:0A           .11	asl a
  613 0984:0A           	asl a
  614 0985:0A           	asl a
  615 0986:09 04        	ora #4
  616 0988:0D ** **     	ora Sequence
  617 098B:49 80        	eor #%10000000
  618 098D:8D ** **     	sta XmitBuffer
  619 0990:A9 01        	lda #1
  620 0992:8D ** **     	sta LongTimeoutFlag
  621                   ;	jmp sendLengthMessage
  622 0995:80 **        	bra sendLengthMessage		; within range
  623                   
  624                   
  625 0997:             AskForResend
  626      FALSE         #IFDEF REDEYE_ERROR_COUNTS
  630                    #ENDIF
  631                   
  632 0997:A6 07        .00	ldx PlayerNumber
  633 0999:8A           	txa
  634 099A:0A           	asl a
  635 099B:0A           	asl a
  636 099C:0A           	asl a
  637 099D:0D ** **     	ora Sequence
  638 09A0:09 05        	ora #5
  639 09A2:8D ** **     	sta XmitBuffer
  640 09A5:BD 9F 06     	lda power_of_two_table,x	; ask for everyone we don't 
  641 09A8:4D ** **     	eor RxMask			; (except ourself, of course)
  642 09AB:8D ** **     	sta XmitBuffer+1
  643      TRUE          #IF MAX_PLAYERS>8
  644 09AE:BD A7 06     	lda power_of_two_table+8,x
  645 09B1:4D ** **     	eor RxMask+1
  646 09B4:8D ** **     	sta XmitBuffer+2
  647                    #ENDIF
  648 09B7:9C ** **     	stz LongTimeoutFlag
  649 09BA:A9 **        	lda #MASK_SIZE+1
  650                   ;	jmp sendLengthMessage		; fall through
  651                   
  652                   
  653 09BC:             sendLengthMessage
  654 09BC:A2 **        	ldx #<XmitBuffer
  655 09BE:A0 **        	ldy #>XmitBuffer
  656 09C0:58           	cli
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   62
                        6502:src/comlink.src            14:13:52  

  657 09C1:4C ** **     	jmp WaitAndSendMsg
  658                   
  659                   
  660                   
  661 09C4:             launch_redeye
  662 09C4:AD ** **     	lda OutGoingFlag	; system still hasn't sent previous 
  663 09C7:30 FB        	bmi launch_redeye
  664                   
  665 09C9:A6 07        	ldx PlayerNumber	; copy our data into appropriate buf
  666 09CB:BC B7 06     	ldy PlrOffsets,x
  667 09CE:AD ** **     	lda Seq
  668 09D1:30 **        	bmi .12
  669                   
  670      TRUE          #IFDEF VAR_SIZE_DATA
  671 09D3:AD ** **     	lda OutGoingSize
  672 09D6:9D ** **     	sta PlayerDataSize0,x
  673 09D9:F0 **        	beq .20
  674                    #ENDIF
  675 09DB:A2 00        	ldx #0
  676 09DD:BD ** **     .00	  lda OutGoingData,x
  677 09E0:99 ** **     	  sta PlayerData0,y
  678 09E3:E8           	  inx
  679 09E4:C8           	  iny
  680 09E5:             .01
  681      TRUE          #IFDEF VAR_SIZE_DATA
  682 09E5:EC ** **     	  cpx OutGoingSize
  683                    #ELSE
  685                    #ENDIF
  686 09E8:90 F3        	 bcc .00
  687 09EA:80 **        	bra .20
  688                   
  689 09EC:             .12
  690      TRUE          #IFDEF VAR_SIZE_DATA
  691 09EC:AD ** **     	lda OutGoingSize
  692 09EF:9D ** **     	sta PlayerDataSize1,x
  693 09F2:F0 **        	beq .20
  694                    #ENDIF
  695 09F4:A2 00        	ldx #0
  696 09F6:BD ** **     .10	  lda OutGoingData,x
  697 09F9:99 ** **     	  sta PlayerData1,y
  698 09FC:E8           	  inx
  699 09FD:C8           	  iny
  700 09FE:             .11
  701      TRUE          #IFDEF VAR_SIZE_DATA
  702 09FE:EC ** **     	  cpx OutGoingSize
  703                    #ELSE
  705                    #ENDIF
  706 0A01:90 F3        	 bcc .10
  707                   
  708 0A03:A5 06        .20	lda NumberOfPlayers
  709 0A05:D0 **        	bne .21
  710 0A07:9C ** **     	stz PlayerFlag0
  711 0A0A:9C ** **     	stz PlayerFlag1
  712 0A0D:80 **        	bra .90
  713                   	
  714 0A0F:A9 01        .21	lda #1			; pause redeye for a moment
  715 0A11:0C ** **     	tsb comlink_semaphore
  716                   
  717 0A14:A9 80        	lda #%10000000		; tell system our data is good now
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   63
                        6502:src/comlink.src            14:13:52  

  718 0A16:0C ** **     	tsb OutGoingFlag
  719                   
  720 0A19:AD ** **     	lda OutGoingFlag	; did we already fail to send our da
  721 0A1C:29 7F        	and #%01111111
  722 0A1E:F0 **        	beq .40
  723                   
  724      FALSE         #IFDEF REDEYE_DEBUG
  730                    #ENDIF
  731                   
  732 0A20:20 F5 08     .30	jsr TryToSendMyData	; send our data
  733                   
  734 0A23:9C ** **     .40	stz comlink_semaphore	; let redeye go
  735                   
  736 0A26:A9 80        .90	lda #%10000000
  737 0A28:4D ** **     	eor Seq
  738 0A2B:8D ** **     	sta Seq
  739                   
  740 0A2E:60           	rts
  741                   
  742                   
  743 0A2F:             FigureWhosNext
  744 0A2F:AE ** **     	ldx WhosNext
  745 0A32:BD 9F 06     .00	  lda power_of_two_table,x
  746 0A35:2C ** **     	  bit RxMask
  747 0A38:D0 **        	  bne .10
  748      TRUE          #IF MAX_PLAYERS>8
  749 0A3A:BD A7 06     	  lda power_of_two_table+8,x
  750 0A3D:2C ** **     	  bit RxMask+1
  751 0A40:D0 **        	  bne .10
  752                    #ENDIF
  753 0A42:E4 06        	  cpx NumberOfPlayers
  754 0A44:E8           	  inx
  755 0A45:90 EB        	 bcc .00
  756                   
  757 0A47:A2 00        	ldx #0
  758                   	
  759 0A49:8E ** **     .10	stx WhosNext
  760                   
  761 0A4C:60           	rts
  762                   
  763                   
  764 0A4D:             ZeroComlinkVariables
  765 0A4D:A2 **        	ldx #end_of_comlink_erasable_variables-start_of_comli
  766 0A4F:9E ** **     .00	  stz start_of_comlink_variables-1,x
  767 0A52:CA           	  dex
  768 0A53:D0 FA        	 bne .00
  769                   
  770 0A55:60           	rts
  771                   
  772                   
  773                   
  774                   
  435                   	.IN 6502:src/msgmgr.src
    1                   ; Fri Oct 12 11:48:05 1990
    2                   *=====================================================
    3                   * 
    4                   * Comlink low level Message Manager  --  Handy Softwar
    5                   * 
    6                   * Confidential and Proprietary
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   64
                        6502:src/msgmgr.src             14:13:52  

    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   * 
    9                   * Date		Name	Description
   10                   * ---------	-------	----------------------------------
   11                   * 11-Oct-90	SHL	Added REDEYE_SLOWNESS support for "slo
   12                   * 22-Mar-90	SHL	Removed PHA PHX and PLX PLA from timer
   13                   * 20-Mar-90	SHL	Removed INT4_VEC_USER code.
   14                   * 15-Mar-90	SHL	Added Long_TIMEOUT support
   15                   * 13-Mar-90	SHL	Added messageSentVector support
   16                   * 12-Mar-90	SHL	Added interMsgTimeoutVector support
   17                   * 9-Mar-90	SHL	Minor cleanup and code tightening
   18                   * Sep  5 89	LEA	Put Variables in a separate file.
   19                   *			Added msgTimeout Vector.
   20                   * Sep  4 89	LEA	Crafted code for speed.
   21                   *			added INT4_VEC_USER code.
   22                   * Sep  2 89	LEA	Added fast irq user code.
   23                   * Sep  1 89	LEA	Made Msg Gap Timeout insert an MsgGapT
   24                   *			in the circular receive buffer.
   25                   * Sep  1 89	LEA	Put circular buffer between Rx IRQs an
   26                   *			processes received bytes.
   27                   * Aug 24 89	LEA	Created this file.
   28                   *=====================================================
   29                   
   30                   
   31      0104         MsgMgrVers		.eq $0104
   32                   
   33                   
   34                   
   35                   
   36                   
   37                   
   38                   *-----------------------------------------------------
   39                   * USER ROUTINES CALLED BY MESSAGE MANAGER
   40                   *=====================================================
   41                   *=====================================================
   42                   *=====================================================
   43                   
   44                   
   45                   * Vector: readMsgVector
   46                   *=====================================================
   47                   * This is called when a complete message has been rece
   48                   * RxMsgStat, RxMsgSize and RxMsg can then be read.
   49                   * (interrupt mask is cleared)
   50                   
   51                   
   52                   * Vector: msgOverflowVector
   53                   *=====================================================
   54                   * This is called when a complete message has been rece
   55                   * reading the last one.
   56                   * (interrupt mask is cleared)
   57                   
   58                   
   59                   * Vector: msgTimeoutVector
   60                   *=====================================================
   61                   * This is called when a message byte failed to arrive 
   62                   * that some data was received but not enough to comple
   63                   * (interrupt mask is set)
   64                   
   65                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   65
                        6502:src/msgmgr.src             14:13:52  

   66                   * Vector: interMsgTimeoutVector
   67                   *=====================================================
   68                   * This is called when too much time has passed before 
   69                   * to come in.
   70                   * (interrupt mask is set)
   71                   
   72                   
   73                   * Vector: transmissionErrorVector
   74                   *=====================================================
   75                   * The handy's receiver always receives what it sent un
   76                   * sending at the same time. At the end of a transmissi
   77                   * last byte has gone out, the byte in the receiver is 
   78                   * byte that was transmitted. If they don't match, this
   79                   * (interrupt mask is set)
   80                   
   81                   
   82                   
   83                   
   84                   
   85                   *-----------------------------------------------------
   86                   * ROUTINES CALLED BY USER
   87                   *=====================================================
   88                   *=====================================================
   89                   *=====================================================
   90                   
   91                   
   92                   
   93 0A56:             initMessageManager
   94                   *-----------------------------------------------------
   95                   * Call this once to initialize the Message Manager
   96                   *=====================================================
   97                   
   98                   		;-- install comlink interrupt handlers
   99 0A56:08           		php
  100 0A57:78           		sei
  101                   
  102 0A58:A9 **        		lda #<SerialIrq
  103 0A5A:A2 **        		ldx #>SerialIrq
  104                   
  105 0A5C:8D ** **     		sta sysIntTable+{4*2}
  106 0A5F:8E ** **     		stx sysIntTable+{4*2}+1
  107 0A62:A9 **        		lda #<msgMgrTimerIrq
  108 0A64:A2 **        		ldx #>msgMgrTimerIrq
  109 0A66:8D ** **     		sta sysIntTable+{COMLINK_TIMER*2}
  110 0A69:8E ** **     		stx sysIntTable+{COMLINK_TIMER*2}+1
  111                   
  112 0A6C:28           		plp
  113                   
  114                   		;-- set baud rate
  115 0A6D:A9 01        		lda #1
  116 0A6F:8D 10 FD     		sta SERIALRATE
  117                   
  118                   		;-- if REDEYE_SLOWNESS = 0 use 62500 baud,
  119                   		;-- if 1 use 31250, if 2 use 15625, if 3 use 7812.5
  120                   
  121      0A72         Baud_Patch	.= *
  122 0A72:A9 18        		lda #ENABLE_RELOAD+ENABLE_COUNT+REDEYE_SLOWNESS
  123 0A74:8D 11 FD     		sta SERIALRATE+TIM_CONTROLA
  124                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   66
                        6502:src/msgmgr.src             14:13:52  

  125                   		INIT_ONESHOT COMLINK_TIMER,AUD_4
    1      FALSE        		#IF  AUD_4 > 7
    4                 + 		#ENDIF
    5      FD04       + INIT_ONESHOT.0024		.=	TIMER0+COMLINK_TIMER*4
    6 0A77:9C 05 FD   + 		stz	INIT_ONESHOT.0024+TIM_CONTROLA	
    7 0A7A:A9 FF      + 		lda	#255		
    8 0A7C:8D 06 FD   + 		sta	INIT_ONESHOT.0024+TIM_COUNT
    9 0A7F:A9 08      + 		lda	#TIMER_DONE	
   10 0A81:8D 07 FD   + 		sta	INIT_ONESHOT.0024+TIM_CONTROLB
   11 0A84:A9 8A      + 		lda	#ENABLE_INT+ENABLE_COUNT+AUD_4
   12 0A86:8D 05 FD   + 		sta	INIT_ONESHOT.0024+TIM_CONTROLA	
   13                 + 
  126                   
  127                   		;-- init this flag
  128 0A89:9C ** **     		stz RxMsgBusy
  129                   
  130 0A8C:9C ** **     		stz TxToRxTmrOn
  131                   
  132                   		;-- fall thru to resetReceiver
  133                   
  134                   
  135 0A8F:             resetReceiver
  136                   		;-- enable the message receiver
  137 0A8F:9C ** **     		stz RxByteCounter
  138                   
  139                   		;-- read and init the uart
  140 0A92:AD 8D FD     		lda SERDAT
  141 0A95:AC 8C FD     		ldy SERCTL
  142                   
  143 0A98:A2 5C        		ldx #STDCOM+RESETERR+RXINTEN
  144 0A9A:8E ** **     		stx SERCTL_RAM
  145 0A9D:8E 8C FD     		stx SERCTL
  146                   
  147 0AA0:A2 10        		ldx #SERIAL_INT
  148 0AA2:8E 80 FD     		stx INTRST
  149                   
  150 0AA5:60           		rts
  151                   
  152                   
  153                   
  154                   
  155                   
  156 0AA6:             WaitAndSendMsg
  157                   *-----------------------------------------------------
  158                   * Wait until last msg has been sent then call SendMsg
  159                   *=====================================================
  160 0AA6:2C ** **     .11		bit SERCTL_RAM
  161 0AA9:30 FB        		bmi .11
  162                   		;-- fall thru to SendMsg
  163                   
  164                   
  165                   
  166 0AAB:             SendMsg
  167                   *-----------------------------------------------------
  168                   *
  169                   * This routine is called by the user to send a message
  170                   *
  171                   * This routine grabs a copy of the user's data, adds l
  172                   *    checksum byte, and activates the interrupt driven
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   67
                        6502:src/msgmgr.src             14:13:52  

  173                   *
  174                   * Call with:	address of user's data in X,Y.
  175                   *		number of bytes of data in A.  (can be from 0 to 25
  176                   *
  177                   * Well behaved users will not call SendMsg while SERCT
  178                   *		( see WaitAndSendMsg above. )
  179                   *=====================================================
  180                   
  181                   		;-- patch addr of user data into move routine
  182 0AAB:8E ** **     		stx .11+1
  183 0AAE:8C ** **     		sty .11+2
  184                   
  185      FALSE         #IFDEF REDEYE_DEBUG
  190                    #ENDIF
  191                   
  192 0AB1:8D ** **     .b1		sta TxRaw
  193                   
  194 0AB4:AA           		tax
  195 0AB5:80 **        		bra .12
  196                   
  197                   		;-- copy user data to TxRaw
  198 0AB7:BD 0F 27     .11		  lda 9999,X	; selfmod
  199 0ABA:9D ** **     		  sta TxRaw+1,X
  200 0ABD:CA           .12		  dex
  201 0ABE:E0 FF        		  cpx #$ff
  202 0AC0:D0 F5        		 bne .11
  203                   
  204                   		;-- calculate and store checksum
  205 0AC2:AE ** **     .22		ldx TxRaw
  206 0AC5:E8           		inx
  207 0AC6:A9 FF        		lda #-1
  208 0AC8:38           .33		  sec
  209 0AC9:FD ** **     		  sbc TxRaw-1,X
  210 0ACC:CA           		  dex
  211 0ACD:D0 F9        		 bne .33
  212 0ACF:AE ** **     		ldx TxRaw
  213 0AD2:9D ** **     		sta TxRaw+1,X
  214                   
  215                   		;-- init the message transmitter
  216 0AD5:E8           		inx
  217 0AD6:E8           		inx
  218 0AD7:8E ** **     		stx TxRawSize
  219                   
  220 0ADA:A9 01        		lda #1
  221 0ADC:8D ** **     		sta TxByteCounter
  222                   
  223                   		;-- stop message gap timer
  224                   		STOP_ONESHOT COMLINK_TIMER
    1      FD04       + STOP_ONESHOT.0025		.=	TIMER0+COMLINK_TIMER*4
    2 0ADF:A9 08      + 		lda	#TIMER_DONE
    3 0AE1:8D 07 FD   + 		sta	STOP_ONESHOT.0025+TIM_CONTROLB
    4                 + 
  225                   
  226                   		;-- send first byte
  227 0AE4:AD ** **     		lda TxRaw
  228 0AE7:8D 8D FD     		sta SERDAT
  229                   
  230                   		;-- enable Tx and disable Rx interrupts
  231 0AEA:08           		php
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   68
                        6502:src/msgmgr.src             14:13:52  

  232 0AEB:78           		sei
  233                   
  234 0AEC:A9 94        		lda #STDCOM+TXINTEN
  235 0AEE:8D ** **     		sta SERCTL_RAM
  236 0AF1:8D 8C FD     		sta SERCTL
  237 0AF4:AD 8D FD     		lda SERDAT
  238 0AF7:28           		plp
  239                   
  240 0AF8:60           		rts
  241                   
  242                   
  243                   
  244                   
  245                   
  246                   *-----------------------------------------------------
  247                   * INTERNAL CODE
  248                   *=====================================================
  249                   *=====================================================
  250                   *=====================================================
  251                   
  252                   
  253                   
  254                   *-----------------------------------------------------
  255                   *
  256                   * This is the Serial Interrupt handler.
  257                   *
  258                   *=====================================================
  259                   
  260 0AF9:             SerialIrq
  261 0AF9:5A           		phy
  262 0AFA:2C ** **     		bit SERCTL_RAM
  263 0AFD:10 **        		bpl RxIrq
  264                   
  265                   
  266                   * TxIrq
  267                   *---------------------------------------
  268 0AFF:AE ** **     		ldx TxByteCounter
  269                   
  270                   		;-- check if this was the last byte in the message
  271 0B02:EC ** **     		cpx TxRawSize
  272 0B05:F0 **        		beq .11
  273                   
  274                   		;-- send next byte
  275 0B07:BD ** **     		lda TxRaw,X
  276 0B0A:8D 8D FD     		sta SERDAT
  277 0B0D:EE ** **     		inc TxByteCounter
  278                   
  279 0B10:             .22		;-- clear interrupt
  280 0B10:A9 10        		lda #SERIAL_INT
  281 0B12:8D 80 FD     		sta INTRST
  282                   
  283 0B15:7A           		ply
  284                   
  285 0B16:FA           		plx
  286 0B17:68           		pla
  287 0B18:40           		rti
  288                   
  289                   
  290 0B19:             .11		;-- notify timer interrupt handler to do turnarou
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   69
                        6502:src/msgmgr.src             14:13:52  

  291 0B19:A9 80        		lda #%10000000
  292 0B1B:8D ** **     		sta TxToRxTmrOn
  293                   
  294                   		;-- reload Tx to Rx turnaround timer
  295                   ;		START_ONESHOT COMLINK_TIMER,TxToRx_TIMEOUT
  296                   
  297      0B1E         TxToRx_Patch1	.= *
  298 0B1E:A9 73        	lda #TxToRx_SLOW-1
  299 0B20:8D 06 FD     	sta COMLINK_TIMER_ADDR+TIM_COUNT
  300      0B23         TxToRx_Patch	.= *
  301 0B23:A9 88        	lda #ENABLE_INT+ENABLE_COUNT+TxToRx_Divider+REDEYE_SL
  302 0B25:8D 05 FD     	sta COMLINK_TIMER_ADDR+TIM_CONTROLA
  303 0B28:9C 07 FD     	stz COMLINK_TIMER_ADDR+TIM_CONTROLB
  304                   
  305                   		;-- disable TxEmpty interrupts
  306 0B2B:A9 14        		lda #STDCOM
  307 0B2D:8D ** **     		sta SERCTL_RAM
  308 0B30:8D 8C FD     		sta SERCTL
  309                   
  310 0B33:80 DB        		bra .22
  311                   
  312                   
  313                   
  314 0B35:             RxIrq
  315                   *---------------------------------------
  316                   
  317                   		;-- restart Msg Gap timer
  318 0B35:9C ** **     		stz TxToRxTmrOn
  319                   
  320 0B38:A9 5E        	lda #MSG_GAP_TIMEOUT-1
  321 0B3A:8D 06 FD     	sta COMLINK_TIMER_ADDR+TIM_COUNT
  322      0B3D         MSG_GAP_Patch	.= *
  323 0B3D:A9 8A        	lda #ENABLE_INT+ENABLE_COUNT+MSG_GAP_Divider+REDEYE_S
  324 0B3F:8D 05 FD     	sta COMLINK_TIMER_ADDR+TIM_CONTROLA
  325 0B42:9C 07 FD     	stz COMLINK_TIMER_ADDR+TIM_CONTROLB
  326                   
  327                   		;-- capture serial data and status
  328 0B45:AE 8D FD     		ldx SERDAT
  329 0B48:AD 8C FD     		lda SERCTL
  330                   
  331                   		;-- reset uart error bits
  332 0B4B:A0 5C        		ldy #STDCOM+RXINTEN+RESETERR
  333 0B4D:8C 8C FD     		sty SERCTL
  334                   
  335                   		;-- reset interrupt
  336 0B50:A0 10        		ldy #SERIAL_INT
  337 0B52:8C 80 FD     		sty INTRST
  338                   
  339                   		;-- get current byte's reception errors
  340 0B55:29 1E        		and #PARERR+OVERRUN+FRAMERR+RXBRK
  341 0B57:D0 **        		bne .80		; this is bad data
  342                   
  343                   
  344                   * Good Data
  345                   * This code handles bytes received with no errors:
  346                   
  347 0B59:8A           		txa			; get data in A
  348 0B5A:AE ** **     		ldx RxByteCounter	; is this the first byte of a msg 
  349 0B5D:F0 **        		beq .60
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   70
                        6502:src/msgmgr.src             14:13:52  

  350                   
  351                   		;-- save received byte
  352 0B5F:9D ** **     		sta RxRaw,X
  353 0B62:E8           		inx
  354 0B63:8E ** **     		stx RxByteCounter	; advance data pointer
  355                   
  356                   		;-- is this the last byte of a message ?
  357 0B66:EC ** **     		cpx RxRawSize
  358 0B69:B0 **        		bge .70
  359                   
  360 0B6B:             .90		;-- return from serial interrupt
  361                   
  362 0B6B:7A           		ply
  363                   
  364 0B6C:FA           		plx
  365 0B6D:68           		pla
  366 0B6E:40           		rti
  367                   
  368                   
  369                   
  370                   
  371                   
  372                   * First Byte
  373                   		;-- advance data pointer
  374 0B6F:EE ** **     .60		inc RxByteCounter
  375                   
  376                   		;-- init error accumulator
  377 0B72:9C ** **     		stz RxRawStat
  378                   
  379                   		;-- is the size an allowable value ?
  380 0B75:C9 **        		cmp #MAX_DATA_SIZE+1
  381 0B77:90 **        		blt .61
  382                   		;-- if not notify of size byte error
  383 0B79:A9 40        		lda #MSG_SIZE_ERR
  384 0B7B:0C ** **     		tsb RxRawStat
  385                   		;-- and assume max message size
  386 0B7E:A9 **        		lda #MAX_DATA_SIZE
  387 0B80:             .61		;-- save data
  388 0B80:8D ** **     		sta RxRaw
  389 0B83:1A           		inc
  390 0B84:1A           		inc
  391 0B85:8D ** **     		sta RxRawSize
  392 0B88:80 E1        		bra .90		; start timer and return
  393                   
  394                   * Last Byte
  395 0B8A:20 ** **     .70		jsr endOfMsg
  396 0B8D:80 DC        		bra .90		; return from interrupt
  397                   
  398                   
  399                   
  400                   * Bad Data
  401                   * This code handles bytes received with errors:
  402                   
  403 0B8F:89 02        .80		bit #RXBRK	; if a break condition don't save the 
  404 0B91:D0 D8        		bne .90
  405                   
  406                   		;-- accumulate received errors
  407 0B93:0C ** **     		tsb RxRawStat
  408                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   71
                        6502:src/msgmgr.src             14:13:52  

  409 0B96:AE ** **     		ldx RxByteCounter	; is this the first byte ?
  410 0B99:D0 **        		bne .81
  411 0B9B:A0 **        		ldy #MAX_DATA_SIZE+2	; default to max size
  412 0B9D:8C ** **     		sty RxRawSize
  413                   
  414 0BA0:89 08        .81		bit #OVERRUN	; lost a byte ?
  415 0BA2:F0 **        		beq .82
  416 0BA4:E8           		inx
  417                   
  418 0BA5:EC ** **     .82		cpx RxRawSize	; is this the last byte ?
  419 0BA8:B0 E0        		bge .70
  420 0BAA:8E ** **     		stx RxByteCounter
  421 0BAD:80 BC        		bra .90		; start timer and return
  422                   
  423                   ;.70		jsr endOfMsg
  424                   ;		bra .90		; return from interrupt
  425                   
  426                   
  427                   
  428 0BAF:             endOfMsg
  429                   *-----------------------------------------------------
  430                   		;-- stop message gap timer
  431                   		STOP_ONESHOT COMLINK_TIMER
    1      FD04       + STOP_ONESHOT.0026		.=	TIMER0+COMLINK_TIMER*4
    2 0BAF:A9 08      + 		lda	#TIMER_DONE
    3 0BB1:8D 07 FD   + 		sta	STOP_ONESHOT.0026+TIM_CONTROLB
    4                 + 
  432                   
  433 0BB4:20 ** **     		jsr startInterMsgTimeout
  434                   
  435                   		;-- reset message byte counter
  436 0BB7:9C ** **     		stz RxByteCounter
  437                   
  438                   		;-- is last msg still being read by user ?
  439 0BBA:A9 80        		lda #128
  440 0BBC:0C ** **     		tsb RxMsgBusy
  441                   
  442 0BBF:F0 **        		beq .11
  443 0BC1:58           		cli
  444 0BC2:4C ** **     		jmp msgMgrRtn	; selfmod  ; let error handler return 
  445      0BC3         msgOverflowVector .= *-2
  446                   
  447                   		;-- init checksum
  448 0BC5:AD ** **     .11		lda RxRaw
  449 0BC8:8D ** **     		sta RxChecksum
  450                   
  451                   		;-- copy msg data to user's buffer
  452 0BCB:AE ** **     		ldx RxRawSize
  453 0BCE:CA           		dex
  454 0BCF:CA           		dex
  455 0BD0:8E ** **     		stx RxMsgSize
  456 0BD3:E8           		inx
  457 0BD4:             .22		  ;-- copy raw to Msg and evaluate checksum
  458 0BD4:BD ** **     		  lda RxRaw,X
  459 0BD7:9D ** **     		  sta RxMsg-1,X
  460 0BDA:18           		  clc
  461 0BDB:6D ** **     		  adc RxChecksum
  462 0BDE:8D ** **     		  sta RxChecksum
  463 0BE1:CA           		  dex
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   72
                        6502:src/msgmgr.src             14:13:52  

  464 0BE2:D0 F0        		 bne .22
  465                   
  466                   		;-- evaluate checksum
  467 0BE4:AD ** **     		lda RxChecksum
  468 0BE7:1A           		inc
  469 0BE8:F0 **        		beq .33
  470                   		;-- notify of checksum error
  471 0BEA:A9 80        		lda #MSG_CHECKSUM_ERR
  472 0BEC:0C ** **     		tsb RxRawStat
  473 0BEF:             .33
  474                   		;-- copy msg status to user's buffer
  475 0BEF:AD ** **     		lda RxRawStat
  476 0BF2:8D ** **     		sta RxMsgStat
  477                   
  478                   		;-- call the higher level handler
  479                   		;-- with valid data in RxMsgStat, RxMsgSize and RxMs
  480 0BF5:58           		cli
  481 0BF6:20 ** **     		jsr msgMgrRtn	; selfmod
  482      0BF7         readMsgVector	.= *-2
  483                   
  484                   		;-- clear RxMsgBusy
  485 0BF9:9C ** **     .44		stz RxMsgBusy
  486                   
  487 0BFC:60           msgMgrRtn	rts
  488                   
  489      0BF7         readMsgVector	.eq readMsgVector	; defined so they can 
  490      0BC3         msgOverflowVector .eq msgOverflowVector	;  symbol tabl
  491                   
  492                   
  493 0BFD:             startInterMsgTimeout
  494 0BFD:A5 07        		lda PlayerNumber
  495 0BFF:D0 **        		bne .90
  496                   
  497                   		;-- notify timer interrupt handler to do timeout cod
  498 0C01:A9 40        		lda #%01000000
  499 0C03:8D ** **     		sta TxToRxTmrOn
  500                   
  501                   		;-- reload timer
  502                   ;		START_ONESHOT COMLINK_TIMER,InterMsg_TIMEOUT
  503 0C06:A9 F9        	lda #InterMsg_TIMEOUT-1
  504 0C08:8D 06 FD     	sta COMLINK_TIMER_ADDR+TIM_COUNT
  505      0C0B         InterMsg_Patch	.= *
  506 0C0B:A9 8A        	lda #ENABLE_INT+ENABLE_COUNT+InterMsg_Divider+REDEYE_
  507 0C0D:8D 05 FD     	sta COMLINK_TIMER_ADDR+TIM_CONTROLA
  508 0C10:9C 07 FD     	stz COMLINK_TIMER_ADDR+TIM_CONTROLB
  509                   
  510 0C13:60           .90		rts
  511                   
  512                   
  513 0C14:             startLongTimeout
  514                   		;-- notify timer interrupt handler to do timeout cod
  515 0C14:A9 40        		lda #%01000000
  516 0C16:8D ** **     		sta TxToRxTmrOn
  517                   
  518                   		;-- reload timer
  519                   ;		START_ONESHOT COMLINK_TIMER,InterMsg_TIMEOUT
  520 0C19:A9 F9        	lda #Long_TIMEOUT-1
  521 0C1B:8D 06 FD     	sta COMLINK_TIMER_ADDR+TIM_COUNT
  522 0C1E:A9 8E        	lda #ENABLE_INT+ENABLE_COUNT+Long_Divider
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   73
                        6502:src/msgmgr.src             14:13:52  

  523 0C20:8D 05 FD     	sta COMLINK_TIMER_ADDR+TIM_CONTROLA
  524 0C23:9C 07 FD     	stz COMLINK_TIMER_ADDR+TIM_CONTROLB
  525                   
  526 0C26:60           .90		rts
  527                   
  528                   
  529                   
  530                   
  531                   
  532                   
  533                   *-----------------------------------------------------
  534                   *
  535                   * This is the Message Manager's timer interrupt routin
  536                   *
  537                   * The timer is used for three things:
  538                   *
  539                   *	-- Tx to Rx turnaround. ie, reactivating the receive
  540                   *	     last bit of a transmission has gone out
  541                   *
  542                   *	-- Message gap timeout. ie, sensing that so much tim
  543                   *	     since the last byte was received that the next 
  544                   *	     the start of a new message.
  545                   *
  546                   *	-- Intermessage gap timeout. ie, sensing that so muc
  547                   *	     since the last message was received that someth
  548                   *	     in the communication.
  549                   *
  550                   *=====================================================
  551                   
  552 0C27:             msgMgrTimerIrq
  553 0C27:5A           		phy
  554                   
  555                   		;-- is this a TxToRx, MsgGap, or InterMsg timeout
  556 0C28:2C ** **     		bit TxToRxTmrOn
  557 0C2B:9C ** **     		stz TxToRxTmrOn
  558 0C2E:30 **        		bmi TxToRxTimeout
  559 0C30:50 **        		bvc MsgGapTimeout
  560                   
  561                   
  562                   * InterMsgTimeout
  563                   *-----------------------------------------------------
  564 0C32:20 FC 0B     		jsr msgMgrRtn	; selfmod
  565      0C33         interMsgTimeoutVector .eq *-2
  566                   
  567 0C35:80 **        		bra endTmrIrq
  568                   
  569                   
  570 0C37:             MsgGapTimeout
  571                   *-----------------------------------------------------
  572 0C37:20 FD 0B     		jsr startInterMsgTimeout
  573                   
  574                   		;-- reset message byte counter
  575 0C3A:9C ** **     		stz RxByteCounter
  576                   
  577                   	;	cli	; don't cli if using system.8 int handler
  578                   
  579                   		;-- notify sender of timeout error
  580 0C3D:20 FC 0B     		jsr msgMgrRtn	; selfmod
  581      0C3E         msgTimeoutVector .eq *-2
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   74
                        6502:src/msgmgr.src             14:13:52  

  582                   
  583 0C40:80 **        		bra endTmrIrq
  584                   
  585                   
  586                   
  587                   
  588 0C42:             TxToRxTimeout
  589                   *-----------------------------------------------------
  590 0C42:20 FD 0B     		jsr startInterMsgTimeout
  591                   
  592 0C45:20 8F 0A     		jsr resetReceiver	; returns SERDAT in A, SERCTL in Y
  593                   
  594                   		;-- compare last received byte with last transmitted
  595 0C48:AE ** **     		ldx TxRawSize
  596 0C4B:DD ** **     		cmp TxRaw-1,X
  597 0C4E:D0 **        		bne txErr
  598                   
  599                   		;-- check last received byte's errors
  600 0C50:98           		tya
  601 0C51:89 14        		bit #PARERR+FRAMERR
  602 0C53:D0 **        		bne txErr
  603 0C55:20 FC 0B     		jsr msgMgrRtn	; selfmod
  604      0C56         messageSentVector .eq *-2
  605                   
  606 0C58:80 **        		bra endTmrIrq
  607                   
  608                   
  609 0C5A:             txErr
  610                   *-----------------------------------------------------
  611                   	;	cli	; don't cli if using system.8 int handler
  612                   
  613                   		;-- notify sender of transmission collision error
  614 0C5A:20 FC 0B     		jsr msgMgrRtn	; selfmod
  615      0C5B         transmissionErrorVector .eq *-2
  616                   
  617                   ;		bra endTmrIrq	; fall through
  618                   
  619                   
  620 0C5D:             endTmrIrq
  621                   *-----------------------------------------------------
  622 0C5D:7A           		ply
  623                   
  624 0C5E:FA           		plx
  625 0C5F:68           		pla
  626 0C60:40           		rti
  627                   
  628                   
  629                   
  630                   
  436 0C61:             comlink_end_address
  437                   
  438 0C61:             logon_start_address
  439                   	.IN 6502:src/comlink_logon.src
    1                   ; Fri Oct 12 11:47:33 1990
    2                   * == comlink_logon.src ===============================
    3                   *
    4                   * Intermediate level handler for Redeye  --  Handy Sof
    5                   *
    6                   * Confidential and Proprietary
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   75
                        6502:src/comlink_logon.src      14:13:52  

    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 11-Oct-90	SHL		Added REDEYE_SLOWNESS support
   12                   * 23-Mar-90	SHL		Split off file from comlink.src
   13                   *				Now checks for redeye in use before login
   14                   * 22-Mar-90	SHL		Removed PHA PHX and PLX PLA from time
   15                   * 20-Mar-90	SHL		Variable length message support added
   16                   * 16-Mar-90	SHL		Revamped logon code
   17                   *				Packdown happens after login instead of during
   18                   * 9-Mar-90	SHL		Added new Redeye support
   19                   * 6-Mar-90	SHL		Removed RG code support
   20                   * 28-Feb-90	SHL		Made compatible with Handy 1.1 releas
   21                   *				Removed lots of #IFDEF bracketed code
   22                   * 8-Sep-89	LEA		Added IFDEF NO_BRKS to change breaks t
   23                   * 7-Sep-89	James Donald	Version finished for Cal Games
   24                   *
   25                   * ====================================================
   26                   
   27                   * The logon process calls routines in comlink.src
   28                   
   29                   ; The algorithm for logon is as follows. Each machine 
   30                   ; in order after random delays.  If it hears another m
   31                   ; player number it shifts its number to an unused numb
   32                   ; thinks is unused.)
   33                   
   34                   ; If it hears a machine whose number cyclically preced
   35                   ; itself to speak after a random delay of 3 to 12 msec
   36                   ; it sets itself to speak after a random delay of 16 t
   37                   
   38                   ; Thus when all is in order each machine speaks its nu
   39                   ; rapid succession
   40                   
   41                   
   42                   	#MACRO MOVEI16
   43 MACRO             	lda #<?0
   44 MACRO             	sta ?1
   45 MACRO             	lda #>?0
   46 MACRO             	sta 1+?1
   47                   	#ENDMACRO
   48                   
   49      0002         maximium_logon_message_number	.eq 2
   50                   ; at present only two logon messages, zero and two.
   51                   
   52                   ; tolerance_of_silent_player	.eq 10+10*{MAX_PLAYERS-1}
   53      0028         tolerance_of_silent_player	.eq 40
   54                   ; This is the number of transactions that can occur wi
   55                   ; player being logged out.
   56                   
   57      0010         INCONSISTANCY_PRESET	.eq 48-MAX_PLAYERS-MAX_PLAYERS
   58                   ; This is the countdown value that inconsistancy gets 
   59                   ; something is wrong
   60                   
   61      0005         logon_timer		.eq 5
   62      FD14         LOGON_TIMER		.eq TIMER0+{logon_timer*4}
   63                   
   64                   
   65                   * ====================================================
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   76
                        6502:src/comlink_logon.src      14:13:52  

   66                   *
   67                   * The portion of comlink code to handle logon
   68                   
   69                   
   70                   
   71 0C61:             send_logon_message
   72 0C61:8D ** **     	sta XmitBuffer+1
   73 0C64:A9 **        	lda #LOGON_MSG_SIZE
   74 0C66:4C BC 09     	jmp sendLengthMessage
   75                   
   76                   
   77 0C69:             too_many_players	; time out while we have no valid pla
   78 0C69:20 ** **     	jsr decrement_everyone
   79 0C6C:20 ** **     	jsr pick_new_player_number
   80 0C6F:20 ** **     	jsr set_timer_16_32_millisec
   81 0C72:4C ** **     	jmp exit_logon_timer_irq_service
   82                   
   83                   
   84 0C75:             I_have_no_player_number	; message received while we ha
   85 0C75:AE ** **     	ldx RxMsg+1
   86 0C78:20 ** **     	jsr force_active
   87 0C7B:20 ** **     	jsr decrement_everyone
   88 0C7E:20 ** **     	jsr pick_new_player_number
   89 0C81:AD ** **     	lda EndLogonRequest
   90 0C84:D0 **        	bne .00
   91 0C86:4C ** **     	jmp clear_semaphore_rts
   92                   
   93 0C89:4C ** **     .00	jmp finish_logon_next_timeout
   94                   
   95                   
   96 0C8C:             pick_new_player_number
   97 0C8C:A2 00        	ldx #0
   98 0C8E:BD ** **     .00	  lda PlayerHeard,x
   99 0C91:F0 **        	  beq .10
  100 0C93:E8           	  inx
  101 0C94:E0 10        	  cpx #MAX_PLAYERS
  102 0C96:D0 F6        	 bne .00
  103                   
  104 0C98:60           	rts	; carry set from cpx - signal failure to find num
  105                   
  106 0C99:20 ** **     .10	jsr set_number_and_force_active	; got a new number
  107 0C9C:9C ** **     	stz logon_state			; back to normal login
  108                   
  109 0C9F:18           	clc	; signal that we've got a new number
  110 0CA0:60           	rts
  111                   
  112                   
  113 0CA1:             invalidate_my_player_number
  114 0CA1:64 07        	stz PlayerNumber
  115 0CA3:64 06        	stz NumberOfPlayers
  116 0CA5:A9 02        	lda #2
  117 0CA7:8D ** **     	sta logon_state
  118 0CAA:20 ** **     	jsr set_timer_16_32_millisec
  119 0CAD:4C ** **     	jmp clear_semaphore_rts
  120                   
  121                   
  122 0CB0:             end_logon_right_now
  123 0CB0:A6 07        	ldx PlayerNumber	; reassign my player number after lo
  124 0CB2:80 **        	bra .01
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   77
                        6502:src/comlink_logon.src      14:13:52  

  125 0CB4:BD ** **     .00	  lda PlayerHeard,x	
  126 0CB7:D0 **        	  bne .01
  127 0CB9:C6 07        	  dec PlayerNumber
  128 0CBB:CA           .01	  dex
  129 0CBC:10 F6        	 bpl .00
  130                   
  131 0CBE:20 ** **     	jsr disconnect_redeye
  132 0CC1:4C ** **     	jmp exit_logon_timer_irq_service
  133                   
  134                   
  135 0CC4:             disconnect_redeye
  136 0CC4:08           	 php
  137 0CC5:78           	  sei
  138                   
  139 0CC6:A9 40        	  lda #RESET_DONE
  140 0CC8:8D 11 FD     	  sta SERIALRATE+TIM_CONTROLA	; kill redeye timer
  141 0CCB:8D 05 FD     	  sta TIMER1+TIM_CONTROLA	; kill timer 1
  142 0CCE:8D 15 FD     	  sta LOGON_TIMER+TIM_CONTROLA	; kill timer 5
  143                   
  144 0CD1:A9 1D        	  lda #PAREN+RESETERR+TXOPEN+PAREVEN	; disable serial
  145 0CD3:8D 8C FD     	  sta SERCTL
  146                   
  147 0CD6:A9 32        	  lda #SERIAL_INT+TIMER1_INT+TIMER5_INT	; clear pendi
  148 0CD8:8D 80 FD     	  sta INTRST
  149                   
  150 0CDB:28           	 plp
  151                   
  152 0CDC:20 4D 0A     	jsr ZeroComlinkVariables
  153                   
  154      FALSE         #IF REDEYE_SLOWNESS > 0
  165                    #ENDIF ; REDEYE_SLOWNESS > 0
  166                   
  167 0CDF:60           	rts
  168                   
  169                   
  170                   
  171 0CE0:             send_end_logon_message
  172 0CE0:A5 06        	lda NumberOfPlayers
  173 0CE2:F0 **        	beq .10			; nobody else?
  174 0CE4:A9 02        	lda #2
  175 0CE6:8D ** **     	sta XmitBuffer
  176 0CE9:AD ** **     	lda XmitBuffer+1
  177 0CEC:3A           	dea
  178 0CED:F0 **        	beq .10
  179 0CEF:20 61 0C     	jsr send_logon_message
  180 0CF2:20 ** **     	jsr wait_16_milliseconds
  181 0CF5:80 **        	bra .11
  182                   
  183 0CF7:20 ** **     .10	jsr finish_logon_next_timeout
  184 0CFA:4C ** **     .11	jmp ply_return
  185                   
  186                   
  187 0CFD:             end_logon_command
  188 0CFD:AE ** **     	ldx logon_state
  189 0D00:7C ** **     	jmp (.e0,x)
  190 0D03:00 ** ** **  .e0	.da .A2,.A0,.A2,.A2,.A0
  190      ** ** ** **  
  190      ** **        
  191                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   78
                        6502:src/comlink_logon.src      14:13:52  

  192 0D0D:64 07        .A0	stz PlayerNumber
  193 0D0F:64 06        	stz NumberOfPlayers
  194 0D11:             .A2
  195                   ;	This is a command from someone to terminate logon
  196 0D11:A9 08        	lda #TIMER_DONE
  197 0D13:8D 17 FD     	sta LOGON_TIMER+TIM_CONTROLB
  198 0D16:AD ** **     	lda RxMsg+1
  199 0D19:8D ** **     	sta timer_high_order_countdown
  200                   
  201 0D1C:             finish_logon_next_timeout
  202 0D1C:A9 06        	lda #6
  203 0D1E:8D ** **     	sta logon_state
  204 0D21:             wait_16_milliseconds
  205 0D21:A9 FF        	lda #255
  206 0D23:8D 16 FD     	sta LOGON_TIMER+TIM_COUNT
  207 0D26:9C 17 FD     	stz LOGON_TIMER+TIM_CONTROLB	;start timer
  208 0D29:4C ** **     	jmp clear_semaphore_rts
  209                   
  210                   
  211 0D2C:             randomise
  212 0D2C:AC ** **     	ldy index_into_random	; get random numbers by mixing 
  213 0D2F:B9 ** **     	lda random_data,y	;  the horizontal and vertical scre
  214 0D32:6D 02 FD     	adc TIMER0+TIM_COUNT
  215 0D35:88           	dey
  216 0D36:10 **        	bpl .00
  217 0D38:A0 **        	ldy #random_data_size-1
  218 0D3A:79 ** **     .00	adc random_data,y
  219 0D3D:99 ** **     	sta random_data,y
  220 0D40:6D 0A FD     	adc TIMER2+TIM_COUNT
  221 0D43:88           	dey
  222 0D44:10 **        	bpl .01
  223 0D46:A0 **        	ldy #random_data_size-1
  224 0D48:79 ** **     .01	adc random_data,y
  225 0D4B:99 ** **     	sta random_data,y
  226 0D4E:8C ** **     	sty index_into_random
  227 0D51:60           	rts
  228                   
  229                   
  230 0D52:             decrement_everyone_else
  231 0D52:A6 07        	ldx PlayerNumber
  232 0D54:20 ** **     	jsr force_active
  233                   
  234 0D57:             decrement_everyone
  235 0D57:A2 0F        	ldx #MAX_PLAYERS-1
  236 0D59:BD ** **     .04	  lda PlayerHeard,x
  237 0D5C:F0 **        	  beq .14
  238 0D5E:DE ** **     	  dec PlayerHeard,x
  239 0D61:D0 **        	  bne .14
  240 0D63:9C ** **     	  stz EndLogonRequest	; removing player - cancel end 
  241 0D66:A9 10        	  lda #INCONSISTANCY_PRESET
  242 0D68:8D ** **     	  sta inconsistancy	; set inconsistancy
  243 0D6B:BD 9F 06     	  lda power_of_two_table,x
  244 0D6E:1C ** **     	  trb ActvPlrMask	; remove knowledge of player
  245      TRUE          #IF MAX_PLAYERS>8
  246 0D71:BD A7 06     	  lda power_of_two_table+8,x
  247 0D74:1C ** **     	  trb ActvPlrMask+1
  248                    #ENDIF
  249 0D77:CA           .14	  dex
  250 0D78:10 DF        	 bpl .04
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   79
                        6502:src/comlink_logon.src      14:13:52  

  251 0D7A:60           	rts
  252                   
  253                   
  254 0D7B:             set_number_and_force_active
  255 0D7B:86 07        	stx PlayerNumber	; fall into force_active
  256                   
  257 0D7D:             force_active
  258 0D7D:A9 28        	lda #tolerance_of_silent_player
  259 0D7F:9D ** **     	sta PlayerHeard,x
  260 0D82:BD 9F 06     	lda power_of_two_table,x
  261 0D85:0C ** **     	tsb ActvPlrMask
  262      TRUE          #IF MAX_PLAYERS>8
  263 0D88:BD A7 06     	lda power_of_two_table+8,x
  264 0D8B:0C ** **     	tsb ActvPlrMask+1
  265                    #ENDIF
  266 0D8E:60           	rts
  267                   
  268                   
  269 0D8F:             set_timer_16_32_millisec
  270 0D8F:A9 01        	lda #1
  271 0D91:8D ** **     	sta timer_high_order_countdown
  272                   
  273 0D94:20 2C 0D     	jsr randomise
  274 0D97:09 07        	ora #$7				; 16 to 32 msec
  275                   
  276 0D99:             set_timer_entry
  277 0D99:8D 16 FD     	sta LOGON_TIMER+TIM_COUNT	;set timer
  278 0D9C:9C 17 FD     	stz LOGON_TIMER+TIM_CONTROLB	;start timer
  279 0D9F:60           	rts
  280                   
  281                   
  282 0DA0:             set_timer_500_msec
  283 0DA0:A9 1F        	lda #31
  284 0DA2:8D ** **     	sta timer_high_order_countdown
  285 0DA5:80 F2        	bra set_timer_entry
  286                   
  287                   
  288 0DA7:             timer_collided
  289 0DA7:A9 30        	lda #$30			; equals three milliseconds
  290 0DA9:8D 16 FD     	sta LOGON_TIMER+TIM_COUNT
  291 0DAC:9C 17 FD     	stz LOGON_TIMER+TIM_CONTROLB	;restart timer
  292                   ;	A problem with using the timer in one shot mode is t
  293                   ;	ever times out and is not restarted the whole proces
  294 0DAF:4C ** **     	jmp ply_return
  295                   
  296                   
  297 0DB2:             logon_timer_irq_service
  298 0DB2:5A           	phy
  299 0DB3:A9 01        	lda #1
  300 0DB5:0C ** **     	tsb comlink_semaphore
  301 0DB8:D0 ED        	bne timer_collided
  302 0DBA:AD ** **     	lda timer_high_order_countdown
  303 0DBD:F0 **        	beq dispatch_timer_irq
  304 0DBF:CE ** **     	dec timer_high_order_countdown
  305                   	START_ONESHOT logon_timer, 255
    1      FD14       + START_ONESHOT.0027		.=	TIMER0+logon_timer*4
    2 0DC2:A9 FE      + 		lda	#255-1		
    3 0DC4:8D 16 FD   + 		sta	START_ONESHOT.0027+TIM_COUNT
    4 0DC7:9C 17 FD   + 		stz	START_ONESHOT.0027+TIM_CONTROLB	
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   80
                        6502:src/comlink_logon.src      14:13:52  

    5                 + 
  306                   
  307 0DCA:             exit_logon_timer_irq_service
  308 0DCA:9C ** **     	stz comlink_semaphore
  309 0DCD:             ply_return
  310 0DCD:7A           	ply
  311                   
  312 0DCE:FA           	plx
  313 0DCF:68           	pla
  314 0DD0:40           	rti
  315                   
  316                   
  317 0DD1:             dispatch_timer_irq
  318 0DD1:58           	cli
  319 0DD2:AE ** **     	ldx logon_state
  320 0DD5:7C ** **     	jmp (.e0,x)
  321 0DD8:00 00 69 0C  .e0	.DA send_normal_logon_message, too_many_players
  321                   
  322 0DDC:E0 0C B0 0C  	.DA send_end_logon_message, end_logon_right_now
  322                   
  323 0DE0:00 **        	.DA send_normal_logon_message
  324                   
  325                   
  326 0DE2:             send_normal_logon_message
  327 0DE2:9C ** **     	stz logon_state
  328                   
  329 0DE5:AD ** **     	lda inconsistancy
  330 0DE8:F0 **        	beq .14
  331 0DEA:CE ** **     	dec inconsistancy
  332                   
  333 0DED:A5 07        .14	lda PlayerNumber
  334 0DEF:20 61 0C     	jsr send_logon_message
  335                   
  336 0DF2:20 52 0D     	jsr decrement_everyone_else
  337 0DF5:20 8F 0D     	jsr set_timer_16_32_millisec
  338                   
  339 0DF8:A0 FF        	ldy #$FF		; compute NumberOfPlayers
  340 0DFA:A2 0F        	ldx #MAX_PLAYERS-1
  341 0DFC:BD ** **     .06	  lda PlayerHeard,x
  342 0DFF:F0 **        	  beq .19
  343 0E01:C8           	  iny
  344 0E02:C9 16        	  cmp #tolerance_of_silent_player-MAX_PLAYERS-2
  345 0E04:90 C4        	  blt exit_logon_timer_irq_service
  346 0E06:CA           .19	  dex
  347 0E07:10 F3        	 bpl .06
  348                   
  349 0E09:84 06        	sty NumberOfPlayers
  350 0E0B:AD ** **     	lda inconsistancy
  351 0E0E:D0 BA        	bne exit_logon_timer_irq_service
  352                   
  353 0E10:AD ** **     	lda EndLogonRequest	; see if we should end logon
  354 0E13:F0 B5        	beq exit_logon_timer_irq_service
  355                   
  356 0E15:A9 0A        	lda #10			; start logon termination process
  357 0E17:8D ** **     	sta XmitBuffer+1
  358 0E1A:A9 04        	lda #4
  359 0E1C:8D ** **     	sta logon_state
  360 0E1F:80 A9        	bra exit_logon_timer_irq_service
  361                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   81
                        6502:src/comlink_logon.src      14:13:52  

  362                   
  363 0E21:             unintelligible_message
  364 0E21:             ignore_message
  365 0E21:9C ** **     	stz comlink_semaphore
  366 0E24:             overflow_collision_service
  367 0E24:AD ** **     	lda logon_state
  368 0E27:C9 08        	cmp #8
  369 0E29:D0 **        	bne .90
  370 0E2B:AD ** **     	lda EndLogonRequest
  371 0E2E:F0 **        	beq .00
  372 0E30:4C 1C 0D     	jmp finish_logon_next_timeout
  373 0E33:20 A0 0D     .00	jsr set_timer_500_msec
  374 0E36:4C 2C 0D     .90	jmp randomise
  375                   
  376                   
  377 0E39:             received_message_service
  378 0E39:A9 01        	lda #1
  379 0E3B:0C ** **     	tsb comlink_semaphore
  380 0E3E:D0 E4        	bne overflow_collision_service
  381 0E40:AD ** **     	lda RxMsgStat
  382 0E43:D0 DC        	bne unintelligible_message
  383 0E45:AD ** **     	lda RxMsgSize
  384 0E48:C9 **        	cmp #LOGON_MSG_SIZE
  385 0E4A:D0 D5        	bne unintelligible_message
  386 0E4C:AD ** **     	lda RxMsg+{LogonGameNumber-XmitBuffer}
  387 0E4F:C9 FF        	cmp #<GAME_ID
  388 0E51:D0 CE        	bne unintelligible_message
  389 0E53:AD ** **     	lda RxMsg+{LogonGameNumber-XmitBuffer}+1
  390 0E56:C9 FF        	cmp #>GAME_ID
  391 0E58:D0 C7        	bne unintelligible_message
  392 0E5A:AD ** **     	lda RxMsg
  393 0E5D:89 01        	bit #1
  394 0E5F:D0 C0        	bne unintelligible_message
  395 0E61:AA           	tax
  396 0E62:E0 03        	cpx #maximium_logon_message_number+1
  397 0E64:B0 BB        	bge unintelligible_message
  398 0E66:7C ** **     	jmp (.e0,x)
  399 0E69:00 00 FD 0C  .e0	.da receive_normal_logon_message,end_logon_command
  399                   
  400                   
  401                   
  402 0E6D:             receive_normal_logon_message
  403 0E6D:AE ** **     	ldx RxMsg+1
  404 0E70:E0 10        	cpx #MAX_PLAYERS
  405 0E72:B0 AD        	bge unintelligible_message
  406                   
  407 0E74:AE ** **     	ldx logon_state
  408 0E77:7C ** **     	jmp (.e1,x)
  409 0E7A:00 ** ** **  .e1	.da .A2, I_have_no_player_number, ignore_message, 
  409      ** ** ** **  
  409      ** **        
  410                   
  411 0E84:9C ** **     .A2	stz logon_state
  412 0E87:AD ** **     	lda RxMsg+{ActvPlrMask-XmitBuffer}
  413 0E8A:4D ** **     	eor ActvPlrMask
  414      TRUE          #IF MAX_PLAYERS>8
  415 0E8D:D0 **        	bne .11
  416 0E8F:AD ** **     	lda RxMsg+{ActvPlrMask-XmitBuffer}+1
  417 0E92:4D ** **     	eor ActvPlrMask+1
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   82
                        6502:src/comlink_logon.src      14:13:52  

  418                    #ENDIF
  419 0E95:F0 **        	beq .10
  420 0E97:A9 10        .11	lda #INCONSISTANCY_PRESET	; data disagrees with my
  421 0E99:8D ** **     	sta inconsistancy
  422                   
  423 0E9C:AE ** **     .10	ldx RxMsg+1
  424 0E9F:E4 07        	cpx PlayerNumber
  425 0EA1:D0 **        	bne .13
  426 0EA3:DA           	 phx
  427 0EA4:20 8C 0C     	  jsr pick_new_player_number
  428 0EA7:FA           	 plx
  429 0EA8:90 **        	bcc .14
  430 0EAA:4C A1 0C     	jmp invalidate_my_player_number	; oops, too many play
  431                   
  432 0EAD:20 7D 0D     .13	jsr force_active
  433                   
  434 0EB0:A0 00        .14	ldy #0			; figure out who's next to speak
  435 0EB2:C8           .04	  iny
  436 0EB3:E8           	  inx
  437 0EB4:E0 10        	  cpx #MAX_PLAYERS
  438 0EB6:D0 **        	  bne .15
  439 0EB8:A2 00        	  ldx #0
  440 0EBA:BD ** **     .15	  lda PlayerHeard,x
  441 0EBD:F0 F3        	 beq .04
  442 0EBF:E4 07        	cpx PlayerNumber
  443 0EC1:D0 **        	bne .16
  444                   
  445 0EC3:20 2C 0D     	jsr randomise	; it's my turn to speak, set timeout 3-
  446 0EC6:29 3F        	and #$3F	; if no gap before me, set timer to $30-$70 
  447 0EC8:69 20        	adc #$20	; equals 3-7 milliseconds
  448 0ECA:C0 01        	cpy #1
  449 0ECC:F0 **        	beq .17
  450 0ECE:69 50        	adc #$50	; if gap, set timer to 8-12 msec in case som
  451 0ED0:9C ** **     .17	stz timer_high_order_countdown
  452 0ED3:8D 16 FD     	sta LOGON_TIMER+TIM_COUNT
  453 0ED6:9C 17 FD     	stz LOGON_TIMER+TIM_CONTROLB	;start timer
  454 0ED9:80 **        	bra .18
  455                   
  456                   ; Case someone else's turn to speak
  457                   
  458 0EDB:20 8F 0D     .16	jsr set_timer_16_32_millisec
  459                   
  460 0EDE:20 52 0D     .18	jsr decrement_everyone_else
  461                   
  462 0EE1:             clear_semaphore_rts
  463 0EE1:9C ** **     	stz comlink_semaphore
  464 0EE4:60           	rts
  465                   
  466                   
  467 0EE5:             start_logon
  468 0EE5:20 4D 0A     	jsr ZeroComlinkVariables	; erase all comlink variable
  469                   
  470 0EE8:A9 08        	lda #8				; start by checking for redeye busy
  471 0EEA:8D ** **     	sta logon_state
  472                   
  473 0EED:A9 FF        	lda #<GAME_ID			; copy game number to message buffer
  474 0EEF:8D ** **     	sta LogonGameNumber
  475 0EF2:A9 FF        	lda #>GAME_ID
  476 0EF4:8D ** **     	sta LogonGameNumber+1
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   83
                        6502:src/comlink_logon.src      14:13:52  

  477                   
  478 0EF7:A2 00        	ldx #0				; we are now player zero
  479 0EF9:20 7B 0D     	jsr set_number_and_force_active
  480                   
  481 0EFC:A9 10        	lda #INCONSISTANCY_PRESET
  482 0EFE:8D ** **     	sta inconsistancy
  483                   
  484 0F01:A9 80        	lda #$80			; set status flag
  485 0F03:8D ** **     	sta LogonInProgress
  486 0F06:64 06        	stz NumberOfPlayers		; set initial number of players
  487                   
  488      FALSE         #IF REDEYE_SLOWNESS > 0
  499                    #ENDIF ; REDEYE_SLOWNESS > 0
  500                   
  501 0F08:08           	 php
  502 0F09:78           	  sei
  503 0F0A:18           	  clc
  504 0F0B:20 56 0A     	  jsr initMessageManager	; set up message manager
  505                   
  506 0F0E:A9 39        	  lda #<received_message_service	; link into manager 
  507 0F10:8D F7 0B     	  sta readMsgVector
  508 0F13:A9 24        	  lda #<overflow_collision_service
  509 0F15:8D C3 0B     	  sta msgOverflowVector
  510 0F18:8D 5B 0C     	  sta transmissionErrorVector
  511 0F1B:8D 3E 0C     	  sta msgTimeoutVector
  512 0F1E:A9 FC        	  lda #<msgMgrRtn
  513 0F20:8D 33 0C     	  sta interMsgTimeoutVector
  514 0F23:8D 56 0C     	  sta messageSentVector
  515                   
  516 0F26:A9 0E        	  lda #>received_message_service
  517 0F28:8D F8 0B     	  sta readMsgVector+1
  518 0F2B:A9 0E        	  lda #>overflow_collision_service
  519 0F2D:8D C4 0B     	  sta msgOverflowVector+1
  520 0F30:8D 5C 0C     	  sta transmissionErrorVector+1
  521 0F33:8D 3F 0C     	  sta msgTimeoutVector+1
  522 0F36:A9 0B        	  lda #>msgMgrRtn
  523 0F38:8D 34 0C     	  sta interMsgTimeoutVector+1
  524 0F3B:8D 57 0C     	  sta messageSentVector+1
  525                   
  526                   	  INIT_ONESHOT logon_timer, AUD_64	; set up logon tim
    1      FALSE        		#IF  AUD_64 > 7
    4                 + 		#ENDIF
    5      FD14       + INIT_ONESHOT.0028		.=	TIMER0+logon_timer*4
    6 0F3E:9C 15 FD   + 		stz	INIT_ONESHOT.0028+TIM_CONTROLA	
    7 0F41:A9 FF      + 		lda	#255		
    8 0F43:8D 16 FD   + 		sta	INIT_ONESHOT.0028+TIM_COUNT
    9 0F46:A9 08      + 		lda	#TIMER_DONE	
   10 0F48:8D 17 FD   + 		sta	INIT_ONESHOT.0028+TIM_CONTROLB
   11 0F4B:A9 8E      + 		lda	#ENABLE_INT+ENABLE_COUNT+AUD_64
   12 0F4D:8D 15 FD   + 		sta	INIT_ONESHOT.0028+TIM_CONTROLA	
   13                 + 
  527 0F50:A9 B2        	  lda #<logon_timer_irq_service		; link in our routin
  528 0F52:8D ** **     	  sta sysIntTable+{2*logon_timer}
  529 0F55:A9 0D        	  lda #>logon_timer_irq_service
  530 0F57:8D ** **     	  sta sysIntTable+{2*logon_timer}+1
  531 0F5A:20 A0 0D     	  jsr set_timer_500_msec		; and start timer
  532 0F5D:28           	 plp
  533 0F5E:60           	rts
  534                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   84
                        6502:src/comlink_logon.src      14:13:52  

  535                   
  536                   
  440 0F5F:             logon_end_address
  441                   
  442                   *-----------------------------------------------------
  443                   
  444 0F5F:             playercolors
  445 0F5F:02 04 06 08  	.BY $02, $04, $06, $08, $0a, $0c, $0e, $0f
  445      0A 0C 0E 0F  
  445                   
  446 0F67:0F 0E 0C 0A  	.BY $0f, $0e, $0c, $0a, $08, $06, $04, $02
  446      08 06 04 02  
  446                   
  447                   
  448 0F6F:             transitionrows
  449 0F6F:51 5D 69 75  	.BY TOPEDGE+04, TOPEDGE+16, TOPEDGE+28, TOPEDGE+40
  449                   
  450 0F73:81 8D 99 A5  	.BY TOPEDGE+52, TOPEDGE+64, TOPEDGE+76, TOPEDGE+88
  450                   
  451 0F77:51 5D 69 75  	.BY TOPEDGE+04, TOPEDGE+16, TOPEDGE+28, TOPEDGE+40
  451                   
  452 0F7B:81 8D 99 A5  	.BY TOPEDGE+52, TOPEDGE+64, TOPEDGE+76, TOPEDGE+88
  452                   
  453                   
  454                   
  455 0F7F:             shipflips
  456 0F7F:00 00 00 10  	.BY 0, 0, 0, VFLIP, VFLIP, VFLIP|HFLIP, HFLIP, HFLIP
  456      10 30 20 20  
  456                   
  457                   
  458 0F87:00 01 02 01  xvel	.BY  0,  1,  2,  1,  0, -1, -2, -1
  458      00 FF FE FF  
  458                   
  459 0F8F:FE FF 00 01  yvel	.BY -2, -1,  0,  1,  2,  1,  0, -1
  459      02 01 00 FF  
  459                   
  460                   
  461 0F97:             shipspriteslo
  462 0F97:00 ** ** **  	.BY <ship1_data, <ship2_data, <ship3_data, <ship2_dat
  462                   
  463 0F9B:00 ** ** **  	.BY <ship1_data, <ship2_data, <ship3_data, <ship2_dat
  463                   
  464                   
  465 0F9F:             shipspriteshi
  466 0F9F:00 ** ** **  	.BY >ship1_data, >ship2_data, >ship3_data, >ship2_dat
  466                   
  467 0FA3:00 ** ** **  	.BY >ship1_data, >ship2_data, >ship3_data, >ship2_dat
  467                   
  468                   
  469 0FA7:             digitslo
  470 0FA7:00 ** ** **  	.BY <digit0_data, <digit1_data, <digit2_data, <digit3
  470                   
  471 0FAB:00 ** ** **  	.BY <digit4_data, <digit5_data, <digit6_data, <digit7
  471                   
  472 0FAF:00 ** ** **  	.BY <digit8_data, <digit9_data, <digita_data, <digitb
  472                   
  473 0FB3:00 ** ** **  	.BY <digitc_data, <digitd_data, <digite_data, <digitf
  473                   
  474                   
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   85
                                                        14:13:52  

  475 0FB7:             digitshi
  476 0FB7:00 ** ** **  	.BY >digit0_data, >digit1_data, >digit2_data, >digit3
  476                   
  477 0FBB:00 ** ** **  	.BY >digit4_data, >digit5_data, >digit6_data, >digit7
  477                   
  478 0FBF:00 ** ** **  	.BY >digit8_data, >digit9_data, >digita_data, >digitb
  478                   
  479 0FC3:00 ** ** **  	.BY >digitc_data, >digitd_data, >digite_data, >digitf
  479                   
  480                   
  481 0FC7:             erasescb
  482 0FC7:C1 90 00     	.BY FOUR_PER_PIXEL+BACKNONCOLL_SPRITE, RELOAD_HV+LITE
  483 0FCA:00 00        	.DA 0			; Next scb
  484 0FCC:00 **        	.DA erasesprite		; Sprite data
  485 0FCE:30 00 4D 00  	.DA LEFTEDGE, TOPEDGE	; HPOS, VPOS
  485                   
  486 0FD2:00 A0 00 66  	.DA 160*256, 102*256	; HSIZE, VSIZE
  486                   
  487 0FD6:00           	.HS 00			; Palette
  488                   
  489 0FD7:             logonscb
  490 0FD7:05 91 00     	.BY ONE_PER_PIXEL+NONCOLL_SPRITE, RELOAD_HV+LITERAL+D
  491 0FDA:00 **        	.DA whoamiscb		; Next scb
  492 0FDC:00 **        	.DA logonbrush_data	; Sprite data
  493 0FDE:80 00 69 00  	.DA LEFTEDGE+80, TOPEDGE+28 ; HPOS, VPOS
  493                   
  494 0FE2:00 01 00 01  	.DA 1*256, 1*256	; HSIZE, VSIZE
  494                   
  495 0FE6:01           	.HS 01			; Palette
  496                   
  497 0FE7:             shipscb
  498 0FE7:05 90 00     	.BY ONE_PER_PIXEL+NONCOLL_SPRITE, RELOAD_HV+LITERAL, 
  499 0FEA:00 **        	.DA hidigitscb		; Next scb
  500 0FEC:00 00        	.DA 0			; Sprite data
  501 0FEE:00 00 00 00  	.DA 0, 0		; HPOS, VPOS
  501                   
  502 0FF2:00 01 00 01  	.DA 1*256, 1*256	; HSIZE, VSIZE
  502                   
  503 0FF6:02           	.HS 02			; Palette
  504                   
  505 0FF7:             whoamiscb
  506 0FF7:05 80 00     	.BY ONE_PER_PIXEL+NONCOLL_SPRITE, RELOAD_NONE+LITERAL
  507 0FFA:00 **        	.DA totalscb		; Next scb
  508 0FFC:00 00        	.DA 0			; Sprite data
  509 0FFE:3A 00 9D 00  	.DA LEFTEDGE+10, TOPEDGE+80 ; HPOS, VPOS
  509                   
  510 1002:03           	.HS 03			; Palette
  511                   
  512 1003:             totalscb
  513 1003:05 80 00     	.BY ONE_PER_PIXEL+NONCOLL_SPRITE, RELOAD_NONE+LITERAL
  514 1006:00 00        	.DA 0			; Next scb
  515 1008:00 00        	.DA 0			; Sprite data
  516 100A:49 00 9D 00  	.DA LEFTEDGE+25, TOPEDGE+80 ; HPOS, VPOS
  516                   
  517 100E:05           	.HS 05			; Palette
  518                   
  519                   
  520 100F:             hidigitscb
  521 100F:05 80 00     	.BY ONE_PER_PIXEL+NONCOLL_SPRITE, RELOAD_NONE+LITERAL
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   86
                                                        14:13:52  

  522 1012:00 **        	.DA lodigitscb		; Next scb
  523 1014:00 00        	.DA 0			; Sprite data
  524 1016:3A 00 00 00  	.DA LEFTEDGE+10, 0	; HPOS, VPOS
  524                   
  525 101A:03           	.HS 03			; Palette
  526                   
  527 101B:             lodigitscb
  528 101B:05 88 00     	.BY ONE_PER_PIXEL+NONCOLL_SPRITE, RELOAD_NONE+LITERAL
  529 101E:00 00        	.DA 0			; Next scb
  530 1020:00 00        	.DA 0			; Sprite data
  531 1022:44 00 00 00  	.DA LEFTEDGE+20, 0	; HPOS, VPOS
  531                   
  532                   
  533                   
  534 1026:             erasesprite
  535 1026:02 00 00     	.HS 020000
  536                   
  537 1029:             ship1_data
  538                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  539 1029:02 F0        	.BY $02,$f0
  540 102B:02 F8        	.BY $02,$f8
  541 102D:02 C0        	.BY $02,$c0
  542 102F:02 E0        	.BY $02,$e0
  543 1031:01           	.BY $01	; Next data is up-right
  544 1032:02 E0        	.BY $02,$e0
  545 1034:02 C0        	.BY $02,$c0
  546 1036:02 80        	.BY $02,$80
  547 1038:01           	.BY $01	; Next data is up-left
  548 1039:02 C0        	.BY $02,$c0
  549 103B:02 80        	.BY $02,$80
  550 103D:01           	.BY $01	; Next data is down-left
  551 103E:02 E0        	.BY $02,$e0
  552 1040:02 F0        	.BY $02,$f0
  553 1042:02 80        	.BY $02,$80
  554 1044:02 C0        	.BY $02,$c0
  555 1046:00           	.BY $00	; 30 total image bytes
  556                   
  557 1047:             ship2_data
  558                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  559 1047:02 F0        	.BY $02,$f0
  560 1049:02 F0        	.BY $02,$f0
  561 104B:02 B0        	.BY $02,$b0
  562 104D:02 10        	.BY $02,$10
  563 104F:01           	.BY $01	; Next data is up-right
  564 1050:02 F0        	.BY $02,$f0
  565 1052:02 F0        	.BY $02,$f0
  566 1054:02 F0        	.BY $02,$f0
  567 1056:01           	.BY $01	; Next data is up-left
  568 1057:02 80        	.BY $02,$80
  569 1059:02 C0        	.BY $02,$c0
  570 105B:02 E0        	.BY $02,$e0
  571 105D:01           	.BY $01	; Next data is down-left
  572 105E:02 C0        	.BY $02,$c0
  573 1060:02 80        	.BY $02,$80
  574 1062:00           	.BY $00	; 28 total image bytes
  575                   
  576 1063:             ship3_data
  577                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  578 1063:02 F0        	.BY $02,$f0
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   87
                                                        14:13:52  

  579 1065:02 E0        	.BY $02,$e0
  580 1067:02 C0        	.BY $02,$c0
  581 1069:02 80        	.BY $02,$80
  582 106B:01           	.BY $01	; Next data is up-right
  583 106C:02 E0        	.BY $02,$e0
  584 106E:02 C0        	.BY $02,$c0
  585 1070:02 80        	.BY $02,$80
  586 1072:01           	.BY $01	; Next data is up-left
  587 1073:02 E0        	.BY $02,$e0
  588 1075:02 A0        	.BY $02,$a0
  589 1077:02 80        	.BY $02,$80
  590 1079:02 80        	.BY $02,$80
  591 107B:01           	.BY $01	; Next data is down-left
  592 107C:02 E0        	.BY $02,$e0
  593 107E:02 E0        	.BY $02,$e0
  594 1080:02 A0        	.BY $02,$a0
  595 1082:02 80        	.BY $02,$80
  596 1084:02 80        	.BY $02,$80
  597 1086:00           	.BY $00	; 36 total image bytes
  598                   
  599 1087:             digit0_data
  600                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  601 1087:02 1C        	.BY $02,$1c
  602 1089:02 2E        	.BY $02,$2e
  603 108B:03 47 00     	.BY $03,$47,$00
  604 108E:03 83 80     	.BY $03,$83,$80
  605 1091:03 81 80     	.BY $03,$81,$80
  606 1094:03 80 80     	.BY $03,$80,$80
  607 1097:03 C0 80     	.BY $03,$c0,$80
  608 109A:03 E0 80     	.BY $03,$e0,$80
  609 109D:03 71 00     	.BY $03,$71,$00
  610 10A0:02 3A        	.BY $02,$3a
  611 10A2:02 1C        	.BY $02,$1c
  612 10A4:00           	.BY $00	; 30 total image bytes
  613                   
  614 10A5:             digit1_data
  615                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  616 10A5:02 04        	.BY $02,$04
  617 10A7:02 0C        	.BY $02,$0c
  618 10A9:02 1C        	.BY $02,$1c
  619 10AB:02 2C        	.BY $02,$2c
  620 10AD:02 0C        	.BY $02,$0c
  621 10AF:02 0C        	.BY $02,$0c
  622 10B1:02 0C        	.BY $02,$0c
  623 10B3:02 0C        	.BY $02,$0c
  624 10B5:02 1C        	.BY $02,$1c
  625 10B7:02 0E        	.BY $02,$0e
  626 10B9:02 04        	.BY $02,$04
  627 10BB:00           	.BY $00	; 23 total image bytes
  628                   
  629 10BC:             digit2_data
  630                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  631 10BC:02 18        	.BY $02,$18
  632 10BE:02 3C        	.BY $02,$3c
  633 10C0:02 62        	.BY $02,$62
  634 10C2:03 43 00     	.BY $03,$43,$00
  635 10C5:03 07 00     	.BY $03,$07,$00
  636 10C8:02 0E        	.BY $02,$0e
  637 10CA:02 18        	.BY $02,$18
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   88
                                                        14:13:52  

  638 10CC:02 20        	.BY $02,$20
  639 10CE:03 60 80     	.BY $03,$60,$80
  640 10D1:03 F3 00     	.BY $03,$f3,$00
  641 10D4:02 8E        	.BY $02,$8e
  642 10D6:00           	.BY $00	; 27 total image bytes
  643                   
  644 10D7:             digit3_data
  645                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  646 10D7:02 18        	.BY $02,$18
  647 10D9:02 3C        	.BY $02,$3c
  648 10DB:02 62        	.BY $02,$62
  649 10DD:03 83 00     	.BY $03,$83,$00
  650 10E0:03 03 00     	.BY $03,$03,$00
  651 10E3:02 1C        	.BY $02,$1c
  652 10E5:03 03 00     	.BY $03,$03,$00
  653 10E8:03 83 00     	.BY $03,$83,$00
  654 10EB:02 62        	.BY $02,$62
  655 10ED:02 3C        	.BY $02,$3c
  656 10EF:02 18        	.BY $02,$18
  657 10F1:00           	.BY $00	; 27 total image bytes
  658                   
  659 10F2:             digit4_data
  660                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  661 10F2:02 02        	.BY $02,$02
  662 10F4:02 06        	.BY $02,$06
  663 10F6:02 0E        	.BY $02,$0e
  664 10F8:02 16        	.BY $02,$16
  665 10FA:02 26        	.BY $02,$26
  666 10FC:02 46        	.BY $02,$46
  667 10FE:03 FF 00     	.BY $03,$ff,$00
  668 1101:03 06 80     	.BY $03,$06,$80
  669 1104:02 0E        	.BY $02,$0e
  670 1106:03 07 00     	.BY $03,$07,$00
  671 1109:02 02        	.BY $02,$02
  672 110B:00           	.BY $00	; 26 total image bytes
  673                   
  674 110C:             digit5_data
  675                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  676 110C:02 7E        	.BY $02,$7e
  677 110E:02 7C        	.BY $02,$7c
  678 1110:02 40        	.BY $02,$40
  679 1112:02 4E        	.BY $02,$4e
  680 1114:03 53 00     	.BY $03,$53,$00
  681 1117:03 63 00     	.BY $03,$63,$00
  682 111A:03 03 00     	.BY $03,$03,$00
  683 111D:03 83 00     	.BY $03,$83,$00
  684 1120:02 62        	.BY $02,$62
  685 1122:02 3C        	.BY $02,$3c
  686 1124:02 18        	.BY $02,$18
  687 1126:00           	.BY $00	; 27 total image bytes
  688                   
  689 1127:             digit6_data
  690                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  691 1127:02 08        	.BY $02,$08
  692 1129:03 1D 00     	.BY $03,$1d,$00
  693 112C:02 2E        	.BY $02,$2e
  694 112E:02 40        	.BY $02,$40
  695 1130:02 DC        	.BY $02,$dc
  696 1132:02 E2        	.BY $02,$e2
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   89
                                                        14:13:52  

  697 1134:03 C3 00     	.BY $03,$c3,$00
  698 1137:03 C3 00     	.BY $03,$c3,$00
  699 113A:02 42        	.BY $02,$42
  700 113C:02 3C        	.BY $02,$3c
  701 113E:02 18        	.BY $02,$18
  702 1140:00           	.BY $00	; 26 total image bytes
  703                   
  704 1141:             digit7_data
  705                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  706 1141:03 7F 80     	.BY $03,$7f,$80
  707 1144:03 FF 00     	.BY $03,$ff,$00
  708 1147:03 01 00     	.BY $03,$01,$00
  709 114A:02 02        	.BY $02,$02
  710 114C:02 04        	.BY $02,$04
  711 114E:02 08        	.BY $02,$08
  712 1150:02 18        	.BY $02,$18
  713 1152:02 18        	.BY $02,$18
  714 1154:02 18        	.BY $02,$18
  715 1156:02 18        	.BY $02,$18
  716 1158:02 10        	.BY $02,$10
  717 115A:00           	.BY $00	; 26 total image bytes
  718                   
  719 115B:             digit8_data
  720                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  721 115B:02 18        	.BY $02,$18
  722 115D:02 24        	.BY $02,$24
  723 115F:02 46        	.BY $02,$46
  724 1161:02 66        	.BY $02,$66
  725 1163:02 34        	.BY $02,$34
  726 1165:02 18        	.BY $02,$18
  727 1167:02 2C        	.BY $02,$2c
  728 1169:02 66        	.BY $02,$66
  729 116B:02 62        	.BY $02,$62
  730 116D:02 24        	.BY $02,$24
  731 116F:02 18        	.BY $02,$18
  732 1171:00           	.BY $00	; 23 total image bytes
  733                   
  734 1172:             digit9_data
  735                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  736 1172:02 18        	.BY $02,$18
  737 1174:02 3C        	.BY $02,$3c
  738 1176:02 42        	.BY $02,$42
  739 1178:03 C3 00     	.BY $03,$c3,$00
  740 117B:03 C7 00     	.BY $03,$c7,$00
  741 117E:03 4B 00     	.BY $03,$4b,$00
  742 1181:03 33 00     	.BY $03,$33,$00
  743 1184:02 02        	.BY $02,$02
  744 1186:02 74        	.BY $02,$74
  745 1188:02 B8        	.BY $02,$b8
  746 118A:02 10        	.BY $02,$10
  747 118C:00           	.BY $00	; 27 total image bytes
  748                   
  749 118D:             digita_data
  750                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  751 118D:02 00        	.BY $02,$00
  752 118F:02 00        	.BY $02,$00
  753 1191:02 00        	.BY $02,$00
  754 1193:02 7A        	.BY $02,$7a
  755 1195:02 9C        	.BY $02,$9c
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   90
                                                        14:13:52  

  756 1197:02 4C        	.BY $02,$4c
  757 1199:02 2C        	.BY $02,$2c
  758 119B:02 DC        	.BY $02,$dc
  759 119D:02 CC        	.BY $02,$cc
  760 119F:03 F5 00     	.BY $03,$f5,$00
  761 11A2:02 42        	.BY $02,$42
  762 11A4:00           	.BY $00
  763                   ; 24 total image bytes
  764                   
  765 11A5:             digitb_data
  766                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  767 11A5:02 10        	.BY $02,$10
  768 11A7:02 A0        	.BY $02,$a0
  769 11A9:02 60        	.BY $02,$60
  770 11AB:02 64        	.BY $02,$64
  771 11AD:02 6E        	.BY $02,$6e
  772 11AF:02 76        	.BY $02,$76
  773 11B1:02 66        	.BY $02,$66
  774 11B3:02 66        	.BY $02,$66
  775 11B5:02 EE        	.BY $02,$ee
  776 11B7:02 70        	.BY $02,$70
  777 11B9:02 20        	.BY $02,$20
  778 11BB:00           	.BY $00	; 23 total image bytes
  779                   
  780 11BC:             digitc_data
  781                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  782 11BC:02 00        	.BY $02,$00
  783 11BE:02 00        	.BY $02,$00
  784 11C0:02 00        	.BY $02,$00
  785 11C2:02 18        	.BY $02,$18
  786 11C4:02 3E        	.BY $02,$3e
  787 11C6:02 74        	.BY $02,$74
  788 11C8:02 30        	.BY $02,$30
  789 11CA:02 30        	.BY $02,$30
  790 11CC:02 72        	.BY $02,$72
  791 11CE:02 3C        	.BY $02,$3c
  792 11D0:02 18        	.BY $02,$18
  793 11D2:00           	.BY $00	; 23 total image bytes
  794                   
  795 11D3:             digitd_data
  796                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  797 11D3:02 E0        	.BY $02,$e0
  798 11D5:02 70        	.BY $02,$70
  799 11D7:02 38        	.BY $02,$38
  800 11D9:03 3D 00     	.BY $03,$3d,$00
  801 11DC:02 6E        	.BY $02,$6e
  802 11DE:02 66        	.BY $02,$66
  803 11E0:02 66        	.BY $02,$66
  804 11E2:02 66        	.BY $02,$66
  805 11E4:02 EE        	.BY $02,$ee
  806 11E6:02 70        	.BY $02,$70
  807 11E8:02 20        	.BY $02,$20
  808 11EA:00           	.BY $00	; 24 total image bytes
  809                   
  810 11EB:             digite_data
  811                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  812 11EB:02 00        	.BY $02,$00
  813 11ED:02 00        	.BY $02,$00
  814 11EF:02 00        	.BY $02,$00
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   91
                                                        14:13:52  

  815 11F1:02 30        	.BY $02,$30
  816 11F3:02 7C        	.BY $02,$7c
  817 11F5:02 E6        	.BY $02,$e6
  818 11F7:02 6C        	.BY $02,$6c
  819 11F9:02 70        	.BY $02,$70
  820 11FB:02 E4        	.BY $02,$e4
  821 11FD:02 78        	.BY $02,$78
  822 11FF:02 30        	.BY $02,$30
  823 1201:00           	.BY $00	; 23 total image bytes
  824                   
  825 1202:             digitf_data
  826                   ; Handy Sprite Image Data ; Bits per Pixel = 1 ; Next 
  827 1202:03 0D 00     	.BY $03,$0d,$00
  828 1205:02 16        	.BY $02,$16
  829 1207:02 30        	.BY $02,$30
  830 1209:02 FC        	.BY $02,$fc
  831 120B:02 30        	.BY $02,$30
  832 120D:02 30        	.BY $02,$30
  833 120F:02 30        	.BY $02,$30
  834 1211:02 30        	.BY $02,$30
  835 1213:02 74        	.BY $02,$74
  836 1215:02 38        	.BY $02,$38
  837 1217:02 10        	.BY $02,$10
  838 1219:00           	.BY $00	; 24 total image bytes
  839                   
  840                   
  841 121A:             logonbrush_data
  842                   ; Handy Sprite Image Data
  843                   ; Bits per Pixel = 1
  844                   ; Next data is down-left
  845 121A:06 20 0E 40  	.BY $06,$20,$0e,$40,$13,$f0
  845      13 F0        
  846 1220:06 90 1F 21  	.BY $06,$90,$1f,$21,$39,$f8
  846      39 F8        
  847 1226:06 48 38 90  	.BY $06,$48,$38,$90,$f4,$8c
  847      F4 8C        
  848 122C:06 64 70 C8  	.BY $06,$64,$70,$c8,$62,$42
  848      62 42        
  849 1232:06 76 E0 EC  	.BY $06,$76,$e0,$ec,$01,$20
  849      01 20        
  850 1238:06 66 C0 CC  	.BY $06,$66,$c0,$cc,$01,$b0
  850      01 B0        
  851 123E:06 E6 C0 CC  	.BY $06,$e6,$c0,$cc,$01,$b0
  851      01 B0        
  852 1244:06 66 40 58  	.BY $06,$66,$40,$58,$01,$90
  852      01 90        
  853 124A:06 2C 20 70  	.BY $06,$2c,$20,$70,$40,$80
  853      40 80        
  854 1250:06 F8 1F E0  	.BY $06,$f8,$1f,$e0,$3f,$f0
  854      3F F0        
  855 1256:06 F0 0F C0  	.BY $06,$f0,$0f,$c0,$1e,$08
  855      1E 08        
  856 125C:02 00        	.BY $02,$00
  857 125E:02 00        	.BY $02,$00
  858 1260:02 00        	.BY $02,$00
  859 1262:02 00        	.BY $02,$00
  860 1264:02 00        	.BY $02,$00
  861 1266:02 00        	.BY $02,$00
  862 1268:03 0F C0     	.BY $03,$0f,$c0
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   92
                                                        14:13:52  

  863 126B:03 A7 E0     	.BY $03,$a7,$e0
  864 126E:03 52 30     	.BY $03,$52,$30
  865 1271:03 09 08     	.BY $03,$09,$08
  866 1274:03 04 C0     	.BY $03,$04,$c0
  867 1277:03 06 F0     	.BY $03,$06,$f0
  868 127A:03 06 C8     	.BY $03,$06,$c8
  869 127D:03 06 40     	.BY $03,$06,$40
  870 1280:02 02        	.BY $02,$02
  871 1282:03 81 F0     	.BY $03,$81,$f0
  872 1285:03 40 88     	.BY $03,$40,$88
  873 1288:02 00        	.BY $02,$00
  874 128A:02 00        	.BY $02,$00
  875 128C:02 00        	.BY $02,$00
  876 128E:02 00        	.BY $02,$00
  877 1290:02 00        	.BY $02,$00
  878 1292:08 01 20 0E  	.BY $08,$01,$20,$0e,$40,$9f,$83,$88
  878      40 9F 83 88  
  878                   
  879 129A:08 23 90 1F  	.BY $08,$23,$90,$1f,$21,$cf,$c6,$4c
  879      21 CF C6 4C  
  879                   
  880 12A2:08 1F 48 38  	.BY $08,$1f,$48,$38,$91,$a4,$66,$2e
  880      91 A4 66 2E  
  880                   
  881 12AA:08 8E 64 70  	.BY $08,$8e,$64,$70,$c9,$92,$16,$1c
  881      C9 92 16 1C  
  881                   
  882 12B2:08 04 76 E0  	.BY $08,$04,$76,$e0,$ec,$89,$06,$0c
  882      EC 89 06 0C  
  882                   
  883 12BA:08 02 66 C0  	.BY $08,$02,$66,$c0,$cc,$4d,$86,$1c
  883      CC 4D 86 1C  
  883                   
  884 12C2:09 3F E6 C0  	.BY $09,$3f,$e6,$c0,$cc,$3d,$82,$3f,$00
  884      CC 3D 82 3F  
  884      00           
  885 12CB:09 30 66 40  	.BY $09,$30,$66,$40,$58,$cc,$81,$6c,$80
  885      58 CC 81 6C  
  885      80           
  886 12D4:09 10 2C 20  	.BY $09,$10,$2c,$20,$71,$84,$00,$cc,$40
  886      71 84 00 CC  
  886      40           
  887 12DD:09 0F F8 1F  	.BY $09,$0f,$f8,$1f,$e1,$8f,$c0,$0c,$80
  887      E1 8F C0 0C  
  887      80           
  888 12E6:08 07 F0 0F  	.BY $08,$07,$f0,$0f,$c0,$9e,$20,$0c
  888      C0 9E 20 0C  
  888                   
  889 12EE:08 00 00 00  	.BY $08,$00,$00,$00,$00,$00,$00,$94
  889      00 00 00 94  
  889                   
  890 12F6:08 00 00 00  	.BY $08,$00,$00,$00,$00,$00,$00,$62
  890      00 00 00 62  
  890                   
  891 12FE:01           	.BY $01
  892                   ; Next data is down-right
  893 12FF:06 80 13 80  	.BY $06,$80,$13,$80,$c0,$60
  893      C0 60        
  894 1305:06 C4 27 C1  	.BY $06,$c4,$27,$c1,$e0,$f0
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   93
                                                        14:13:52  

  894      E0 F0        
  895 130B:06 F8 48 E2  	.BY $06,$f8,$48,$e2,$70,$7c
  895      70 7C        
  896 1311:06 70 98 70  	.BY $06,$70,$98,$70,$70,$58
  896      70 58        
  897 1317:06 21 B8 38  	.BY $06,$21,$b8,$38,$58,$40
  897      58 40        
  898 131D:06 41 98 18  	.BY $06,$41,$98,$18,$4c,$40
  898      4C 40        
  899 1323:06 FD 98 18  	.BY $06,$fd,$98,$18,$46,$40
  899      46 40        
  900 1329:06 0C D0 10  	.BY $06,$0c,$d0,$10,$43,$40
  900      43 40        
  901 132F:06 08 70 20  	.BY $06,$08,$70,$20,$f1,$c0
  901      F1 C0        
  902 1335:06 F0 3F C1  	.BY $06,$f0,$3f,$c1,$3d,$c0
  902      3D C0        
  903 133B:06 E0 1F 82  	.BY $06,$e0,$1f,$82,$18,$c0
  903      18 C0        
  904 1341:02 00        	.BY $02,$00
  905 1343:02 00        	.BY $02,$00
  906 1345:02 00        	.BY $02,$00
  907 1347:02 00        	.BY $02,$00
  908 1349:02 00        	.BY $02,$00
  909 134B:02 00        	.BY $02,$00
  910 134D:03 C0 60     	.BY $03,$c0,$60
  911 1350:03 E0 F0     	.BY $03,$e0,$f0
  912 1353:03 70 7C     	.BY $03,$70,$7c
  913 1356:03 70 58     	.BY $03,$70,$58
  914 1359:03 58 40     	.BY $03,$58,$40
  915 135C:03 4C 40     	.BY $03,$4c,$40
  916 135F:03 46 40     	.BY $03,$46,$40
  917 1362:03 43 40     	.BY $03,$43,$40
  918 1365:03 F1 C0     	.BY $03,$f1,$c0
  919 1368:03 3D C0     	.BY $03,$3d,$c0
  920 136B:03 18 C0     	.BY $03,$18,$c0
  921 136E:02 00        	.BY $02,$00
  922 1370:02 00        	.BY $02,$00
  923 1372:02 00        	.BY $02,$00
  924 1374:02 00        	.BY $02,$00
  925 1376:02 00        	.BY $02,$00
  926 1378:09 3F 20 FC  	.BY $09,$3f,$20,$fc,$80,$38,$20,$70,$40
  926      80 38 20 70  
  926      40           
  927 1381:09 7E 71 F9  	.BY $09,$7e,$71,$f9,$c8,$5f,$c0,$bf,$80
  927      C8 5F C0 BF  
  927      80           
  928 138A:09 C4 B3 12  	.BY $09,$c4,$b3,$12,$f0,$c7,$81,$8f,$00
  928      F0 C7 81 8F  
  928      00           
  929 1393:08 09 34 24  	.BY $08,$09,$34,$24,$60,$70,$00,$e0
  929      60 70 00 E0  
  929                   
  930 139B:08 12 20 48  	.BY $08,$12,$20,$48,$40,$1e,$00,$3c
  930      40 1E 00 3C  
  930                   
  931 13A3:09 36 40 D8  	.BY $09,$36,$40,$d8,$80,$07,$80,$0f,$00
  931      80 07 80 0F  
  931      00           
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   94
                                                        14:13:52  

  932 13AC:09 37 80 DF  	.BY $09,$37,$80,$df,$e0,$e1,$c1,$c3,$80
  932      E0 E1 C1 C3  
  932      80           
  933 13B5:09 26 60 98  	.BY $09,$26,$60,$98,$01,$f8,$83,$f1,$00
  933      01 F8 83 F1  
  933      00           
  934 13BE:08 04 30 10  	.BY $08,$04,$30,$10,$22,$1f,$04,$3e
  934      22 1F 04 3E  
  934                   
  935 13C6:08 7E 30 FF  	.BY $08,$7e,$30,$ff,$c2,$06,$04,$0c
  935      C2 06 04 0C  
  935                   
  936 13CE:08 8F 21 07  	.BY $08,$8f,$21,$07,$81,$20,$02,$40
  936      81 20 02 40  
  936                   
  937 13D6:08 00 00 00  	.BY $08,$00,$00,$00,$00,$c0,$01,$80
  937      00 C0 01 80  
  937                   
  938 13DE:00           	.BY $00
  939                   ; 453 total image bytes
  940                   
  941                   
  942                   ;	     0 1 2 3 4 5 6 7 8 9 a b c d e f
  943 13DF:             palette
  944 13DF:00 0C 00 06  	.HS 000c0006090f000c0000050c0e0c0804
  944      09 0F 00 0C  
  944      00 00 05 0C  
  944      0E 0C 08 04  
  944                   
  945 13EF:00 AE 0C 0F  	.HS 00ae0c0f0013f0d2cffa09af0fcc8844
  945      00 13 F0 D2  
  945      CF FA 09 AF  
  945      0F CC 88 44  
  945                   
  946                   
  947                   
  948                   *-----------------------------------------------------
  949                   
  950 13FF:             start_of_redeye_variables
  951                   	.IN 6502:src/comlink_variables.src
    1                   ; Friday 23-Mar-90 11:51:53
    2                   * === comlink_variables.src ==========================
    3                   *
    4                   * Intermediate level handler for Redeye  --  Handy Sof
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 20-Mar-90	SHL		Variable length message support added
   12                   *				PlayerData arrays moved outside range of
   13                   *				variables that get initialized
   14                   * 9-Mar-90	SHL		Added new Redeye variables
   15                   * 6-Mar-90	SHL		Removed RG code support and variables
   16                   * 28-Feb-90	SHL		Made compatible with Handy 1.1 releas
   17                   * 7-Sep-89	James Donald	Version finished for Cal Games
   18                   *
   19                   * ====================================================
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   95
                        6502:src/comlink_variables.src  14:13:52  

   20                   
   21      0002         MASK_SIZE	.eq {MAX_PLAYERS+7}/8	; size of bit masks ba
   22                   
   23      0006         LOGON_MSG_SIZE	.eq 4+MASK_SIZE		; size of logon messag
   24                   
   25      FALSE         #IF PLAYER_DATA_SIZE+1>LOGON_MSG_SIZE
   27                    #ELSE
   28      0006         MAX_DATA_SIZE	.eq LOGON_MSG_SIZE	; size of largest mes
   29                    #ENDIF
   30                   
   31                   * ====================================================
   32                   
   33                   
   34 13FF:             start_of_comlink_variables
   35                   
   36                   * ====================================================
   37                   
   38                   * logon + normal communication variables
   39                   
   40 13FF:             XmitBuffer	.ds MAX_DATA_SIZE
   41      1401         ActvPlrMask	.eq XmitBuffer+2
   42      1403         LogonGameNumber	.eq ActvPlrMask+MASK_SIZE
   43                   ; XmitBuffer is where all outgoing data is placed befo
   44                   ; manager send routine
   45                   ; ActvPlrMask is a bit mask used during logon to verif
   46                   ; the same players are logged in
   47                   ; LogonGameNumber is used during logon to verify all u
   48                   ; the same game
   49                   
   50                   
   51 1405:             comlink_semaphore	.ds 1
   52                   ; comlink_semaphore prevents a high level interrupt fr
   53                   ; one in process
   54                   
   55                   
   56                   * ====================================================
   57                   
   58 1406:             ComlinkVarOverlay		; re-org address for overlayed vari
   59                   
   60                   * logon only variables
   61                   
   62 1406:             PlayerHeard	.ds MAX_PLAYERS
   63                   ; PlayerHeard array has an entry for each player durin
   64                   ; number when that player is heard from, and counts do
   65                   ; transaction - the player is assumed to have dropped 
   66                   ; if his entry reaches zero
   67                   
   68 1416:             inconsistancy	.ds 1
   69                   ;This is set to 40 whenever the incoming mask disagree
   70                   ;mask and whenever we pack down. It is decremented eve
   71                   ;(We do not fiddle it on collisions because player 0 n
   72                   ;a collision)
   73                   ;Logon can only terminate when this is zero and all th
   74                   ;been heard from recently
   75                   
   76                   
   77 1417:             logon_state	.ds 1
   78                   ; 0 means normal logon
   79                   ; 2 means too many players
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   96
                        6502:src/comlink_variables.src  14:13:52  

   80                   ; 4 means terminating logon (master does this)
   81                   ; 6 finish logon for real when timer done
   82                   ; 8 means checking for redeye busy before logon
   83                   
   84 1418:             timer_high_order_countdown .ds 1
   85                   
   86 1419:             random_data	.ds 5	; The clocks are scrambled into this
   87      0005         random_data_size .eq *-random_data
   88                   ; Thus this value will be different every time in ever
   89                   
   90 141E:             index_into_random .ds 1
   91                   
   92                   
   93 141F:             LogonInProgress	.ds 1
   94 1420:             EndLogonRequest	.ds 1
   95                   
   96                   * ====================================================
   97                   
   98 1421:             	.OR ComlinkVarOverlay	; re-origin over logon variable
   99                   
  100                   * After login redeye variables
  101                   
  102                   
  103      TRUE          #IFDEF VAR_SIZE_DATA
  104 1406:             PlayerDataSize0	.ds MAX_PLAYERS	; sizes of messages fo
  105 1416:             PlayerDataSize1	.ds MAX_PLAYERS	; sizes of messages fo
  106                    #ENDIF
  107                   
  108 1426:             PlayerFlag0	.ds MAX_PLAYERS	; message receipt flags fo
  109 1436:             PlayerFlag1	.ds MAX_PLAYERS	; message receipt flags fo
  110                   
  111      TRUE          #IFDEF VAR_SIZE_DATA
  112 1446:             OutGoingSize	.ds 1		; size of outgoing data
  113                    #ENDIF
  114 1447:             OutGoingFlag	.ds 1		; flag that we've sent our data
  115 1448:             OutGoingData	.ds PLAYER_DATA_SIZE	; next outgoing piec
  116 144A:             Sequence	.ds 1		; what sequence am I supposed to send 
  117 144B:             Seq		.ds 1		; outside IRQ, what sequence data am I usi
  118 144C:             WhosNext	.ds 1		; who is supposed to send next
  119 144D:             WhosReTxReq	.ds 1		; who asked for resend? (0=no-one)
  120 144E:             ReTxSequence	.ds 1		; what sequence is requester on
  121 144F:             ReTxMask	.ds MASK_SIZE	; mask for players to re-transm
  122 1451:             RxMask		.ds MASK_SIZE	; who have I not received data f
  123 1453:             LongTimeoutFlag	.ds 1		; flag for long timeout after s
  124                   
  125 1454:             end_of_comlink_erasable_variables
  126                   
  127 1454:             PlayerData0	.ds {PLAYER_DATA_SIZE*MAX_PLAYERS}	; even 
  128 1474:             PlayerData1	.ds {PLAYER_DATA_SIZE*MAX_PLAYERS}	; odd s
  129                   
  130 1494:             end_of_comlink_variables
  131                   
  132                   
  133                   
  952                   	.IN 6502:src/msgmgrRAM.src
    1                   ; Tuesday 13-Mar-90 12:42:12
    2                   *=====================================================
    3                   * 
    4                   * Comlink Message Manager  --  Handy Software
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   97
                        6502:src/msgmgrRAM.src          14:13:52  

    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, 1989, Epyx, Inc.
    8                   * 
    9                   * Date       Name	Description
   10                   * ---------  ---------- ------------------------------
   11                   *
   12                   * Sep  5 89  LEA	Created this file.
   13                   *=====================================================
   14                   
   15                   
   16                   
   17                   
   18                   
   19                   *-----------------------------------------------------
   20                   * MESSAGE MANAGER VARIABLES
   21                   *=====================================================
   22                   
   23 1494:             RxRawStat		.ds  1	; Received Message Status Byte
   24                   				; B7 = Msg checksum error
   25                   				; B6 = Msg size byte out of range
   26                   				; B5 = Msg gap timeout occurred
   27                   				; B4 = Byte parity error
   28                   				; B3 = Byte overrun error
   29                   				; B2 = Byte framing error
   30                   				; B1 = 
   31                   				; B0 = 
   32                   
   33 1495:             RxRaw			.ds  MAX_DATA_SIZE+2
   34                   				; holds raw incoming data
   35                   
   36 149D:             RxByteCounter		.ds  1	; Position of next incoming byte
   37                   
   38 149E:             RxChecksum		.ds  1	; used to accumulate checksum
   39                   
   40 149F:             RxRawSize		.ds  1	; expected number of bytes in curren
   41                   
   42 14A0:             RxMsgBusy		.ds  1	; non zero when user is reading mess
   43                   
   44 14A1:             RxMsg			.ds  MAX_DATA_SIZE+1
   45                   				; user's copy of received message (read only)
   46                   
   47 14A8:             RxMsgSize		.ds  1	; number of bytes in user's message
   48                   
   49 14A9:             RxMsgStat		.ds  1	; Received Message Status Byte (read
   50                   				; B7 = Msg checksum error
   51                   				; B6 = Msg size byte out of range
   52                   				; B5 = Msg gap timeout occurred
   53                   				; B4 = Byte parity error
   54                   				; B3 = Byte overrun error
   55                   				; B2 = Byte framing error
   56                   				; B1 = 
   57                   				; B0 = 
   58                   
   59                   
   60 14AA:             TxRaw			.ds  MAX_DATA_SIZE+2
   61                   				; holds raw outgoing data
   62                   
   63 14B2:             TxByteCounter		.ds  1	; Position of next outgoing byte
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   98
                        6502:src/msgmgrRAM.src          14:13:52  

   64                   
   65 14B3:             TxRawSize		.ds  1	; number of bytes in current raw msg
   66                   
   67 14B4:             TxToRxTmrOn		.ds  1	; Bit(7) Set by transmitter to sig
   68                   				; Bit(6) Set to signal interMsg timeout
   69                   				; All bits clear signals msg gap timeout
   70                   				; Cleared by the timer timing out
   71                   
   72                   
   73                   
   74 14B5:             SERCTL_RAM		.ds  1	; Shadow of writes to SERCTL
   75                   
   76 14B6:             COMLINK_STAT		.ds  1  ; condition of the physical link
   77                   				; B7 = comlink cable plugged in
   78                   				; B6 = 
   79                   				; B5 = 
   80                   				; B4 = 
   81                   				; B3 = 
   82                   				; B2 = 
   83                   				; B1 = break active
   84                   				; B0 = 
   85                   
   86                   
   87                   
   88                   
   89                   
   90                   
  953 14B7:             end_of_redeye_variables
  954                   
  955                   *-----------------------------------------------------
  956                   
  957 14B7:             MyIntTable
  958 14B7:             	.DS 16
  959                   
  960 14C7:             	.AL 4
  961 14C8:             buffer1	.DS DISPLAY_BUFSIZE
  962 34A8:             buffer2	.DS DISPLAY_BUFSIZE
  963                   
  964                   *-----------------------------------------------------
  965                   
  966                   * Calculate and print some statistics during assembly 
  967                   * we're doing
  968                   
  969      05C2         comlink_size	.EQ comlink_end_address-comlink_start_add
  970      02FE         logon_size	.EQ logon_end_address-logon_start_address
  971      00B8         variable_size	.EQ end_of_redeye_variables-start_of_red
  972      0978         total_size	.EQ variable_size+logon_size+comlink_size
  973      017F         glue_size	.EQ glue_end_address-glue_start_address
  974      0AF7         with_glue_size	.EQ total_size+glue_size
  975      067A         nologon_size	.EQ comlink_size+variable_size
  976      07F9         nologon_and_glue .EQ nologon_size+glue_size
  977                   
  978                   	ECHO_VALUE comlink_size
    1                 + 		.ECHO "Value of comlink_size is 1474 ($5c2)"
    2                 + 
  979                   	ECHO_VALUE logon_size
    1                 + 		.ECHO "Value of logon_size is 766 ($2fe)"
    2                 + 
  980                   	ECHO_VALUE variable_size
Epyx HandyAsm 1.12      testredeye                      15-Apr-12514:13:52 Page   99
                        testredeye.src                  14:13:52  

    1                 + 		.ECHO "Value of variable_size is 184 ($b8)"
    2                 + 
  981                   	ECHO_VALUE total_size
    1                 + 		.ECHO "Value of total_size is 2424 ($978)"
    2                 + 
  982                   	ECHO_VALUE glue_size
    1                 + 		.ECHO "Value of glue_size is 383 ($17f)"
    2                 + 
  983                   	ECHO_VALUE with_glue_size
    1                 + 		.ECHO "Value of with_glue_size is 2807 ($af7)"
    2                 + 
  984                   	ECHO_VALUE nologon_size
    1                 + 		.ECHO "Value of nologon_size is 1658 ($67a)"
    2                 + 
  985                   	ECHO_VALUE nologon_and_glue
    1                 + 		.ECHO "Value of nologon_and_glue is 2041 ($7f9)"
    2                 + 
  986                   
  987                   
  988                   
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:13:52 Page  100
                                                        14:13:52  

$0040 ACCUMULATE                        $0040 ALGO_3
$0000 ASM.EQUSYMS                       $010C ASM.VERSION
$FD40 ATTENREG0                         $FD41 ATTENREG1
$FD42 ATTENREG2                         $FD43 ATTENREG3
$FD86 AUDIN                             $0010 AUDIN_BIT
$FD20 AUDIO0                            $FD28 AUDIO1
$FD30 AUDIO2                            $FD38 AUDIO3
$0000 AUD_1                             $0004 AUD_16
$0001 AUD_2                             $0005 AUD_32
$0002 AUD_4                             $0006 AUD_64
$0003 AUD_8                             $0004 AUD_BACKUP
$0007 AUD_CLOCK_MASK                    $0005 AUD_CONTROL
$0006 AUD_COUNTER                       $0001 AUD_FEEDBACK
$0007 AUD_LINKING                       $0007 AUD_OTHER
$0002 AUD_OUTPUT                        $0003 AUD_SHIFT
$0000 AUD_VOLCNTRL                      $0001 AUTO_TIMEOUT_USER
$0001 A_BUTTON                          $0000 A_OFFSET
$1401 ActvPlrMask                       $0997 AskForResend
$097B AskForSend                        $0000 BACKGROUND_SPRITE
$0001 BACKNONCOLL_SPRITE                $0000 BACK_SHADOW_SPRITE
MACRO BEGIN_ALLOCATE_ZEROPAGE           MACRO BEGIN_ZPAGE
$00C0 BITS_MASK                         $FDB0 BLUERED0
$FDB1 BLUERED1                          $FDB2 BLUERED2
$FDB3 BLUERED3                          $FDB4 BLUERED4
$FDB5 BLUERED5                          $FDB6 BLUERED6
$FDB7 BLUERED7                          $FDB8 BLUERED8
$FDB9 BLUERED9                          $FDBA BLUEREDA
$FDBB BLUEREDB                          $FDBC BLUEREDC
$FDBD BLUEREDD                          $FDBE BLUEREDE
$FDBF BLUEREDF                          $0002 BORROW_IN
$0001 BORROW_OUT                        $0003 BOUNDARY_SPRITE
$0015 BREAK_CONTROLS                    $0001 BRK_USER
$069B BRK_vector                        $0002 BSHADOW_SPRITE
$0013 BUS_MONITOR                       $0002 B_BUTTON
$0A72 Baud_Patch                        $0002 CART0_IO_INACTIVE
$0004 CART1_IO_INACTIVE                 $0002 CART_ADDR_DATA
$0001 CART_ADDR_STROBE                  $0002 CART_POWER_OFF
MACRO CLEARACCUM                        $FC0F COLLADRH
$FC0E COLLADRL                          $FC0B COLLBASH
$FC0A COLLBASL                          $FC25 COLLOFFH
$FC24 COLLOFFL                          $14B6 COMLINK_STAT
$0001 COMLINK_TIMER                     $FD04 COMLINK_TIMER_ADDR
$0003 CONTINUE_REQUEST                  $FD91 CPUSLEEP
$FFFE CPU_IRQ                           $FFFA CPU_NMI
$FFFC CPU_RESET                         $0890 ChkResendQueue
$08B2 ChkResendQueueAndSend             $1406 ComlinkVarOverlay
$0002 DATA                              MACRO DBUF_DISPLAY
$FD95 DISPADRH                          $FD94 DISPADRL
$FD92 DISPCTL                           $05D0 DISPCTL_RAM
MACRO DISPLAY                           $064D DISPLAY.0020
$0653 DISPLAY.00202                     $1FE0 DISPLAY_BUFSIZE
$0080 DISPLAY_EOFFLAG                   $0040 DISPLAY_EOLFLAG
MACRO DISP_AX                           MACRO DISP_AY
$0008 DISP_COLOR                        $0002 DISP_FLIP
$0004 DISP_FOURBIT                      $0001 DMA_ENABLE
$0001 DOWNLOAD_REQUEST                  $0001 DRAW_LEFT
$0002 DRAW_UP                           $05D5 DisplayBuffer
$05DB DisplayFlags                      MACRO ECHO_VALUE
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:13:52 Page  101
                                                        14:13:52  

$0008 ENABLE_COUNT                      $0080 ENABLE_INT
$0020 ENABLE_INTEGRATE                  $0010 ENABLE_RELOAD
MACRO END_ALLOCATE_ZEROPAGE             $0000 END_OF_FILE
MACRO END_ZPAGE                         $0014 EOFS_TIL_RESTART
$0001 EOF_USER                          $0004 EVER_ON
$0001 EXTERNAL_POWER                    $1420 EndLogonRequest
$0080 FEEDBACK_7                        $0011 FILL_MEM
MACRO FLIP                              $0004 FLIP_BUTTON
$00C0 FOUR_PER_PIXEL                    $0004 FRAMERR
$08B7 FigureAndAskForSend               $0A2F FigureWhosNext
$05F3 FrameEnd                          $0665 FrameEndExit
$FFFF GAME_ID                           MACRO GETJOY
MACRO GETSWITCH                         $0080 GLOBALRESET
$0005 GO_REQUEST                        $FDA0 GREEN0
$FDA1 GREEN1                            $FDA2 GREEN2
$FDA3 GREEN3                            $FDA4 GREEN4
$FDA5 GREEN5                            $FDA6 GREEN6
$FDA7 GREEN7                            $FDA8 GREEN8
$FDA9 GREEN9                            $FDAA GREENA
$FDAB GREENB                            $FDAC GREENC
$FDAD GREEND                            $FDAE GREENE
$FDAF GREENF                            $FC00 HARDWARE_START
MACRO HBRK                              $FD00 HCOUNT
$0020 HFLIP                             $0007 HIDE_HOWARD_REQUEST
MACRO HOFF16                            MACRO HOFF8
$FC05 HOFFH                             $FC04 HOFFL
$0001 HORIZONTAL_INT                    $0016 HOWARD_ABUS
$0017 HOWARD_BBUS                       $0018 HOWARD_CBUS
$0019 HOWARD_DBUS                       $FCC4 HOWIE
$FC15 HPOSSTRTH                         $FC14 HPOSSTRTL
$FC29 HSIZOFFH                          $FC28 HSIZOFFL
$0010 INCONSISTANCY_PRESET              MACRO INITEOF
MACRO INITINT                           $023F INITINT.0006
MACRO INITSUZY                          MACRO INITSYS
MACRO INIT_ONESHOT                      $FD04 INIT_ONESHOT.0024
$FD14 INIT_ONESHOT.0028                 $0002 INNER_BUTTON
$FD80 INTRST                            $FD81 INTSET
$05D7 INTSET_RAM                        $FD8B IODAT
$05D1 IODAT_RAM                         $FD8A IODIR
$05D2 IODIR_RAM                         $FCC3 IOData
$FCC2 IOStatus                          $0C75 I_have_no_player_number
$05DC InitEOF                           $0690 IntReturn
$FBF0 IntTable                          $0002 InterMsg_Divider
$0C0B InterMsg_Patch                    $00FA InterMsg_TIMEOUT
$FCB0 JOYSTICK                          $0080 JOY_DOWN
$0010 JOY_LEFT                          $0020 JOY_RIGHT
$0040 JOY_UP                            $0012 LARGE_DATA
$0004 LAST_CLOCK                        $FCC0 LEDS
$0010 LEFT0_SELECT                      $0020 LEFT1_SELECT
$0040 LEFT2_SELECT                      $0080 LEFT3_SELECT
$0030 LEFTEDGE                          $0008 LEFTHAND
$0008 LEFTHANDED                        $00F0 LEFT_ATTENMASK
$0080 LITERAL                           $0040 LOCALRESET
$0006 LOGON_MSG_SIZE                    $FD14 LOGON_TIMER
$1403 LogonGameNumber                   $141F LogonInProgress
$1453 LongTimeoutFlag                   $0006 Long_Divider
$00FA Long_TIMEOUT                      $FFF9 MAPCTL
$0002 MASK_SIZE                         $FC55 MATHA
$FC54 MATHB                             $FC53 MATHC
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:13:52 Page  102
                                                        14:13:52  

$0020 MATHCARRY                         $FC52 MATHD
$FC63 MATHE                             $FC62 MATHF
$FC61 MATHG                             $FC60 MATHH
$FC6F MATHJ                             $FC6E MATHK
$FC6D MATHL                             $FC6C MATHM
$FC57 MATHN                             $FC56 MATHP
$0040 MATHWARNING                       $0080 MATHWORKING
$0006 MAX_DATA_SIZE                     $0010 MAX_PLAYERS
$FD88 MIKEYHREV                         $FD89 MIKEYSREV
$FD00 MIKEY_BASE                        $0002 MIKEY_SPACE
$0010 MONITOR_BYTECOUNT                 $0001 MONITOR_I
$F900 MONITOR_RAM_RESERVED              $00F8 MONITOR_ZP_RESERVED
MACRO MOVEI16                           $FD44 MPAN
$0080 MSG_CHECKSUM_ERR                  $0002 MSG_GAP_Divider
$0B3D MSG_GAP_Patch                     $005F MSG_GAP_TIMEOUT
$0040 MSG_SIZE_ERR                      $FD50 MSTEREO
$FD9C MTEST0                            $FD9D MTEST1
$FD9E MTEST2                            $0C37 MsgGapTimeout
$0104 MsgMgrVers                        $14B7 MyIntTable
$0096 NEXTZPG                           $0004 NOEXP
$0005 NONCOLL_SPRITE                    $0000 NOP_REQUEST
$0004 NORMAL_SPRITE                     $0020 NO_COLLIDE
$0006 NumberOfPlayers                   $0000 ONE_PER_PIXEL
$0008 OPTION1_BUTTON                    $0004 OPTION2_BUTTON
$0001 ORIGIN                            $0001 OUTER_BUTTON
$0008 OVERRUN                           $1448 OutGoingData
$1447 OutGoingFlag                      $1446 OutGoingSize
$0001 PARBIT                            $0010 PAREN
$0010 PARERR                            $0001 PAREVEN
$0001 PAUSE_SWITCH                      $FD93 PBKUP
$0004 PC_OFFSET                         $0002 PLAYER_DATA_SIZE
$0002 POWERON                           MACRO POWERTABLE
$FC2F PROCADRH                          $FC2E PROCADRL
$0006 P_OFFSET                          $1454 PlayerData0
$1474 PlayerData1                       $1406 PlayerDataSize0
$1416 PlayerDataSize1                   $1426 PlayerFlag0
$1436 PlayerFlag1                       $1406 PlayerHeard
$0007 PlayerNumber                      $06B7 PlrOffsets
$FCB2 RCART_0                           $FCB3 RCART_1
$0010 READ_ENABLE                       $0000 REDEYE_SLOWNESS
$0010 REGISTER                          $0007 REGISTER_BYTECOUNT
$0010 RELOAD_HV                         $0020 RELOAD_HVS
$0030 RELOAD_HVST                       $0030 RELOAD_MASK
$0000 RELOAD_NONE                       $0008 RESETERR
$0040 RESET_DONE                        MACRO RESET_TIMEOUT
MACRO RESPRITE                          $0008 RESTART_BUTTON
$0008 RESTLESS                          $0008 REUSE_PALETTE
MACRO RGB16                             MACRO RGB16_I
MACRO RGB_AXY                           $0001 RIGHT0_SELECT
$0002 RIGHT1_SELECT                     $0004 RIGHT2_SELECT
$0008 RIGHT3_SELECT                     $000F RIGHT_ATTENMASK
$001A ROM                               $0004 ROM_SPACE
$0003 RUN_ADDRESS                       $0002 RXBRK
$0040 RXINTEN                           $0040 RXRDY
$075E RcvData                           $0731 RcvMsgInt
$0854 RcvResendReq                      $0810 RcvSendReq
$144F ReTxMask                          $144E ReTxSequence
$05D3 RenderBuffer                      $08C1 ResendNext
$149D RxByteCounter                     $149E RxChecksum
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:13:52 Page  103
                                                        14:13:52  

$0B35 RxIrq                             $1451 RxMask
$14A1 RxMsg                             $14A0 RxMsgBusy
$14A8 RxMsgSize                         $14A9 RxMsgStat
$1495 RxRaw                             $149F RxRawSize
$1494 RxRawStat                         $FC2D SCBADRH
$FC2C SCBADRL                           $FC11 SCBNEXTH
$FC10 SCBNEXTL                          $0000 SCB_CTRL0
$0001 SCB_CTRL1                         $0002 SCB_CTRL2
$0005 SCB_DATA                          $0007 SCB_HPOS
$000B SCB_HSIZE                         $0003 SCB_NEXT
$0013 SCB_PALETTE                       $001B SCB_SIZEOF
$000F SCB_STRETCH                       $0011 SCB_TILT
$0009 SCB_VPOS                          $000D SCB_VSIZE
$FC23 SCVPOSH                           $FC22 SCVPOSL
$FD90 SDONEACK                          $0006 SEE_HOWARD_REQUEST
$FD8C SERCTL                            $14B5 SERCTL_RAM
$FD8D SERDAT                            $0001 SERIALPORT_USER
$FD10 SERIALRATE                        $0010 SERIAL_INT
MACRO SETCOLL                           MACRO SETDBUF
MACRO SETDISP                           MACRO SETDISP_50
MACRO SETDISP_60                        MACRO SETDISP_75
MACRO SET_BRK                           $0007 SHADOW_SPRITE
$0080 SIGNMATH                          $0004 SKIP_SPRITE
$0004 SLAVE_REQUEST                     $FC82 SPRCOLL
$FC80 SPRCTL0                           $FC81 SPRCTL1
$FC13 SPRDLINEH                         $FC12 SPRDLINEL
$FC21 SPRDOFFH                          $FC20 SPRDOFFL
$FC91 SPRGO                             $FC19 SPRHSIZH
$FC18 SPRHSIZL                          $FC83 SPRINIT
MACRO SPRITES                           $0002 SPRITESTOP
$0002 SPRITETOSTOP                      $0001 SPRITEWORKING
$0001 SPRITE_GO                         $FC92 SPRSYS
$05CF SPRSYS_RAM                        $FC1B SPRVSIZH
$FC1A SPRVSIZL                          MACRO START_ONESHOT
$FD14 START_ONESHOT.0027                $0014 STDCOM
MACRO STOP_ONESHOT                      $FD04 STOP_ONESHOT.0025
$FD04 STOP_ONESHOT.0026                 $FC1D STRETCHH
$FC1C STRETCHL                          $FC90 SUZYBUSEN
$FC88 SUZYHREV                          $FC89 SUZYSREV
$FC00 SUZY_BASE                         $0001 SUZY_SPACE
$FCB1 SWITCHES                          $FD87 SYSCTL1
$0003 S_OFFSET                          $0AAB SendMsg
$0939 SendPlrXSequenceData              $144B Seq
$144A Sequence                          $0AF9 SerialIrq
$FFFE TEMPORG                           $0080 THREE_PER_PIXEL
$FC03 TILTACUMH                         $FC02 TILTACUML
$FC1F TILTH                             $FC1E TILTL
MACRO TIMEOUT                           $0631 TIMEOUT.001E
$062E TIMEOUT.001E2                     $060D TIMEOUT.001E3
$FD00 TIMER0                            $0001 TIMER0_INT
$FD04 TIMER1                            $0002 TIMER1_INT
$FD08 TIMER2                            $0004 TIMER2_INT
$FD0C TIMER3                            $0008 TIMER3_INT
$FD10 TIMER4                            $FD14 TIMER5
$0020 TIMER5_INT                        $FD18 TIMER6
$0040 TIMER6_INT                        $FD1C TIMER7
$0080 TIMER7_INT                        $0008 TIMER_DONE
$0000 TIM_BACKUP                        $0001 TIM_CONTROLA
$0003 TIM_CONTROLB                      $0002 TIM_COUNT
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:13:52 Page  104
                                                        14:13:52  

$FC01 TMPADRH                           $FC00 TMPADRL
$004D TOPEDGE                           $0014 TRACE
$0080 TURBO_DISABLE                     $0040 TWO_PER_PIXEL
$0002 TXBRK                             $0020 TXEMPTY
$0080 TXINTEN                           $0004 TXOPEN
$0080 TXRDY                             $05D8 TimeoutCount
$08A8 TimeoutInt                        $08F5 TryToSendMyData
$14B2 TxByteCounter                     $14AA TxRaw
$14B3 TxRawSize                         $0C42 TxToRxTimeout
$14B4 TxToRxTmrOn                       $0000 TxToRx_Divider
$0B23 TxToRx_Patch                      $0B1E TxToRx_Patch1
$0074 TxToRx_SLOW                       $0074 TxToRx_TIMEOUT
$0004 UNSAFEACCESS                      $0004 UNSAFEACCESSRST
$0002 UPLOAD_REQUEST                    $0002 UP_CURRENT_PAGE
$0005 UP_HAHDATA                        $0004 UP_MEMWATCH
$0003 UP_REGISTERS                      $0001 UP_THIS_PAGE
$0668 UserIntHandler                    $0001 VAR_SIZE_DATA
$FD08 VCOUNT                            $0008 VECTOR_SPACE
$0004 VERTICAL_INT                      $0010 VFLIP
$FC0D VIDADRH                           $FC0C VIDADRL
$FC09 VIDBASH                           $FC08 VIDBASL
MACRO VOFF16                            MACRO VOFF8
$FC07 VOFFH                             $FC06 VOFFL
$FC17 VPOSSTRTH                         $FC16 VPOSSTRTL
$FC27 VSIZACUMH                         $FC26 VSIZACUML
$FC2B VSIZOFFH                          $FC2A VSIZOFFL
$0010 VSTRETCH                          $0010 VSTRETCHING
MACRO WAITEOF                           MACRO WAITEOL
MACRO WAITMATH                          MACRO WAITNEOF
MACRO WAITNEOL                          MACRO WAITSUZY
$0425 WAITSUZY.00111                    $0AA6 WaitAndSendMsg
$144C WhosNext                          $144D WhosReTxReq
$0006 XOR_SHADOW_SPRITE                 $0006 XOR_SPRITE
$0001 X_OFFSET                          $13FF XmitBuffer
$0002 Y_OFFSET                          $0096 ZEND
$0006 ZSTART                            $0A4D ZeroComlinkVariables
$0699 brkInt                            $14C8 buffer1
$34A8 buffer2                           $0494 checkflip
$05BA checklocalreset                   $058C checklogonover
$0562 checkreset                        $0EE1 clear_semaphore_rts
$0C61 comlink_end_address               $1405 comlink_semaphore
$05C2 comlink_size                      $069F comlink_start_address
$0D57 decrement_everyone                $0D52 decrement_everyone_else
$1087 digit0_data                       $10A5 digit1_data
$10BC digit2_data                       $10D7 digit3_data
$10F2 digit4_data                       $110C digit5_data
$1127 digit6_data                       $1141 digit7_data
$115B digit8_data                       $1172 digit9_data
$118D digita_data                       $11A5 digitb_data
$11BC digitc_data                       $11D3 digitd_data
$11EB digite_data                       $1202 digitf_data
$0FB7 digitshi                          $0FA7 digitslo
$0056 direction                         $0CC4 disconnect_redeye
$0DD1 dispatch_timer_irq                $0482 do_comlink_joysticks
$0450 do_logon                          $046B do_start_comlink
$03EE dodbuf                            $02EC dogame
$0BAF endOfMsg                          $0C5D endTmrIrq
$0CFD end_logon_command                 $0CB0 end_logon_right_now
$1454 end_of_comlink_erasable_variables $1494 end_of_comlink_variables
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:13:52 Page  105
                                                        14:13:52  

$14B7 end_of_redeye_variables           $0FC7 erasescb
$040A erasescreen                       $1026 erasesprite
$0446 erasezpage                        $0DCA exit_logon_timer_irq_service
$0D1C finish_logon_next_timeout         $0D7D force_active
$04C0 getinput                          $05CF glue_end_address
$017F glue_size                         $0450 glue_start_address
$0675 hardInt                           $100F hidigitscb
$0E21 ignore_message                    $1416 inconsistancy
$004A ind0                              $004C ind1
$004E ind2                              $141E index_into_random
$0A56 initMessageManager                $0C33 interMsgTimeoutVector
$0CA1 invalidate_my_player_number       $001A joystick
$0693 jumpIntTable                      $09C4 launch_redeye
$101B lodigitscb                        $0F5F logon_end_address
$02FE logon_size                        $0C61 logon_start_address
$1417 logon_state                       $0005 logon_timer
$0DB2 logon_timer_irq_service           $121A logonbrush_data
$0FD7 logonscb                          $0002 maximium_logon_message_number
$0C56 messageSentVector                 $0BFC msgMgrRtn
$0C27 msgMgrTimerIrq                    $0BC3 msgOverflowVector
$0C3E msgTimeoutVector                  $07F9 nologon_and_glue
$067A nologon_size                      $000A oldjoystick
$002A oldswitch                         $0E24 overflow_collision_service
$13DF palette                           $0C8C pick_new_player_number
$0F5F playercolors                      $0DCD ply_return
$069F power_of_two_table                $0539 preparejoysticks
$0304 processplayers                    $1419 random_data
$0005 random_data_size                  $0D2C randomise
$0BF7 readMsgVector                     $0E6D receive_normal_logon_message
$0E39 received_message_service          $0A8F resetReceiver
$041A reshowsprites                     $022F restart
$0009 restartcount                      $0008 restartflag
$09BC sendLengthMessage                 $0CE0 send_end_logon_message
$0C61 send_logon_message                $0DE2 send_normal_logon_message
$0D7B set_number_and_force_active       $0D8F set_timer_16_32_millisec
$0DA0 set_timer_500_msec                $0D99 set_timer_entry
$043A setpalette                        $1029 ship1_data
$1047 ship2_data                        $1063 ship3_data
$0F7F shipflips                         $0FE7 shipscb
$0F9F shipspriteshi                     $0F97 shipspriteslo
$03A5 showhex                           $03C8 showlogonscreen
$0330 showscreen                        $040E showsprites
$0200 start                             $0BFD startInterMsgTimeout
$0C14 startLongTimeout                  $06C7 start_comlink
$0EE5 start_logon                       $13FF start_of_comlink_variables
$13FF start_of_redeye_variables         $003A switch
$14B7 sysIntTable                       $0000 sysptr
$0002 sysptr2                           $0004 sysptr3
$0020 systemp                           $0050 temp0
$0051 temp1                             $0052 temp2
$0053 temp3                             $0054 temp4
$0055 temp5                             $0DA7 timer_collided
$1418 timer_high_order_countdown        $0028 tolerance_of_silent_player
$0C69 too_many_players                  $0978 total_size
$1003 totalscb                          $0F6F transitionrows
$0086 transitions                       $0C5B transmissionErrorVector
$0C5A txErr                             $0E21 unintelligible_message
$00B8 variable_size                     $0D21 wait_16_milliseconds
$0FF7 whoamiscb                         $0AF7 with_glue_size
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:13:52 Page  106
                                                        14:13:52  

$0066 xpos                              $0F87 xvel
$0076 ypos                              $0F8F yvel
