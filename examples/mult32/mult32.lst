Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page    1
                                                        16:20:20  

    1                   
    2                   * === mult32.src =====================================
    3                   * 
    4                   * 32x32 MULTIPLY demo for HandyCon  --  Handy Software
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 7-Mar-90	SHL		Remove DISPLAY_ON call
   12                   * 9-Feb-90	SHL		Updated for compatibility with 1.1 rel
   13                   * Jun 89	SHL		Created this file
   14                   * 
   15                   * ====================================================
   16                   
   17                   	.65C02		; Select processor for the HANDY
   18                   
   19      0001         EOF_USER .EQ 1		; We use EOF macros
   20                   
   21      0001         BRK_USER .EQ 1		; we wanna have breaks for debugging
   22                   
   23      ****         FONT_TYPE .EQ HPR_DIGIT+HPR_UPPER+HPR_PUNC	; for HPRIN
   24      0007         FONT_HEIGHT .EQ	7
   25                   
   26                   ;=====================================================
   27                   
   28                   ; Standard HANDY includes and macros
   29                   
   30                   	.IN 6502:include/monitor.i
    1                   
    2                   * === monitor.i ======================================
    3                   *
    4                   * 6502 Debugger Monitor Definitions File  --  Handy So
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 26-Feb-90	SHL		Minor cleanup
   12                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   13                   * 1 May 89	-RJ		Changed MONITOR_ZP_RESERVED to $F8
   14                   * 19 Mar 89	-RJ		Changed MONITOR_RAM_RESERVED to $F800
   15                   * 16 Mar 89	-RJ		Changed values of BUS_MONITOR and TRA
   16                   *				added LARGE_DATA
   17                   * 14 Mar 89	-RJ		Changed value of MONITOR_RAM_RESERVED
   18                   * 26-Dec-88	-RJ		Added HANDEM_NEWDISPLAY
   19                   * Early 88	=RJ Mical=	Created this file!
   20                   *
   21                   * ====================================================
   22                   
   23                   
   24                   
   25      FALSE        	#IFDEF	MONITOR_I	; prevent multiple inclusion
   27                   	#ENDIF
   28      0001         MONITOR_I	.EQU	1
   29                   
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page    2
                        6502:include/monitor.i          16:20:20  

   30                   
   31                   
   32                   * The hardware interrupt vector table starts at this a
   33      FBF0         IntTable		.=	$FC00-{8*2}
   34                   
   35                   
   36                   
   37                   * These constants define the memory locations reserved
   38                   * program.  The zero-page definition describes the fir
   39                   * in zero-page; all locations from there to the end of
   40                   * reserved.  With the RAM definition, all locations
   41                   * are reserved from that address to the start of Handy
   42                   * currently lives at $FC00
   43                   * Note that the Howard board does not require RAM for 
   44      00F8         MONITOR_ZP_RESERVED	.EQU	$00F8
   45      F900         MONITOR_RAM_RESERVED	.EQU	$F900
   46                   
   47                   
   48                   
   49                   * These are the offsets of the register data both in t
   50                   * data stream when host and monitor are passing the re
   51      0000         A_OFFSET		.EQU	0
   52      0001         X_OFFSET		.EQU	1
   53      0002         Y_OFFSET		.EQU	2
   54      0003         S_OFFSET		.EQU	3
   55      0004         PC_OFFSET		.EQU	4
   56      0006         P_OFFSET		.EQU	6
   57                   
   58                   
   59                   
   60                   * These define the monitor memory block sizes
   61      0007         REGISTER_BYTECOUNT	.EQU	7
   62      0010         MONITOR_BYTECOUNT	.EQU	16
   63                   
   64                   
   65                   
   66                   * These are the definitions of the signals that can be
   67                   * the Handebug monitor program after a warm restart.
   68      0000         NOP_REQUEST		.EQU	0
   69      0001         DOWNLOAD_REQUEST	.EQU	1
   70      0002         UPLOAD_REQUEST		.EQU	2
   71      0003         CONTINUE_REQUEST	.EQU	3
   72      0004         SLAVE_REQUEST		.EQU	4
   73      0005         GO_REQUEST		.EQU	5
   74      0006         SEE_HOWARD_REQUEST	.EQU	6
   75      0007         HIDE_HOWARD_REQUEST	.EQU	7
   76                   
   77                   
   78                   
   79                   * These are the definitions of the upload/download typ
   80      0000         END_OF_FILE		.EQU	$00
   81      0001         ORIGIN			.EQU	$01
   82      0002         DATA			.EQU	$02
   83      0003         RUN_ADDRESS		.EQU	$03
   84                   * The assembler reserves the remainder of the low defi
   85      0010         REGISTER		.EQU	$10
   86      0011         FILL_MEM		.EQU	$11
   87      0012         LARGE_DATA		.EQU	$12
   88      0013         BUS_MONITOR		.EQU	$13
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page    3
                        6502:include/monitor.i          16:20:20  

   89      0014         TRACE			.EQU	$14
   90      0015         BREAK_CONTROLS		.EQU	$15
   91      0016         HOWARD_ABUS		.EQU	$16
   92      0017         HOWARD_BBUS		.EQU	$17
   93      0018         HOWARD_CBUS		.EQU	$18
   94      0019         HOWARD_DBUS		.EQU	$19
   95      001A         ROM			.EQU	$1A
   96                   
   97                   
   98                   * These are the monitor to host slave requests
   99      0001         UP_THIS_PAGE		.EQU	1
  100      0002         UP_CURRENT_PAGE		.EQU	2
  101      0003         UP_REGISTERS		.EQU	3
  102      0004         UP_MEMWATCH		.EQU	4
  103      0005         UP_HAHDATA		.EQU	5
  104                   
  105                   
  106                   
   31                   	.IN 6502:include/harddefs.i
    1                   ; Wednesday 27-Jun-90 10:45:41
    2                   * === harddefs.i =====================================
    3                   *
    4                   * Hardware Definitions  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 27-Jun-90	SHL		Removed MAGxx alternate names for tim
   12                   *				Added READ_ENABLE definition for IODAT
   13                   * 12-Apr-90	SHL		Added SUZY_BASE and MIKEY_BASE defini
   14                   *				Removed SUZY_ADDRESS definition
   15                   *				Corrected LEFT_ATTENMASK and RIGHT_ATTENMASK
   16                   * 9-Mar-90	SHL		Added new stereo register definitions
   17                   * 7-Mar-90	SHL		Removed MAGRDYx definitions
   18                   *				Commented out MSTEREO until get real info
   19                   * 26-Feb-90	SHL		Corrected some bit definitions
   20                   * 13-Feb-90	SHL		Added a few more missing definitions
   21                   * 9-Feb-90	SHL		Added rest of the hardware definitions
   22                   *				Added CPU interrupt and reset vectors
   23                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   24                   * 25 May 89	-RJ		Deleted LEFT_ and RIGHT_FIRE_BUTTON d
   25                   * 22 May 89	-RJ		Added RESTLESS definition, changed LI
   26                   *				to EXTERNAL_POWER
   27                   * 11 May 89	-RJ		Changed sprite definitions to track t
   28                   *				definitions caused by the Shadow-E chip bug
   29                   * 10 May 89	-RJ		Added INNER_ and OUTER_BUTTON and MST
   30                   *				CART0,1_IO_INACTIVE definitions
   31                   * 20 Apr 89	-RJ		Changed the game button definitions t
   32                   *				the new way to handle Pause, Restart, Flip and
   33                   *				Game Options 1 & 2.  Added bit defs to DISPCTL
   34                   * 19 Apr 89	RG Goudy	Added serial port bit definitions
   35                   * 18 Apr 89	-RJ		The RELOAD_ definition comments say "
   36                   * 19 Mar 89	-RJ		Added TURBO_DISABLE definition to MAP
   37                   * 17 Jan 89	-RJ		Added POWERON and MOTORON of SYSCTL1
   38                   *				Renamed RCART to RCART_0 and added RCART_1
   39                   *				Deleted VIDEO/MIKEYTEST, added MTEST0/1/2
   40                   * 2 Jan 89	-RJ		Added EVER_ON and NO_COLLIDE
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page    4
                        6502:include/harddefs.i         16:20:20  

   41                   * 31 Dec 88	-RJ		When HANDYMATH is non-zero, the hardw
   42                   *				math registers now aren't defined here either
   43                   *				Added JOYSTICK and SWITCHES flag definitions
   44                   * 30 Dec 88	-RJ		Added sprite type defs.  Renamed REUS
   45                   *				et al to the more accurate RELOAD_NONE et al
   46                   * 24-Dec-88	-RJ		Added sprite control register and aud
   47                   *				channel declarations and control bits
   48                   * 22 Dec 88	-RJ		Redefined all addresses, turning them
   49                   *				symbols that Handebug will recognize
   50                   *
   51                   * Mid 87	=RJ Mical=	Created this file!
   52                   *
   53                   * ====================================================
   54                   
   55                   
   56                   * Size of a display buffer
   57      1FE0         DISPLAY_BUFSIZE	.EQ $1FE0
   58                   
   59                   
   60                   * First address of the block of hardware addresses.
   61      FC00         HARDWARE_START	.EQ $FC00
   62                   
   63                   
   64                   
   65                   * SUZY chip functions are mapped into the $FC00 page
   66 0000:             		.OR $FC00
   67 FC00:             SUZY_BASE		; FC00
   68                   
   69                   * SUZY registers from $FC00-$FC7F (both sprite and MAT
   70                   * when the lower byte is stored to.
   71                   
   72                   * Sprite engine registers - *'ed values are used inter
   73                   * cannot be usefully initialized externally.
   74                   
   75 FC00:             TMPADRL		.DS 1	; FC00 *
   76 FC01:             TMPADRH		.DS 1	; FC01 *
   77 FC02:             TILTACUML	.DS 1	; FC02 *
   78 FC03:             TILTACUMH	.DS 1	; FC03 *
   79 FC04:             HOFFL		.DS 1	; FC04
   80 FC05:             HOFFH		.DS 1	; FC05
   81 FC06:             VOFFL		.DS 1	; FC06
   82 FC07:             VOFFH		.DS 1	; FC07
   83 FC08:             VIDBASL		.DS 1	; FC08
   84 FC09:             VIDBASH		.DS 1	; FC09
   85 FC0A:             COLLBASL	.DS 1	; FC0A
   86 FC0B:             COLLBASH	.DS 1	; FC0B
   87 FC0C:             VIDADRL		.DS 1	; FC0C *
   88 FC0D:             VIDADRH		.DS 1	; FC0D *
   89 FC0E:             COLLADRL	.DS 1	; FC0E *
   90 FC0F:             COLLADRH	.DS 1	; FC0F *
   91 FC10:             SCBNEXTL	.DS 1	; FC10
   92 FC11:             SCBNEXTH	.DS 1	; FC11
   93 FC12:             SPRDLINEL	.DS 1	; FC12 *
   94 FC13:             SPRDLINEH	.DS 1	; FC13 *
   95 FC14:             HPOSSTRTL	.DS 1	; FC14 *
   96 FC15:             HPOSSTRTH	.DS 1	; FC15 *
   97 FC16:             VPOSSTRTL	.DS 1	; FC16 *
   98 FC17:             VPOSSTRTH	.DS 1	; FC17 *
   99 FC18:             SPRHSIZL	.DS 1	; FC18
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page    5
                        6502:include/harddefs.i         16:20:20  

  100 FC19:             SPRHSIZH	.DS 1	; FC19
  101 FC1A:             SPRVSIZL	.DS 1	; FC1A
  102 FC1B:             SPRVSIZH	.DS 1	; FC1B
  103 FC1C:             STRETCHL	.DS 1	; FC1C *
  104 FC1D:             STRETCHH	.DS 1	; FC1D *
  105 FC1E:             TILTL		.DS 1	; FC1E *
  106 FC1F:             TILTH		.DS 1	; FC1F *
  107 FC20:             SPRDOFFL	.DS 1	; FC20 *
  108 FC21:             SPRDOFFH	.DS 1	; FC21 *
  109 FC22:             SCVPOSL		.DS 1	; FC22 *
  110 FC23:             SCVPOSH		.DS 1	; FC23 *
  111 FC24:             COLLOFFL	.DS 1	; FC24
  112 FC25:             COLLOFFH	.DS 1	; FC25
  113 FC26:             VSIZACUML	.DS 1	; FC26 *
  114 FC27:             VSIZACUMH	.DS 1	; FC27 *
  115 FC28:             HSIZOFFL	.DS 1	; FC28
  116 FC29:             HSIZOFFH	.DS 1	; FC29
  117 FC2A:             VSIZOFFL	.DS 1	; FC2A
  118 FC2B:             VSIZOFFH	.DS 1	; FC2B
  119 FC2C:             SCBADRL		.DS 1	; FC2C *
  120 FC2D:             SCBADRH		.DS 1	; FC2D *
  121 FC2E:             PROCADRL	.DS 1	; FC2E *
  122 FC2F:             PROCADRH	.DS 1	; FC2F *
  123                   
  124                   
  125                   * Math engine registers
  126                   
  127 FC30:             		.OR $FC52
  128 FC52:             MATHD		.DS 1	; FC52
  129 FC53:             MATHC		.DS 1	; FC53
  130 FC54:             MATHB		.DS 1	; FC54
  131 FC55:             MATHA		.DS 1	; FC55
  132 FC56:             MATHP		.DS 1	; FC56
  133 FC57:             MATHN		.DS 1	; FC57
  134 FC58:             		.OR $FC60
  135 FC60:             MATHH		.DS 1	; FC60
  136 FC61:             MATHG		.DS 1	; FC61
  137 FC62:             MATHF		.DS 1	; FC62
  138 FC63:             MATHE		.DS 1	; FC63
  139 FC64:             		.OR $FC6C
  140 FC6C:             MATHM		.DS 1	; FC6C
  141 FC6D:             MATHL		.DS 1	; FC6D
  142 FC6E:             MATHK		.DS 1	; FC6E
  143 FC6F:             MATHJ		.DS 1	; FC6F
  144                   
  145                   
  146                   * More SUZY control registers
  147                   
  148 FC70:             		.OR $FC80
  149 FC80:             SPRCTL0		.DS 1	; FC80
  150                   * Sprite control 0 bit definitions
  151      00C0         BITS_MASK	.EQ %11000000	; Mask for settings bits per p
  152                   * Sprite bits-per-pixel definitions
  153      0000         ONE_PER_PIXEL	.EQ %00000000
  154      0040         TWO_PER_PIXEL	.EQ %01000000
  155      0080         THREE_PER_PIXEL	.EQ %10000000
  156      00C0         FOUR_PER_PIXEL	.EQ %11000000
  157                   * More sprite control 0 bit definitions
  158      0020         HFLIP		.EQ %00100000
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page    6
                        6502:include/harddefs.i         16:20:20  

  159      0010         VFLIP		.EQ %00010000
  160                   * Sprite types - redefined to reflect the reality caus
  161                   ; NORMAL_SPRITE		.EQ %00000111
  162      0007         SHADOW_SPRITE		.EQ %00000111
  163                   
  164      0006         XOR_SPRITE		.EQ %00000110
  165      0006         XOR_SHADOW_SPRITE	.EQ %00000110
  166                   
  167      0005         NONCOLL_SPRITE		.EQ %00000101
  168                   
  169                   ; SHADOW_SPRITE		.EQ %00000100
  170      0004         NORMAL_SPRITE		.EQ %00000100
  171                   
  172                   ; BSHADOW_SPRITE	.EQ %00000011
  173      0003         BOUNDARY_SPRITE		.EQ %00000011
  174                   
  175                   ; BOUNDARY_SPRITE	.EQ %00000010
  176      0002         BSHADOW_SPRITE		.EQ %00000010
  177                   
  178      0001         BACKNONCOLL_SPRITE	.EQ %00000001
  179                   
  180      0000         BACKGROUND_SPRITE	.EQ %00000000
  181      0000         BACK_SHADOW_SPRITE	.EQ %00000000
  182                   
  183                   
  184 FC81:             SPRCTL1		.DS 1	; FC81
  185                   * Sprite control 1 bit definitions
  186      0080         LITERAL		.EQ %10000000
  187      0040         ALGO_3		.EQ %01000000	; broken, do not set this bit!
  188      0030         RELOAD_MASK	.EQ %00110000
  189                   * Sprite reload mask definitions
  190      0000         RELOAD_NONE	.EQ %00000000	; Reload nothing
  191      0010         RELOAD_HV	.EQ %00010000	; Reload hsize, vsize
  192      0020         RELOAD_HVS	.EQ %00100000	; Reload hsize, vsize, stretc
  193      0030         RELOAD_HVST	.EQ %00110000	; Reload hsize, vsize, stret
  194                   * More sprite control 1 bit definitions
  195      0008         REUSE_PALETTE	.EQ %00001000
  196      0004         SKIP_SPRITE	.EQ %00000100
  197      0002         DRAW_UP		.EQ %00000010
  198      0001         DRAW_LEFT	.EQ %00000001
  199                   
  200                   
  201 FC82:             SPRCOLL		.DS 1	; FC82
  202                   * SPRCOLL bit definitions
  203      0020         NO_COLLIDE	.EQ %00100000
  204                   
  205 FC83:             SPRINIT		.DS 1	; FC83
  206                   
  207 FC84:             		.OR $FC88
  208 FC88:             SUZYHREV	.DS 1	; FC88
  209 FC89:             SUZYSREV	.DS 1	; FC89
  210                   
  211 FC8A:             		.OR $FC90
  212 FC90:             SUZYBUSEN	.DS 1	; FC90
  213                   
  214 FC91:             SPRGO		.DS 1	; FC91
  215                   * These are the SPRGO flag definitions
  216      0004         EVER_ON		.EQ %00000100
  217      0001         SPRITE_GO	.EQ %00000001
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page    7
                        6502:include/harddefs.i         16:20:20  

  218                   
  219 FC92:             SPRSYS		.DS 1	; FC92
  220                   * These are the SPRSYS flag definitions when writing
  221      0080         SIGNMATH	.EQ %10000000
  222      0040         ACCUMULATE	.EQ %01000000
  223                   ;NO_COLLIDE	.EQ %00100000	; same as for SPRCOLL
  224      0010         VSTRETCH	.EQ %00010000
  225      0008         LEFTHAND	.EQ %00001000
  226      0004         UNSAFEACCESSRST	.EQ %00000100
  227      0002         SPRITESTOP	.EQ %00000010
  228                   * These are the SPRSYS flag definitions when reading
  229      0080         MATHWORKING	.EQ %10000000
  230      0040         MATHWARNING	.EQ %01000000
  231      0020         MATHCARRY	.EQ %00100000
  232      0010         VSTRETCHING	.EQ %00010000
  233      0008         LEFTHANDED	.EQ %00001000
  234      0004         UNSAFEACCESS	.EQ %00000100
  235      0002         SPRITETOSTOP	.EQ %00000010
  236      0001         SPRITEWORKING	.EQ %00000001
  237                   
  238 FC93:             		.OR $FCB0
  239 FCB0:             JOYSTICK	.DS 1	; FCB0
  240      0080         JOY_DOWN	.EQ %10000000
  241      0040         JOY_UP		.EQ %01000000
  242      0020         JOY_RIGHT	.EQ %00100000
  243      0010         JOY_LEFT	.EQ %00010000
  244      0008         OPTION1_BUTTON	.EQ %00001000
  245      0004         OPTION2_BUTTON	.EQ %00000100
  246      0002         INNER_BUTTON	.EQ %00000010
  247      0001         OUTER_BUTTON	.EQ %00000001
  248      0001         A_BUTTON	.EQ OUTER_BUTTON
  249      0002         B_BUTTON	.EQ INNER_BUTTON
  250      0008         RESTART_BUTTON	.EQ OPTION1_BUTTON
  251      0004         FLIP_BUTTON	.EQ OPTION2_BUTTON
  252                   
  253 FCB1:             SWITCHES	.DS 1	; FCB1
  254      0004         CART1_IO_INACTIVE .EQ %00000100
  255      0002         CART0_IO_INACTIVE .EQ %00000010
  256      0001         PAUSE_SWITCH	.EQ %00000001
  257                   
  258 FCB2:             RCART_0		.DS 1	; FCB2
  259 FCB3:             RCART_1		.DS 1	; FCB3
  260                   
  261                   
  262                   * LEDS output register only exists on early wire-wrap 
  263 FCB4:             		.OR $FCC0
  264 FCC0:             LEDS		.DS 1	; FCC0
  265                   
  266                   
  267                   * The parallel IO port only exists on early wire-wrap 
  268 FCC1:             		.OR $FCC2
  269 FCC2:             IOStatus	.DS 1	; FCC2
  270 FCC3:             IOData		.DS 1	; FCC3
  271                   
  272 FCC4:             HOWIE		.DS 1	; FCC4
  273                   
  274                   
  275                   
  276                   
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page    8
                        6502:include/harddefs.i         16:20:20  

  277                   * MIKEY chip functions are mapped into the $FD00 page
  278                   
  279 FCC5:             		.OR $FD00
  280 FD00:             MIKEY_BASE	; FD00
  281                   
  282                   * The Mikey Timers
  283                   * First the logical timer names are defined, then the 
  284 FD00:             HCOUNT		; FD00
  285 FD00:             TIMER0		; FD00
  286 FD00:             	.DS 4
  287 FD04:             TIMER1		; FD04
  288 FD04:             	.DS 4
  289 FD08:             VCOUNT		; FD08
  290 FD08:             TIMER2		; FD08
  291 FD08:             	.DS 4
  292 FD0C:             TIMER3		; FD0C
  293 FD0C:             	.DS 4
  294 FD10:             SERIALRATE	; FD10
  295 FD10:             TIMER4		; FD10
  296 FD10:             	.DS 4
  297 FD14:             TIMER5		; FD14
  298 FD14:             	.DS 4
  299 FD18:             TIMER6		; FD18
  300 FD18:             	.DS 4
  301 FD1C:             TIMER7		; FD1C
  302 FD1C:             	.DS 4
  303                   
  304                   * Here's the timer offsets
  305      0000         TIM_BACKUP	.EQ 0
  306      0001         TIM_CONTROLA	.EQ 1
  307      0002         TIM_COUNT	.EQ 2
  308      0003         TIM_CONTROLB	.EQ 3
  309                   
  310                   * TIM_CONTROLA control bits
  311      0080         ENABLE_INT	.EQ %10000000
  312      0040         RESET_DONE	.EQ %01000000
  313      0010         ENABLE_RELOAD	.EQ %00010000
  314      0008         ENABLE_COUNT	.EQ %00001000
  315      0007         AUD_CLOCK_MASK	.EQ %00000111
  316                   * Clock settings
  317      0007         AUD_LINKING	.EQ %00000111
  318      0006         AUD_64		.EQ %00000110
  319      0005         AUD_32		.EQ %00000101
  320      0004         AUD_16		.EQ %00000100
  321      0003         AUD_8		.EQ %00000011
  322      0002         AUD_4		.EQ %00000010
  323      0001         AUD_2		.EQ %00000001
  324      0000         AUD_1		.EQ %00000000
  325                   
  326                   * TIM_CONTROLB control bits
  327      0008         TIMER_DONE	.EQ %00001000
  328      0004         LAST_CLOCK	.EQ %00000100
  329      0002         BORROW_IN	.EQ %00000010
  330      0001         BORROW_OUT	.EQ %00000001
  331                   
  332                   
  333 FD20:             AUDIO0		.DS 8	; FD20
  334 FD28:             AUDIO1		.DS 8	; FD28
  335 FD30:             AUDIO2		.DS 8	; FD30
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page    9
                        6502:include/harddefs.i         16:20:20  

  336 FD38:             AUDIO3		.DS 8	; FD38
  337                   * Here's the audio channel offsets
  338      0000         AUD_VOLCNTRL	.EQ 0
  339      0001         AUD_FEEDBACK	.EQ 1
  340      0002         AUD_OUTPUT	.EQ 2
  341      0003         AUD_SHIFT	.EQ 3
  342      0004         AUD_BACKUP	.EQ 4
  343      0005         AUD_CONTROL	.EQ 5
  344      0006         AUD_COUNTER	.EQ 6
  345      0007         AUD_OTHER	.EQ 7
  346                   * The AUD_CONTROL bits are almost identical to the TIM
  347                   * Here's the AUD_CONTROL control bits that are differe
  348                   * control bits.
  349                   * See TIM_CONTROLA above for the other definitions
  350      0080         FEEDBACK_7		.EQ %10000000
  351      0020         ENABLE_INTEGRATE	.EQ %00100000
  352                   
  353                   
  354                   ; Stereo control registers follow
  355                   ; Stereo capability does not exist in all Lynxes
  356                   ; Left and right may be reversed, and if so will be co
  357                   ; release
  358                   
  359 FD40:             		.OR $FD40
  360 FD40:             ATTENREG0	.DS 1	; FD40	; Stereo attenuation registers
  361 FD41:             ATTENREG1	.DS 1	; FD41
  362 FD42:             ATTENREG2	.DS 1	; FD42
  363 FD43:             ATTENREG3	.DS 1	; FD43
  364      00F0         LEFT_ATTENMASK	.EQ %11110000
  365      000F         RIGHT_ATTENMASK	.EQ %00001111
  366                   
  367 FD44:             MPAN		.DS 1	; FD44	; Stereo attenuation select registe
  368                   
  369 FD45:             		.OR $FD50
  370 FD50:             MSTEREO		.DS 1	; FD50	; Stereo channel disable registe
  371                   
  372                   ; bit definitions for MPAN and MSTEREO registers
  373      0080         LEFT3_SELECT	.EQ %10000000
  374      0040         LEFT2_SELECT	.EQ %01000000
  375      0020         LEFT1_SELECT	.EQ %00100000
  376      0010         LEFT0_SELECT	.EQ %00010000
  377      0008         RIGHT3_SELECT	.EQ %00001000
  378      0004         RIGHT2_SELECT	.EQ %00000100
  379      0002         RIGHT1_SELECT	.EQ %00000010
  380      0001         RIGHT0_SELECT	.EQ %00000001
  381                   
  382                   
  383 FD51:             		.OR $FD80
  384 FD80:             INTRST		.DS 1	; FD80	; Interrupt Reset and Set registe
  385 FD81:             INTSET		.DS 1	; FD81
  386                   
  387                   * Interrupt Reset and Set bit definitions
  388      0080         TIMER7_INT	.EQ %10000000
  389      0040         TIMER6_INT	.EQ %01000000
  390      0020         TIMER5_INT	.EQ %00100000
  391      0010         SERIAL_INT	.EQ %00010000
  392      0008         TIMER3_INT	.EQ %00001000
  393      0004         TIMER2_INT	.EQ %00000100
  394      0002         TIMER1_INT	.EQ %00000010
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   10
                        6502:include/harddefs.i         16:20:20  

  395      0001         TIMER0_INT	.EQ %00000001
  396      0004         VERTICAL_INT	.EQ TIMER2_INT
  397      0001         HORIZONTAL_INT	.EQ TIMER0_INT
  398                   
  399 FD82:             		.OR $FD86
  400 FD86:             AUDIN		.DS 1	; FD86	; Audio in -or- cartridge r/w line
  401 FD87:             SYSCTL1		.DS 1	; FD87
  402                   * SYSCTL1 bit definitions
  403      0002         POWERON		.EQ %00000010
  404      0001         CART_ADDR_STROBE .EQ %00000001
  405                   
  406 FD88:             MIKEYHREV	.DS 1	; FD88	; Mikey hardware rev
  407 FD89:             MIKEYSREV	.DS 1	; FD89	; Mikey software rev
  408 FD8A:             IODIR		.DS 1	; FD8A
  409 FD8B:             IODAT		.DS 1	; FD8B
  410                   * Here's the IODIR and IODAT bit definitions
  411      0010         AUDIN_BIT	.EQ %00010000	; note that there is also the 
  412      0010         READ_ENABLE	.EQ %00010000	; same bit for AUDIN_BIT
  413      0008         RESTLESS	.EQ %00001000
  414      0004         NOEXP		.EQ %00000100	; If set, redeye is not connected
  415      0002         CART_ADDR_DATA	.EQ %00000010
  416      0002         CART_POWER_OFF	.EQ %00000010	; same bit for CART_ADDR_
  417      0001         EXTERNAL_POWER	.EQ %00000001
  418                   
  419 FD8C:             SERCTL		.DS 1	; FD8C	; Serial control
  420                   * Here's the SERCTL bit definitions when writing
  421      0080         TXINTEN		.EQ %10000000
  422      0040         RXINTEN		.EQ %01000000
  423                   ;unused		.EQ %00100000	; Leave unused bit 0 for future
  424      0010         PAREN		.EQ %00010000
  425      0008         RESETERR	.EQ %00001000
  426      0004         TXOPEN		.EQ %00000100
  427      0002         TXBRK		.EQ %00000010
  428      0001         PAREVEN		.EQ %00000001
  429                   * Here's the SERCTL bit definitions when reading
  430      0080         TXRDY		.EQ %10000000
  431      0040         RXRDY		.EQ %01000000
  432      0020         TXEMPTY		.EQ %00100000
  433      0010         PARERR		.EQ %00010000
  434      0008         OVERRUN		.EQ %00001000
  435      0004         FRAMERR		.EQ %00000100
  436      0002         RXBRK		.EQ %00000010
  437      0001         PARBIT		.EQ %00000001
  438                   
  439 FD8D:             SERDAT		.DS 1	; FD8D	; Serial data
  440                   
  441                   
  442                   
  443 FD8E:             		.OR $FD90
  444 FD90:             SDONEACK	.DS 1	; FD90	; Suzy done ack
  445 FD91:             CPUSLEEP	.DS 1	; FD91	; zzz
  446 FD92:             DISPCTL		.DS 1	; FD92	; Display control
  447                   * Here are the DISPCTL bit definitions
  448      0008         DISP_COLOR	.EQ %00001000	; must be set to 1
  449      0004         DISP_FOURBIT	.EQ %00000100	; must be set to 1
  450      0002         DISP_FLIP	.EQ %00000010
  451      0001         DMA_ENABLE	.EQ %00000001	; must be set to 1
  452                   
  453 FD93:             PBKUP		.DS 1	; FD93	; Display's magic 'P' count
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   11
                        6502:include/harddefs.i         16:20:20  

  454 FD94:             DISPADRL	.DS 1	; FD94	; Start of display
  455 FD95:             DISPADRH	.DS 1	; FD95
  456                   
  457 FD96:             		.OR $FD9C
  458 FD9C:             MTEST0		.DS 1	; FD9C	; System test vectors, see spec f
  459 FD9D:             MTEST1		.DS 1	; FD9D
  460 FD9E:             MTEST2		.DS 1	; FD9E
  461                   
  462                   * The Color registers
  463 FD9F:             		.OR $FDA0
  464 FDA0:             GREEN0		.DS 1	; FDA0
  465 FDA1:             GREEN1		.DS 1	; FDA1
  466 FDA2:             GREEN2		.DS 1	; FDA2
  467 FDA3:             GREEN3		.DS 1	; FDA3
  468 FDA4:             GREEN4		.DS 1	; FDA4
  469 FDA5:             GREEN5		.DS 1	; FDA5
  470 FDA6:             GREEN6		.DS 1	; FDA6
  471 FDA7:             GREEN7		.DS 1	; FDA7
  472 FDA8:             GREEN8		.DS 1	; FDA8
  473 FDA9:             GREEN9		.DS 1	; FDA9
  474 FDAA:             GREENA		.DS 1	; FDAA
  475 FDAB:             GREENB		.DS 1	; FDAB
  476 FDAC:             GREENC		.DS 1	; FDAC
  477 FDAD:             GREEND		.DS 1	; FDAD
  478 FDAE:             GREENE		.DS 1	; FDAE
  479 FDAF:             GREENF		.DS 1	; FDAF
  480                   
  481 FDB0:             BLUERED0	.DS 1	; FDB0
  482 FDB1:             BLUERED1	.DS 1	; FDB1
  483 FDB2:             BLUERED2	.DS 1	; FDB2
  484 FDB3:             BLUERED3	.DS 1	; FDB3
  485 FDB4:             BLUERED4	.DS 1	; FDB4
  486 FDB5:             BLUERED5	.DS 1	; FDB5
  487 FDB6:             BLUERED6	.DS 1	; FDB6
  488 FDB7:             BLUERED7	.DS 1	; FDB7
  489 FDB8:             BLUERED8	.DS 1	; FDB8
  490 FDB9:             BLUERED9	.DS 1	; FDB9
  491 FDBA:             BLUEREDA	.DS 1	; FDBA
  492 FDBB:             BLUEREDB	.DS 1	; FDBB
  493 FDBC:             BLUEREDC	.DS 1	; FDBC
  494 FDBD:             BLUEREDD	.DS 1	; FDBD
  495 FDBE:             BLUEREDE	.DS 1	; FDBE
  496 FDBF:             BLUEREDF	.DS 1	; FDBF
  497                   
  498                   
  499                   * The Map Control register
  500 FDC0:             		.OR $FFF9
  501 FFF9:             MAPCTL		.DS 1	; FFF9
  502                   * These are the MAPCTL flag definitions
  503      0080         TURBO_DISABLE	.EQ %10000000
  504      0008         VECTOR_SPACE	.EQ %00001000	; 1 maps RAM into specified
  505      0004         ROM_SPACE	.EQ %00000100
  506      0002         MIKEY_SPACE	.EQ %00000010
  507      0001         SUZY_SPACE	.EQ %00000001
  508                   
  509                   * 65C02 hardware interrupt and reset vectors
  510 FFFA:             CPU_NMI		.DS 2	; FFFA
  511 FFFC:             CPU_RESET	.DS 2	; FFFC
  512 FFFE:             CPU_IRQ			; FFFE
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   12
                        6502:include/harddefs.i         16:20:20  

  513                   
  514                   
  515                   
   32                   	.IN 6502:include/sprite.i
    1                   * Here are the sprite control block offsets
    2                   * The final offset, SCB_SIZEOF, contains the byte-size
    3                   * Note that the palette will move up if any of HSIZE, 
    4                   * are not used
    5      0000         SCB_CTRL0	.EQ 0
    6      0001         SCB_CTRL1	.EQ {SCB_CTRL0+1}
    7      0002         SCB_CTRL2	.EQ {SCB_CTRL1+1}
    8      0003         SCB_NEXT	.EQ {SCB_CTRL2+1}
    9      0005         SCB_DATA	.EQ {SCB_NEXT+2}
   10      0007         SCB_HPOS	.EQ {SCB_DATA+2}
   11      0009         SCB_VPOS	.EQ {SCB_HPOS+2}
   12      000B         SCB_HSIZE	.EQ {SCB_VPOS+2}
   13      000D         SCB_VSIZE	.EQ {SCB_HSIZE+2}
   14      000F         SCB_STRETCH	.EQ {SCB_VSIZE+2}
   15      0011         SCB_TILT	.EQ {SCB_STRETCH+2}
   16      0013         SCB_PALETTE	.EQ {SCB_TILT+2}
   17                   
   18      001B         SCB_SIZEOF	.EQ {SCB_PALETTE+8}
   19                   
   20                   
   21                   
   33                   	.IN 6502:include/hprint.i
    1                   
    2                   * === hprint.i =======================================
    3                   * 
    4                   * HandyPrint Include File  --  Handy Software
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date       Name              Description
   10                   * ---------  ----------------  -----------------------
   11                   * 8 Feb 89   =RJ Mical=        Created this file!
   12                   * 
   13                   * ====================================================
   14                   
   15                   
   16                   
   17                   * These are the different font types you can request
   18      0001         HPR_DIGIT	.EQU $01
   19      0002         HPR_UPPER	.EQU $02
   20      0004         HPR_LOWER	.EQU $04
   21      0008         HPR_PUNC	.EQU $08
   22      0010         HPR_OTHER	.EQU $10
   23                   
   24                   
   25                   * These are some common font types
   26      0006         HPR_ALPHA	.EQU HPR_UPPER+HPR_LOWER
   27      000B         HPR_BASIC	.EQU HPR_DIGIT+HPR_UPPER+HPR_PUNC
   28      001F         HPR_ALL		.EQU HPR_DIGIT+HPR_UPPER+HPR_LOWER+HPR_PUNC+H
   29                   
   30                   	.END
   34                   
   35                   	.IN 6502:macros/zpage.mac
    1                   ; ----------------------------------------------------
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   13
                        6502:macros/zpage.mac           16:20:20  

    2                   ; Zero-Page memory allocation macros
    3                   ;  Created:  Mike Ireton, 10/07/88
    4                   ; Modified:  RJ Mical, 14 Nov 88
    5                   ; 
    6                   ; BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPAGE) 
    7                   ; and END_ZPAGE (or END_ALLOCATE_ZEROPAGE) are two ver
    8                   ; for safely allocating zero-page memory space in any 
    9                   ; If you use these macros around every z-page memory a
   10                   ; the macros will track your allocations and dole out 
   11                   ; memory locations every time you ask for them.  This 
   12                   ; emulator to make z-page allocations without stepping
   13                   ; allows you to make z-page allocations locally in the
   14                   ; rather than making all your allocations in one file 
   15                   ; down all free zero page locations and figuring out w
   16                   ; 
   17                   ; -- TO USE ---
   18                   ; This file defines a redefinable value named NEXTZPG,
   19                   ; to 0.  NEXTZPG holds the address of the next availab
   20                   ; which in most cases will be at memory location $00. 
   21                   ; zero-page memory locations starting from $00, you ca
   22                   ; a value of your own choice after you've included thi
   23                   ; used any of this file's macros.  For example, say th
   24                   ; to stash away memory locations $00 through $0F.  At 
   25                   ; before calling BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPA
   26                   ;                .IN    6502:macros/zpage.mac
   27                   ;   NEXTZPG     .=     $10
   28                   ; 
   29                   ; Then, when the need arises for zero page variables, 
   30                   ; BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPAGE).  This will
   31                   ; labels and re-assign the assembler's location counte
   32                   ; zero-page (as pointed to by the current NEXTZPG).  A
   33                   ; end with END_ZPAGE (or END_ALLOCATE_ZEROPAGE), which
   34                   ; z-page offset and restore the program counter.  For 
   35                   ;   RoutineX                        RoutineX
   36                   ;           BEGIN_ZPAGE                     BEGIN_ALLO
   37                   ;   ZPG1    .DS    2      - or -    ZPG1    .DS    2
   38                   ;   COUNT   .DS    1                COUNT   .DS    1
   39                   ;           END_ZPAGE                       END_ALLOCA
   40                   ;           STA    ZPG1                     STA    ZPG
   41                   ; 
   42                   ; Remember that you should only define data areas betw
   43                   ; Anything else is dangerous and should be avoided (an
   44                   ; you should find another line of work... :-)  )
   45                   ; 
   46                   ; Also, note that these macros use another redefinable
   47                   ; record and restore the program counter 
   48                   
   49      0000         NEXTZPG	.= $00
   50                   
   51                   	#MACRO BEGIN_ZPAGE
   52 MACRO             TEMPORG	  .= *
   53 MACRO             	  .ORG NEXTZPG
   54                   	#ENDM
   55                   
   56                   	#MACRO BEGIN_ALLOCATE_ZEROPAGE
   57 MACRO             	  BEGIN_ZPAGE
   58                   	#ENDM
   59                   
   60                   
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   14
                        6502:macros/zpage.mac           16:20:20  

   61                   	#MACRO END_ZPAGE
   62 MACRO             NEXTZPG	  .= *
   63 MACRO             	  #IF NEXTZPG > $0100
   64 MACRO             	    .ECHO "ERROR:  z-page allocations went out of pag
   65 MACRO             	  #ENDIF
   66 MACRO             	  .ORG TEMPORG
   67                   	#ENDM
   68                   
   69                   	#MACRO END_ALLOCATE_ZEROPAGE
   70 MACRO             	  END_ZPAGE
   71                   	#ENDM
   72                   
   73                   
   74                   
   36                   	.IN 6502:src/syszpage.src
    1                   
    2                   * === syszpage.src ===================================
    3                   *
    4                   * System Zero-Page Data Allocations  --  the 6502 Side
    5                   *
    6                   * Copyright (C) 1988, Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   *
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   13                   * 19 Apr 89	-RJ		Added description of rule for using s
   14                   * 22 Mar 89	-RJ		Removed the audio variables from this
   15                   * 20 Mar 89	RG Goudy	Added several new zpage pointers
   16                   * 26 Jan 89	-RJ		Got rid of Interruptus
   17                   * 26-Dec-88	=RJ Mical=	Created this file from sysdata.
   18                   *
   19                   * ====================================================
   20                   
   21                   
   22                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   23                   *
   24                   * This file should be included before any source code 
   25                   *
   26                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   27                   
   28                   
   29                   
   30                   * System programmers note:  the sysptrs are defined as
   31                   * pointers.  These can't be used during interrupt code
   32                   * no promises regarding the usage of these for anythin
   33                   * while using one of these is a dangerous thing to do
   34                   		BEGIN_ZPAGE
    1      FFFE       + TEMPORG	  .= *
    2 FFFE:           + 	  .ORG NEXTZPG
    3                 + 
   35 0000:             sysptr		.DS 2
   36 0002:             sysptr2		.DS 2
   37 0004:             sysptr3		.DS 2
   38                   		END_ZPAGE
    1      0006       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   15
                        6502:src/syszpage.src           16:20:20  

    5 0006:           + 	  .ORG TEMPORG
    6                 + 
   39                   
   40                   
   41                   
   37                   
   38                   	.IN 6502:macros/sys.mac
    1                   ; Wednesday 27-Jun-90 11:49:43
    2                   * == sys.mac =========================================
    3                   *
    4                   * System Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 20-Jun-90	SHL		RAMCART_USER support added
   12                   * 28-Mar-90	SHL		INITINT new clears and resets serial 
   13                   *				if SERIALPORT_USER defined
   14                   * 22-Mar-90	SHL		INITINT now vectors all IRQS to IntRe
   15                   *				instead of user supplied RTS
   16                   * 20-Mar-90	SHL		Removed SEI, CLI from INITINT macro
   17                   * 7-Mar-90	SHL		DISPCTL_RAM now initialized in INITSYS
   18                   * 9-Feb-90	SHL		Modified BRK_USER support to force bre
   19                   *				Howard board, unless user uses the SET_BRK
   20                   *				macro to redirect breaks
   21                   *				INITINT is now required before any use of
   22                   *				INITEOF, INITEOL or SET_DISPLAY... macros
   23                   *				Added HBRK macro
   24                   *				Moved initialization of MAPCTL to INITSYS
   25                   *				Removed HFIX1 macros
   26                   * 31 May 89	-RJ		Added BRK_USER support to INITINT mac
   27                   *				Killed call to InitSys
   28                   *				Added SET_BRK macro
   29                   * 25 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   30                   * 22 May 89	-RJ		Changed init'ing of IODIR's LIGHT_OFF
   31                   *				RESTLESS, also now init IODAT too
   32                   * 16 May 89	-RJ		Added setting TXOPEN to SERCTL in INI
   33                   * 11 May 89	-RJ		Moved declaration of sysIntTable to s
   34                   * 10 May 89	-RJ		Changed CART_STROBE to CART_ADDR_DATA
   35                   * 1 May 89	-RJ		Added the INITINTS macro for user-cont
   36                   *				interrupt table handling.  Also defined
   37                   *				and allow redefinition of sysIntTable, which
   38                   *				is now used in the display.src file
   39                   * 20 Apr 89	-RJ		Added initialization of IODIR and IOD
   40                   * 6 Apr 89	-RJ		Moved init of SPRSYS into INITSYS
   41                   * 19 Mar 89	-RJ		Added HFIX1 macros, modified INITSYS 
   42                   * 18 Mar 89	=RJ Mical=	Created this file!
   43                   *
   44                   * ====================================================
   45                   
   46                   
   47                   * HBRK macro forces a break on a Howard board.  On a c
   48                   * executed as one-byte one-cycle NOP.
   49                   	#MACRO HBRK
   50 MACRO             	.HS 13
   51                   	#ENDM
   52                   
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   16
                        6502:macros/sys.mac             16:20:20  

   53                   
   54                   * Do some needed hardware initialization to get system
   55                   	#MACRO INITSYS
   56 MACRO             
   57 MACRO             	LDA #DISP_COLOR+DISP_FOURBIT+DMA_ENABLE
   58 MACRO             	STA DISPCTL_RAM
   59 MACRO             
   60 MACRO             	LDA #LEFTHAND		; the equates have been defined to pre
   61 MACRO             	STA SPRSYS_RAM
   62 MACRO             	STA SPRSYS
   63 MACRO             
   64 MACRO             	LDA #VECTOR_SPACE	; map in all RAM except for CPU vec
   65 MACRO             	STA MAPCTL
   66 MACRO             
   67 MACRO             	;------	Set parallel CART_ADDR_DATA and RESTLESS as o
   68 MACRO             	;------ If RAMCART_USER, set AUDIN (READ_ENABLE) as o
   69 MACRO             	;------	all others as input
   70 MACRO              #IFDEF RAMCART_USER
   71 MACRO             	LDA #CART_ADDR_DATA+RESTLESS+READ_ENABLE
   72 MACRO              #ELSE
   73 MACRO             	LDA #CART_ADDR_DATA+RESTLESS
   74 MACRO              #ENDIF
   75 MACRO             	STA IODAT_RAM
   76 MACRO             	STA IODAT
   77 MACRO             	STA IODIR_RAM
   78 MACRO             	STA IODIR
   79 MACRO             
   80 MACRO             	LDA #TXOPEN	; Turn off serial IRQs before starting
   81 MACRO             	STA SERCTL	;  and make sure serial port is open-colle
   82 MACRO             
   83 MACRO             	  #IFDEF AUTO_TIMEOUT_USER
   84 MACRO             		STZ TimeoutCount+1
   85 MACRO             		STZ TimeoutCount+2
   86 MACRO             	  #ENDIF
   87 MACRO             
   88                   	#ENDMACRO
   89                   
   90                   
   91                   	#MACRO	INITINT
   92 MACRO             sysIntTable	.EQ ?0
   93 MACRO             
   94 MACRO             		;------	Set the break and int vectors to point to ou
   95 MACRO             		LDA #<UserIntHandler
   96 MACRO             		STA CPU_IRQ
   97 MACRO             		LDA #>UserIntHandler
   98 MACRO             		STA CPU_IRQ+1
   99 MACRO             
  100 MACRO             		LDX #8*2-1
  101 MACRO             ??	.= *
  102 MACRO             		  LDA #>IntReturn
  103 MACRO             		  STA ?0,X
  104 MACRO             		  DEX
  105 MACRO             		  LDA #<IntReturn
  106 MACRO             		  STA ?0,X
  107 MACRO             		  DEX
  108 MACRO             		 BPL ??
  109 MACRO             
  110 MACRO             	  #IFDEF BRK_USER
  111 MACRO             		LDA CPU_NMI
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   17
                        6502:macros/sys.mac             16:20:20  

  112 MACRO             		STA BRK_vector+2
  113 MACRO             		LDA CPU_NMI+1
  114 MACRO             		STA BRK_vector+3
  115 MACRO             	  #ENDIF ; of #IFDEF BRK_USER
  116 MACRO             
  117 MACRO             	  #IFDEF SERIALPORT_USER
  118 MACRO             		lda #TXOPEN
  119 MACRO             		sta SERCTL
  120 MACRO             		lda #SERIAL_INT
  121 MACRO             		sta INTRST
  122 MACRO             	  #ENDIF
  123 MACRO             
  124                   	#ENDMACRO
  125                   
  126                   
  127                   	#MACRO SET_BRK
  128 MACRO             		LDA #<?0
  129 MACRO             		STA BRK_vector+2
  130 MACRO             		LDA #>?0
  131 MACRO             		STA BRK_vector+3
  132 MACRO             		LDA #$EA	; nop
  133 MACRO             		STA BRK_vector
  134                   	#ENDMACRO
  135                   
  136                   
  137                   	#MACRO RESET_TIMEOUT
  138 MACRO             		STZ TimeoutCount+1	; else reset timeout counter
  139 MACRO             		STZ TimeoutCount+2
  140                   	#ENDMACRO
  141                   
  142                   
  143                   	#MACRO ECHO_VALUE
  144 MACRO             		.ECHO "Value of ?0 is ?%d0 ($?%x0)"
  145                   	#ENDMACRO
  146                   
  147                   
   39                   	.IN 6502:macros/sprite.mac
    1                   ; Tue Sep 18 16:53:24 1990
    2                   * == sprite.mac ======================================
    3                   *
    4                   * Sprite Rendering Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 18-Sep-90	SHL		Added code to work around RICOH bug
   12                   *				and support for the NO_RICOH_PATCH switch
   13                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   14                   *				Shortened INITSUZY (removed unneeded STZs)
   15                   *				Shortened WAITSUZY (removed NOPs)
   16                   * 8 May 89	-RJ		Rewrote the SPRITES macro to use the f
   17                   *				of the new assembler, added the RESPRITE macro
   18                   * 6 Apr 89	-RJ		Moved SPRSYS init out of INITSUZY into
   19                   * 2 Feb 89	James Donald	Fix to WAITSUZY macro makes BC
   20                   *				to the correct location
   21                   * 26 Jan 89	-RJ		Incorporated Steve's WAITSUZY change,
   22                   *				rid of all references to Interruptus
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   18
                        6502:macros/sprite.mac          16:20:20  

   23                   * 18 Jan 89	-RJ		INITSUZY nows initializes SPRSYS and
   24                   *				SPRSYS_RAM to zero
   25                   * 16 Jan 89	SHL		Modified WAITSUZY to wait until SUZY 
   26                   *				instead of waiting for interrupts to not
   27                   *				happen.
   28                   * 30 Dec 88	-RJ		Changed errant #<?0 to #>?0 in SPRITE
   29                   *				Non-HANDYIO SPRITES macro no longer sets a
   30                   *				DISPLAY-request bit in X register
   31                   *				Moved WAITSUZY above SPRITES
   32                   * 26 Dec 88	-RJ		Added INITSUZY and WAITSUZY macros
   33                   * 24 Dec 88	-RJ		Got rid of the PSPRITE macro.  Redefi
   34                   *				SPRITES so that it doesn't automatically do
   35                   *				a DISPLAY anymore.
   36                   * Early 88	=RJ Mical=	Created this file!
   37                   *
   38                   * ====================================================
   39                   
   40                   
   41                   
   42                   * The INITSUZY macro sets up Suzy to do sprites correc
   43                   * to render sprites (which you do with the SPRITES mac
   44                   * the INITSUZY macro first
   45                   		#MACRO	INITSUZY
   46 MACRO             		LDA	#$F3
   47 MACRO             		STA	SPRINIT
   48 MACRO             		LDA	#$7F
   49 MACRO             		STA	HSIZOFFL
   50 MACRO             		STA	VSIZOFFL
   51 MACRO             		LDA	#$01
   52 MACRO             		STA	SUZYBUSEN
   53 MACRO             		STZ	SDONEACK
   54                   		#ENDMACRO
   55                   
   56                   
   57                   
   58                   * The WAITSUZY macro allows us to wait for Suzy to be 
   59                   * 16-Jan-89 - SHL - modified to wait until SUZY is fin
   60                   * politely if she is done yet.
   61                   * NOTE:  this macro now presumes that the SPRITEWORKIN
   62                   * is bit 0.
   63                   
   64      FALSE        	#IFDEF NO_RICOH_PATCH
   75                   	#ELSE
   76                   
   77                   		#MACRO	WAITSUZY
   78 MACRO             ??1	.= *
   79 MACRO             		lda #SUZY_SPACE
   80 MACRO             		tsb MAPCTL		; disable SUZY addresses
   81 MACRO             		STZ	CPUSLEEP
   82 MACRO             		trb MAPCTL		; reenable SUZY addresses
   83 MACRO             		LDA	SPRSYS		; check to see if SUZY is done
   84 MACRO             		LSR	A		; get bit 0 into carry
   85 MACRO             		BCS	??1		; nope, let's wait some more
   86 MACRO             		STZ	SDONEACK
   87                   		#ENDMACRO
   88                   
   89                   	#ENDIF ;DEF NO_RICOH_PATCH
   90                   
   91                   
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   19
                        6502:macros/sprite.mac          16:20:20  

   92                   
   93                   * The SPRITES macro causes sprites to be rendered star
   94                   * sprite address arg.
   95                   *
   96                   * If you are going to render more than one sprite list
   97                   * display, you should use the SPRITES macro for the fi
   98                   * the RESPRITE macro for all following lists.
   99                   *
  100                   * Note that this macro does not cause the buffer to be
  101                   * the buffer displayed, you need to use a display macr
  102                   *
  103                   * The first arg is an address of either the first SCB 
  104                   * the address of a variable that contains the address 
  105                   * The second arg to the SPRITES macro describes whethe
  106                   * an absolute or indirect SCB address.
  107                   * The second arg should be 0 or 1, standing for:
  108                   *     0 = first arg is the address is the first SCB to
  109                   *     1 = first arg is the addr of a variable pointing
  110                   		#MACRO	SPRITES
  111 MACRO             		#IF	?1 <> 0
  112 MACRO             		  LDA	?0
  113 MACRO             		  STA	SCBNEXTL
  114 MACRO             		  LDA	?0+1
  115 MACRO             		  STA	SCBNEXTH
  116 MACRO             		#ELSE
  117 MACRO             		  LDA	#<?0
  118 MACRO             		  STA	SCBNEXTL
  119 MACRO             		  LDA	#>?0
  120 MACRO             		  STA	SCBNEXTH
  121 MACRO             		#ENDIF
  122 MACRO             
  123 MACRO             		LDA	RenderBuffer
  124 MACRO             		STA	VIDBASL
  125 MACRO             		LDA	RenderBuffer+1
  126 MACRO             		STA	VIDBASH
  127 MACRO             
  128 MACRO             		STZ	SDONEACK
  129 MACRO             
  130 MACRO             		LDA	#$01
  131 MACRO             		STA	SPRGO
  132 MACRO             		WAITSUZY
  133                   		#ENDMACRO
  134                   
  135                   
  136                   
  137                   * The RESPRITE macro causes sprites to be rendered sta
  138                   * sprite address arg.  This macro should be used by th
  139                   * want to render more than one sprite list when buildi
  140                   * This macro is identical to the SPRITES macro except 
  141                   * startup code isn't included.  You should call You sh
  142                   * RESPRITE macro only after a call to the SPRITES macr
  143                   *
  144                   * Note that this macro does not cause the buffer to be
  145                   * the buffer displayed, you need to use a display macr
  146                   *
  147                   * The first arg is an address of either the first SCB 
  148                   * the address of a variable that contains the address 
  149                   * The second arg to the SPRITES macro describes whethe
  150                   * an absolute or indirect SCB address.
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   20
                        6502:macros/sprite.mac          16:20:20  

  151                   * The second arg should be 0 or 1, standing for:
  152                   *     0 = first arg is the address is the first SCB to
  153                   *     1 = first arg is the addr of a variable pointing
  154                   		#MACRO	RESPRITE
  155 MACRO             		#IF	?1 <> 0
  156 MACRO             		  LDA	?0
  157 MACRO             		  STA	SCBNEXTL
  158 MACRO             		  LDA	?0+1
  159 MACRO             		  STA	SCBNEXTH
  160 MACRO             		#ELSE
  161 MACRO             		  LDA	#<?0
  162 MACRO             		  STA	SCBNEXTL
  163 MACRO             		  LDA	#>?0
  164 MACRO             		  STA	SCBNEXTH
  165 MACRO             		#ENDIF
  166 MACRO             
  167 MACRO             		STZ	SDONEACK
  168 MACRO             
  169 MACRO             		LDA	#$01
  170 MACRO             		STA	SPRGO
  171 MACRO             		WAITSUZY
  172                   		#ENDMACRO
  173                   
  174                   
  175                   
   40                   	.IN 6502:macros/display.mac
    1                   ; Tuesday 27-Mar-90 10:58:38
    2                   * === display.mac ====================================
    3                   *
    4                   * Display Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1988,1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 27-Mar-90	SHL		Removed BufferAddrL, BufferAddrH
   12                   * 20-Mar-90	SHL		SETDISP... macros no longer SEI/CLI a
   13                   *				be invoked when IRQs disabled
   14                   *				Tightened up WAITEOF, WAITNEOF macros
   15                   * 7-Mar-90	SHL		Removed the DISPLAY_ON and DISPLAY_OFF
   16                   *				Moved initialization of DISPCTL_RAM to INITSYS
   17                   *				in sys.mac
   18                   * 27-Feb-90	SHL		Removed unnecessary STZs from HOFF8,V
   19                   * 26-Feb-90	SHL		Minor code tightening
   20                   * 9-Feb-90	SHL		Removed all references to HFIX1
   21                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   22                   *				General cleanup and prettification
   23                   * 31 May 89	Larry Abel	Changed WAITEOF and WAITEOL to 
   24                   * 27 Apr 89	RG Goudy	Changed SETDISP_50 PCOUNT to $31
   25                   * 19 Apr 89	-RJ		DISPCTL bit definitions now used
   26                   * 6 Apr 89	-RJ		Added SETDISP_75
   27                   * 19 Mar 89	-RJ		Added HFIX1 macros to SETDISP
   28                   * 16 Mar 89	-RJ		Changed the DISPLAY macro to remove t
   29                   *				forward reference to DisplayBuffer forbidden
   30                   *				by the new assembler
   31                   * 13 Feb 89	-RJ		Added JSR InitDisplayer to SETDISP wh
   32                   *				EOF_USER isn't defined.  Also, removed the
   33                   *				invocation of DISPLAY from DBUF_DISPLAY.
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   21
                        6502:macros/display.mac         16:20:20  

   34                   *				DISPLAY now happens during EOF processing.
   35                   *				Because of this, the EOF interrupt is now
   36                   *				always turned on even if not EOF_USER.
   37                   *				DBUF_DISPLAY now writes RenderBuffer to
   38                   *				DisplayBuffer.  DISPLAY now reads from there.
   39                   * 26 Jan 89	-RJ		Deleted SETDISP_30/25/20/15/10 macros
   40                   * 16 Jan 89	SHL		Modified SETDISP macro to only enable
   41                   *				interrupts needed according to the EOF_USER
   42                   *				and EOL_USER flags
   43                   * 5 Jan 89	-RJ		Set interrupt disable before writing t
   44                   *				display hardware addresses.
   45                   *				Removed writing of DISPCTL from FLIP macro.
   46                   *				Added writing of DISPCTL to DISPLAY macro.
   47                   * 30 Dec 88	-RJ		Moved DISPLAY macro to top of DBUF_DI
   48                   *				rid of redundant assignment there
   49                   * 28 Dec 88	-RJ		Changed SETCOLL to store to COLLBASL,
   50                   * 27 Dec 88	-RJ		Added DISPLAY, DISP_AX, DISP_AY,
   51                   *				SETDISP_20/15/10
   52                   * 24-Dec-88	-RJ		Renamed DISPLAY to DBUF_DISPLAY.  Cha
   53                   *				ptr references to sysptr
   54                   * 23-Dec-88	-RJ		Modified the DISPLAY macro to support
   55                   *				Added RGB16_I macro.
   56                   * 22-Dec-88	-RJ		Added many display macros:  SETDISP_6
   57                   *				SETDISP, SETDBUF, SETCOLL, DISPLAY_ON,
   58                   *				DISPLAY_OFF, INITEOF, WAITEOF, and FLIP.
   59                   * Early 88	=RJ Mical=	Created this file!
   60                   *
   61                   * ====================================================
   62                   
   63                   
   64                   
   65                   * The SETDISP macro sets up the horizontal and vertica
   66                   * (thereby defining the frame rate) and sets the magic
   67                   * initializes the DISPCTL_RAM shadow mask of the hardw
   68                   * The macro expects 5 arguments:
   69                   *     - the backup value for the horizontal timer
   70                   *     - the control bits for the horiz timer
   71                   *     - the backup value for the vertical timer
   72                   *     - the control bits for the vertical timer
   73                   *     - the magic 'P' value
   74                   		#MACRO	SETDISP
   75 MACRO             
   76 MACRO             		LDA	#?0
   77 MACRO             		STA	HCOUNT+TIM_BACKUP
   78 MACRO             	#IFDEF EOL_USER
   79 MACRO             		lda #?1|%10000000
   80 MACRO             	#ELSE
   81 MACRO             		lda #?1&%01111111
   82 MACRO             	#ENDIF
   83 MACRO             		STA	HCOUNT+TIM_CONTROLA
   84 MACRO             		LDA	#?2
   85 MACRO             		STA	VCOUNT+TIM_BACKUP
   86 MACRO             		lda #?3|%10000000
   87 MACRO             		STA	VCOUNT+TIM_CONTROLA
   88 MACRO             
   89 MACRO             		LDA	#?4
   90 MACRO             		STA	PBKUP
   91 MACRO             	#IFNDEF	EOF_USER
   92 MACRO             		JSR	InitDisplayer
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   22
                        6502:macros/display.mac         16:20:20  

   93 MACRO             	#ENDIF
   94                   		#ENDMACRO
   95                   
   96                   
   97                   
   98                   * These macros allow you to easily set up a 'standard'
   99                   		#MACRO SETDISP_75
  100 MACRO             		SETDISP	$7E,$98,$68,$9F,$20
  101                   		#ENDMACRO
  102                   
  103                   		#MACRO SETDISP_60
  104 MACRO             		SETDISP	$9E,$98,$68,$9F,$29
  105                   		#ENDMACRO
  106                   
  107                   		#MACRO SETDISP_50
  108 MACRO             		SETDISP	$BD,$98,$68,$9F,$31
  109                   		#ENDMACRO
  110                   
  111                   
  112                   
  113                   * The SETDBUF macro sets up the systems awareness of t
  114                   * to use for the display.  The macro wants two argumen
  115                   * the two buffers you will be using for your displays.
  116                   * the two buffers by calling this macro, DBUF_DISPLAY 
  117                   * do all the double-buffer display work for you automa
  118                   * At any time after calling this routine, the address 
  119                   * off-display buffer can be found in the variable Rend
  120                   		#MACRO	SETDBUF
  121 MACRO             		LDA	#<?0
  122 MACRO             		STA	RenderBuffer
  123 MACRO             		LDA	#>?0
  124 MACRO             		STA	RenderBuffer+1
  125 MACRO             		LDA	#<?1
  126 MACRO             		STA	DisplayBuffer
  127 MACRO             		LDA	#>?1
  128 MACRO             		STA	DisplayBuffer+1
  129 MACRO             		STZ	DisplayFlags
  130                   		#ENDMACRO
  131                   
  132                   
  133                   * The SETCOLL macro sets up the hardware and system so
  134                   * hardware collisions for you.  The macro expects two 
  135                   * the address of your 8K collision buffer, and the off
  136                   * byte of your SCB to the SCB's collision depository b
  137                   		#MACRO	SETCOLL
  138 MACRO             		LDA	#<?0
  139 MACRO             		STA	COLLBASL
  140 MACRO             		LDA	#>?0
  141 MACRO             		STA	COLLBASH
  142 MACRO             		LDA	#<?1
  143 MACRO             		STA	COLLOFFL
  144 MACRO             		LDA	#>?1
  145 MACRO             		STA	COLLOFFH
  146                   		#ENDMACRO
  147                   
  148                   
  149                   
  150                   * The INITEOF macro is used to initialize the end-of-f
  151                   * You should invoke this macro only once, any time bef
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   23
                        6502:macros/display.mac         16:20:20  

  152                   * of WAITEOF.
  153      TRUE         	#IFDEF	EOF_USER
  154                   		#MACRO	INITEOF
  155 MACRO             		JSR	InitEOF
  156                   		#ENDMACRO
  157                   	#ENDIF
  158                   
  159                   
  160                   * The INITEOL macro is used to initialize the end-of-l
  161                   * You should invoke this macro only once, any time bef
  162                   * of WAITEOL.
  163      FALSE        	#IFDEF	EOL_USER
  167                   	#ENDIF
  168                   
  169                   
  170                   * The WAITEOF macro allows the programmer to wait unti
  171                   * hardware has just finished displaying the end-of-fra
  172                   * There's a short while (about 3 display lines of time
  173                   * hardware starts working on the first line of the new
  174                   * after end-of-frame it's safe to do stuff like change
  175                   * palette and things like that there
  176                   *??? Note that this macro currently provides only a cl
  177                   *??? EOF timing.  The EOF interrupt handler needs a bi
  178                   *??? get timing just right
  179                   		#MACRO	WAITEOF
  180 MACRO             		LDA	#DISPLAY_EOFFLAG
  181 MACRO             		TRB	DisplayFlags
  182 MACRO             systemp		.=	*
  183 MACRO             		BIT	DisplayFlags
  184 MACRO             		BEQ	systemp
  185                   		#ENDMACRO
  186                   
  187                   * The WAITNEOF macro waits until at least one EOF inte
  188                   * the last time the DISPLAY_EOFFLAG bit was reset
  189                   
  190                   		#MACRO	WAITNEOF
  191 MACRO             systemp		.=	*
  192 MACRO             		bit	DisplayFlags
  193 MACRO             		BPL	systemp		; assumes DISPLAY_EOFFLAG = $80
  194                   		#ENDMACRO
  195                   
  196                   
  197                   
  198                   * The WAITEOL macro allows the programmer to wait unti
  199                   * hardware has just finished displaying the end-of-lin
  200                   * There's a short while (many pixels of time) before t
  201                   * hardware starts working on the first pixel of the ne
  202                   * after end-of-line it's safe to do stuff like change 
  203                   * palette and things like that there
  204                   *??? Note that this macro currently provides only a cl
  205                   *??? EOL timing.  The EOL interrupt handler needs a bi
  206                   *??? get the timing just right
  207                   		#MACRO	WAITEOL
  208 MACRO             
  209 MACRO             		LDA	#DISPLAY_EOLFLAG
  210 MACRO             		TRB	DisplayFlags
  211 MACRO             systemp		.=	*
  212 MACRO             		BIT	DisplayFlags
  213 MACRO             		BEQ	systemp
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   24
                        6502:macros/display.mac         16:20:20  

  214                   		#ENDMACRO
  215                   
  216                   
  217                   		#MACRO	WAITNEOL
  218 MACRO             systemp		.=	*
  219 MACRO             		BIT	DisplayFlags
  220 MACRO             		BVC	systemp		; presumes that EOLFLAG equals $40
  221                   		#ENDMACRO
  222                   
  223                   
  224                   
  225                   * The FLIP macro does everything you need to flip the 
  226                   * The current orientation of the display should be tra
  227                   * code unless you happen to be rendering directly into
  228                   * can check the DISPLAY_SWAPFLAG of the DisplayFlags v
  229                   * whether or not the display is currently flipped.
  230                   		#MACRO	FLIP
  231 MACRO             		LDA	DISPCTL_RAM
  232 MACRO             		EOR	#DISP_FLIP
  233 MACRO             		STA	DISPCTL_RAM
  234 MACRO             		LDA	SPRSYS_RAM
  235 MACRO             		EOR	#LEFTHAND
  236 MACRO             		STA	SPRSYS_RAM
  237 MACRO             		STA	SPRSYS
  238                   		#ENDMACRO
  239                   
  240                   
  241                   
  242                   * The DBUF_DISPLAY macro does the double-buffering swa
  243                   * The macro causes the current offscreen buffer to be 
  244                   * as the buffer that will be displayed starting with t
  245                   * Also, it sets things up such that the current displa
  246                   * the new off-display rendering buffer that sprites wi
  247                   * with subsequent calls to SPRITES.
  248                   * Note that this macro doesn't swap the display buffer
  249                   * rather it sets things up for the buffers to be swapp
  250                   * the display is finished displaying the current on-di
  251                   * If you want to wait until just after the buffers are
  252                   * then you should use the WAITEOF macro immediately af
  253                   		#MACRO	DBUF_DISPLAY
  254 MACRO             ;!!! DISPLAY used to be called here in the DBUF macro.
  255 MACRO             ;!!! called during the end-of-frame handling
  256 MACRO             ;!!!		DISPLAY
  257 MACRO             
  258 MACRO             		PHP
  259 MACRO             		SEI
  260 MACRO             
  261 MACRO             
  262 MACRO             		;------	While still protected by the SEI,
  263 MACRO             		;------	copy RenderBuffer to DisplayBuffer
  264 MACRO             		LDA	RenderBuffer
  265 MACRO             		ldx	DisplayBuffer
  266 MACRO             		STA	DisplayBuffer
  267 MACRO             		stx	RenderBuffer
  268 MACRO             		LDA	RenderBuffer+1
  269 MACRO             		ldx	DisplayBuffer+1
  270 MACRO             		STA	DisplayBuffer+1
  271 MACRO             		stx	RenderBuffer+1
  272 MACRO             
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   25
                        6502:macros/display.mac         16:20:20  

  273 MACRO             		PLP
  274 MACRO             
  275                   		#ENDMACRO
  276                   
  277                   
  278                   
  279                   * The DISPLAY macro, after flipping DisplayBuffer as a
  280                   * state of FLIP, tells Handy hardware that DisplayBuff
  281                   * to be displayed
  282                   		#MACRO	DISPLAY
  283 MACRO             		LDA	DISPCTL_RAM
  284 MACRO             		STA	DISPCTL
  285 MACRO             		AND	#DISP_FLIP
  286 MACRO             		BEQ	??
  287 MACRO             		LDA	DisplayBuffer
  288 MACRO             		CLC
  289 MACRO             		ADC	#<DISPLAY_BUFSIZE-1
  290 MACRO             		TAX
  291 MACRO             		LDA	DisplayBuffer+1
  292 MACRO             		ADC	#>DISPLAY_BUFSIZE-1
  293 MACRO             		BRA	??2
  294 MACRO             ??
  295 MACRO             		LDX	DisplayBuffer
  296 MACRO             		LDA	DisplayBuffer+1
  297 MACRO             ??2
  298 MACRO             		DISP_AX
  299                   		#ENDMACRO
  300                   
  301                   
  302                   * The DISP_AX and DISP_AY macros set up the address co
  303                   * A (high-byte) and X or Y (low byte) as the next buff
  304                   * after the next end-of-frame
  305                   		#MACRO	DISP_AX
  306 MACRO             		PHP
  307 MACRO             		SEI
  308 MACRO             		STX	DISPADRL
  309 MACRO             		STA	DISPADRH
  310 MACRO             		PLP
  311                   		#ENDMACRO
  312                   
  313                   		#MACRO	DISP_AY
  314 MACRO             		PHP
  315 MACRO             		SEI
  316 MACRO             		STY	DISPADRL
  317 MACRO             		STA	DISPADRH
  318 MACRO             		PLP
  319                   		#ENDMACRO
  320                   
  321                   
  322                   
  323                   * The RGB_AXY macro presumes that you have Red, Green 
  324                   * registers A, X and Y respectively, and that you want
  325                   * to the color pen specified by the macro argument whe
  326                   * address of the GREEN register for the pen you want t
  327                   * Example setting pen 4 to yellow:
  328                   *     LDA     #$0F
  329                   *     LDX     #$0F
  330                   *     LDY     #$00
  331                   *     RGB_AXY GREEN4
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   26
                        6502:macros/display.mac         16:20:20  

  332                   		#MACRO	RGB_AXY
  333 MACRO             		STX	?0
  334 MACRO             		STA	sysptr
  335 MACRO             		TYA
  336 MACRO             		ASL
  337 MACRO             		ASL
  338 MACRO             		ASL
  339 MACRO             		ASL
  340 MACRO             		ORA	sysptr
  341 MACRO             		STA	?0+16
  342                   		#ENDMACRO
  343                   
  344                   
  345                   
  346                   * The RGB16 macros let you set up all the color regist
  347                   * One way or another, you supply to the macro with the
  348                   * that has an exact image of the sort of data that the
  349                   * registers expect, which is to say a table of 16 byte
  350                   * in the lower nybble your 16 green values,
  351                   * followed by a table of 16 bytes each with the upper 
  352                   * blue and the lower nybble containing red.
  353                   * The RGB16 macro expects an absolute address of the R
  354                   * The RGB16_I macro expects the address of a variable 
  355                   * the absolute address of the RGB table.
  356                   * Note that this macro presumes that 16 Green register
  357                   * sequentially by 16 BlueRed registers.
  358                   
  359                   		#MACRO	RGB16
  360 MACRO             		;------	Write the absolute address to sysptr
  361 MACRO             		LDA	#<?0
  362 MACRO             		STA	sysptr
  363 MACRO             		LDA	#>?0
  364 MACRO             		STA	sysptr+1
  365 MACRO             		;------	copy the palette
  366 MACRO             		LDY	#31
  367 MACRO             		LDA	(sysptr),Y
  368 MACRO             		STA	GREEN0,Y
  369 MACRO             		DEY
  370 MACRO             		BPL	*-6
  371                   		#ENDMACRO
  372                   
  373                   		#MACRO	RGB16_I
  374 MACRO             		LDA	?0
  375 MACRO             		STA	sysptr
  376 MACRO             		LDA	?0+1
  377 MACRO             		STA	sysptr+1
  378 MACRO             		;------	copy the palette
  379 MACRO             		LDY	#31
  380 MACRO             		LDA	(sysptr),Y
  381 MACRO             		STA	GREEN0,Y
  382 MACRO             		DEY
  383 MACRO             		BPL	*-6
  384                   		#ENDMACRO
  385                   
  386                   
  387                   
  388                   * The HOFF and VOFF macros set up the HOFF and VOFF fo
  389                   * display list rendering.
  390                   * HOFF8 and VOFF8 are used with 8-bit positioning wher
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   27
                        6502:macros/display.mac         16:20:20  

  391                   * is in A (the upper byte is set to zero for you)
  392                   *
  393                   * HOFF16 and VOFF16 are used with 16-bit positioning w
  394                   * your offset value is in A, the upper byte is in Y
  395                   		#MACRO	HOFF8
  396 MACRO             		STA	HOFFL
  397                   		#ENDMACRO
  398                   
  399                   		#MACRO	VOFF8
  400 MACRO             		STA	VOFFL
  401                   		#ENDMACRO
  402                   
  403                   		#MACRO	HOFF16
  404 MACRO             		STA	HOFFL
  405 MACRO             		STY	HOFFH
  406                   		#ENDMACRO
  407                   
  408                   		#MACRO	VOFF16
  409 MACRO             		STA	VOFFL
  410 MACRO             		STY	VOFFH
  411                   		#ENDMACRO
  412                   
  413                   
  414                   
  415                   * If AUTO_TIMEOUT_USER is defined, then add body to th
  416      FALSE        	  #IFDEF AUTO_TIMEOUT_USER
  445                   	  #ELSE
  446                   	    #MACRO TIMEOUT
  447                   	    #ENDM
  448                   	  #ENDIF
  449                   
  450                   
  451                   
   41                   	.IN 6502:macros/controls.mac
    1                   
    2                   * === controls.mac ===================================
    3                   * 
    4                   * Apple Joystick / Switches Input Macros  --  Handy So
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, 1989, Epyx, Inc.
    8                   * 
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   12                   *				Removed GETINPUT
   13                   * 3 July 89	-RJ		The RESET_TIMEOUT logic is moved from
   14                   *				input macros to the display TIMEOUT macro
   15                   * 15 Jun 89	Carl Mey	Modified GETSWITCH to test PAUSE_
   16                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   17                   *  2 Jan 89	-RJ		Added GETINPUT, which you must call b
   18                   *				GETJOY and/or GETSWITCH.
   19                   * Mid 88	=RJ Mical=	Created this file!
   20                   * 
   21                   * ====================================================
   22                   
   23                   
   24                   
   25                   	#MACRO GETJOY
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   28
                        6502:macros/controls.mac        16:20:20  

   26 MACRO             	  LDA JOYSTICK
   27                   	#ENDMACRO
   28                   
   29                   
   30                   
   31                   	#MACRO GETSWITCH
   32 MACRO             	  LDA SWITCHES
   33                   	#ENDMACRO
   34                   
   35                   
   36                   
   42                   	.IN 6502:macros/handymath.mac
    1                   
    2                   * === handymath.mac ==================================
    3                   *
    4                   * Handy Math Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 9-Feb-90	SHL		Removed Apple emulation compatibility
   12                   *				Removed all references to HANDYMATH
   13                   * 2 Jan 89	-RJ		Changed HANDYMATH so that it must be d
   14                   *				0 = Handy hardware exists, so use it
   15                   *				1 = Use Handy math software
   16                   *				2 = Use math software with fast fat multiply
   17                   * 30-Dec-88	=RJ Mical=	Changed define throughout file 
   18                   *				HANDYMATH rather than HANDYIO to be defined
   19                   *				to use Handy math hardware or fake software
   20                   * Late 88	=RJ Mical=	Created this file!
   21                   *
   22                   * ====================================================
   23                   
   24                   
   25                   * The WAITMATH macro is used if you don't have anythin
   26                   * Suzy is executing your math.  You must wait for Suzy
   27                   * reading the results, but you don't have to wait if y
   28                   * else to do in the meanwhile.
   29                   	#MACRO WAITMATH
   30 MACRO             ??0	.= *
   31 MACRO             	BIT SPRSYS
   32 MACRO             	BMI ??0
   33                   	#ENDM
   34                   
   35                   
   36                   * If you are doing multiply-and-accumulate, you need t
   37                   * to some known state.  If you want the accumulator se
   38                   * the CLEARACCUM macro.  This macro is good because it
   39                   * the autoreset math register scheme when your code is
   40                   	#MACRO CLEARACCUM
   41 MACRO             	STZ MATHK
   42 MACRO             	STZ MATHM
   43                   	#ENDM
   44                   
   45                   
   46                   
   43                   	.IN 6502:macros/hprint.mac
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   29
                        6502:macros/hprint.mac          16:20:20  

    1                   
    2                   * === hprint.mac =====================================
    3                   *
    4                   * HandyPrint Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 26-Feb-90	SHL		Minor code tightening
   12                   * 29 May 89	Omi and Mical	Cleaned up to use new assemb
   13                   *				The new HPR_CHARSET macro is a laugh
   14                   * 17 Mar 89	-RJ		.CHARSET is .CSET when ASM.VERSION is
   15                   * 16 Mar 89	-RJ		Got rid of an extraneous #ENDIF in HP
   16                   * 8-Jan-89	=RJ Mical=	Created this file!
   17                   *
   18                   * ====================================================
   19                   
   20                   
   21                   
   22                   * The INITLIT macro initializes an Handy Print buffer 
   23                   * sprite bufer.  After this macro has been invoked, ea
   24                   * an offset to the next line of the buffer, and the la
   25                   * to 0.  The buffer is presumed to be Width (as specif
   26                   * FONT_HEIGHT plus 1 big.
   27                   * The first argument specifies the address of the buff
   28                   * The second argument specifies the byte-width of each
   29                   * NOTE:  the buffer line width includes the sprite dat
   30                   * which means that the number of characters you can pr
   31                   * buffer line width minus one.  For a full-screen widt
   32                   * width of 21 (20 characters * 8 per character equals 
   33                   	#MACRO INITLIT
   34 MACRO             	LDA #<?0
   35 MACRO             	LDX #>?0
   36 MACRO             	STA sysptr
   37 MACRO             	STX sysptr+1
   38 MACRO             	LDX #FONT_HEIGHT
   39 MACRO             ??	.= *
   40 MACRO             	  lda #?1
   41 MACRO             	  STA (sysptr)
   42 MACRO             	  CLC
   43 MACRO             	  ADC sysptr
   44 MACRO             	  STA sysptr
   45 MACRO             	  bcc ??1
   46 MACRO             	  inc sysptr+1
   47 MACRO             ??1	.= *
   48 MACRO             	  DEX
   49 MACRO             	 BNE ??
   50 MACRO             	LDA #0
   51 MACRO             	STA (sysptr)
   52                   	#ENDMACRO
   53                   
   54                   
   55                   
   56                   * The HPRFONT macro causes the FontBase variable to be
   57                   * the pieces of the desired font to be loaded.  If you
   58                   * HPRINT either you use HPRFONT or you take all the st
   59                   * The first argument should be a text string describin
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   30
                        6502:macros/hprint.mac          16:20:20  

   60                   * (the normal system font is named "plain").
   61                   * ??? NOTE:  currently only supports FONT_HEIGHT of 7
   62                   
   63                   	#MACRO HPRFONT
   64 MACRO             FontBase  ;-- Load in only the font pieces requested b
   65 MACRO             	    .IN 6502:fonts/?0_space7.src
   66 MACRO             	  #IF {FONT_TYPE&HPR_DIGIT} <> 0
   67 MACRO             	    .IN 6502:fonts/?0_digit7.src
   68 MACRO             	  #ENDIF
   69 MACRO             	  #IF {FONT_TYPE&HPR_UPPER} <> 0
   70 MACRO             	    .IN 6502:fonts/?0_upper7.src
   71 MACRO             	  #ENDIF
   72 MACRO             	  #IF {FONT_TYPE&HPR_LOWER} <> 0
   73 MACRO             	    .IN 6502:fonts/?0_lower7.src
   74 MACRO             	  #ENDIF
   75 MACRO             	  #IF {FONT_TYPE&HPR_PUNC} <> 0
   76 MACRO             	    .IN 6502:fonts/?0_punc7.src
   77 MACRO             	  #ENDIF
   78 MACRO             	  #IF {FONT_TYPE&HPR_OTHER} <> 0
   79 MACRO             	    .IN 6502:fonts/?0_other7.src
   80 MACRO             	  #ENDIF
   81 MACRO             	    .IN 6502:fonts/?0_nix7.src
   82                   	#ENDMACRO
   83                   
   84                   
   85                   
   86                   * The HPR_CHARSET macro is used to specify that you wa
   87                   * character set to be used for your ASCII characters. 
   88                   * character set will match the character positions gen
   89                   * call to the HPRFONT macro.
   90                   * Here, we load in a character set that contains the A
   91                   * according to the font requests of the user.  Note th
   92                   * ASCII is translated into the NIXFONT character
   93                   
   94                   	#MACRO HPR_CHARSET
   95 MACRO             	  #IF {FONT_TYPE&HPR_OTHER} != 0
   96 MACRO             	    #IF {FONT_TYPE&HPR_PUNC} != 0
   97 MACRO             	      #IF {FONT_TYPE&HPR_LOWER} != 0
   98 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
   99 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  100 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_LOWER+HPR_UPPE
  101 MACRO             	            .CS 6502:fonts/cset_1f.src
  102 MACRO             	          #ELSE
  103 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_LOWER+HPR_UPPE
  104 MACRO             	            .CS 6502:fonts/cset_1e.src
  105 MACRO             	          #ENDIF
  106 MACRO             	        #ELSE
  107 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  108 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_LOWER+HPR_DIGI
  109 MACRO             	            .CS 6502:fonts/cset_1d.src
  110 MACRO             	          #ELSE
  111 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_LOWER
  112 MACRO             	            .CS 6502:fonts/cset_1c.src
  113 MACRO             	          #ENDIF
  114 MACRO             	        #ENDIF
  115 MACRO             	      #ELSE
  116 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  117 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  118 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_UPPER+HPR_DIGI
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   31
                        6502:macros/hprint.mac          16:20:20  

  119 MACRO             	            .CS 6502:fonts/cset_1b.src
  120 MACRO             	          #ELSE
  121 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_UPPER
  122 MACRO             	            .CS 6502:fonts/cset_1a.src
  123 MACRO             	          #ENDIF
  124 MACRO             	        #ELSE
  125 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  126 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_DIGIT
  127 MACRO             	            .CS 6502:fonts/cset_19.src
  128 MACRO             	          #ELSE
  129 MACRO             	            ;-- HPR_OTHER+HPR_PUNC
  130 MACRO             	            .CS 6502:fonts/cset_18.src
  131 MACRO             	          #ENDIF
  132 MACRO             	        #ENDIF
  133 MACRO             	      #ENDIF
  134 MACRO             	    #ELSE
  135 MACRO             	      #IF {FONT_TYPE&HPR_LOWER} != 0
  136 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  137 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  138 MACRO             	            ;-- HPR_OTHER+HPR_LOWER+HPR_UPPER+HPR_DIG
  139 MACRO             	            .CS 6502:fonts/cset_17.src
  140 MACRO             	          #ELSE
  141 MACRO             	            ;-- HPR_OTHER+HPR_LOWER+HPR_UPPER
  142 MACRO             	            .CS 6502:fonts/cset_16.src
  143 MACRO             	          #ENDIF
  144 MACRO             	        #ELSE
  145 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  146 MACRO             	            ;-- HPR_OTHER+HPR_LOWER+HPR_DIGIT
  147 MACRO             	            .CS 6502:fonts/cset_15.src
  148 MACRO             	          #ELSE
  149 MACRO             	            ;-- HPR_OTHER+HPR_LOWER
  150 MACRO             	            .CS 6502:fonts/cset_14.src
  151 MACRO             	          #ENDIF
  152 MACRO             	        #ENDIF
  153 MACRO             	      #ELSE
  154 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  155 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  156 MACRO             	            ;-- HPR_OTHER+HPR_UPPER+HPR_DIGIT
  157 MACRO             	            .CS 6502:fonts/cset_13.src
  158 MACRO             	          #ELSE
  159 MACRO             	            ;-- HPR_OTHER+HPR_UPPER
  160 MACRO             	            .CS 6502:fonts/cset_12.src
  161 MACRO             	          #ENDIF
  162 MACRO             	        #ELSE
  163 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  164 MACRO             	            ;-- HPR_OTHER+HPR_DIGIT
  165 MACRO             	            .CS 6502:fonts/cset_11.src
  166 MACRO             	          #ELSE
  167 MACRO             	            ;-- HPR_OTHER
  168 MACRO             	            .CS 6502:fonts/cset_10.src
  169 MACRO             	          #ENDIF
  170 MACRO             	        #ENDIF
  171 MACRO             	      #ENDIF
  172 MACRO             	    #ENDIF
  173 MACRO             	  #ELSE ; no HPR_OTHER
  174 MACRO             	    #IF {FONT_TYPE&HPR_PUNC} != 0
  175 MACRO             	      #IF {FONT_TYPE&HPR_LOWER} != 0
  176 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  177 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   32
                        6502:macros/hprint.mac          16:20:20  

  178 MACRO             	            ;-- HPR_PUNC+HPR_LOWER+HPR_UPPER+HPR_DIGI
  179 MACRO             	            .CS 6502:fonts/cset_0f.src
  180 MACRO             	          #ELSE
  181 MACRO             	            ;-- HPR_PUNC+HPR_LOWER+HPR_UPPER
  182 MACRO             	            .CS 6502:fonts/cset_0e.src
  183 MACRO             	          #ENDIF
  184 MACRO             	        #ELSE
  185 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  186 MACRO             	            ;-- HPR_PUNC+HPR_LOWER+HPR_DIGIT
  187 MACRO             	            .CS 6502:fonts/cset_0d.src
  188 MACRO             	          #ELSE
  189 MACRO             	            ;-- HPR_PUNC+HPR_LOWER
  190 MACRO             	            .CS 6502:fonts/cset_0c.src
  191 MACRO             	          #ENDIF
  192 MACRO             	        #ENDIF
  193 MACRO             	      #ELSE
  194 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  195 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  196 MACRO             	            ;-- HPR_PUNC+HPR_UPPER+HPR_DIGIT
  197 MACRO             	            .CS 6502:fonts/cset_0b.src
  198 MACRO             	          #ELSE
  199 MACRO             	            ;-- HPR_PUNC+HPR_UPPER
  200 MACRO             	            .CS 6502:fonts/cset_0a.src
  201 MACRO             	          #ENDIF
  202 MACRO             	        #ELSE
  203 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  204 MACRO             	            ;-- HPR_PUNC+HPR_DIGIT
  205 MACRO             	            .CS 6502:fonts/cset_09.src
  206 MACRO             	          #ELSE
  207 MACRO             	            ;-- HPR_PUNC
  208 MACRO             	            .CS 6502:fonts/cset_08.src
  209 MACRO             	          #ENDIF
  210 MACRO             	        #ENDIF
  211 MACRO             	      #ENDIF
  212 MACRO             	    #ELSE
  213 MACRO             	      #IF {FONT_TYPE&HPR_LOWER} != 0
  214 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  215 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  216 MACRO             	            ;-- HPR_LOWER+HPR_UPPER+HPR_DIGIT
  217 MACRO             	            .CS 6502:fonts/cset_07.src
  218 MACRO             	          #ELSE
  219 MACRO             	            ;-- HPR_LOWER+HPR_UPPER
  220 MACRO             	            .CS 6502:fonts/cset_06.src
  221 MACRO             	          #ENDIF
  222 MACRO             	        #ELSE
  223 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  224 MACRO             	            ;-- HPR_LOWER+HPR_DIGIT
  225 MACRO             	            .CS 6502:fonts/cset_05.src
  226 MACRO             	          #ELSE
  227 MACRO             	            ;-- HPR_LOWER
  228 MACRO             	            .CS 6502:fonts/cset_04.src
  229 MACRO             	          #ENDIF
  230 MACRO             	        #ENDIF
  231 MACRO             	      #ELSE
  232 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  233 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  234 MACRO             	            ;-- HPR_UPPER+HPR_DIGIT
  235 MACRO             	            .CS 6502:fonts/cset_03.src
  236 MACRO             	          #ELSE
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   33
                        6502:macros/hprint.mac          16:20:20  

  237 MACRO             	            ;-- HPR_UPPER
  238 MACRO             	            .CS 6502:fonts/cset_02.src
  239 MACRO             	          #ENDIF
  240 MACRO             	        #ELSE
  241 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  242 MACRO             	            ;-- HPR_DIGIT
  243 MACRO             	            .CS 6502:fonts/cset_01.src
  244 MACRO             	          #ELSE
  245 MACRO             	            .ECHO ""
  246 MACRO             	            .ECHO "ERROR:  No font FONT_TYPES flags s
  247 MACRO             	            .ECHO ""
  248 MACRO             	          #ENDIF
  249 MACRO             	        #ENDIF
  250 MACRO             	      #ENDIF
  251 MACRO             	    #ENDIF
  252 MACRO             	  #ENDIF
  253                   	#ENDMACRO
  254                   
  255                   
  256                   * The HPRINT macro causes your text to be printed
  257                   * The first arg is the text pointer, which can point t
  258                   * depending on the value of the second arg.
  259                   * The second arg should be 0 or 1, standing for:
  260                   *     0 = first arg is the address of the text
  261                   *     1 = first arg is the address of a variable point
  262                   * The third arg is the address of your buffer, which s
  263                   * initialized as a completely-literal sprite buffer (s
  264                   
  265                   	#MACRO HPRINT
  266 MACRO             
  267 MACRO             	  #IF	?1 = 1
  268 MACRO             	    LDA ?0
  269 MACRO             	    STA	sysptr
  270 MACRO             	    LDA ?0+1
  271 MACRO             	    STA sysptr+1
  272 MACRO             	  #ELSE
  273 MACRO             	    LDA #<?0
  274 MACRO             	    STA sysptr
  275 MACRO             	    LDA #>?0
  276 MACRO             	    STA sysptr+1
  277 MACRO             	  #ENDIF
  278 MACRO             
  279 MACRO             	  LDA #<?2
  280 MACRO             	  STA TextPtr
  281 MACRO             	  LDA #>?2
  282 MACRO             	  STA TextPtr+1
  283 MACRO             	  JSR HandyPrint
  284 MACRO             
  285                   	#ENDMACRO
  286                   
  287                   
  288                   
   44                   
   45                   
   46                   ;=====================================================
   47                   
   48                   ; Absolute equates
   49                   
   50                   
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   34
                                                        16:20:20  

   51                   ;=====================================================
   52                   
   53                   ; useful code macros
   54                   
   55                   	#MACRO STRUCT		; reset PC for structure template defi
   56 MACRO             LTemp	.= *
   57 MACRO             	.ORG 0
   58                   	#ENDM
   59                   
   60                   	#MACRO ENDSTRUCT	; restore PC after structure definit
   61 MACRO             	.ORG LTemp
   62                   	#ENDM
   63                   
   64                   ;=====================================================
   65                   
   66                   ; Zero page variables
   67                   
   68                   
   69                   	BEGIN_ZPAGE
    1      FFFE       + TEMPORG	  .= *
    2 FFFE:           + 	  .ORG NEXTZPG
    3                 + 
   70                   
   71 0006:             MYZPSTART
   72                   
   73 0006:             ind0		.DS 2	; general indirects
   74                   
   75 0008:             temp0		.DS 1	; general temporaries
   76                   
   77 0009:             whichdigit	.DS 1	; which digit are we modifying?
   78                   
   79 000A:             factor1		.DS 4	; variables for multiply demo
   80 000E:             factor2		.DS 4
   81 0012:             product		.DS 8
   82                   
   83 001A:             stick		.DS 1	; current reading of joystick
   84 001B:             edgestick	.DS 1	; positive edge transitions of joystic
   85                   
   86 001C:             MYZPEND
   87                   
   88                   
   89                   	END_ZPAGE
    1      001C       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 001C:           + 	  .ORG TEMPORG
    6                 + 
   90                   
   91                   ;=====================================================
   92                   
   93 FFFE:             	.OR $0200
   94                   
   95                   ;=====================================================
   96                   
   97                   ; Absolute address variables
   98                   
   99                   
  100 0200:             	.ALIGN 4
  101 0200:             screen0		.DS DISPLAY_BUFSIZE	; screen buffers
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   35
                                                        16:20:20  

  102 21E0:             screen1		.DS DISPLAY_BUFSIZE
  103                   
  104                   
  105 41C0:             interrupt_buffer .DS 16			; timer interrupt vectors
  106                   
  107 41D0:             textbuffer	.DS 20*FONT_HEIGHT+1	; literal text sprite 
  108                   
  109                   
  110 425D:             AbsVarsEnd
  111                   
  112                   ;=====================================================
  113                   
  114                   ; Standard handy source include files
  115                   
  116                   	.IN 6502:src/sysdata.src
    1                   ; Tuesday 27-Mar-90 10:58:04
    2                   * === sysdata.src ====================================
    3                   * 
    4                   * System Data Allocations  --  the 6502 Side of Handy
    5                   * 
    6                   * Copyright (c) 1988,1990 Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   * 
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 27-Mar-90	SHL		Removed BufferAddrL, BufferAddrH
   13                   * 22-Mar-90	SHL		Added INTSET_RAM shadow for IRQs
   14                   * 9-Feb-90	SHL		Removed Apple emulation compatibility
   15                   * 30 May 89	-RJ		Added IODAT_RAM
   16                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   17                   * 20 Apr 89	-RJ		Added IODIR_RAM
   18                   * 19 Apr 89	-RJ		Moved DisplayFrameCount to display.sr
   19                   * 20 Mar 89	-RJ		Added DisplayFrameCount
   20                   * 13 Feb 89	-RJ		Added DisplayBuffer
   21                   * 26 Jan 88	-RJ		Ended Interruptus
   22                   * 24 Dec 88	-RJ		Added Interruptus
   23                   * 22 Dec 88	-RJ		Added DISPCTL_RAM, RenderBuffer, 
   24                   *				BufferAddrL/H, and DisplayFlags with its defs
   25                   *				Added note about .ORGing to non-zpage
   26                   * Early 88	=RJ Mical=	Created this file!
   27                   * 
   28                   * ====================================================
   29                   
   30                   
   31                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   32                   * 
   33                   * This file should be included before any of the 6502:
   34                   * 
   35                   * Note that you should .ORG to a non-zero page address
   36                   * this file.  This is because this file includes data 
   37                   * don't need to be in zero-page memory.
   38                   * 
   39                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   40                   
   41                   
   42                   * Here are the declarations of the local copies of wri
   43                   * (and read-doesn't-equal-write registers such as SPRS
   44                   * Whenever you want to make a change to one of the har
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   36
                        6502:src/sysdata.src            16:20:20  

   45                   * that's write-only, you should read from this RAM cop
   46                   * and then write the value out to both the RAM copy an
   47 425D:             SPRSYS_RAM	.DS 1
   48 425E:             DISPCTL_RAM	.DS 1
   49 425F:             IODAT_RAM	.DS 1
   50 4260:             IODIR_RAM	.DS 1
   51                   
   52                   
   53                   * Display buffer pointers for use by the system displa
   54 4261:             RenderBuffer	.DS 2
   55 4263:             DisplayBuffer	.DS 2
   56                   
   57                   * Shadow of INTSET used in IRQ handler
   58 4265:             INTSET_RAM	.DS 1
   59                   
   60                   
   61      FALSE        	#IFDEF AUTO_TIMEOUT_USER
   63                   	#ENDIF
   64                   
   65                   
   66                   * The DisplayFlags field is a field that may enjoy mul
   67                   * read-modify-write operations peformed by both interr
   68                   * Because of this, any code must make sure that interr
   69                   * beginning a read-modify-write cycle, or use the TSB/
   70 4266:             DisplayFlags	.DS	1
   71                   * Here's the definitions of DisplayFlags
   72      0080         DISPLAY_EOFFLAG		.EQ $80	; Set every EOF
   73      0040         DISPLAY_EOLFLAG		.EQ $40	; Set every EOL
   74                   
   75                   
   76                   
  117                   	.IN 6502:src/hprint.src
    1                   ; Monday 30-Jul-90 15:22:29
    2                   * == hprint.src ======================================
    3                   *
    4                   * HandyPrint Routines  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 30-Jul-90	SHL		Added HprFontLo and HprFontHi labels 
   12                   *				patching of FontBase
   13                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   14                   * 18 Apr 89	SHL		Fixed a bug in Omi's bug-fix to MATHC
   15                   * 31-Mar-89	Greg Omi	Fixed hardware bug with MATHC for
   16                   * 9-Feb-89	=RJ Mical=	Created this file!
   17                   *
   18                   * ====================================================
   19                   
   20                   
   21 4267:             TextPtr		.DS	2
   22 4269:             TextWidth	.DS	1
   23 426A:             TextRemaining	.DS	1
   24                   
   25                   
   26                   
   27 426B:             HandyPrint
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   37
                        6502:src/hprint.src             16:20:20  

   28                   * This routine prints the text pointed to by sysptr in
   29                   * to by TextBuffer.  Expects TextBuffer to be a well-f
   30                   * sprite data buffer (you can create one using the INI
   31                   * HandyPrint currently always fills to the end of the 
   32                   
   33                   		;------	Get a copy of the text buffer pointer, and u
   34                   		;------	first value of the buffer (the sprite data's
   35                   		;------	offset-to-next byte) as the buffer width val
   36 426B:AD 67 42     		LDA	TextPtr
   37 426E:85 02        		STA	sysptr2
   38 4270:AD 68 42     		LDA	TextPtr+1
   39 4273:85 03        		STA	sysptr2+1
   40 4275:B2 02        		LDA	(sysptr2)
   41 4277:8D 69 42     		STA	TextWidth
   42 427A:3A           		DEC
   43 427B:8D 6A 42     		STA	TextRemaining	; Also, stash length for blank pad
   44                   
   45 427E:             hprintLoop
   46                   		;------	Calculate the address of this character's da
   47 427E:B2 00        		LDA	(sysptr)	; Get the next character
   48 4280:D0 **        		BNE	.10		; If non-null, use it!
   49 4282:9C 61 FC     		STZ	MATHG		; else set up for shortcut math
   50 4285:AE 6A 42     		LDX	TextRemaining	; Any room left in the buffer?
   51 4288:D0 **        		BNE	.18		; Branch if so to shortcut math
   52 428A:60           		RTS
   53                   
   54 428B:             .10		;------	We got a real character.  Set up to get i
   55 428B:3A           		DEC		; Decrement to real offset
   56 428C:8D 54 FC     		STA	MATHB	; Set up for math call
   57 428F:A9 07        		LDA	#FONT_HEIGHT
   58 4291:8D 52 FC     		STA	MATHD
   59 4294:9C 53 FC     		STZ	MATHC	; Clear in case of signed math
   60 4297:9C 55 FC     		STZ	MATHA	; MULTIPLY
   61                   
   62                   		;------	Bump the text pointer to next character
   63 429A:E6 00        		INC	sysptr
   64 429C:D0 **        		BNE	.14
   65 429E:E6 01        		INC	sysptr+1
   66 42A0:             .14
   67                   		;------	Wait 'til the multiply is done (should be no
   68                   		WAITMATH
    1      42A0       + WAITMATH.00050	.= *
    2 42A0:2C 92 FC   + 	BIT SPRSYS
    3 42A3:30 FB      + 	BMI WAITMATH.00050
    4                 + 
   69 42A5:AD 60 FC     		LDA	MATHH	; And get the low byte of the offset
   70                   
   71                   		;------	Use low byte of offset added to FontBase to
   72                   		;------	create address of character data
   73 42A8:18           .18		CLC
   74      42AA         HprFontLo	.EQ *+1
   75 42A9:69 **        		ADC	#<FontBase
   76 42AB:85 04        		STA	sysptr3
   77 42AD:AD 61 FC     		LDA	MATHG
   78      42B1         HprFontHi	.EQ *+1
   79 42B0:69 **        		ADC	#>FontBase
   80 42B2:85 05        		STA	sysptr3+1
   81                   
   82                   		;------	Increment the TextPtr to next byte of output
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   38
                        6502:src/hprint.src             16:20:20  

   83 42B4:EE 67 42     		INC	TextPtr
   84 42B7:D0 **        		BNE	.20
   85 42B9:EE 68 42     		INC	TextPtr+1
   86 42BC:             .20
   87                   
   88                   		;------	Grab a work copy of the TextPtr
   89 42BC:AD 67 42     		LDA	TextPtr
   90 42BF:85 02        		STA	sysptr2
   91 42C1:AD 68 42     		LDA	TextPtr+1
   92 42C4:85 03        		STA	sysptr2+1
   93                   
   94                   		;------	Set up for character data looping
   95 42C6:A0 06        		LDY	#FONT_HEIGHT-1
   96                   
   97 42C8:             hprintCharLoop
   98                   		;------	Copy this character's data into the output b
   99 42C8:B1 04        		LDA	(sysptr3),Y
  100 42CA:92 02        		STA	(sysptr2)
  101 42CC:A5 02        		LDA	sysptr2
  102 42CE:18           		CLC
  103 42CF:6D 69 42     		ADC	TextWidth
  104 42D2:85 02        		STA	sysptr2
  105 42D4:A5 03        		LDA	sysptr2+1
  106 42D6:69 00        		ADC	#0
  107 42D8:85 03        		STA	sysptr2+1
  108 42DA:88           		DEY
  109 42DB:10 EB        		BPL	hprintCharLoop
  110                   
  111                   		;------	Decrement number of available positions
  112 42DD:CE 6A 42     		DEC	TextRemaining
  113 42E0:4C 7E 42     		JMP	hprintLoop
  114                   
  115                   
  116                   
  117                   
  118                   	.IN 6502:src/sys.src
    1                   ; Tue Sep 18 17:43:25 1990
    2                   * === sys.src ========================================
    3                   *
    4                   * General System Source Code  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 28-Mar-90	SHL		IRQ handler quick checks for serial I
   12                   *				if SERIALPORT_USER defined now.
   13                   * 22-Mar-90	SHL		IRQ handler only touches 1 IRQ at a t
   14                   *				Individual handlers need not preserve X and A
   15                   *				IRQ handlers now required to PLX PLA RTI
   16                   *				instead of RTS
   17                   *				Renamed SafeIntRts to IntReturn, which now
   18                   *				does PLX PLA RTI
   19                   * 16-Mar-90	SHL		Modified BRK detect for 1 cycle impro
   20                   *				in the case of IRQ
   21                   * 15-Mar-90	SHL		Provided faster vector to Redeye inte
   22                   *				Serial interrupts now must PLX PLA RTI to
   23                   *				exit.
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   39
                        6502:src/sys.src                16:20:20  

   24                   * 14-Mar-90	SHL		Added SafeIntRts
   25                   *				INITINT now vectors all IRQS to SafeIntRts
   26                   *				instead of user supplied RTS
   27                   * 26-Feb-90	SHL		Minor code tightening
   28                   * 9-Feb-90	SHL		INITINT is now required before any use
   29                   *				INITEOF, INITEOL or SET_DISPLAY... macros
   30                   *				This file can now be included before user
   31                   *				calls INITINT
   32                   * 7-Feb-90	SHL		Modified BRK_USER to force Howard Brea
   33                   * 31 May 89	-RJ		Added BRK_USER support code to UserIn
   34                   *				Removed InitSys routine
   35                   * 6 Apr 89	=RJ Mical=	Created this file!
   36                   *
   37                   * ====================================================
   38                   
   39                   
   40                   * This code is called whenever a non-NMI interrupt occ
   41                   * interrupt or execution of a software BRK).
   42                   
   43 42E3:             UserIntHandler
   44 42E3:48           		PHA
   45 42E4:DA           		PHX
   46                   
   47      TRUE         	  #IFDEF BRK_USER
   48                   	  ;-- Check if we got here because of a BRK instructi
   49                   	  ;-- the BRK routine if so, else branch to the inter
   50 42E5:BA           		TSX
   51 42E6:E8           		INX
   52 42E7:E8           		INX
   53 42E8:E8           		INX
   54 42E9:BD 00 01     		LDA $0100,X		; Get a copy of the status byte
   55 42EC:89 10        		bit #$10		; Check break bit
   56 42EE:D0 **        		BNE brkInt		; and branch if clear (hardware int)
   57                   	  #ENDIF ; of #IFDEF BRK_USER
   58                   
   59 42F0:             hardInt
   60                   		;------	We had a hardware interrupt.
   61                   		;------	Get the interrupt flags value, reset the bit
   62 42F0:AD 81 FD     		LDA INTSET		; This gets the bits
   63                   
   64      FALSE        	  #IFDEF SERIALPORT_USER
   68                   	  #ENDIF
   69                   
   70 42F3:8D 65 42     .02		STA INTSET_RAM
   71                   
   72                   		;------	For least set bit in the interrupt value,
   73                   		;------	vector to the routine
   74 42F6:A2 00        		LDX #0
   75 42F8:A9 01        		lda #1
   76 42FA:2C 65 42     .00		  bit INTSET_RAM
   77 42FD:D0 **        		  bne jumpIntTable
   78 42FF:E8           		  INX
   79 4300:E8           		  INX
   80 4301:0A           		  asl a
   81 4302:D0 F6        		 bne .00
   82 4304:             IntReturn
   83                   		;------	At end of interrupt processing, restore the
   84                   		;------	registers and return from interrupt
   85                   
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   40
                        6502:src/sys.src                16:20:20  

   86 4304:FA           		PLX
   87 4305:68           		PLA
   88 4306:40           		RTI
   89                   
   90                   
   91                   
   92                   
   93                   * The above interrupt dispatcher does a JSR to this li
   94                   * This code jumps to the particular handler.  The inte
   95                   * should end with an RTS, which will return control to
   96                   
   97 4307:             jumpIntTable
   98 4307:8D 80 FD     		sta INTRST	; clear interrupt we're processing
   99 430A:7C ** **     		JMP	(sysIntTable,X)
  100                   
  101                   
  102      TRUE         	  #IFDEF BRK_USER
  103 430D:             brkInt
  104 430D:FA           		PLX
  105 430E:68           		PLA
  106                   BRK_vector	HBRK			; force BRK on Howard board
    1 430F:13         + 	.HS 13
    2                 + 
  107 4310:4C 0F 43     		JMP BRK_vector		; Will be modified by INITINT call
  108                   	  #ENDIF ; of #IFDEF BRK_USER
  109                   
  110                   
  111                   
  119                   	.IN 6502:src/display.src
    1                   ; Tue Sep 18 17:51:17 1990
    2                   * === display.src ====================================
    3                   *
    4                   * Display and Color IO Routines --  the 6502 Side of H
    5                   *
    6                   * Copyright (C) 1988,1989,1990 Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   *
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 18-Sep-90	SHL		Added code to work around RICOH bug
   13                   *				and support for the NO_RICOH_PATCH switch
   14                   * 22-Mar-90	SHL		Removed PHA PHX and PLX PLA from IRQ 
   15                   * 20-Mar-90	SHL		Removed SEI, CLI from InitDisplayer, 
   16                   *				InitEOL
   17                   * 7-Feb-90	SHL		Apple compatibility removed
   18                   *				TIMEOUT macro moved to display.mac
   19                   *				General cleanup and prettification
   20                   * 3 July 89	-RJ		The RESET_TIMEOUT logic is moved from
   21                   *				input macros to the TIMEOUT macro here
   22                   * 16 Jun 89	Peter Engelbrite Timeout constant set to 1
   23                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   24                   * 1 May 89	-RJ		Changed all IntTable references to sys
   25                   *				which is defined now in the sys.mac file
   26                   * 20 Apr 89	-RJ		Changed DisplayFrameCount so that it'
   27                   *				included and incremented if FRAMECOUNT_UP is
   28                   *				defined, included and decremented if
   29                   *				FRAMECOUNT_DOWN is defined, else nothing.
   30                   *				Moved DisplayFrameCount to this file.
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   41
                        6502:src/display.src            16:20:20  

   31                   * 20 Mar 89	-RJ		Added increment of DisplayFrameCount 
   32                   *				handler that's included for EOF_USER's
   33                   * 13 Feb 89	-RJ		Added InitDisplayer routine.  Added i
   34                   *				of DISPLAY to normal EOF handler (FrameEnd).
   35                   * 12 Feb 89	-RJ		EOF and EOL code save and restore A
   36                   * 26-Dec-88	-RJ		Added EOL code
   37                   * 23-Dec-88	-RJ		Added EOF code
   38                   * Early 88	=RJ Mical=	Created this file!
   39                   *
   40                   * ====================================================
   41                   
   42                   
   43                   
   44                   * If either FRAMECOUNT_UP or _DOWN is defined, then de
   45      FALSE        	#IFDEF	FRAMECOUNT_UP | FRAMECOUNT_DOWN
   47                   	#ENDIF
   48                   
   49                   
   50      TRUE         	#IFDEF EOF_USER
   51                   * - - - - - - - - - - - - -  - - - - - - - - - - - - -
   52                   * - - - - - - - - - - - - -  - - - - - - - - - - - - -
   53                   * - - - - - - - - - - - - -  - - - - - - - - - - - - -
   54                   	;------	If an EOF user, create the elaborate version 
   55                   	;------	end-of-frame handler
   56                   
   57 4313:             InitEOF
   58                   		;------	Copy old vector into our exit JMP instructio
   59 4313:AD ** **     		LDA	sysIntTable+{2*2}
   60 4316:8D ** **     		STA	FrameEndExit+1
   61 4319:AD ** **     		LDA	sysIntTable+{2*2}+1
   62 431C:8D ** **     		STA	FrameEndExit+2
   63                   		;------	Install our vector into the interrupt table
   64 431F:A9 **        		LDA	#<FrameEnd
   65 4321:8D ** **     		STA	sysIntTable+{2*2}
   66 4324:A9 **        		LDA	#>FrameEnd
   67 4326:8D ** **     		STA	sysIntTable+{2*2}+1
   68 4329:60           		RTS
   69                   
   70 432A:             FrameEnd
   71                   * End-of-Frame handler
   72 432A:5A           		PHY
   73                   
   74                   		;------	The TIMEOUT macro will do nothing unless
   75                   		;------ AUTO_TIMEOUT_USER has been defined in which 
   76                   		;------	system will turn off after a given amount of
   77      TRUE         	  #IFNDEF NO_RICOH_PATCH
   78 432B:AD F9 FF     		lda MAPCTL
   79 432E:48           		pha
   80 432F:09 01        		 ora #SUZY_SPACE
   81 4331:8D F9 FF     		 sta MAPCTL
   82                   		 TIMEOUT
    1                 + 
   83 4334:68           		pla
   84 4335:8D F9 FF     		sta MAPCTL
   85                   	  #ELSE
   87                   	  #ENDIF ;NDEF NO_RICOH_PATCH
   88                   
   89                   		;------	Turn on the display, and then EOF flag
   90                   ;!!! New:  invoke the DISPLAY macro here during EOF pr
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   42
                        6502:src/display.src            16:20:20  

   91                   		DISPLAY
    1 4338:AD 5E 42   + 		LDA	DISPCTL_RAM
    2 433B:8D 92 FD   + 		STA	DISPCTL
    3 433E:29 02      + 		AND	#DISP_FLIP
    4 4340:F0 **      + 		BEQ	DISPLAY.0008
    5 4342:AD 63 42   + 		LDA	DisplayBuffer
    6 4345:18         + 		CLC
    7 4346:69 DF      + 		ADC	#<DISPLAY_BUFSIZE-1
    8 4348:AA         + 		TAX
    9 4349:AD 64 42   + 		LDA	DisplayBuffer+1
   10 434C:69 1F      + 		ADC	#>DISPLAY_BUFSIZE-1
   11 434E:80 **      + 		BRA	DISPLAY.00082
   12 4350:           + DISPLAY.0008
   13 4350:AE 63 42   + 		LDX	DisplayBuffer
   14 4353:AD 64 42   + 		LDA	DisplayBuffer+1
   15 4356:           + DISPLAY.00082
   16                   		DISP_AX
    1 4356:08         + 		PHP
    2 4357:78         + 		SEI
    3 4358:8E 94 FD   + 		STX	DISPADRL
    4 435B:8D 95 FD   + 		STA	DISPADRH
    5 435E:28         + 		PLP
    6                 + 
   17                 + 
   92                   
   93      FALSE        	  #IFDEF FRAMECOUNT_UP
   96                   	  #ELSE ; put this #ELSE here to avoid both UP and DO
   97      FALSE        	    #IFDEF FRAMECOUNT_DOWN
  103                   	    #ENDIF
  104                   	  #ENDIF
  105                   
  106 435F:AD 66 42     		LDA	DisplayFlags
  107 4362:09 80        		ORA	#DISPLAY_EOFFLAG
  108 4364:8D 66 42     		STA	DisplayFlags
  109                   
  110 4367:7A           		PLY
  111 4368:             FrameEndExit
  112                   		;------	This vector ought to be patched by the Init 
  113 4368:4C 04 43     		JMP	IntReturn
  114                   
  115                   
  116                   	#ELSE ; of #IFDEF EOF_USER
  160                   	#ENDIF	; of #IFDEF EOF_USER
  161                   
  162                   * - - - - - - - - - - - - -  - - - - - - - - - - - - -
  163                   
  164                   
  165                   
  166                   
  167      FALSE        	#IFDEF	EOL_USER
  192                   	#ENDIF	; of #IFDEF EOL_USER
  193                   
  194                   
  195                   
  196                   
  120                   
  121                   ;=====================================================
  122                   
  123                   ; Handy system character set stuff
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   43
                                                        16:20:20  

  124                   
  125                   	HPRFONT plain
    1 436B:           + FontBase
    2                   	    .IN 6502:fonts/plain_space7.src
    1                   
    2                   * === space7font.src =================================
    3                   * 
    4                   * HandyPrint Space Character 7-Height Font  --  Handy 
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date       Name              Description
   10                   * ---------  ----------------  -----------------------
   11                   * 13-Feb-89   =RJ Mical=        Created this file!
   12                   * 
   13                   * ====================================================
   14                   
   15 436B:00           	.BY %00000000
   16 436C:00           	.BY %00000000
   17 436D:00           	.BY %00000000
   18 436E:00           	.BY %00000000
   19 436F:00           	.BY %00000000
   20 4370:00           	.BY %00000000
   21 4371:00           	.BY %00000000
   22                   
   23                   	.END
    3      TRUE       + 	  #IF {FONT_TYPE&HPR_DIGIT} <> 0
    4                   	    .IN 6502:fonts/plain_digit7.src
    1                   
    2                   * === digit7font.src =================================
    3                   * 
    4                   * HandyPrint Digits 7-Height Font  --  Handy Software
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date       Name              Description
   10                   * ---------  ----------------  -----------------------
   11                   * 13-Feb-89   =RJ Mical=        Created this file!
   12                   * 
   13                   * ====================================================
   14                   
   15                   
   16 4372:7C           	.BY %01111100
   17 4373:C6           	.BY %11000110
   18 4374:C6           	.BY %11000110
   19 4375:C6           	.BY %11000110
   20 4376:C6           	.BY %11000110
   21 4377:C6           	.BY %11000110
   22 4378:7C           	.BY %01111100
   23                   
   24 4379:FE           	.BY %11111110
   25 437A:18           	.BY %00011000
   26 437B:18           	.BY %00011000
   27 437C:18           	.BY %00011000
   28 437D:78           	.BY %01111000
   29 437E:38           	.BY %00111000
   30 437F:18           	.BY %00011000
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   44
                        6502:fonts/plain_digit7.src     16:20:20  

   31                   
   32 4380:FE           	.BY %11111110
   33 4381:30           	.BY %00110000
   34 4382:18           	.BY %00011000
   35 4383:0C           	.BY %00001100
   36 4384:06           	.BY %00000110
   37 4385:C6           	.BY %11000110
   38 4386:7C           	.BY %01111100
   39                   
   40 4387:7C           	.BY %01111100
   41 4388:C6           	.BY %11000110
   42 4389:06           	.BY %00000110
   43 438A:0C           	.BY %00001100
   44 438B:06           	.BY %00000110
   45 438C:C6           	.BY %11000110
   46 438D:7C           	.BY %01111100
   47                   
   48 438E:0C           	.BY %00001100
   49 438F:0C           	.BY %00001100
   50 4390:FE           	.BY %11111110
   51 4391:CC           	.BY %11001100
   52 4392:6C           	.BY %01101100
   53 4393:3C           	.BY %00111100
   54 4394:1C           	.BY %00011100
   55                   
   56 4395:FC           	.BY %11111100
   57 4396:06           	.BY %00000110
   58 4397:06           	.BY %00000110
   59 4398:FC           	.BY %11111100
   60 4399:C0           	.BY %11000000
   61 439A:C0           	.BY %11000000
   62 439B:FC           	.BY %11111100
   63                   
   64 439C:7C           	.BY %01111100
   65 439D:C6           	.BY %11000110
   66 439E:C6           	.BY %11000110
   67 439F:FC           	.BY %11111100
   68 43A0:C0           	.BY %11000000
   69 43A1:C0           	.BY %11000000
   70 43A2:7C           	.BY %01111100
   71                   
   72 43A3:C0           	.BY %11000000
   73 43A4:60           	.BY %01100000
   74 43A5:30           	.BY %00110000
   75 43A6:18           	.BY %00011000
   76 43A7:0C           	.BY %00001100
   77 43A8:06           	.BY %00000110
   78 43A9:FE           	.BY %11111110
   79                   
   80 43AA:7C           	.BY %01111100
   81 43AB:C6           	.BY %11000110
   82 43AC:C6           	.BY %11000110
   83 43AD:7C           	.BY %01111100
   84 43AE:C6           	.BY %11000110
   85 43AF:C6           	.BY %11000110
   86 43B0:7C           	.BY %01111100
   87                   
   88 43B1:7C           	.BY %01111100
   89 43B2:06           	.BY %00000110
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   45
                        6502:fonts/plain_digit7.src     16:20:20  

   90 43B3:06           	.BY %00000110
   91 43B4:7E           	.BY %01111110
   92 43B5:C6           	.BY %11000110
   93 43B6:C6           	.BY %11000110
   94 43B7:7C           	.BY %01111100
   95                   
   96                   	.END
    5                 + 	  #ENDIF
    6      TRUE       + 	  #IF {FONT_TYPE&HPR_UPPER} <> 0
    7                   	    .IN 6502:fonts/plain_upper7.src
    1                   
    2                   * === upper7font.src =================================
    3                   * 
    4                   * HandyPrint Uppercase Alphaetic 7-Height Font  --  Ha
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date       Name              Description
   10                   * ---------  ----------------  -----------------------
   11                   * 13-Feb-89   =RJ Mical=        Created this file!
   12                   * 
   13                   * ====================================================
   14                   
   15 43B8:C6           	.BY %11000110
   16 43B9:C6           	.BY %11000110
   17 43BA:C6           	.BY %11000110
   18 43BB:FE           	.BY %11111110
   19 43BC:C6           	.BY %11000110
   20 43BD:6C           	.BY %01101100
   21 43BE:38           	.BY %00111000
   22                   
   23 43BF:FC           	.BY %11111100
   24 43C0:C6           	.BY %11000110
   25 43C1:C6           	.BY %11000110
   26 43C2:FC           	.BY %11111100
   27 43C3:C6           	.BY %11000110
   28 43C4:C6           	.BY %11000110
   29 43C5:FC           	.BY %11111100
   30                   
   31 43C6:7C           	.BY %01111100
   32 43C7:C6           	.BY %11000110
   33 43C8:C0           	.BY %11000000
   34 43C9:C0           	.BY %11000000
   35 43CA:C0           	.BY %11000000
   36 43CB:C6           	.BY %11000110
   37 43CC:7C           	.BY %01111100
   38                   
   39 43CD:FC           	.BY %11111100
   40 43CE:C6           	.BY %11000110
   41 43CF:C6           	.BY %11000110
   42 43D0:C6           	.BY %11000110
   43 43D1:C6           	.BY %11000110
   44 43D2:C6           	.BY %11000110
   45 43D3:FC           	.BY %11111100
   46                   
   47 43D4:FE           	.BY %11111110
   48 43D5:C0           	.BY %11000000
   49 43D6:C0           	.BY %11000000
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   46
                        6502:fonts/plain_upper7.src     16:20:20  

   50 43D7:F8           	.BY %11111000
   51 43D8:C0           	.BY %11000000
   52 43D9:C0           	.BY %11000000
   53 43DA:FE           	.BY %11111110
   54                   
   55 43DB:C0           	.BY %11000000
   56 43DC:C0           	.BY %11000000
   57 43DD:C0           	.BY %11000000
   58 43DE:F8           	.BY %11111000
   59 43DF:C0           	.BY %11000000
   60 43E0:C0           	.BY %11000000
   61 43E1:FE           	.BY %11111110
   62                   
   63 43E2:7E           	.BY %01111110
   64 43E3:C6           	.BY %11000110
   65 43E4:C6           	.BY %11000110
   66 43E5:CE           	.BY %11001110
   67 43E6:C0           	.BY %11000000
   68 43E7:C6           	.BY %11000110
   69 43E8:7C           	.BY %01111100
   70                   
   71 43E9:C6           	.BY %11000110
   72 43EA:C6           	.BY %11000110
   73 43EB:C6           	.BY %11000110
   74 43EC:FE           	.BY %11111110
   75 43ED:C6           	.BY %11000110
   76 43EE:C6           	.BY %11000110
   77 43EF:C6           	.BY %11000110
   78                   
   79 43F0:7E           	.BY %01111110
   80 43F1:18           	.BY %00011000
   81 43F2:18           	.BY %00011000
   82 43F3:18           	.BY %00011000
   83 43F4:18           	.BY %00011000
   84 43F5:18           	.BY %00011000
   85 43F6:7E           	.BY %01111110
   86                   
   87 43F7:7C           	.BY %01111100
   88 43F8:C6           	.BY %11000110
   89 43F9:06           	.BY %00000110
   90 43FA:06           	.BY %00000110
   91 43FB:06           	.BY %00000110
   92 43FC:06           	.BY %00000110
   93 43FD:7E           	.BY %01111110
   94                   
   95 43FE:C6           	.BY %11000110
   96 43FF:CC           	.BY %11001100
   97 4400:D8           	.BY %11011000
   98 4401:F0           	.BY %11110000
   99 4402:D8           	.BY %11011000
  100 4403:CC           	.BY %11001100
  101 4404:C6           	.BY %11000110
  102                   
  103 4405:FE           	.BY %11111110
  104 4406:C0           	.BY %11000000
  105 4407:C0           	.BY %11000000
  106 4408:C0           	.BY %11000000
  107 4409:C0           	.BY %11000000
  108 440A:C0           	.BY %11000000
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   47
                        6502:fonts/plain_upper7.src     16:20:20  

  109 440B:C0           	.BY %11000000
  110                   
  111 440C:C6           	.BY %11000110
  112 440D:C6           	.BY %11000110
  113 440E:C6           	.BY %11000110
  114 440F:D6           	.BY %11010110
  115 4410:FE           	.BY %11111110
  116 4411:EE           	.BY %11101110
  117 4412:C6           	.BY %11000110
  118                   
  119 4413:C6           	.BY %11000110
  120 4414:C6           	.BY %11000110
  121 4415:CE           	.BY %11001110
  122 4416:DE           	.BY %11011110
  123 4417:F6           	.BY %11110110
  124 4418:E6           	.BY %11100110
  125 4419:C6           	.BY %11000110
  126                   
  127 441A:7C           	.BY %01111100
  128 441B:C6           	.BY %11000110
  129 441C:C6           	.BY %11000110
  130 441D:C6           	.BY %11000110
  131 441E:C6           	.BY %11000110
  132 441F:C6           	.BY %11000110
  133 4420:7C           	.BY %01111100
  134                   
  135 4421:C0           	.BY %11000000
  136 4422:C0           	.BY %11000000
  137 4423:C0           	.BY %11000000
  138 4424:FC           	.BY %11111100
  139 4425:C6           	.BY %11000110
  140 4426:C6           	.BY %11000110
  141 4427:FC           	.BY %11111100
  142                   
  143 4428:7A           	.BY %01111010
  144 4429:CE           	.BY %11001110
  145 442A:D6           	.BY %11010110
  146 442B:C6           	.BY %11000110
  147 442C:C6           	.BY %11000110
  148 442D:C6           	.BY %11000110
  149 442E:7C           	.BY %01111100
  150                   
  151 442F:C6           	.BY %11000110
  152 4430:CC           	.BY %11001100
  153 4431:D8           	.BY %11011000
  154 4432:FC           	.BY %11111100
  155 4433:C6           	.BY %11000110
  156 4434:C6           	.BY %11000110
  157 4435:FC           	.BY %11111100
  158                   
  159 4436:7C           	.BY %01111100
  160 4437:C6           	.BY %11000110
  161 4438:06           	.BY %00000110
  162 4439:7C           	.BY %01111100
  163 443A:C0           	.BY %11000000
  164 443B:C6           	.BY %11000110
  165 443C:7C           	.BY %01111100
  166                   
  167 443D:18           	.BY %00011000
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   48
                        6502:fonts/plain_upper7.src     16:20:20  

  168 443E:18           	.BY %00011000
  169 443F:18           	.BY %00011000
  170 4440:18           	.BY %00011000
  171 4441:18           	.BY %00011000
  172 4442:18           	.BY %00011000
  173 4443:7E           	.BY %01111110
  174                   
  175 4444:7C           	.BY %01111100
  176 4445:C6           	.BY %11000110
  177 4446:C6           	.BY %11000110
  178 4447:C6           	.BY %11000110
  179 4448:C6           	.BY %11000110
  180 4449:C6           	.BY %11000110
  181 444A:C6           	.BY %11000110
  182                   
  183 444B:38           	.BY %00111000
  184 444C:38           	.BY %00111000
  185 444D:6C           	.BY %01101100
  186 444E:6C           	.BY %01101100
  187 444F:6C           	.BY %01101100
  188 4450:C6           	.BY %11000110
  189 4451:C6           	.BY %11000110
  190                   
  191 4452:6C           	.BY %01101100
  192 4453:D6           	.BY %11010110
  193 4454:D6           	.BY %11010110
  194 4455:D6           	.BY %11010110
  195 4456:C6           	.BY %11000110
  196 4457:C6           	.BY %11000110
  197 4458:C6           	.BY %11000110
  198                   
  199 4459:C6           	.BY %11000110
  200 445A:C6           	.BY %11000110
  201 445B:6C           	.BY %01101100
  202 445C:38           	.BY %00111000
  203 445D:6C           	.BY %01101100
  204 445E:C6           	.BY %11000110
  205 445F:C6           	.BY %11000110
  206                   
  207 4460:18           	.BY %00011000
  208 4461:18           	.BY %00011000
  209 4462:18           	.BY %00011000
  210 4463:18           	.BY %00011000
  211 4464:3C           	.BY %00111100
  212 4465:66           	.BY %01100110
  213 4466:66           	.BY %01100110
  214                   
  215 4467:FE           	.BY %11111110
  216 4468:C0           	.BY %11000000
  217 4469:60           	.BY %01100000
  218 446A:30           	.BY %00110000
  219 446B:18           	.BY %00011000
  220 446C:0C           	.BY %00001100
  221 446D:FE           	.BY %11111110
  222                   
  223                   	.END
    8                 + 	  #ENDIF
    9      FALSE        	  #IF {FONT_TYPE&HPR_LOWER} <> 0
   11                 + 	  #ENDIF
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   49
                        mult32.src                      16:20:20  

   12      TRUE       + 	  #IF {FONT_TYPE&HPR_PUNC} <> 0
   13                   	    .IN 6502:fonts/plain_punc7.src
    1                   
    2                   * === punc7font.src ==================================
    3                   * 
    4                   * HandyPrint Punctuation 7-Height Font  --  Handy Soft
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date       Name              Description
   10                   * ---------  ----------------  -----------------------
   11                   * 13-Feb-89   =RJ Mical=        Created this file!
   12                   * 
   13                   * ====================================================
   14                   
   15                   
   16                   ; Defines these characters:  !"'(),-.:;?
   17                   
   18 446E:18           	.BY %00011000
   19 446F:00           	.BY %00000000
   20 4470:18           	.BY %00011000
   21 4471:3C           	.BY %00111100
   22 4472:3C           	.BY %00111100
   23 4473:3C           	.BY %00111100
   24 4474:18           	.BY %00011000
   25                   
   26 4475:00           	.BY %00000000
   27 4476:00           	.BY %00000000
   28 4477:00           	.BY %00000000
   29 4478:00           	.BY %00000000
   30 4479:66           	.BY %01100110
   31 447A:66           	.BY %01100110
   32 447B:66           	.BY %01100110
   33                   
   34 447C:00           	.BY %00000000
   35 447D:00           	.BY %00000000
   36 447E:00           	.BY %00000000
   37 447F:00           	.BY %00000000
   38 4480:30           	.BY %00110000
   39 4481:18           	.BY %00011000
   40 4482:18           	.BY %00011000
   41                   
   42 4483:0C           	.BY %00001100
   43 4484:18           	.BY %00011000
   44 4485:30           	.BY %00110000
   45 4486:30           	.BY %00110000
   46 4487:30           	.BY %00110000
   47 4488:18           	.BY %00011000
   48 4489:0C           	.BY %00001100
   49                   
   50 448A:30           	.BY %00110000
   51 448B:18           	.BY %00011000
   52 448C:0C           	.BY %00001100
   53 448D:0C           	.BY %00001100
   54 448E:0C           	.BY %00001100
   55 448F:18           	.BY %00011000
   56 4490:30           	.BY %00110000
   57                   
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   50
                        6502:fonts/plain_punc7.src      16:20:20  

   58 4491:30           	.BY %00110000
   59 4492:18           	.BY %00011000
   60 4493:18           	.BY %00011000
   61 4494:00           	.BY %00000000
   62 4495:00           	.BY %00000000
   63 4496:00           	.BY %00000000
   64 4497:00           	.BY %00000000
   65                   
   66 4498:00           	.BY %00000000
   67 4499:00           	.BY %00000000
   68 449A:00           	.BY %00000000
   69 449B:3C           	.BY %00111100
   70 449C:00           	.BY %00000000
   71 449D:00           	.BY %00000000
   72 449E:00           	.BY %00000000
   73                   
   74 449F:18           	.BY %00011000
   75 44A0:18           	.BY %00011000
   76 44A1:00           	.BY %00000000
   77 44A2:00           	.BY %00000000
   78 44A3:00           	.BY %00000000
   79 44A4:00           	.BY %00000000
   80 44A5:00           	.BY %00000000
   81                   
   82 44A6:00           	.BY %00000000
   83 44A7:18           	.BY %00011000
   84 44A8:18           	.BY %00011000
   85 44A9:00           	.BY %00000000
   86 44AA:18           	.BY %00011000
   87 44AB:18           	.BY %00011000
   88 44AC:00           	.BY %00000000
   89                   
   90 44AD:30           	.BY %00110000
   91 44AE:18           	.BY %00011000
   92 44AF:18           	.BY %00011000
   93 44B0:00           	.BY %00000000
   94 44B1:18           	.BY %00011000
   95 44B2:18           	.BY %00011000
   96 44B3:00           	.BY %00000000
   97                   
   98 44B4:18           	.BY %00011000
   99 44B5:00           	.BY %00000000
  100 44B6:18           	.BY %00011000
  101 44B7:0C           	.BY %00001100
  102 44B8:06           	.BY %00000110
  103 44B9:C6           	.BY %11000110
  104 44BA:7C           	.BY %01111100
  105                   
  106                   	.END
   14                 + 	  #ENDIF
   15      FALSE        	  #IF {FONT_TYPE&HPR_OTHER} <> 0
   17                 + 	  #ENDIF
   18                   	    .IN 6502:fonts/plain_nix7.src
    1                   
    2                   * === nix7font.src ===================================
    3                   * 
    4                   * HandyPrint Nix-Character 7-Height Font  --  Handy So
    5                   * 
    6                   * Confidential and Proprietary
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   51
                        6502:fonts/plain_nix7.src       16:20:20  

    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date       Name              Description
   10                   * ---------  ----------------  -----------------------
   11                   * 13-Feb-89   =RJ Mical=        Created this file!
   12                   * 
   13                   * ====================================================
   14                   
   15 44BB:A5           	.BY %10100101
   16 44BC:5A           	.BY %01011010
   17 44BD:A5           	.BY %10100101
   18 44BE:5A           	.BY %01011010
   19 44BF:A5           	.BY %10100101
   20 44C0:5A           	.BY %01011010
   21 44C1:A5           	.BY %10100101
   22                   
   23                   	.END
   19                 + 
  126                   
  127                   	HPR_CHARSET
    1      FALSE        	  #IF {FONT_TYPE&HPR_OTHER} != 0
   63                 + 	  #ELSE 
   64      TRUE       + 	    #IF {FONT_TYPE&HPR_PUNC} != 0
   65      FALSE        	      #IF {FONT_TYPE&HPR_LOWER} != 0
   79                 + 	      #ELSE
   80      TRUE       + 	        #IF {FONT_TYPE&HPR_UPPER} != 0
   81      TRUE       + 	          #IF {FONT_TYPE&HPR_DIGIT} != 0
   82                 + 	            .CS 6502:fonts/cset_0b.src
   83                   	          #ELSE
   85                 + 	          #ENDIF
   86                   	        #ELSE
   92                 + 	        #ENDIF
   93                 + 	      #ENDIF
   94                   	    #ELSE
  126                 + 	    #ENDIF
  127                 + 	  #ENDIF
  128                 + 
  128                   
  129                   ;=====================================================
  130                   
  131                   ; Code segment
  132                   
  133                   
  134                   
  135                   start	.RUN
  136                   
  137 44C2:78           	sei
  138 44C3:D8           	cld
  139 44C4:A2 FF        	ldx #$ff
  140 44C6:9A           	txs
  141                   
  142                   	INITSYS
    1 44C7:A9 0D      + 	LDA #DISP_COLOR+DISP_FOURBIT+DMA_ENABLE
    2 44C9:8D 5E 42   + 	STA DISPCTL_RAM
    3 44CC:A9 08      + 	LDA #LEFTHAND		
    4 44CE:8D 5D 42   + 	STA SPRSYS_RAM
    5 44D1:8D 92 FC   + 	STA SPRSYS
    6 44D4:A9 08      + 	LDA #VECTOR_SPACE	
    7 44D6:8D F9 FF   + 	STA MAPCTL
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   52
                        mult32.src                      16:20:20  

    8      FALSE         #IFDEF RAMCART_USER
   10                 +  #ELSE
   11 44D9:A9 0A      + 	LDA #CART_ADDR_DATA+RESTLESS
   12                 +  #ENDIF
   13 44DB:8D 5F 42   + 	STA IODAT_RAM
   14 44DE:8D 8B FD   + 	STA IODAT
   15 44E1:8D 60 42   + 	STA IODIR_RAM
   16 44E4:8D 8A FD   + 	STA IODIR
   17 44E7:A9 04      + 	LDA #TXOPEN	
   18 44E9:8D 8C FD   + 	STA SERCTL	
   19      FALSE        	  #IFDEF AUTO_TIMEOUT_USER
   22                 + 	  #ENDIF
   23                 + 
  143                   
  144                   	INITINT	interrupt_buffer,rts0	; for when we want our 
    1      41C0       + sysIntTable	.EQ interrupt_buffer
    2 44EC:A9 E3      + 		LDA #<UserIntHandler
    3 44EE:8D FE FF   + 		STA CPU_IRQ
    4 44F1:A9 42      + 		LDA #>UserIntHandler
    5 44F3:8D FF FF   + 		STA CPU_IRQ+1
    6 44F6:A2 0F      + 		LDX #8*2-1
    7      44F8       + INITINT.000D	.= *
    8 44F8:A9 43      + 		  LDA #>IntReturn
    9 44FA:9D C0 41   + 		  STA interrupt_buffer,X
   10 44FD:CA         + 		  DEX
   11 44FE:A9 04      + 		  LDA #<IntReturn
   12 4500:9D C0 41   + 		  STA interrupt_buffer,X
   13 4503:CA         + 		  DEX
   14 4504:10 F2      + 		 BPL INITINT.000D
   15      TRUE       + 	  #IFDEF BRK_USER
   16 4506:AD FA FF   + 		LDA CPU_NMI
   17 4509:8D 11 43   + 		STA BRK_vector+2
   18 450C:AD FB FF   + 		LDA CPU_NMI+1
   19 450F:8D 12 43   + 		STA BRK_vector+3
   20                 + 	  #ENDIF 
   21      FALSE        	  #IFDEF SERIALPORT_USER
   26                 + 	  #ENDIF
   27                 + 
  145                   
  146 4512:A9 00        	lda #<$3000		; for Howard board
  147 4514:8D FA FF     	sta $fffa
  148 4517:A9 30        	lda #>$3000
  149 4519:8D FB FF     	sta $fffb
  150                   
  151                   	SETDBUF screen0,screen1
    1 451C:A9 00      + 		LDA	#<screen0
    2 451E:8D 61 42   + 		STA	RenderBuffer
    3 4521:A9 02      + 		LDA	#>screen0
    4 4523:8D 62 42   + 		STA	RenderBuffer+1
    5 4526:A9 E0      + 		LDA	#<screen1
    6 4528:8D 63 42   + 		STA	DisplayBuffer
    7 452B:A9 21      + 		LDA	#>screen1
    8 452D:8D 64 42   + 		STA	DisplayBuffer+1
    9 4530:9C 66 42   + 		STZ	DisplayFlags
   10                 + 
  152                   	SETDISP_60
    1                   		SETDISP	$9E,$98,$68,$9F,$29
    1 4533:A9 9E      + 		LDA	#$9E
    2 4535:8D 00 FD   + 		STA	HCOUNT+TIM_BACKUP
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   53
                        mult32.src                      16:20:20  

    3      FALSE        	#IFDEF EOL_USER
    5                 + 	#ELSE
    6 4538:A9 18      + 		lda #$98&%01111111
    7                 + 	#ENDIF
    8 453A:8D 01 FD   + 		STA	HCOUNT+TIM_CONTROLA
    9 453D:A9 68      + 		LDA	#$68
   10 453F:8D 08 FD   + 		STA	VCOUNT+TIM_BACKUP
   11 4542:A9 9F      + 		lda #$9F|%10000000
   12 4544:8D 09 FD   + 		STA	VCOUNT+TIM_CONTROLA
   13 4547:A9 29      + 		LDA	#$29
   14 4549:8D 93 FD   + 		STA	PBKUP
   15      FALSE        	#IFNDEF	EOF_USER
   17                 + 	#ENDIF
   18                 + 
    2                 + 
  153                   	INITEOF
    1 454C:20 13 43   + 		JSR	InitEOF
    2                 + 
  154                   
  155                   	INITSUZY
    1 454F:A9 F3      + 		LDA	#$F3
    2 4551:8D 83 FC   + 		STA	SPRINIT
    3 4554:A9 7F      + 		LDA	#$7F
    4 4556:8D 28 FC   + 		STA	HSIZOFFL
    5 4559:8D 2A FC   + 		STA	VSIZOFFL
    6 455C:A9 01      + 		LDA	#$01
    7 455E:8D 90 FC   + 		STA	SUZYBUSEN
    8 4561:9C 90 FD   + 		STZ	SDONEACK
    9                 + 
  156                   
  157 4564:A9 00        	lda #0
  158                   	HOFF8
    1 4566:8D 04 FC   + 		STA	HOFFL
    2                 + 
  159                   	VOFF8
    1 4569:8D 06 FC   + 		STA	VOFFL
    2                 + 
  160                   
  161 456C:AD 5D 42     	lda SPRSYS_RAM
  162 456F:09 60        	ora #NO_COLLIDE+ACCUMULATE
  163 4571:29 7F        	and #<~SIGNMATH
  164 4573:8D 5D 42     	sta SPRSYS_RAM
  165 4576:8D 92 FC     	sta SPRSYS
  166                   
  167 4579:A2 1F        	ldx #31			; set up palette
  168 457B:BD ** **     .0	  lda palette,x
  169 457E:9D A0 FD     	  sta GREEN0,x
  170 4581:CA           	  dex
  171 4582:10 F7        	 bpl .0
  172                   
  173                   	INITLIT textbuffer,20
    1 4584:A9 D0      + 	LDA #<textbuffer
    2 4586:A2 41      + 	LDX #>textbuffer
    3 4588:85 00      + 	STA sysptr
    4 458A:86 01      + 	STX sysptr+1
    5 458C:A2 07      + 	LDX #FONT_HEIGHT
    6      458E       + INITLIT.0015	.= *
    7 458E:A9 14      + 	  lda #20
    8 4590:92 00      + 	  STA (sysptr)
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   54
                        mult32.src                      16:20:20  

    9 4592:18         + 	  CLC
   10 4593:65 00      + 	  ADC sysptr
   11 4595:85 00      + 	  STA sysptr
   12 4597:90 **      + 	  bcc INITLIT.00151
   13 4599:E6 01      + 	  inc sysptr+1
   14      459B       + INITLIT.00151	.= *
   15 459B:CA         + 	  DEX
   16 459C:D0 F0      + 	 BNE INITLIT.0015
   17 459E:A9 00      + 	LDA #0
   18 45A0:92 00      + 	STA (sysptr)
   19                 + 
  174                   
  175 45A2:58           	cli
  176                   
  177 45A3:             loop
  178 45A3:20 ** **     	  jsr getinput
  179 45A6:20 ** **     	  jsr domultiply
  180 45A9:20 ** **     	  jsr showresult
  181                   
  182 45AC:20 ** **     	  jsr do.dbuf
  183                   	  WAITEOF
    1 45AF:A9 80      + 		LDA	#DISPLAY_EOFFLAG
    2 45B1:1C 66 42   + 		TRB	DisplayFlags
    3      45B4       + systemp		.=	*
    4 45B4:2C 66 42   + 		BIT	DisplayFlags
    5 45B7:F0 FB      + 		BEQ	systemp
    6                 + 
  184 45B9:80 E8        	 bra loop
  185                   
  186                   
  187                   
  188 45BB:             do.dbuf
  189                   	DBUF_DISPLAY
    1 45BB:08         + 		PHP
    2 45BC:78         + 		SEI
    3 45BD:AD 61 42   + 		LDA	RenderBuffer
    4 45C0:AE 63 42   + 		ldx	DisplayBuffer
    5 45C3:8D 63 42   + 		STA	DisplayBuffer
    6 45C6:8E 61 42   + 		stx	RenderBuffer
    7 45C9:AD 62 42   + 		LDA	RenderBuffer+1
    8 45CC:AE 64 42   + 		ldx	DisplayBuffer+1
    9 45CF:8D 64 42   + 		STA	DisplayBuffer+1
   10 45D2:8E 62 42   + 		stx	RenderBuffer+1
   11 45D5:28         + 		PLP
   12                 + 
  190 45D6:60           rts0	rts
  191                   
  192                   
  193 45D7:             getinput
  194                   	GETJOY
    1 45D7:AD B0 FC   + 	  LDA JOYSTICK
    2                 + 
  195 45DA:A8           	tay
  196 45DB:49 FF        	eor #$ff
  197 45DD:05 1A        	ora stick
  198 45DF:49 FF        	eor #$ff
  199 45E1:85 1B        	sta edgestick
  200 45E3:98           	tya
  201 45E4:85 1A        	sta stick
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   55
                                                        16:20:20  

  202                   
  203 45E6:A5 1B        	lda edgestick
  204 45E8:89 10        	bit #JOY_LEFT
  205 45EA:F0 **        	beq .00
  206 45EC:C6 09        	dec whichdigit
  207                   
  208 45EE:89 20        .00	bit #JOY_RIGHT
  209 45F0:F0 **        	beq .10
  210 45F2:E6 09        	inc whichdigit
  211                   
  212 45F4:89 C0        .10	bit #JOY_UP|JOY_DOWN
  213 45F6:F0 **        	beq .40
  214 45F8:A5 09        	lda whichdigit
  215 45FA:49 08        	eor #8
  216 45FC:85 09        	sta whichdigit
  217                   
  218 45FE:A5 09        .40	lda whichdigit
  219 4600:29 0F        	and #16-1
  220 4602:85 09        	sta whichdigit
  221                   
  222 4604:A5 1B        	lda edgestick
  223 4606:89 01        	bit #OUTER_BUTTON
  224 4608:F0 **        	beq .20
  225 460A:20 ** **     	jsr inc.digit
  226                   
  227 460D:A5 1B        .20	lda edgestick
  228 460F:89 02        	bit #INNER_BUTTON
  229 4611:F0 **        	beq .30
  230 4613:20 ** **     	jsr dec.digit
  231                   
  232 4616:             .30
  233                   
  234 4616:60           .ff	rts
  235                   
  236                   
  237 4617:             inc.digit
  238 4617:A4 09        	ldy whichdigit
  239 4619:B9 ** **     	lda moredigits,y
  240 461C:85 08        	sta temp0
  241 461E:BE ** **     	ldx digitaddr,y
  242 4621:A9 11        	lda #$11
  243 4623:39 ** **     	and digitmask,y
  244 4626:18           	clc
  245 4627:75 00        	adc 0,x
  246 4629:95 00        	sta 0,x
  247                   
  248 462B:90 **        	bcc .1
  249 462D:C6 08        .0	  dec temp0
  250 462F:30 **        	  bmi .1
  251 4631:E8           	  inx
  252 4632:F6 00        	  inc 0,x
  253 4634:F0 F7        	 beq .0
  254                   
  255 4636:60           .1	rts
  256                   
  257                   
  258 4637:             dec.digit
  259 4637:A4 09        	ldy whichdigit
  260 4639:B9 ** **     	lda moredigits,y
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   56
                                                        16:20:20  

  261 463C:85 08        	sta temp0
  262 463E:BE ** **     	ldx digitaddr,y
  263 4641:A9 11        	lda #$11
  264 4643:39 ** **     	and digitmask,y
  265 4646:49 FF        	eor #$ff
  266 4648:38           	sec
  267 4649:75 00        	adc 0,x
  268 464B:95 00        	sta 0,x
  269                   
  270 464D:B0 **        	bcs .1
  271 464F:C6 08        .0	  dec temp0
  272 4651:30 **        	  bmi .1
  273 4653:E8           	  inx
  274 4654:D6 00        	  dec 0,x
  275 4656:B5 00        	  lda 0,x
  276 4658:C9 FF        	  cmp #$ff
  277 465A:F0 F3        	 beq .0
  278                   	  
  279 465C:60           .1	rts
  280                   
  281                   
  282 465D:             domultiply
  283 465D:A5 0A        	lda factor1
  284 465F:8D 52 FC     	sta MATHD
  285 4662:A5 0B        	lda factor1+1
  286 4664:8D 53 FC     	sta MATHC
  287 4667:A5 0E        	lda factor2
  288 4669:8D 54 FC     	sta MATHB
  289 466C:A5 0F        	lda factor2+1
  290 466E:8D 55 FC     	sta MATHA	; MULTIPLY
  291                   
  292                   	WAITMATH
    1      4671       + WAITMATH.00190	.= *
    2 4671:2C 92 FC   + 	BIT SPRSYS
    3 4674:30 FB      + 	BMI WAITMATH.00190
    4                 + 
  293                   
  294 4676:AD 60 FC     	lda MATHH
  295 4679:85 12        	sta product
  296 467B:AD 61 FC     	lda MATHG
  297 467E:85 13        	sta product+1
  298 4680:AD 62 FC     	lda MATHF
  299 4683:8D 6C FC     	sta MATHM
  300 4686:AD 63 FC     	lda MATHE
  301 4689:8D 6D FC     	sta MATHL
  302 468C:9C 6E FC     	stz MATHK	; stz MATHJ
  303                   
  304 468F:A5 10        	lda factor2+2
  305 4691:8D 54 FC     	sta MATHB
  306 4694:A5 11        	lda factor2+3
  307 4696:8D 55 FC     	sta MATHA	; MULTIPLY
  308                   
  309                   	WAITMATH
    1      4699       + WAITMATH.001A0	.= *
    2 4699:2C 92 FC   + 	BIT SPRSYS
    3 469C:30 FB      + 	BMI WAITMATH.001A0
    4                 + 
  310                   
  311 469E:A5 0C        	lda factor1+2
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   57
                                                        16:20:20  

  312 46A0:8D 52 FC     	sta MATHD
  313 46A3:A5 0D        	lda factor1+3
  314 46A5:8D 53 FC     	sta MATHC
  315 46A8:A5 0E        	lda factor2
  316 46AA:8D 54 FC     	sta MATHB
  317 46AD:A5 0F        	lda factor2+1
  318 46AF:8D 55 FC     	sta MATHA	; MULTIPLY
  319                   
  320 46B2:A2 00        	ldx #0		; get excess carry state in x
  321 46B4:A9 20        	lda #MATHCARRY
  322                   	WAITMATH
    1      46B6       + WAITMATH.001B0	.= *
    2 46B6:2C 92 FC   + 	BIT SPRSYS
    3 46B9:30 FB      + 	BMI WAITMATH.001B0
    4                 + 
  323                   
  324 46BB:F0 **        	beq .0
  325 46BD:E8           	inx
  326 46BE:AD 6C FC     .0	lda MATHM
  327 46C1:85 14        	sta product+2
  328 46C3:AD 6D FC     	lda MATHL
  329 46C6:85 15        	sta product+3
  330 46C8:AD 6E FC     	lda MATHK
  331 46CB:8D 6C FC     	sta MATHM
  332 46CE:AD 6F FC     	lda MATHJ
  333 46D1:8D 6D FC     	sta MATHL
  334 46D4:8E 6E FC     	stx MATHK	; stz MATHJ
  335                   
  336 46D7:A5 10        	lda factor2+2
  337 46D9:8D 54 FC     	sta MATHB
  338 46DC:A5 11        	lda factor2+3
  339 46DE:8D 55 FC     	sta MATHA	; MULTIPLY
  340                   
  341                   	WAITMATH
    1      46E1       + WAITMATH.001C0	.= *
    2 46E1:2C 92 FC   + 	BIT SPRSYS
    3 46E4:30 FB      + 	BMI WAITMATH.001C0
    4                 + 
  342                   
  343 46E6:AD 6C FC     	lda MATHM
  344 46E9:85 16        	sta product+4
  345 46EB:AD 6D FC     	lda MATHL
  346 46EE:85 17        	sta product+5
  347 46F0:AD 6E FC     	lda MATHK
  348 46F3:85 18        	sta product+6
  349 46F5:AD 6F FC     	lda MATHJ
  350 46F8:85 19        	sta product+7
  351                   
  352 46FA:60           	rts
  353                   
  354                   
  355                   
  356 46FB:             showresult
  357 46FB:A2 **        	ldx #<f1txt
  358 46FD:A0 **        	ldy #>f1txt
  359 46FF:A5 0D        	lda factor1+3
  360 4701:20 ** **     	jsr putbyte.xy
  361 4704:A5 0C        	lda factor1+2
  362 4706:20 ** **     	jsr putbyte
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   58
                                                        16:20:20  

  363 4709:A5 0B        	lda factor1+1
  364 470B:20 ** **     	jsr putbyte
  365 470E:A5 0A        	lda factor1
  366 4710:20 ** **     	jsr putbyte
  367                   
  368 4713:A2 **        	ldx #<f2txt
  369 4715:A0 **        	ldy #>f2txt
  370 4717:A5 11        	lda factor2+3
  371 4719:20 ** **     	jsr putbyte.xy
  372 471C:A5 10        	lda factor2+2
  373 471E:20 ** **     	jsr putbyte
  374 4721:A5 0F        	lda factor2+1
  375 4723:20 ** **     	jsr putbyte
  376 4726:A5 0E        	lda factor2
  377 4728:20 ** **     	jsr putbyte
  378                   
  379 472B:A2 **        	ldx #<ptxt
  380 472D:A0 **        	ldy #>ptxt
  381 472F:A5 19        	lda product+7
  382 4731:20 ** **     	jsr putbyte.xy
  383 4734:A5 18        	lda product+6
  384 4736:20 ** **     	jsr putbyte
  385 4739:A5 17        	lda product+5
  386 473B:20 ** **     	jsr putbyte
  387 473E:A5 16        	lda product+4
  388 4740:20 ** **     	jsr putbyte
  389 4743:A5 15        	lda product+3
  390 4745:20 ** **     	jsr putbyte
  391 4748:A5 14        	lda product+2
  392 474A:20 ** **     	jsr putbyte
  393 474D:A5 13        	lda product+1
  394 474F:20 ** **     	jsr putbyte
  395 4752:A5 12        	lda product
  396 4754:20 ** **     	jsr putbyte
  397                   
  398 4757:A2 **        	ldx #<erasescb
  399 4759:A0 **        	ldy #>erasescb
  400 475B:20 ** **     	jsr showsprites
  401                   
  402 475E:A9 05        	lda #5
  403 4760:8D ** **     	sta textscb+SCB_HPOS
  404 4763:8D ** **     	sta textscb+SCB_VPOS
  405                   
  406 4766:A2 **        	ldx #<multmessage
  407 4768:A0 **        	ldy #>multmessage
  408 476A:20 ** **     	jsr showmessage
  409                   
  410 476D:A4 09        	ldy whichdigit
  411 476F:B9 ** **     	lda digitxpos,y
  412 4772:8D ** **     	sta boxscb+SCB_HPOS
  413 4775:B9 ** **     	lda digitypos,y
  414 4778:8D ** **     	sta boxscb+SCB_VPOS
  415                   
  416 477B:A2 **        	ldx #<boxscb
  417 477D:A0 **        	ldy #>boxscb
  418 477F:20 ** **     	jsr reshowsprites
  419                   
  420 4782:60           	rts
  421                   
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   59
                                                        16:20:20  

  422                   
  423                   
  424 4783:             myprint
  425 4783:48           	pha
  426 4784:86 00        	 stx sysptr
  427 4786:84 01        	 sty sysptr+1
  428 4788:A9 D0        	 lda #<textbuffer
  429 478A:8D 67 42     	 sta TextPtr
  430 478D:A9 41        	 lda #>textbuffer
  431 478F:8D 68 42     	 sta TextPtr+1
  432                   
  433 4792:20 6B 42     	 jsr HandyPrint
  434                   
  435 4795:CE ** **     	 dec textscb+SCB_HPOS
  436 4798:A9 0F        	 lda #$0f
  437 479A:8D ** **     	 sta textscb+SCB_PALETTE-4
  438 479D:20 ** **     	 jsr showtextsprite
  439                   
  440 47A0:EE ** **     	 inc textscb+SCB_HPOS
  441 47A3:CE ** **     	 dec textscb+SCB_VPOS
  442 47A6:20 ** **     	 jsr showtextsprite
  443                   
  444 47A9:EE ** **     	 inc textscb+SCB_HPOS
  445 47AC:EE ** **     	 inc textscb+SCB_VPOS
  446 47AF:20 ** **     	 jsr showtextsprite
  447                   
  448 47B2:CE ** **     	 dec textscb+SCB_HPOS
  449 47B5:EE ** **     	 inc textscb+SCB_VPOS
  450 47B8:20 ** **     	 jsr showtextsprite
  451                   
  452 47BB:CE ** **     	 dec textscb+SCB_VPOS
  453                   
  454 47BE:68           	pla
  455 47BF:8D ** **     	sta textscb+SCB_PALETTE-4
  456                   ;	jmp showtextsprite	; rts
  457                   
  458                   
  459 47C2:             showtextsprite
  460 47C2:A2 **        	ldx #<textscb
  461 47C4:A0 **        	ldy #>textscb
  462 47C6:4C ** **     	jmp reshowsprites	; rts
  463                   
  464                   
  465 47C9:             showmessage
  466 47C9:A9 02        .1a	  lda #$02	; yellow
  467 47CB:20 83 47     	  jsr myprint
  468 47CE:18           	  clc
  469 47CF:AD ** **     	  lda textscb+SCB_VPOS
  470 47D2:69 0A        	  adc #10
  471 47D4:8D ** **     	  sta textscb+SCB_VPOS
  472 47D7:A0 01        	  ldy #1
  473 47D9:B1 00        	  lda (sysptr),y
  474 47DB:30 **        	  bmi .4
  475 47DD:A4 01        	  ldy sysptr+1
  476 47DF:A6 00        	  ldx sysptr
  477 47E1:E8           	  inx
  478 47E2:D0 E5        	  bne .1a
  479 47E4:C8           	  iny
  480 47E5:80 E2        	 bra .1a
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   60
                                                        16:20:20  

  481                   
  482 47E7:60           .4	rts
  483                   
  484                   
  485 47E8:             showsprites
  486 47E8:AD 61 42     	lda RenderBuffer
  487 47EB:8D 08 FC     	sta VIDBASL
  488 47EE:AD 62 42     	lda RenderBuffer+1
  489 47F1:8D 09 FC     	sta VIDBASH
  490                   
  491 47F4:             reshowsprites
  492 47F4:8E 10 FC     	stx SCBNEXTL
  493 47F7:8C 11 FC     	sty SCBNEXTH
  494                   
  495 47FA:A9 01        	lda #1
  496 47FC:8D 91 FC     	sta SPRGO
  497                   	WAITSUZY
    1      47FF       + WAITSUZY.001D1	.= *
    2 47FF:A9 01      + 		lda #SUZY_SPACE
    3 4801:0C F9 FF   + 		tsb MAPCTL		
    4 4804:9C 91 FD   + 		STZ	CPUSLEEP
    5 4807:1C F9 FF   + 		trb MAPCTL		
    6 480A:AD 92 FC   + 		LDA	SPRSYS		
    7 480D:4A         + 		LSR	A		
    8 480E:B0 EF      + 		BCS	WAITSUZY.001D1		
    9 4810:9C 90 FD   + 		STZ	SDONEACK
   10                 + 
  498                   
  499 4813:60           	rts
  500                   
  501                   
  502 4814:             putbyte.xy
  503 4814:86 06        	stx ind0
  504 4816:84 07        	sty ind0+1
  505                   
  506 4818:             putbyte
  507 4818:48           	pha
  508 4819:4A           	 lsr a
  509 481A:4A           	 lsr a
  510 481B:4A           	 lsr a
  511 481C:4A           	 lsr a
  512 481D:20 ** **     	 jsr putdigit
  513 4820:68           	pla
  514 4821:29 0F        	and #$f
  515                   
  516 4823:             putdigit
  517 4823:C9 0A        	cmp #10
  518 4825:90 **        	bcc .0
  519 4827:18           	clc
  520 4828:69 00        	adc #"A"-"0"-10
  521 482A:18           .0	clc
  522 482B:69 02        	adc #"0"
  523                   
  524 482D:92 06        	sta (ind0)
  525 482F:E6 06        	inc ind0
  526 4831:D0 **        	bne .ff
  527 4833:E6 07        	inc ind0+1
  528                   
  529 4835:60           .ff	rts
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   61
                                                        16:20:20  

  530                   
  531                   
  532                   
  533                   ;=====================================================
  534                   
  535                   ; Data
  536                   
  537                   	#MACRO PALDEF
  538 MACRO             	.BY $?0/256,$?1/256,$?2/256,$?3/256,$?4/256,$?5/256,$
  539 MACRO             	.BY $?8/256,$?9/256,$?a/256,$?b/256,$?c/256,$?d/256,$
  540 MACRO             	.BY <$?0,<$?1,<$?2,<$?3,<$?4,<$?5,<$?6,<$?7
  541 MACRO             	.BY <$?8,<$?9,<$?a,<$?b,<$?c,<$?d,<$?e,<$?f
  542                   	#ENDM
  543                   
  544 4836:             palette
  545                   	PALDEF 0c0,00f,d5e,60d,408,94f,934,9f0,060,3c0,bf0,ff
    1 4836:00 00 0D 06  	.BY $0c0/256,$00f/256,$d5e/256,$60d/256,$408/256,$94f
    1      04 09 09 09  
    1                   
    2 483E:00 03 0B 0F  	.BY $060/256,$3c0/256,$bf0/256,$fff/256,$aba/256,$575
    2      0A 05 02 00  
    2                   
    3 4846:C0 0F 5E 0D  	.BY <$0c0,<$00f,<$d5e,<$60d,<$408,<$94f,<$934,<$9f0
    3      08 4F 34 F0  
    3                   
    4 484E:60 C0 F0 FF  	.BY <$060,<$3c0,<$bf0,<$fff,<$aba,<$575,<$232,<$000
    4      BA 75 32 00  
    4                   
    5                 + 
  546                   
  547                   
  548                   ;	    "----+----1----+----"
  549 4856:             multmessage
  550 4856:01 01 01 01  	.ZS "     HANDY DEMO"
  550      01 13 0C 19  
  550      0F 24 01 0F  
  550      10 18 1A 00  
  550                   
  551 4866:01 05 04 01  	.ZS " 32 BY 32 MULTIPLY"
  551      0D 24 01 05  
  551      04 01 18 20  
  551      17 1F 14 1B  
  551      17 24 00     
  552 4879:00           	.ZS ""
  553 487A:01 01 01 01  	.AS "          "
  553      01 01 01 01  
  553      01 01        
  554 4884:23 23 23 23  f1txt	.ZS           "xxxxxxxx"
  554      23 23 23 23  
  554      00           
  555 488D:01 01 01 01  	.AS "        X "
  555      01 01 01 01  
  555      23 01        
  556 4897:23 23 23 23  f2txt	.ZS           "xxxxxxxx"
  556      23 23 23 23  
  556      00           
  557 48A0:01 01 2C 2C  	.ZS "  ----------------"
  557      2C 2C 2C 2C  
  557      2C 2C 2C 2C  
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   62
                                                        16:20:20  

  557      2C 2C 2C 2C  
  557      2C 2C 00     
  558 48B3:01 01        	.AS "  "
  559 48B5:23 23 23 23  ptxt	.ZS   "xxxxxxxxxxxxxxxx"
  559      23 23 23 23  
  559      23 23 23 23  
  559      23 23 23 23  
  559      00           
  560 48C6:FF           	.BY $ff
  561                   
  562                   
  563 48C7:             erasescb
  564 48C7:C1 90 00     	.BY FOUR_PER_PIXEL+BACKNONCOLL_SPRITE, RELOAD_HV+LITE
  565 48CA:00 00        	.DA 0
  566 48CC:00 **        	.DA erasesprite
  567 48CE:00 00 00 00  	.DA 0, 0
  567                   
  568 48D2:00 A0 00 66  	.DA 160*256, 102*256
  568                   
  569 48D6:00           	.HS 00
  570                   
  571 48D7:             erasesprite
  572 48D7:02 00 00     	.HS 020000
  573                   
  574 48DA:             textscb
  575 48DA:05 90 00     	.BY ONE_PER_PIXEL+NONCOLL_SPRITE, RELOAD_HV+LITERAL, 
  576 48DD:00 00        	.DA 0
  577 48DF:D0 41        	.DA textbuffer
  578 48E1:00 00 00 00  	.DA 0, 0
  578                   
  579 48E5:00 01 00 01  	.DA $100, $100
  579                   
  580 48E9:20           	.HS 20
  581                   
  582                   
  583 48EA:             boxscb
  584 48EA:05 10 00     	.BY ONE_PER_PIXEL+NONCOLL_SPRITE, RELOAD_HV, 0
  585 48ED:00 00        	.DA 0
  586 48EF:00 **        	.DA boxsprite
  587 48F1:00 00 00 00  	.DA 0, 0
  587                   
  588 48F5:00 01 00 01  	.DA $100, $100
  588                   
  589 48F9:01           	.HS 01
  590                   
  591 48FA:             boxsprite
  592 48FA:02 3C        	.BYTE	$02,$3c
  593 48FC:03 BC 08     	.BYTE	$03,$bc,$08
  594 48FF:03 BC 08     	.BYTE	$03,$bc,$08
  595 4902:03 BC 08     	.BYTE	$03,$bc,$08
  596 4905:03 BC 08     	.BYTE	$03,$bc,$08
  597 4908:03 BC 08     	.BYTE	$03,$bc,$08
  598 490B:03 BC 08     	.BYTE	$03,$bc,$08
  599 490E:03 BC 08     	.BYTE	$03,$bc,$08
  600 4911:03 BC 08     	.BYTE	$03,$bc,$08
  601 4914:02 3C        	.BYTE	$02,$3c
  602 4916:00           	.BYTE	$00
  603                   
  604                   
Epyx HandyAsm 1.12      mult32                          15-Apr-12516:20:20 Page   63
                                                        16:20:20  

  605 4917:             digitxpos
  606 4917:54 5C 64 6C  	.BY 84,92,100,108,116,124,132,140
  606      74 7C 84 8C  
  606                   
  607 491F:54 5C 64 6C  	.BY 84,92,100,108,116,124,132,140
  607      74 7C 84 8C  
  607                   
  608                   
  609 4927:             digitypos
  610 4927:22 22 22 22  	.BY 34,34,34,34,34,34,34,34
  610      22 22 22 22  
  610                   
  611 492F:2C 2C 2C 2C  	.BY 44,44,44,44,44,44,44,44
  611      2C 2C 2C 2C  
  611                   
  612                   
  613 4937:             digitaddr
  614 4937:0D 0D 0C 0C  	.BY factor1+3,factor1+3,factor1+2,factor1+2,factor1+1
  614      0B 0B        
  615 493D:0A 0A        	.BY factor1,factor1
  616 493F:11 11 10 10  	.BY factor2+3,factor2+3,factor2+2,factor2+2,factor2+1
  616      0F 0F        
  617 4945:0E 0E        	.BY factor2,factor2
  618                   
  619 4947:             digitmask
  620 4947:F0 0F F0 0F  	.HS f00ff00ff00ff00ff00ff00ff00ff00f
  620      F0 0F F0 0F  
  620      F0 0F F0 0F  
  620      F0 0F F0 0F  
  620                   
  621                   
  622 4957:             digitinvmask
  623 4957:0F F0 0F F0  	.HS 0ff00ff00ff00ff00ff00ff00ff00ff0
  623      0F F0 0F F0  
  623      0F F0 0F F0  
  623      0F F0 0F F0  
  623                   
  624                   
  625                   
  626 4967:             moredigits
  627 4967:00 00 01 01  	.by 0,0,1,1,2,2,3,3,0,0,1,1,2,2,3,3
  627      02 02 03 03  
  627      00 00 01 01  
  627      02 02 03 03  
  627                   
  628                   
  629                   
  630                   
  631                   
  632                   
  633                   ;=====================================================
  634                   
  635                   
  636                   
  637                   
  638                   
  639                   
Epyx HandyAsm 1.12      Symbols                         15-Apr-12516:20:20 Page   64
                                                        16:20:20  

$0040 ACCUMULATE                        $0040 ALGO_3
$0000 ASM.EQUSYMS                       $010C ASM.VERSION
$FD40 ATTENREG0                         $FD41 ATTENREG1
$FD42 ATTENREG2                         $FD43 ATTENREG3
$FD86 AUDIN                             $0010 AUDIN_BIT
$FD20 AUDIO0                            $FD28 AUDIO1
$FD30 AUDIO2                            $FD38 AUDIO3
$0000 AUD_1                             $0004 AUD_16
$0001 AUD_2                             $0005 AUD_32
$0002 AUD_4                             $0006 AUD_64
$0003 AUD_8                             $0004 AUD_BACKUP
$0007 AUD_CLOCK_MASK                    $0005 AUD_CONTROL
$0006 AUD_COUNTER                       $0001 AUD_FEEDBACK
$0007 AUD_LINKING                       $0007 AUD_OTHER
$0002 AUD_OUTPUT                        $0003 AUD_SHIFT
$0000 AUD_VOLCNTRL                      $0001 A_BUTTON
$0000 A_OFFSET                          $425D AbsVarsEnd
$0000 BACKGROUND_SPRITE                 $0001 BACKNONCOLL_SPRITE
$0000 BACK_SHADOW_SPRITE                MACRO BEGIN_ALLOCATE_ZEROPAGE
MACRO BEGIN_ZPAGE                       $00C0 BITS_MASK
$FDB0 BLUERED0                          $FDB1 BLUERED1
$FDB2 BLUERED2                          $FDB3 BLUERED3
$FDB4 BLUERED4                          $FDB5 BLUERED5
$FDB6 BLUERED6                          $FDB7 BLUERED7
$FDB8 BLUERED8                          $FDB9 BLUERED9
$FDBA BLUEREDA                          $FDBB BLUEREDB
$FDBC BLUEREDC                          $FDBD BLUEREDD
$FDBE BLUEREDE                          $FDBF BLUEREDF
$0002 BORROW_IN                         $0001 BORROW_OUT
$0003 BOUNDARY_SPRITE                   $0015 BREAK_CONTROLS
$0001 BRK_USER                          $430F BRK_vector
$0002 BSHADOW_SPRITE                    $0013 BUS_MONITOR
$0002 B_BUTTON                          $0002 CART0_IO_INACTIVE
$0004 CART1_IO_INACTIVE                 $0002 CART_ADDR_DATA
$0001 CART_ADDR_STROBE                  $0002 CART_POWER_OFF
MACRO CLEARACCUM                        $FC0F COLLADRH
$FC0E COLLADRL                          $FC0B COLLBASH
$FC0A COLLBASL                          $FC25 COLLOFFH
$FC24 COLLOFFL                          $0003 CONTINUE_REQUEST
$FD91 CPUSLEEP                          $FFFE CPU_IRQ
$FFFA CPU_NMI                           $FFFC CPU_RESET
$0002 DATA                              MACRO DBUF_DISPLAY
$FD95 DISPADRH                          $FD94 DISPADRL
$FD92 DISPCTL                           $425E DISPCTL_RAM
MACRO DISPLAY                           $4350 DISPLAY.0008
$4356 DISPLAY.00082                     $1FE0 DISPLAY_BUFSIZE
$0080 DISPLAY_EOFFLAG                   $0040 DISPLAY_EOLFLAG
MACRO DISP_AX                           MACRO DISP_AY
$0008 DISP_COLOR                        $0002 DISP_FLIP
$0004 DISP_FOURBIT                      $0001 DMA_ENABLE
$0001 DOWNLOAD_REQUEST                  $0001 DRAW_LEFT
$0002 DRAW_UP                           $4263 DisplayBuffer
$4266 DisplayFlags                      MACRO ECHO_VALUE
$0008 ENABLE_COUNT                      $0080 ENABLE_INT
$0020 ENABLE_INTEGRATE                  $0010 ENABLE_RELOAD
MACRO ENDSTRUCT                         MACRO END_ALLOCATE_ZEROPAGE
$0000 END_OF_FILE                       MACRO END_ZPAGE
$0001 EOF_USER                          $0004 EVER_ON
Epyx HandyAsm 1.12      Symbols                         15-Apr-12516:20:20 Page   65
                                                        16:20:20  

$0001 EXTERNAL_POWER                    $0080 FEEDBACK_7
$0011 FILL_MEM                          MACRO FLIP
$0004 FLIP_BUTTON                       $0007 FONT_HEIGHT
$000B FONT_TYPE                         $00C0 FOUR_PER_PIXEL
$0004 FRAMERR                           $436B FontBase
$432A FrameEnd                          $4368 FrameEndExit
MACRO GETJOY                            MACRO GETSWITCH
$0005 GO_REQUEST                        $FDA0 GREEN0
$FDA1 GREEN1                            $FDA2 GREEN2
$FDA3 GREEN3                            $FDA4 GREEN4
$FDA5 GREEN5                            $FDA6 GREEN6
$FDA7 GREEN7                            $FDA8 GREEN8
$FDA9 GREEN9                            $FDAA GREENA
$FDAB GREENB                            $FDAC GREENC
$FDAD GREEND                            $FDAE GREENE
$FDAF GREENF                            $FC00 HARDWARE_START
MACRO HBRK                              $FD00 HCOUNT
$0020 HFLIP                             $0007 HIDE_HOWARD_REQUEST
MACRO HOFF16                            MACRO HOFF8
$FC05 HOFFH                             $FC04 HOFFL
$0001 HORIZONTAL_INT                    $0016 HOWARD_ABUS
$0017 HOWARD_BBUS                       $0018 HOWARD_CBUS
$0019 HOWARD_DBUS                       $FCC4 HOWIE
$FC15 HPOSSTRTH                         $FC14 HPOSSTRTL
MACRO HPRFONT                           MACRO HPRINT
$001F HPR_ALL                           $0006 HPR_ALPHA
$000B HPR_BASIC                         MACRO HPR_CHARSET
$0001 HPR_DIGIT                         $0004 HPR_LOWER
$0010 HPR_OTHER                         $0008 HPR_PUNC
$0002 HPR_UPPER                         $FC29 HSIZOFFH
$FC28 HSIZOFFL                          $426B HandyPrint
$42B1 HprFontHi                         $42AA HprFontLo
MACRO INITEOF                           MACRO INITINT
$44F8 INITINT.000D                      MACRO INITLIT
$458E INITLIT.0015                      $459B INITLIT.00151
MACRO INITSUZY                          MACRO INITSYS
$0002 INNER_BUTTON                      $FD80 INTRST
$FD81 INTSET                            $4265 INTSET_RAM
$FD8B IODAT                             $425F IODAT_RAM
$FD8A IODIR                             $4260 IODIR_RAM
$FCC3 IOData                            $FCC2 IOStatus
$4313 InitEOF                           $4304 IntReturn
$FBF0 IntTable                          $FCB0 JOYSTICK
$0080 JOY_DOWN                          $0010 JOY_LEFT
$0020 JOY_RIGHT                         $0040 JOY_UP
$0012 LARGE_DATA                        $0004 LAST_CLOCK
$FCC0 LEDS                              $0010 LEFT0_SELECT
$0020 LEFT1_SELECT                      $0040 LEFT2_SELECT
$0080 LEFT3_SELECT                      $0008 LEFTHAND
$0008 LEFTHANDED                        $00F0 LEFT_ATTENMASK
$0080 LITERAL                           $FFF9 MAPCTL
$FC55 MATHA                             $FC54 MATHB
$FC53 MATHC                             $0020 MATHCARRY
$FC52 MATHD                             $FC63 MATHE
$FC62 MATHF                             $FC61 MATHG
$FC60 MATHH                             $FC6F MATHJ
$FC6E MATHK                             $FC6D MATHL
$FC6C MATHM                             $FC57 MATHN
$FC56 MATHP                             $0040 MATHWARNING
Epyx HandyAsm 1.12      Symbols                         15-Apr-12516:20:20 Page   66
                                                        16:20:20  

$0080 MATHWORKING                       $FD88 MIKEYHREV
$FD89 MIKEYSREV                         $FD00 MIKEY_BASE
$0002 MIKEY_SPACE                       $0010 MONITOR_BYTECOUNT
$0001 MONITOR_I                         $F900 MONITOR_RAM_RESERVED
$00F8 MONITOR_ZP_RESERVED               $FD44 MPAN
$FD50 MSTEREO                           $FD9C MTEST0
$FD9D MTEST1                            $FD9E MTEST2
$001C MYZPEND                           $0006 MYZPSTART
$001C NEXTZPG                           $0004 NOEXP
$0005 NONCOLL_SPRITE                    $0000 NOP_REQUEST
$0004 NORMAL_SPRITE                     $0020 NO_COLLIDE
$0000 ONE_PER_PIXEL                     $0008 OPTION1_BUTTON
$0004 OPTION2_BUTTON                    $0001 ORIGIN
$0001 OUTER_BUTTON                      $0008 OVERRUN
MACRO PALDEF                            $0001 PARBIT
$0010 PAREN                             $0010 PARERR
$0001 PAREVEN                           $0001 PAUSE_SWITCH
$FD93 PBKUP                             $0004 PC_OFFSET
$0002 POWERON                           $FC2F PROCADRH
$FC2E PROCADRL                          $0006 P_OFFSET
$FCB2 RCART_0                           $FCB3 RCART_1
$0010 READ_ENABLE                       $0010 REGISTER
$0007 REGISTER_BYTECOUNT                $0010 RELOAD_HV
$0020 RELOAD_HVS                        $0030 RELOAD_HVST
$0030 RELOAD_MASK                       $0000 RELOAD_NONE
$0008 RESETERR                          $0040 RESET_DONE
MACRO RESET_TIMEOUT                     MACRO RESPRITE
$0008 RESTART_BUTTON                    $0008 RESTLESS
$0008 REUSE_PALETTE                     MACRO RGB16
MACRO RGB16_I                           MACRO RGB_AXY
$0001 RIGHT0_SELECT                     $0002 RIGHT1_SELECT
$0004 RIGHT2_SELECT                     $0008 RIGHT3_SELECT
$000F RIGHT_ATTENMASK                   $001A ROM
$0004 ROM_SPACE                         $0003 RUN_ADDRESS
$0002 RXBRK                             $0040 RXINTEN
$0040 RXRDY                             $4261 RenderBuffer
$FC2D SCBADRH                           $FC2C SCBADRL
$FC11 SCBNEXTH                          $FC10 SCBNEXTL
$0000 SCB_CTRL0                         $0001 SCB_CTRL1
$0002 SCB_CTRL2                         $0005 SCB_DATA
$0007 SCB_HPOS                          $000B SCB_HSIZE
$0003 SCB_NEXT                          $0013 SCB_PALETTE
$001B SCB_SIZEOF                        $000F SCB_STRETCH
$0011 SCB_TILT                          $0009 SCB_VPOS
$000D SCB_VSIZE                         $FC23 SCVPOSH
$FC22 SCVPOSL                           $FD90 SDONEACK
$0006 SEE_HOWARD_REQUEST                $FD8C SERCTL
$FD8D SERDAT                            $FD10 SERIALRATE
$0010 SERIAL_INT                        MACRO SETCOLL
MACRO SETDBUF                           MACRO SETDISP
MACRO SETDISP_50                        MACRO SETDISP_60
MACRO SETDISP_75                        MACRO SET_BRK
$0007 SHADOW_SPRITE                     $0080 SIGNMATH
$0004 SKIP_SPRITE                       $0004 SLAVE_REQUEST
$FC82 SPRCOLL                           $FC80 SPRCTL0
$FC81 SPRCTL1                           $FC13 SPRDLINEH
$FC12 SPRDLINEL                         $FC21 SPRDOFFH
$FC20 SPRDOFFL                          $FC91 SPRGO
$FC19 SPRHSIZH                          $FC18 SPRHSIZL
Epyx HandyAsm 1.12      Symbols                         15-Apr-12516:20:20 Page   67
                                                        16:20:20  

$FC83 SPRINIT                           MACRO SPRITES
$0002 SPRITESTOP                        $0002 SPRITETOSTOP
$0001 SPRITEWORKING                     $0001 SPRITE_GO
$FC92 SPRSYS                            $425D SPRSYS_RAM
$FC1B SPRVSIZH                          $FC1A SPRVSIZL
$FC1D STRETCHH                          $FC1C STRETCHL
MACRO STRUCT                            $FC90 SUZYBUSEN
$FC88 SUZYHREV                          $FC89 SUZYSREV
$FC00 SUZY_BASE                         $0001 SUZY_SPACE
$FCB1 SWITCHES                          $FD87 SYSCTL1
$0003 S_OFFSET                          $FFFE TEMPORG
$0080 THREE_PER_PIXEL                   $FC03 TILTACUMH
$FC02 TILTACUML                         $FC1F TILTH
$FC1E TILTL                             MACRO TIMEOUT
$FD00 TIMER0                            $0001 TIMER0_INT
$FD04 TIMER1                            $0002 TIMER1_INT
$FD08 TIMER2                            $0004 TIMER2_INT
$FD0C TIMER3                            $0008 TIMER3_INT
$FD10 TIMER4                            $FD14 TIMER5
$0020 TIMER5_INT                        $FD18 TIMER6
$0040 TIMER6_INT                        $FD1C TIMER7
$0080 TIMER7_INT                        $0008 TIMER_DONE
$0000 TIM_BACKUP                        $0001 TIM_CONTROLA
$0003 TIM_CONTROLB                      $0002 TIM_COUNT
$FC01 TMPADRH                           $FC00 TMPADRL
$0014 TRACE                             $0080 TURBO_DISABLE
$0040 TWO_PER_PIXEL                     $0002 TXBRK
$0020 TXEMPTY                           $0080 TXINTEN
$0004 TXOPEN                            $0080 TXRDY
$4267 TextPtr                           $426A TextRemaining
$4269 TextWidth                         $0004 UNSAFEACCESS
$0004 UNSAFEACCESSRST                   $0002 UPLOAD_REQUEST
$0002 UP_CURRENT_PAGE                   $0005 UP_HAHDATA
$0004 UP_MEMWATCH                       $0003 UP_REGISTERS
$0001 UP_THIS_PAGE                      $42E3 UserIntHandler
$FD08 VCOUNT                            $0008 VECTOR_SPACE
$0004 VERTICAL_INT                      $0010 VFLIP
$FC0D VIDADRH                           $FC0C VIDADRL
$FC09 VIDBASH                           $FC08 VIDBASL
MACRO VOFF16                            MACRO VOFF8
$FC07 VOFFH                             $FC06 VOFFL
$FC17 VPOSSTRTH                         $FC16 VPOSSTRTL
$FC27 VSIZACUMH                         $FC26 VSIZACUML
$FC2B VSIZOFFH                          $FC2A VSIZOFFL
$0010 VSTRETCH                          $0010 VSTRETCHING
MACRO WAITEOF                           MACRO WAITEOL
MACRO WAITMATH                          $42A0 WAITMATH.00050
$4671 WAITMATH.00190                    $4699 WAITMATH.001A0
$46B6 WAITMATH.001B0                    $46E1 WAITMATH.001C0
MACRO WAITNEOF                          MACRO WAITNEOL
MACRO WAITSUZY                          $47FF WAITSUZY.001D1
$0006 XOR_SHADOW_SPRITE                 $0006 XOR_SPRITE
$0001 X_OFFSET                          $0002 Y_OFFSET
$48EA boxscb                            $48FA boxsprite
$430D brkInt                            $4637 dec.digit
$4937 digitaddr                         $4957 digitinvmask
$4947 digitmask                         $4917 digitxpos
$4927 digitypos                         $45BB do.dbuf
$465D domultiply                        $001B edgestick
Epyx HandyAsm 1.12      Symbols                         15-Apr-12516:20:20 Page   68
                                                        16:20:20  

$48C7 erasescb                          $48D7 erasesprite
$4884 f1txt                             $4897 f2txt
$000A factor1                           $000E factor2
$45D7 getinput                          $42F0 hardInt
$42C8 hprintCharLoop                    $427E hprintLoop
$4617 inc.digit                         $0006 ind0
$41C0 interrupt_buffer                  $4307 jumpIntTable
$45A3 loop                              $4967 moredigits
$4856 multmessage                       $4783 myprint
$4836 palette                           $0012 product
$48B5 ptxt                              $4818 putbyte
$4814 putbyte.xy                        $4823 putdigit
$47F4 reshowsprites                     $45D6 rts0
$0200 screen0                           $21E0 screen1
$47C9 showmessage                       $46FB showresult
$47E8 showsprites                       $47C2 showtextsprite
$44C2 start                             $001A stick
$41C0 sysIntTable                       $0000 sysptr
$0002 sysptr2                           $0004 sysptr3
$45B4 systemp                           $0008 temp0
$41D0 textbuffer                        $48DA textscb
$0009 whichdigit                        
