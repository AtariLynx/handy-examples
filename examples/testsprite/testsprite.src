
* === testsprite.src ========================================================
* 
* Test Sprites on Hardware and Emulator  --  Handy Software
* 
* Confidential and Proprietary
* Copyright (C) 1988, 1989, Epyx, Inc.
* 
* Date		Name		Description
* ---------	--------------	----------------------------------------------
* 7-Mar-90	SHL		Remove DISPLAY_ON call
* 9-Feb-90	SHL		Updated for compatibility with 1.1 release
* 25 May 89	-RJ		Added AUTO_TIMEOUT_USER declaration
* 8 May 89	-RJ		Added the test of the RESPRITE macro
* 20 Apr 89	-RJ		Added example of using DisplayFrameCount
* 19 Mar 89	-RJ		Added call to INITSYS
* 14 Feb 89	-RJ		Added turning NO_COLLIDE on in SPRSYS
* 1 Feb 89	-RJ		Added TestSprite3 to show color redirection
* 30 Jan 89	-RJ		Added 16 redirection bytes to end of each
*				emulation sprite pathname
* 2 Jan 89	-RJ		Added CLI, CLD and TSX at start of program
* 31 Dec 88	-RJ		Renamed RELOAD_HVST to RELOAD_HVST
* 30 Dec 88	-RJ		Moved zpage.mac and syszpage.src to correct
*				position, rename delta to xdelta, add ydelta
*				Added HOFFSET_PRESET & VOFFSET_PRESET values
* 23 Dec 88	-RJ		Added new display macros
* Mid 88	=RJ Mical=	Created this file!
* 
* ===========================================================================


* Define BRK_USER to do debugging.
;BRK_USER	.EQU	1

EOF_USER	.EQU	1
; EOL_USER	.EQU	1


* We choose to use the auto-timeout feature of the system
AUTO_TIMEOUT_USER	.EQ	1


HOFFSET_PRESET	.EQU	10
VOFFSET_PRESET	.EQU	10


* Declare whether we want to use the DisplayFrameCount variable and 
* whether we want it to count up or down
* We should define one or the other of these, or neither, butnot both
FRAMECOUNT_DOWN	.EQU	1
; FRAMECOUNT_UP	.EQU	1


		.LIST	OFF

		.IN	6502:include/monitor.i
		.IN	6502:include/harddefs.i
		.IN	6502:include/sprite.i

		;------	Include the system's zpage data declarations 
		;------	after the include file inclusions and 
		;------	before any code or data declarations
		.IN	6502:macros/zpage.mac
		.IN	6502:src/syszpage.src

		.IN	6502:macros/sys.mac
		.IN	6502:macros/sprite.mac
		.IN	6502:macros/display.mac

		.LIST	ON


		BEGIN_ZPAGE
xdelta		.BYTE	1
ydelta		.BYTE	3
ColorRed	.DS	1
FrameDelay	.BYTE	3
		END_ZPAGE



		.ORG	$0800

Start		.RUN


* Set up for normal operation
		INITSYS
		INITINT	InterruptTable,SafeReturn

		CLI
		CLD
		LDX	#$FF
		TXS

		;------	Set up the display, and then turn it on
		SETDISP_60
	#IFDEF	EOF_USER
		INITEOF
	#ENDIF
		INITSUZY
		SETDBUF	Buffer1,Buffer2
		RGB16	TestPalette

		LDA	#HOFFSET_PRESET
		HOFF8
		LDA	#VOFFSET_PRESET
		VOFF8

		;------	Set up the sprite list
		LDA	#<EraseSprite
		STA	FirstSprite
		LDA	#>EraseSprite
		STA	FirstSprite+1

		;------	Turn off all collisions
		LDA	SPRSYS_RAM
		ORA	#NO_COLLIDE
		STA	SPRSYS_RAM
		STA	SPRSYS

	#IFDEF	FRAMECOUNT_DOWN
		LDA	FrameDelay	  ; Initialize our frame delay counter
		STA	DisplayFrameCount
	#ENDIF
	#IFDEF	FRAMECOUNT_UP
		STZ	DisplayFrameCount ; Initialize our frame delay counter
	#ENDIF


Loop
		;------	So, let's draw some sprites!
		SPRITES	FirstSprite,1
		RESPRITE TestSprite3,0	; test new RESPRITE macro

		DBUF_DISPLAY

	#IFDEF	EOF_USER
frameWait	WAITEOF
	#IFDEF	FRAMECOUNT_DOWN
		LDA	DisplayFrameCount ; Frame count counted down yet?
		BNE	frameWait	  ; Branch if not
		LDA	FrameDelay	  ; Reinitialize frame delay counter
		STA	DisplayFrameCount
	#ENDIF	; of #IFDEF FRAMECOUNT_DOWN
	#IFDEF	FRAMECOUNT_UP
		LDA	DisplayFrameCount ; Frame count counted up yet?
		CMP	FrameDelay
		BLT	frameWait	  ; Branch if not
		STZ	DisplayFrameCount ; Reinitialize frame delay counter
	#ENDIF	; of #IFDEF FRAMECOUNT_DOWN
	#ENDIF	; of #IFDEF EOF_USER

		;------	Stop.  Whew!  How did we do?
		;------	After you're happy with a single pass of creating 
		;------	sprites, then go into the debugger and change the 
		;------	following BRK ($00) into a NOP ($EA) to make the 
		;------	program run at full tilt
;		BRK
;		NOP

		;------	Play with one of the colors a bit
		INC	ColorRed	; Get red
		LDA	ColorRed
		AND	#$0F		; Make sure we get red only
		LDX	#0		; No green
		LDY	#8		; Get half blue
		RGB_AXY	GREEN1

		;------	Move and scale the sprites a bit
		LDA	TestSprite+SCB_HSIZE
		CLC
		ADC	xdelta
		STA	TestSprite+SCB_HSIZE
		LDA	TestSprite+SCB_VSIZE
		CLC
		ADC	ydelta
		STA	TestSprite+SCB_VSIZE

		LDA	TestSprite2+SCB_HPOS
		INC
		INC
		CMP	#160
		BLT	.10
		LDA	#0
.10		STA	TestSprite2+SCB_HPOS
		LDA	TestSprite2+SCB_VPOS
		INC
		CMP	#102
		BLT	.20
		LDA	#0
.20		STA	TestSprite2+SCB_VPOS

		;------	Start again!
		JMP	Loop


SafeReturn
		RTS


		.LIST	OFF
		.IN	6502:src/sys.src
		.IN	6502:src/sysdata.src
		.IN	6502:src/display.src
		.LIST	ON


; === Variables and Data ====================================================

		.ALIGN	4
; Align the PC to the next multiple of 4, which is required by the hardware 
; for the placement of the display buffers
Buffer1		.DS	DISPLAY_BUFSIZE
		.ALIGN	4
Buffer2		.DS	DISPLAY_BUFSIZE

; FirstSprite has the address of the first sprite to be displayed
FirstSprite	.DS	2
InterruptTable	.DS	8*2

EraseSprite
; Handy Sprite
		.BYTE	ONE_PER_PIXEL+BACKGROUND_SPRITE	; Control 0
		.BYTE	RELOAD_HVST+LITERAL		; Control 1
		.BYTE	$00	; Control 2
		.WORD	TestSprite	; Next sprite's address
		.WORD	EraseSpritePath
		.WORD	HOFFSET_PRESET	; HPos
		.WORD	VOFFSET_PRESET	; VPos
		.WORD	$A000	; HSize
		.WORD	$6600	; VSize
		.WORD	$0000	; Stretch
		.WORD	$0000	; Tilt
		.BYTE	$00	; Palette

TestSprite
; Handy Sprite
		.BYTE	TWO_PER_PIXEL+NORMAL_SPRITE	; Control 0
		.BYTE	RELOAD_HVST			; Control 1
		.BYTE	$00	; Control 2
		.WORD	TestSprite2	; Next sprite's address
		.WORD	TestSpritePath
		.WORD	HOFFSET_PRESET+30	; HPos
		.WORD	VOFFSET_PRESET+30	; VPos
		.WORD	$0100	; HSize
		.WORD	$0100	; VSize
		.WORD	$0000	; Stretch
		.WORD	$0000	; Tilt
		.BYTE	$01,$23	; Palette

TestSprite2
; Handy Sprite
		.BYTE	TWO_PER_PIXEL+NORMAL_SPRITE	; Control 0
		.BYTE	RELOAD_HV+REUSE_PALETTE	; Control 1
		.BYTE	$00	; Control 2
		.WORD	0	; Next sprite's address
		.WORD	TestSpritePath
		.WORD	HOFFSET_PRESET+30	; HPos
		.WORD	VOFFSET_PRESET+30	; VPos
		.WORD	$0100	; HSize
		.WORD	$0100	; VSize


TestSprite3
; Handy Sprite
		.BYTE	TWO_PER_PIXEL+NORMAL_SPRITE	; Control 0
		.BYTE	RELOAD_NONE	; Control 1
		.BYTE	$00	; Control 2
		.WORD	0	; Next sprite's address
		.WORD	TestSpritePath
		.WORD	HOFFSET_PRESET+60	; HPos
		.WORD	VOFFSET_PRESET+60	; VPos
		.BYTE	$08,$76	; Palette


EraseSpritePath
; Handy Sprite Image Data
; Bits per Pixel = 1
; Next data is down-right
		.BYTE	$02,$00
		.BYTE	$00
TestSpritePath
; Handy Sprite Image Data
; Bits per Pixel = 2
; Next data is down-right
		.BYTE	$06,$1e,$34,$90,$51,$60
		.BYTE	$06,$16,$34,$b4,$12,$60
		.BYTE	$05,$22,$7a,$09,$30
		.BYTE	$05,$12,$88,$29,$30
		.BYTE	$05,$5d,$04,$20,$b0
		.BYTE	$03,$54,$14
		.BYTE	$03,$4c,$14
		.BYTE	$04,$3c,$14,$58
		.BYTE	$04,$24,$34,$98
		.BYTE	$03,$42,$4c
		.BYTE	$06,$12,$2c,$2c,$02,$60
		.BYTE	$05,$0a,$4c,$40,$b0
		.BYTE	$04,$8a,$13,$00
		.BYTE	$03,$08,$4c
		.BYTE	$03,$10,$2c
		.BYTE	$02,$00
		.BYTE	$01
; Next data is up-right
		.BYTE	$05,$1e,$34,$90,$50
		.BYTE	$05,$1e,$24,$b0,$50
		.BYTE	$05,$16,$34,$b0,$50
		.BYTE	$05,$0e,$24,$f0,$50
		.BYTE	$05,$12,$8a,$08,$b0
		.BYTE	$05,$82,$9a,$09,$30
		.BYTE	$04,$4c,$14,$98
		.BYTE	$04,$44,$24,$98
		.BYTE	$04,$3c,$44,$58
		.BYTE	$03,$34,$44
		.BYTE	$05,$1c,$24,$5c,$10
		.BYTE	$04,$0e,$34,$98
		.BYTE	$04,$16,$24,$98
		.BYTE	$04,$16,$24,$98
		.BYTE	$04,$16,$30,$58
		.BYTE	$02,$0e
		.BYTE	$01
; Next data is up-left
		.BYTE	$05,$1e,$24,$90,$d0
		.BYTE	$05,$1e,$24,$90,$d0
		.BYTE	$05,$1e,$24,$90,$d0
		.BYTE	$06,$16,$34,$90,$91,$60
		.BYTE	$05,$22,$68,$29,$30
		.BYTE	$05,$0a,$98,$29,$30
		.BYTE	$04,$5c,$14,$98
		.BYTE	$05,$54,$26,$00,$b0
		.BYTE	$03,$4c,$24
		.BYTE	$03,$3c,$34
		.BYTE	$04,$24,$34,$58
		.BYTE	$04,$86,$64,$98
		.BYTE	$05,$0e,$46,$01,$30
		.BYTE	$05,$0e,$24,$41,$30
		.BYTE	$04,$0e,$60,$58
		.BYTE	$02,$86
		.BYTE	$01
; Next data is down-left
		.BYTE	$05,$16,$34,$90,$d0
		.BYTE	$06,$86,$44,$b0,$51,$e0
		.BYTE	$05,$1a,$7a,$09,$70
		.BYTE	$05,$82,$aa,$09,$70
		.BYTE	$04,$54,$14,$b8
		.BYTE	$04,$4c,$34,$78
		.BYTE	$03,$44,$44
		.BYTE	$03,$34,$64
		.BYTE	$04,$14,$74,$58
		.BYTE	$03,$4a,$4c
		.BYTE	$03,$4a,$4c
		.BYTE	$05,$0a,$2c,$89,$30
		.BYTE	$06,$82,$4c,$28,$81,$60
		.BYTE	$03,$80,$4c
		.BYTE	$03,$80,$4c
		.BYTE	$03,$08,$2c
		.BYTE	$00
; 274 total image bytes

TestPalette
		.BYTE	$00,$0F,$00,$0F,$00,$0F,$00,$0F
		.BYTE	$01,$03,$05,$07,$09,$0B,$0D,$0F
		.BYTE	$00,$FF,$0F,$00,$F0,$0F,$FF,$F0
		.BYTE	$11,$33,$55,$77,$99,$BB,$DD,$FF


