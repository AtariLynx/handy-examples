Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page    1
                                                        14:39:10  

    1                   
    2                   * === testaudio.src ==================================
    3                   * 
    4                   * Test Audio  --  Handy Software
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   * 
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 9-Feb-90	SHL		Updated for compatibility with 1.1 rel
   12                   * 6 Apr 89	-RJ		Added sys.mac, sys.src, and INITSYS
   13                   * 4 Jan 88	=RJ Mical=	Created this file!
   14                   * 
   15                   * ====================================================
   16                   
   17                   
   18                   * Define BRK_USER to do debugging.
   19      0001         BRK_USER	.EQU	1
   20                   
   21      0000         KNOCK_KNOCK	.EQU	0
   22      0001         WOOP_WOOP_WOOP	.EQU	1
   23      0002         SPARKLE		.EQU	2
   24                   
   25                   
   26                   		.IN	6502:include/monitor.i
    1                   
    2                   * === monitor.i ======================================
    3                   *
    4                   * 6502 Debugger Monitor Definitions File  --  Handy So
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 26-Feb-90	SHL		Minor cleanup
   12                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   13                   * 1 May 89	-RJ		Changed MONITOR_ZP_RESERVED to $F8
   14                   * 19 Mar 89	-RJ		Changed MONITOR_RAM_RESERVED to $F800
   15                   * 16 Mar 89	-RJ		Changed values of BUS_MONITOR and TRA
   16                   *				added LARGE_DATA
   17                   * 14 Mar 89	-RJ		Changed value of MONITOR_RAM_RESERVED
   18                   * 26-Dec-88	-RJ		Added HANDEM_NEWDISPLAY
   19                   * Early 88	=RJ Mical=	Created this file!
   20                   *
   21                   * ====================================================
   22                   
   23                   
   24                   
   25      FALSE        	#IFDEF	MONITOR_I	; prevent multiple inclusion
   27                   	#ENDIF
   28      0001         MONITOR_I	.EQU	1
   29                   
   30                   
   31                   
   32                   * The hardware interrupt vector table starts at this a
   33      FBF0         IntTable		.=	$FC00-{8*2}
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page    2
                        6502:include/monitor.i          14:39:10  

   34                   
   35                   
   36                   
   37                   * These constants define the memory locations reserved
   38                   * program.  The zero-page definition describes the fir
   39                   * in zero-page; all locations from there to the end of
   40                   * reserved.  With the RAM definition, all locations
   41                   * are reserved from that address to the start of Handy
   42                   * currently lives at $FC00
   43                   * Note that the Howard board does not require RAM for 
   44      00F8         MONITOR_ZP_RESERVED	.EQU	$00F8
   45      F900         MONITOR_RAM_RESERVED	.EQU	$F900
   46                   
   47                   
   48                   
   49                   * These are the offsets of the register data both in t
   50                   * data stream when host and monitor are passing the re
   51      0000         A_OFFSET		.EQU	0
   52      0001         X_OFFSET		.EQU	1
   53      0002         Y_OFFSET		.EQU	2
   54      0003         S_OFFSET		.EQU	3
   55      0004         PC_OFFSET		.EQU	4
   56      0006         P_OFFSET		.EQU	6
   57                   
   58                   
   59                   
   60                   * These define the monitor memory block sizes
   61      0007         REGISTER_BYTECOUNT	.EQU	7
   62      0010         MONITOR_BYTECOUNT	.EQU	16
   63                   
   64                   
   65                   
   66                   * These are the definitions of the signals that can be
   67                   * the Handebug monitor program after a warm restart.
   68      0000         NOP_REQUEST		.EQU	0
   69      0001         DOWNLOAD_REQUEST	.EQU	1
   70      0002         UPLOAD_REQUEST		.EQU	2
   71      0003         CONTINUE_REQUEST	.EQU	3
   72      0004         SLAVE_REQUEST		.EQU	4
   73      0005         GO_REQUEST		.EQU	5
   74      0006         SEE_HOWARD_REQUEST	.EQU	6
   75      0007         HIDE_HOWARD_REQUEST	.EQU	7
   76                   
   77                   
   78                   
   79                   * These are the definitions of the upload/download typ
   80      0000         END_OF_FILE		.EQU	$00
   81      0001         ORIGIN			.EQU	$01
   82      0002         DATA			.EQU	$02
   83      0003         RUN_ADDRESS		.EQU	$03
   84                   * The assembler reserves the remainder of the low defi
   85      0010         REGISTER		.EQU	$10
   86      0011         FILL_MEM		.EQU	$11
   87      0012         LARGE_DATA		.EQU	$12
   88      0013         BUS_MONITOR		.EQU	$13
   89      0014         TRACE			.EQU	$14
   90      0015         BREAK_CONTROLS		.EQU	$15
   91      0016         HOWARD_ABUS		.EQU	$16
   92      0017         HOWARD_BBUS		.EQU	$17
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page    3
                        6502:include/monitor.i          14:39:10  

   93      0018         HOWARD_CBUS		.EQU	$18
   94      0019         HOWARD_DBUS		.EQU	$19
   95      001A         ROM			.EQU	$1A
   96                   
   97                   
   98                   * These are the monitor to host slave requests
   99      0001         UP_THIS_PAGE		.EQU	1
  100      0002         UP_CURRENT_PAGE		.EQU	2
  101      0003         UP_REGISTERS		.EQU	3
  102      0004         UP_MEMWATCH		.EQU	4
  103      0005         UP_HAHDATA		.EQU	5
  104                   
  105                   
  106                   
   27                   		.IN	6502:include/harddefs.i
    1                   ; Wednesday 27-Jun-90 10:45:41
    2                   * === harddefs.i =====================================
    3                   *
    4                   * Hardware Definitions  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 27-Jun-90	SHL		Removed MAGxx alternate names for tim
   12                   *				Added READ_ENABLE definition for IODAT
   13                   * 12-Apr-90	SHL		Added SUZY_BASE and MIKEY_BASE defini
   14                   *				Removed SUZY_ADDRESS definition
   15                   *				Corrected LEFT_ATTENMASK and RIGHT_ATTENMASK
   16                   * 9-Mar-90	SHL		Added new stereo register definitions
   17                   * 7-Mar-90	SHL		Removed MAGRDYx definitions
   18                   *				Commented out MSTEREO until get real info
   19                   * 26-Feb-90	SHL		Corrected some bit definitions
   20                   * 13-Feb-90	SHL		Added a few more missing definitions
   21                   * 9-Feb-90	SHL		Added rest of the hardware definitions
   22                   *				Added CPU interrupt and reset vectors
   23                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   24                   * 25 May 89	-RJ		Deleted LEFT_ and RIGHT_FIRE_BUTTON d
   25                   * 22 May 89	-RJ		Added RESTLESS definition, changed LI
   26                   *				to EXTERNAL_POWER
   27                   * 11 May 89	-RJ		Changed sprite definitions to track t
   28                   *				definitions caused by the Shadow-E chip bug
   29                   * 10 May 89	-RJ		Added INNER_ and OUTER_BUTTON and MST
   30                   *				CART0,1_IO_INACTIVE definitions
   31                   * 20 Apr 89	-RJ		Changed the game button definitions t
   32                   *				the new way to handle Pause, Restart, Flip and
   33                   *				Game Options 1 & 2.  Added bit defs to DISPCTL
   34                   * 19 Apr 89	RG Goudy	Added serial port bit definitions
   35                   * 18 Apr 89	-RJ		The RELOAD_ definition comments say "
   36                   * 19 Mar 89	-RJ		Added TURBO_DISABLE definition to MAP
   37                   * 17 Jan 89	-RJ		Added POWERON and MOTORON of SYSCTL1
   38                   *				Renamed RCART to RCART_0 and added RCART_1
   39                   *				Deleted VIDEO/MIKEYTEST, added MTEST0/1/2
   40                   * 2 Jan 89	-RJ		Added EVER_ON and NO_COLLIDE
   41                   * 31 Dec 88	-RJ		When HANDYMATH is non-zero, the hardw
   42                   *				math registers now aren't defined here either
   43                   *				Added JOYSTICK and SWITCHES flag definitions
   44                   * 30 Dec 88	-RJ		Added sprite type defs.  Renamed REUS
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page    4
                        6502:include/harddefs.i         14:39:10  

   45                   *				et al to the more accurate RELOAD_NONE et al
   46                   * 24-Dec-88	-RJ		Added sprite control register and aud
   47                   *				channel declarations and control bits
   48                   * 22 Dec 88	-RJ		Redefined all addresses, turning them
   49                   *				symbols that Handebug will recognize
   50                   *
   51                   * Mid 87	=RJ Mical=	Created this file!
   52                   *
   53                   * ====================================================
   54                   
   55                   
   56                   * Size of a display buffer
   57      1FE0         DISPLAY_BUFSIZE	.EQ $1FE0
   58                   
   59                   
   60                   * First address of the block of hardware addresses.
   61      FC00         HARDWARE_START	.EQ $FC00
   62                   
   63                   
   64                   
   65                   * SUZY chip functions are mapped into the $FC00 page
   66 0000:             		.OR $FC00
   67 FC00:             SUZY_BASE		; FC00
   68                   
   69                   * SUZY registers from $FC00-$FC7F (both sprite and MAT
   70                   * when the lower byte is stored to.
   71                   
   72                   * Sprite engine registers - *'ed values are used inter
   73                   * cannot be usefully initialized externally.
   74                   
   75 FC00:             TMPADRL		.DS 1	; FC00 *
   76 FC01:             TMPADRH		.DS 1	; FC01 *
   77 FC02:             TILTACUML	.DS 1	; FC02 *
   78 FC03:             TILTACUMH	.DS 1	; FC03 *
   79 FC04:             HOFFL		.DS 1	; FC04
   80 FC05:             HOFFH		.DS 1	; FC05
   81 FC06:             VOFFL		.DS 1	; FC06
   82 FC07:             VOFFH		.DS 1	; FC07
   83 FC08:             VIDBASL		.DS 1	; FC08
   84 FC09:             VIDBASH		.DS 1	; FC09
   85 FC0A:             COLLBASL	.DS 1	; FC0A
   86 FC0B:             COLLBASH	.DS 1	; FC0B
   87 FC0C:             VIDADRL		.DS 1	; FC0C *
   88 FC0D:             VIDADRH		.DS 1	; FC0D *
   89 FC0E:             COLLADRL	.DS 1	; FC0E *
   90 FC0F:             COLLADRH	.DS 1	; FC0F *
   91 FC10:             SCBNEXTL	.DS 1	; FC10
   92 FC11:             SCBNEXTH	.DS 1	; FC11
   93 FC12:             SPRDLINEL	.DS 1	; FC12 *
   94 FC13:             SPRDLINEH	.DS 1	; FC13 *
   95 FC14:             HPOSSTRTL	.DS 1	; FC14 *
   96 FC15:             HPOSSTRTH	.DS 1	; FC15 *
   97 FC16:             VPOSSTRTL	.DS 1	; FC16 *
   98 FC17:             VPOSSTRTH	.DS 1	; FC17 *
   99 FC18:             SPRHSIZL	.DS 1	; FC18
  100 FC19:             SPRHSIZH	.DS 1	; FC19
  101 FC1A:             SPRVSIZL	.DS 1	; FC1A
  102 FC1B:             SPRVSIZH	.DS 1	; FC1B
  103 FC1C:             STRETCHL	.DS 1	; FC1C *
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page    5
                        6502:include/harddefs.i         14:39:10  

  104 FC1D:             STRETCHH	.DS 1	; FC1D *
  105 FC1E:             TILTL		.DS 1	; FC1E *
  106 FC1F:             TILTH		.DS 1	; FC1F *
  107 FC20:             SPRDOFFL	.DS 1	; FC20 *
  108 FC21:             SPRDOFFH	.DS 1	; FC21 *
  109 FC22:             SCVPOSL		.DS 1	; FC22 *
  110 FC23:             SCVPOSH		.DS 1	; FC23 *
  111 FC24:             COLLOFFL	.DS 1	; FC24
  112 FC25:             COLLOFFH	.DS 1	; FC25
  113 FC26:             VSIZACUML	.DS 1	; FC26 *
  114 FC27:             VSIZACUMH	.DS 1	; FC27 *
  115 FC28:             HSIZOFFL	.DS 1	; FC28
  116 FC29:             HSIZOFFH	.DS 1	; FC29
  117 FC2A:             VSIZOFFL	.DS 1	; FC2A
  118 FC2B:             VSIZOFFH	.DS 1	; FC2B
  119 FC2C:             SCBADRL		.DS 1	; FC2C *
  120 FC2D:             SCBADRH		.DS 1	; FC2D *
  121 FC2E:             PROCADRL	.DS 1	; FC2E *
  122 FC2F:             PROCADRH	.DS 1	; FC2F *
  123                   
  124                   
  125                   * Math engine registers
  126                   
  127 FC30:             		.OR $FC52
  128 FC52:             MATHD		.DS 1	; FC52
  129 FC53:             MATHC		.DS 1	; FC53
  130 FC54:             MATHB		.DS 1	; FC54
  131 FC55:             MATHA		.DS 1	; FC55
  132 FC56:             MATHP		.DS 1	; FC56
  133 FC57:             MATHN		.DS 1	; FC57
  134 FC58:             		.OR $FC60
  135 FC60:             MATHH		.DS 1	; FC60
  136 FC61:             MATHG		.DS 1	; FC61
  137 FC62:             MATHF		.DS 1	; FC62
  138 FC63:             MATHE		.DS 1	; FC63
  139 FC64:             		.OR $FC6C
  140 FC6C:             MATHM		.DS 1	; FC6C
  141 FC6D:             MATHL		.DS 1	; FC6D
  142 FC6E:             MATHK		.DS 1	; FC6E
  143 FC6F:             MATHJ		.DS 1	; FC6F
  144                   
  145                   
  146                   * More SUZY control registers
  147                   
  148 FC70:             		.OR $FC80
  149 FC80:             SPRCTL0		.DS 1	; FC80
  150                   * Sprite control 0 bit definitions
  151      00C0         BITS_MASK	.EQ %11000000	; Mask for settings bits per p
  152                   * Sprite bits-per-pixel definitions
  153      0000         ONE_PER_PIXEL	.EQ %00000000
  154      0040         TWO_PER_PIXEL	.EQ %01000000
  155      0080         THREE_PER_PIXEL	.EQ %10000000
  156      00C0         FOUR_PER_PIXEL	.EQ %11000000
  157                   * More sprite control 0 bit definitions
  158      0020         HFLIP		.EQ %00100000
  159      0010         VFLIP		.EQ %00010000
  160                   * Sprite types - redefined to reflect the reality caus
  161                   ; NORMAL_SPRITE		.EQ %00000111
  162      0007         SHADOW_SPRITE		.EQ %00000111
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page    6
                        6502:include/harddefs.i         14:39:10  

  163                   
  164      0006         XOR_SPRITE		.EQ %00000110
  165      0006         XOR_SHADOW_SPRITE	.EQ %00000110
  166                   
  167      0005         NONCOLL_SPRITE		.EQ %00000101
  168                   
  169                   ; SHADOW_SPRITE		.EQ %00000100
  170      0004         NORMAL_SPRITE		.EQ %00000100
  171                   
  172                   ; BSHADOW_SPRITE	.EQ %00000011
  173      0003         BOUNDARY_SPRITE		.EQ %00000011
  174                   
  175                   ; BOUNDARY_SPRITE	.EQ %00000010
  176      0002         BSHADOW_SPRITE		.EQ %00000010
  177                   
  178      0001         BACKNONCOLL_SPRITE	.EQ %00000001
  179                   
  180      0000         BACKGROUND_SPRITE	.EQ %00000000
  181      0000         BACK_SHADOW_SPRITE	.EQ %00000000
  182                   
  183                   
  184 FC81:             SPRCTL1		.DS 1	; FC81
  185                   * Sprite control 1 bit definitions
  186      0080         LITERAL		.EQ %10000000
  187      0040         ALGO_3		.EQ %01000000	; broken, do not set this bit!
  188      0030         RELOAD_MASK	.EQ %00110000
  189                   * Sprite reload mask definitions
  190      0000         RELOAD_NONE	.EQ %00000000	; Reload nothing
  191      0010         RELOAD_HV	.EQ %00010000	; Reload hsize, vsize
  192      0020         RELOAD_HVS	.EQ %00100000	; Reload hsize, vsize, stretc
  193      0030         RELOAD_HVST	.EQ %00110000	; Reload hsize, vsize, stret
  194                   * More sprite control 1 bit definitions
  195      0008         REUSE_PALETTE	.EQ %00001000
  196      0004         SKIP_SPRITE	.EQ %00000100
  197      0002         DRAW_UP		.EQ %00000010
  198      0001         DRAW_LEFT	.EQ %00000001
  199                   
  200                   
  201 FC82:             SPRCOLL		.DS 1	; FC82
  202                   * SPRCOLL bit definitions
  203      0020         NO_COLLIDE	.EQ %00100000
  204                   
  205 FC83:             SPRINIT		.DS 1	; FC83
  206                   
  207 FC84:             		.OR $FC88
  208 FC88:             SUZYHREV	.DS 1	; FC88
  209 FC89:             SUZYSREV	.DS 1	; FC89
  210                   
  211 FC8A:             		.OR $FC90
  212 FC90:             SUZYBUSEN	.DS 1	; FC90
  213                   
  214 FC91:             SPRGO		.DS 1	; FC91
  215                   * These are the SPRGO flag definitions
  216      0004         EVER_ON		.EQ %00000100
  217      0001         SPRITE_GO	.EQ %00000001
  218                   
  219 FC92:             SPRSYS		.DS 1	; FC92
  220                   * These are the SPRSYS flag definitions when writing
  221      0080         SIGNMATH	.EQ %10000000
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page    7
                        6502:include/harddefs.i         14:39:10  

  222      0040         ACCUMULATE	.EQ %01000000
  223                   ;NO_COLLIDE	.EQ %00100000	; same as for SPRCOLL
  224      0010         VSTRETCH	.EQ %00010000
  225      0008         LEFTHAND	.EQ %00001000
  226      0004         UNSAFEACCESSRST	.EQ %00000100
  227      0002         SPRITESTOP	.EQ %00000010
  228                   * These are the SPRSYS flag definitions when reading
  229      0080         MATHWORKING	.EQ %10000000
  230      0040         MATHWARNING	.EQ %01000000
  231      0020         MATHCARRY	.EQ %00100000
  232      0010         VSTRETCHING	.EQ %00010000
  233      0008         LEFTHANDED	.EQ %00001000
  234      0004         UNSAFEACCESS	.EQ %00000100
  235      0002         SPRITETOSTOP	.EQ %00000010
  236      0001         SPRITEWORKING	.EQ %00000001
  237                   
  238 FC93:             		.OR $FCB0
  239 FCB0:             JOYSTICK	.DS 1	; FCB0
  240      0080         JOY_DOWN	.EQ %10000000
  241      0040         JOY_UP		.EQ %01000000
  242      0020         JOY_RIGHT	.EQ %00100000
  243      0010         JOY_LEFT	.EQ %00010000
  244      0008         OPTION1_BUTTON	.EQ %00001000
  245      0004         OPTION2_BUTTON	.EQ %00000100
  246      0002         INNER_BUTTON	.EQ %00000010
  247      0001         OUTER_BUTTON	.EQ %00000001
  248      0001         A_BUTTON	.EQ OUTER_BUTTON
  249      0002         B_BUTTON	.EQ INNER_BUTTON
  250      0008         RESTART_BUTTON	.EQ OPTION1_BUTTON
  251      0004         FLIP_BUTTON	.EQ OPTION2_BUTTON
  252                   
  253 FCB1:             SWITCHES	.DS 1	; FCB1
  254      0004         CART1_IO_INACTIVE .EQ %00000100
  255      0002         CART0_IO_INACTIVE .EQ %00000010
  256      0001         PAUSE_SWITCH	.EQ %00000001
  257                   
  258 FCB2:             RCART_0		.DS 1	; FCB2
  259 FCB3:             RCART_1		.DS 1	; FCB3
  260                   
  261                   
  262                   * LEDS output register only exists on early wire-wrap 
  263 FCB4:             		.OR $FCC0
  264 FCC0:             LEDS		.DS 1	; FCC0
  265                   
  266                   
  267                   * The parallel IO port only exists on early wire-wrap 
  268 FCC1:             		.OR $FCC2
  269 FCC2:             IOStatus	.DS 1	; FCC2
  270 FCC3:             IOData		.DS 1	; FCC3
  271                   
  272 FCC4:             HOWIE		.DS 1	; FCC4
  273                   
  274                   
  275                   
  276                   
  277                   * MIKEY chip functions are mapped into the $FD00 page
  278                   
  279 FCC5:             		.OR $FD00
  280 FD00:             MIKEY_BASE	; FD00
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page    8
                        6502:include/harddefs.i         14:39:10  

  281                   
  282                   * The Mikey Timers
  283                   * First the logical timer names are defined, then the 
  284 FD00:             HCOUNT		; FD00
  285 FD00:             TIMER0		; FD00
  286 FD00:             	.DS 4
  287 FD04:             TIMER1		; FD04
  288 FD04:             	.DS 4
  289 FD08:             VCOUNT		; FD08
  290 FD08:             TIMER2		; FD08
  291 FD08:             	.DS 4
  292 FD0C:             TIMER3		; FD0C
  293 FD0C:             	.DS 4
  294 FD10:             SERIALRATE	; FD10
  295 FD10:             TIMER4		; FD10
  296 FD10:             	.DS 4
  297 FD14:             TIMER5		; FD14
  298 FD14:             	.DS 4
  299 FD18:             TIMER6		; FD18
  300 FD18:             	.DS 4
  301 FD1C:             TIMER7		; FD1C
  302 FD1C:             	.DS 4
  303                   
  304                   * Here's the timer offsets
  305      0000         TIM_BACKUP	.EQ 0
  306      0001         TIM_CONTROLA	.EQ 1
  307      0002         TIM_COUNT	.EQ 2
  308      0003         TIM_CONTROLB	.EQ 3
  309                   
  310                   * TIM_CONTROLA control bits
  311      0080         ENABLE_INT	.EQ %10000000
  312      0040         RESET_DONE	.EQ %01000000
  313      0010         ENABLE_RELOAD	.EQ %00010000
  314      0008         ENABLE_COUNT	.EQ %00001000
  315      0007         AUD_CLOCK_MASK	.EQ %00000111
  316                   * Clock settings
  317      0007         AUD_LINKING	.EQ %00000111
  318      0006         AUD_64		.EQ %00000110
  319      0005         AUD_32		.EQ %00000101
  320      0004         AUD_16		.EQ %00000100
  321      0003         AUD_8		.EQ %00000011
  322      0002         AUD_4		.EQ %00000010
  323      0001         AUD_2		.EQ %00000001
  324      0000         AUD_1		.EQ %00000000
  325                   
  326                   * TIM_CONTROLB control bits
  327      0008         TIMER_DONE	.EQ %00001000
  328      0004         LAST_CLOCK	.EQ %00000100
  329      0002         BORROW_IN	.EQ %00000010
  330      0001         BORROW_OUT	.EQ %00000001
  331                   
  332                   
  333 FD20:             AUDIO0		.DS 8	; FD20
  334 FD28:             AUDIO1		.DS 8	; FD28
  335 FD30:             AUDIO2		.DS 8	; FD30
  336 FD38:             AUDIO3		.DS 8	; FD38
  337                   * Here's the audio channel offsets
  338      0000         AUD_VOLCNTRL	.EQ 0
  339      0001         AUD_FEEDBACK	.EQ 1
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page    9
                        6502:include/harddefs.i         14:39:10  

  340      0002         AUD_OUTPUT	.EQ 2
  341      0003         AUD_SHIFT	.EQ 3
  342      0004         AUD_BACKUP	.EQ 4
  343      0005         AUD_CONTROL	.EQ 5
  344      0006         AUD_COUNTER	.EQ 6
  345      0007         AUD_OTHER	.EQ 7
  346                   * The AUD_CONTROL bits are almost identical to the TIM
  347                   * Here's the AUD_CONTROL control bits that are differe
  348                   * control bits.
  349                   * See TIM_CONTROLA above for the other definitions
  350      0080         FEEDBACK_7		.EQ %10000000
  351      0020         ENABLE_INTEGRATE	.EQ %00100000
  352                   
  353                   
  354                   ; Stereo control registers follow
  355                   ; Stereo capability does not exist in all Lynxes
  356                   ; Left and right may be reversed, and if so will be co
  357                   ; release
  358                   
  359 FD40:             		.OR $FD40
  360 FD40:             ATTENREG0	.DS 1	; FD40	; Stereo attenuation registers
  361 FD41:             ATTENREG1	.DS 1	; FD41
  362 FD42:             ATTENREG2	.DS 1	; FD42
  363 FD43:             ATTENREG3	.DS 1	; FD43
  364      00F0         LEFT_ATTENMASK	.EQ %11110000
  365      000F         RIGHT_ATTENMASK	.EQ %00001111
  366                   
  367 FD44:             MPAN		.DS 1	; FD44	; Stereo attenuation select registe
  368                   
  369 FD45:             		.OR $FD50
  370 FD50:             MSTEREO		.DS 1	; FD50	; Stereo channel disable registe
  371                   
  372                   ; bit definitions for MPAN and MSTEREO registers
  373      0080         LEFT3_SELECT	.EQ %10000000
  374      0040         LEFT2_SELECT	.EQ %01000000
  375      0020         LEFT1_SELECT	.EQ %00100000
  376      0010         LEFT0_SELECT	.EQ %00010000
  377      0008         RIGHT3_SELECT	.EQ %00001000
  378      0004         RIGHT2_SELECT	.EQ %00000100
  379      0002         RIGHT1_SELECT	.EQ %00000010
  380      0001         RIGHT0_SELECT	.EQ %00000001
  381                   
  382                   
  383 FD51:             		.OR $FD80
  384 FD80:             INTRST		.DS 1	; FD80	; Interrupt Reset and Set registe
  385 FD81:             INTSET		.DS 1	; FD81
  386                   
  387                   * Interrupt Reset and Set bit definitions
  388      0080         TIMER7_INT	.EQ %10000000
  389      0040         TIMER6_INT	.EQ %01000000
  390      0020         TIMER5_INT	.EQ %00100000
  391      0010         SERIAL_INT	.EQ %00010000
  392      0008         TIMER3_INT	.EQ %00001000
  393      0004         TIMER2_INT	.EQ %00000100
  394      0002         TIMER1_INT	.EQ %00000010
  395      0001         TIMER0_INT	.EQ %00000001
  396      0004         VERTICAL_INT	.EQ TIMER2_INT
  397      0001         HORIZONTAL_INT	.EQ TIMER0_INT
  398                   
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   10
                        6502:include/harddefs.i         14:39:10  

  399 FD82:             		.OR $FD86
  400 FD86:             AUDIN		.DS 1	; FD86	; Audio in -or- cartridge r/w line
  401 FD87:             SYSCTL1		.DS 1	; FD87
  402                   * SYSCTL1 bit definitions
  403      0002         POWERON		.EQ %00000010
  404      0001         CART_ADDR_STROBE .EQ %00000001
  405                   
  406 FD88:             MIKEYHREV	.DS 1	; FD88	; Mikey hardware rev
  407 FD89:             MIKEYSREV	.DS 1	; FD89	; Mikey software rev
  408 FD8A:             IODIR		.DS 1	; FD8A
  409 FD8B:             IODAT		.DS 1	; FD8B
  410                   * Here's the IODIR and IODAT bit definitions
  411      0010         AUDIN_BIT	.EQ %00010000	; note that there is also the 
  412      0010         READ_ENABLE	.EQ %00010000	; same bit for AUDIN_BIT
  413      0008         RESTLESS	.EQ %00001000
  414      0004         NOEXP		.EQ %00000100	; If set, redeye is not connected
  415      0002         CART_ADDR_DATA	.EQ %00000010
  416      0002         CART_POWER_OFF	.EQ %00000010	; same bit for CART_ADDR_
  417      0001         EXTERNAL_POWER	.EQ %00000001
  418                   
  419 FD8C:             SERCTL		.DS 1	; FD8C	; Serial control
  420                   * Here's the SERCTL bit definitions when writing
  421      0080         TXINTEN		.EQ %10000000
  422      0040         RXINTEN		.EQ %01000000
  423                   ;unused		.EQ %00100000	; Leave unused bit 0 for future
  424      0010         PAREN		.EQ %00010000
  425      0008         RESETERR	.EQ %00001000
  426      0004         TXOPEN		.EQ %00000100
  427      0002         TXBRK		.EQ %00000010
  428      0001         PAREVEN		.EQ %00000001
  429                   * Here's the SERCTL bit definitions when reading
  430      0080         TXRDY		.EQ %10000000
  431      0040         RXRDY		.EQ %01000000
  432      0020         TXEMPTY		.EQ %00100000
  433      0010         PARERR		.EQ %00010000
  434      0008         OVERRUN		.EQ %00001000
  435      0004         FRAMERR		.EQ %00000100
  436      0002         RXBRK		.EQ %00000010
  437      0001         PARBIT		.EQ %00000001
  438                   
  439 FD8D:             SERDAT		.DS 1	; FD8D	; Serial data
  440                   
  441                   
  442                   
  443 FD8E:             		.OR $FD90
  444 FD90:             SDONEACK	.DS 1	; FD90	; Suzy done ack
  445 FD91:             CPUSLEEP	.DS 1	; FD91	; zzz
  446 FD92:             DISPCTL		.DS 1	; FD92	; Display control
  447                   * Here are the DISPCTL bit definitions
  448      0008         DISP_COLOR	.EQ %00001000	; must be set to 1
  449      0004         DISP_FOURBIT	.EQ %00000100	; must be set to 1
  450      0002         DISP_FLIP	.EQ %00000010
  451      0001         DMA_ENABLE	.EQ %00000001	; must be set to 1
  452                   
  453 FD93:             PBKUP		.DS 1	; FD93	; Display's magic 'P' count
  454 FD94:             DISPADRL	.DS 1	; FD94	; Start of display
  455 FD95:             DISPADRH	.DS 1	; FD95
  456                   
  457 FD96:             		.OR $FD9C
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   11
                        6502:include/harddefs.i         14:39:10  

  458 FD9C:             MTEST0		.DS 1	; FD9C	; System test vectors, see spec f
  459 FD9D:             MTEST1		.DS 1	; FD9D
  460 FD9E:             MTEST2		.DS 1	; FD9E
  461                   
  462                   * The Color registers
  463 FD9F:             		.OR $FDA0
  464 FDA0:             GREEN0		.DS 1	; FDA0
  465 FDA1:             GREEN1		.DS 1	; FDA1
  466 FDA2:             GREEN2		.DS 1	; FDA2
  467 FDA3:             GREEN3		.DS 1	; FDA3
  468 FDA4:             GREEN4		.DS 1	; FDA4
  469 FDA5:             GREEN5		.DS 1	; FDA5
  470 FDA6:             GREEN6		.DS 1	; FDA6
  471 FDA7:             GREEN7		.DS 1	; FDA7
  472 FDA8:             GREEN8		.DS 1	; FDA8
  473 FDA9:             GREEN9		.DS 1	; FDA9
  474 FDAA:             GREENA		.DS 1	; FDAA
  475 FDAB:             GREENB		.DS 1	; FDAB
  476 FDAC:             GREENC		.DS 1	; FDAC
  477 FDAD:             GREEND		.DS 1	; FDAD
  478 FDAE:             GREENE		.DS 1	; FDAE
  479 FDAF:             GREENF		.DS 1	; FDAF
  480                   
  481 FDB0:             BLUERED0	.DS 1	; FDB0
  482 FDB1:             BLUERED1	.DS 1	; FDB1
  483 FDB2:             BLUERED2	.DS 1	; FDB2
  484 FDB3:             BLUERED3	.DS 1	; FDB3
  485 FDB4:             BLUERED4	.DS 1	; FDB4
  486 FDB5:             BLUERED5	.DS 1	; FDB5
  487 FDB6:             BLUERED6	.DS 1	; FDB6
  488 FDB7:             BLUERED7	.DS 1	; FDB7
  489 FDB8:             BLUERED8	.DS 1	; FDB8
  490 FDB9:             BLUERED9	.DS 1	; FDB9
  491 FDBA:             BLUEREDA	.DS 1	; FDBA
  492 FDBB:             BLUEREDB	.DS 1	; FDBB
  493 FDBC:             BLUEREDC	.DS 1	; FDBC
  494 FDBD:             BLUEREDD	.DS 1	; FDBD
  495 FDBE:             BLUEREDE	.DS 1	; FDBE
  496 FDBF:             BLUEREDF	.DS 1	; FDBF
  497                   
  498                   
  499                   * The Map Control register
  500 FDC0:             		.OR $FFF9
  501 FFF9:             MAPCTL		.DS 1	; FFF9
  502                   * These are the MAPCTL flag definitions
  503      0080         TURBO_DISABLE	.EQ %10000000
  504      0008         VECTOR_SPACE	.EQ %00001000	; 1 maps RAM into specified
  505      0004         ROM_SPACE	.EQ %00000100
  506      0002         MIKEY_SPACE	.EQ %00000010
  507      0001         SUZY_SPACE	.EQ %00000001
  508                   
  509                   * 65C02 hardware interrupt and reset vectors
  510 FFFA:             CPU_NMI		.DS 2	; FFFA
  511 FFFC:             CPU_RESET	.DS 2	; FFFC
  512 FFFE:             CPU_IRQ			; FFFE
  513                   
  514                   
  515                   
   28                   		.IN	6502:include/hsfx.i
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   12
                        6502:include/hsfx.i             14:39:10  

    1                   
    2                   * === hsfx.i =========================================
    3                   * 
    4                   * Handy Sound Effects Driver Definitions  --  Handy So
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date       Name              Description
   10                   * ---------  ----------------  -----------------------
   11                   * 11 May 89  -RJ               Made AUDIO_TIMER defini
   12                   *                              Added AUDIO_CLOCK and A
   13                   * 22 Mar 89  -RJ               Added FREECHANNEL and N
   14                   * 21 Mar 89  -RJ               Commented out CES_SLOWC
   15                   * 4 Jan 88   =RJ Mical=        Added AUDIO_TIMER defin
   16                   * Late 88    RG Goudy          Created this file!
   17                   * 
   18                   * ====================================================
   19                   
   20                   
   21                   * This defines the total number of accumulators and in
   22                   
   23      TRUE         	#IFNDEF	HSFX_CHANNELCOUNT
   24      0004         HSFX_CHANNELCOUNT	.=	4	; number of HSFX channels
   25                   	#ENDIF				; you may redefine from 1 to 4
   26                   
   27      0002         HSFX_REGSIZE		.EQU	2	; bytes per accumulator or interp
   28                   					; (must be 2 for this code)
   29      0004         HSFX_ACCUMCOUNT		.EQU	4	; number of accumulators
   30                   					;
   31      0008         HSFX_REGCOUNT		.EQU	2*HSFX_ACCUMCOUNT ; total number o
   32                   
   33                   
   34                   
   35                   
   36      TRUE          #IFNDEF AUDIO_TIMER
   37      0006         AUDIO_TIMER		.=	6
   38                    #ENDIF
   39      TRUE          #IFNDEF AUDIO_CLOCK_MASK
   40      0006         AUDIO_CLOCK_MASK	.=	6		; 64uS clock
   41                    #ENDIF
   42      TRUE          #IFNDEF AUDIO_PRELOAD
   43      0040         AUDIO_PRELOAD		.=	64
   44                    #ENDIF
   45                   
   46                   
   47      0000         HSFX_FREECHANNEL	.EQU	0	; This channel is free and ava
   48      0001         HSFX_LILPRIORITY	.EQU	$01	; Minimum allowable priority
   49      00FE         HSFX_BIGPRIORITY	.EQU	$FE	; Maximum allowable priority
   50      00FF         HSFX_NOCHANNEL		.EQU	$FF	; Channel not available to HS
   51                   
   52                   
   53                   * HSFX keyframe entry flags
   54      8000         LOOP0			.EQU $8000	; one 'loop start' flag
   55      4000         NEXT0			.EQU $4000	; one 'loop end' flag
   56      2000         LOOP1			.EQU $2000	; another 'loop start' flag
   57      1000         NEXT1			.EQU $1000	; another 'loop end' flag
   58      0800         FREQ_ACCUM		.EQU $0800	; frequency accumulator
   59      0400         SHIFT_ACCUM		.EQU $0400	; shifter absolute store
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   13
                        6502:include/hsfx.i             14:39:10  

   60      0200         FBACK_ACCUM		.EQU $0200	; feedback accumulator
   61      0100         VOL_ACCUM		.EQU $0100	; volume accumulator
   62      0080         FREQ_INTERP		.EQU $80	; frequency interpolation
   63      0040         SHIFT_INTERP		.EQU $40	; shifter interpolation
   64      0020         FBACK_INTERP		.EQU $20	; feedback interpolation
   65      0010         VOL_INTERP		.EQU $10	; volume interpolation
   66      0008         INTEGRATE		.EQU $08	; integration - 1=on, 0=off
   67      0004         SHIFT_ALWAYS		.EQU $04	; store shifter every frame
   68                   ; 			.EQU $02	; ignored
   69      0001         END_OF_EFFECT		.EQU $01	; end of effect (last bit test
   70                   
   71                   
   72                   
   29                   
   30                   		;------	Include the system's zpage data declarations
   31                   		;------	after the include file inclusions and 
   32                   		;------	before any code or data declarations
   33                   		.IN	6502:macros/zpage.mac
    1                   ; ----------------------------------------------------
    2                   ; Zero-Page memory allocation macros
    3                   ;  Created:  Mike Ireton, 10/07/88
    4                   ; Modified:  RJ Mical, 14 Nov 88
    5                   ; 
    6                   ; BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPAGE) 
    7                   ; and END_ZPAGE (or END_ALLOCATE_ZEROPAGE) are two ver
    8                   ; for safely allocating zero-page memory space in any 
    9                   ; If you use these macros around every z-page memory a
   10                   ; the macros will track your allocations and dole out 
   11                   ; memory locations every time you ask for them.  This 
   12                   ; emulator to make z-page allocations without stepping
   13                   ; allows you to make z-page allocations locally in the
   14                   ; rather than making all your allocations in one file 
   15                   ; down all free zero page locations and figuring out w
   16                   ; 
   17                   ; -- TO USE ---
   18                   ; This file defines a redefinable value named NEXTZPG,
   19                   ; to 0.  NEXTZPG holds the address of the next availab
   20                   ; which in most cases will be at memory location $00. 
   21                   ; zero-page memory locations starting from $00, you ca
   22                   ; a value of your own choice after you've included thi
   23                   ; used any of this file's macros.  For example, say th
   24                   ; to stash away memory locations $00 through $0F.  At 
   25                   ; before calling BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPA
   26                   ;                .IN    6502:macros/zpage.mac
   27                   ;   NEXTZPG     .=     $10
   28                   ; 
   29                   ; Then, when the need arises for zero page variables, 
   30                   ; BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPAGE).  This will
   31                   ; labels and re-assign the assembler's location counte
   32                   ; zero-page (as pointed to by the current NEXTZPG).  A
   33                   ; end with END_ZPAGE (or END_ALLOCATE_ZEROPAGE), which
   34                   ; z-page offset and restore the program counter.  For 
   35                   ;   RoutineX                        RoutineX
   36                   ;           BEGIN_ZPAGE                     BEGIN_ALLO
   37                   ;   ZPG1    .DS    2      - or -    ZPG1    .DS    2
   38                   ;   COUNT   .DS    1                COUNT   .DS    1
   39                   ;           END_ZPAGE                       END_ALLOCA
   40                   ;           STA    ZPG1                     STA    ZPG
   41                   ; 
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   14
                        6502:macros/zpage.mac           14:39:10  

   42                   ; Remember that you should only define data areas betw
   43                   ; Anything else is dangerous and should be avoided (an
   44                   ; you should find another line of work... :-)  )
   45                   ; 
   46                   ; Also, note that these macros use another redefinable
   47                   ; record and restore the program counter 
   48                   
   49      0000         NEXTZPG	.= $00
   50                   
   51                   	#MACRO BEGIN_ZPAGE
   52 MACRO             TEMPORG	  .= *
   53 MACRO             	  .ORG NEXTZPG
   54                   	#ENDM
   55                   
   56                   	#MACRO BEGIN_ALLOCATE_ZEROPAGE
   57 MACRO             	  BEGIN_ZPAGE
   58                   	#ENDM
   59                   
   60                   
   61                   	#MACRO END_ZPAGE
   62 MACRO             NEXTZPG	  .= *
   63 MACRO             	  #IF NEXTZPG > $0100
   64 MACRO             	    .ECHO "ERROR:  z-page allocations went out of pag
   65 MACRO             	  #ENDIF
   66 MACRO             	  .ORG TEMPORG
   67                   	#ENDM
   68                   
   69                   	#MACRO END_ALLOCATE_ZEROPAGE
   70 MACRO             	  END_ZPAGE
   71                   	#ENDM
   72                   
   73                   
   74                   
   34                   		.IN	6502:src/syszpage.src
    1                   
    2                   * === syszpage.src ===================================
    3                   *
    4                   * System Zero-Page Data Allocations  --  the 6502 Side
    5                   *
    6                   * Copyright (C) 1988, Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   *
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   13                   * 19 Apr 89	-RJ		Added description of rule for using s
   14                   * 22 Mar 89	-RJ		Removed the audio variables from this
   15                   * 20 Mar 89	RG Goudy	Added several new zpage pointers
   16                   * 26 Jan 89	-RJ		Got rid of Interruptus
   17                   * 26-Dec-88	=RJ Mical=	Created this file from sysdata.
   18                   *
   19                   * ====================================================
   20                   
   21                   
   22                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   23                   *
   24                   * This file should be included before any source code 
   25                   *
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   15
                        6502:src/syszpage.src           14:39:10  

   26                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   27                   
   28                   
   29                   
   30                   * System programmers note:  the sysptrs are defined as
   31                   * pointers.  These can't be used during interrupt code
   32                   * no promises regarding the usage of these for anythin
   33                   * while using one of these is a dangerous thing to do
   34                   		BEGIN_ZPAGE
    1      FFFE       + TEMPORG	  .= *
    2 FFFE:           + 	  .ORG NEXTZPG
    3                 + 
   35 0000:             sysptr		.DS 2
   36 0002:             sysptr2		.DS 2
   37 0004:             sysptr3		.DS 2
   38                   		END_ZPAGE
    1      0006       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 0006:           + 	  .ORG TEMPORG
    6                 + 
   39                   
   40                   
   41                   
   35                   
   36                   		.IN	6502:macros/sys.mac
    1                   ; Wednesday 27-Jun-90 11:49:43
    2                   * == sys.mac =========================================
    3                   *
    4                   * System Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 20-Jun-90	SHL		RAMCART_USER support added
   12                   * 28-Mar-90	SHL		INITINT new clears and resets serial 
   13                   *				if SERIALPORT_USER defined
   14                   * 22-Mar-90	SHL		INITINT now vectors all IRQS to IntRe
   15                   *				instead of user supplied RTS
   16                   * 20-Mar-90	SHL		Removed SEI, CLI from INITINT macro
   17                   * 7-Mar-90	SHL		DISPCTL_RAM now initialized in INITSYS
   18                   * 9-Feb-90	SHL		Modified BRK_USER support to force bre
   19                   *				Howard board, unless user uses the SET_BRK
   20                   *				macro to redirect breaks
   21                   *				INITINT is now required before any use of
   22                   *				INITEOF, INITEOL or SET_DISPLAY... macros
   23                   *				Added HBRK macro
   24                   *				Moved initialization of MAPCTL to INITSYS
   25                   *				Removed HFIX1 macros
   26                   * 31 May 89	-RJ		Added BRK_USER support to INITINT mac
   27                   *				Killed call to InitSys
   28                   *				Added SET_BRK macro
   29                   * 25 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   30                   * 22 May 89	-RJ		Changed init'ing of IODIR's LIGHT_OFF
   31                   *				RESTLESS, also now init IODAT too
   32                   * 16 May 89	-RJ		Added setting TXOPEN to SERCTL in INI
   33                   * 11 May 89	-RJ		Moved declaration of sysIntTable to s
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   16
                        6502:macros/sys.mac             14:39:10  

   34                   * 10 May 89	-RJ		Changed CART_STROBE to CART_ADDR_DATA
   35                   * 1 May 89	-RJ		Added the INITINTS macro for user-cont
   36                   *				interrupt table handling.  Also defined
   37                   *				and allow redefinition of sysIntTable, which
   38                   *				is now used in the display.src file
   39                   * 20 Apr 89	-RJ		Added initialization of IODIR and IOD
   40                   * 6 Apr 89	-RJ		Moved init of SPRSYS into INITSYS
   41                   * 19 Mar 89	-RJ		Added HFIX1 macros, modified INITSYS 
   42                   * 18 Mar 89	=RJ Mical=	Created this file!
   43                   *
   44                   * ====================================================
   45                   
   46                   
   47                   * HBRK macro forces a break on a Howard board.  On a c
   48                   * executed as one-byte one-cycle NOP.
   49                   	#MACRO HBRK
   50 MACRO             	.HS 13
   51                   	#ENDM
   52                   
   53                   
   54                   * Do some needed hardware initialization to get system
   55                   	#MACRO INITSYS
   56 MACRO             
   57 MACRO             	LDA #DISP_COLOR+DISP_FOURBIT+DMA_ENABLE
   58 MACRO             	STA DISPCTL_RAM
   59 MACRO             
   60 MACRO             	LDA #LEFTHAND		; the equates have been defined to pre
   61 MACRO             	STA SPRSYS_RAM
   62 MACRO             	STA SPRSYS
   63 MACRO             
   64 MACRO             	LDA #VECTOR_SPACE	; map in all RAM except for CPU vec
   65 MACRO             	STA MAPCTL
   66 MACRO             
   67 MACRO             	;------	Set parallel CART_ADDR_DATA and RESTLESS as o
   68 MACRO             	;------ If RAMCART_USER, set AUDIN (READ_ENABLE) as o
   69 MACRO             	;------	all others as input
   70 MACRO              #IFDEF RAMCART_USER
   71 MACRO             	LDA #CART_ADDR_DATA+RESTLESS+READ_ENABLE
   72 MACRO              #ELSE
   73 MACRO             	LDA #CART_ADDR_DATA+RESTLESS
   74 MACRO              #ENDIF
   75 MACRO             	STA IODAT_RAM
   76 MACRO             	STA IODAT
   77 MACRO             	STA IODIR_RAM
   78 MACRO             	STA IODIR
   79 MACRO             
   80 MACRO             	LDA #TXOPEN	; Turn off serial IRQs before starting
   81 MACRO             	STA SERCTL	;  and make sure serial port is open-colle
   82 MACRO             
   83 MACRO             	  #IFDEF AUTO_TIMEOUT_USER
   84 MACRO             		STZ TimeoutCount+1
   85 MACRO             		STZ TimeoutCount+2
   86 MACRO             	  #ENDIF
   87 MACRO             
   88                   	#ENDMACRO
   89                   
   90                   
   91                   	#MACRO	INITINT
   92 MACRO             sysIntTable	.EQ ?0
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   17
                        6502:macros/sys.mac             14:39:10  

   93 MACRO             
   94 MACRO             		;------	Set the break and int vectors to point to ou
   95 MACRO             		LDA #<UserIntHandler
   96 MACRO             		STA CPU_IRQ
   97 MACRO             		LDA #>UserIntHandler
   98 MACRO             		STA CPU_IRQ+1
   99 MACRO             
  100 MACRO             		LDX #8*2-1
  101 MACRO             ??	.= *
  102 MACRO             		  LDA #>IntReturn
  103 MACRO             		  STA ?0,X
  104 MACRO             		  DEX
  105 MACRO             		  LDA #<IntReturn
  106 MACRO             		  STA ?0,X
  107 MACRO             		  DEX
  108 MACRO             		 BPL ??
  109 MACRO             
  110 MACRO             	  #IFDEF BRK_USER
  111 MACRO             		LDA CPU_NMI
  112 MACRO             		STA BRK_vector+2
  113 MACRO             		LDA CPU_NMI+1
  114 MACRO             		STA BRK_vector+3
  115 MACRO             	  #ENDIF ; of #IFDEF BRK_USER
  116 MACRO             
  117 MACRO             	  #IFDEF SERIALPORT_USER
  118 MACRO             		lda #TXOPEN
  119 MACRO             		sta SERCTL
  120 MACRO             		lda #SERIAL_INT
  121 MACRO             		sta INTRST
  122 MACRO             	  #ENDIF
  123 MACRO             
  124                   	#ENDMACRO
  125                   
  126                   
  127                   	#MACRO SET_BRK
  128 MACRO             		LDA #<?0
  129 MACRO             		STA BRK_vector+2
  130 MACRO             		LDA #>?0
  131 MACRO             		STA BRK_vector+3
  132 MACRO             		LDA #$EA	; nop
  133 MACRO             		STA BRK_vector
  134                   	#ENDMACRO
  135                   
  136                   
  137                   	#MACRO RESET_TIMEOUT
  138 MACRO             		STZ TimeoutCount+1	; else reset timeout counter
  139 MACRO             		STZ TimeoutCount+2
  140                   	#ENDMACRO
  141                   
  142                   
  143                   	#MACRO ECHO_VALUE
  144 MACRO             		.ECHO "Value of ?0 is ?%d0 ($?%x0)"
  145                   	#ENDMACRO
  146                   
  147                   
   37                   		.IN	6502:macros/hsfx.mac
    1                   ; Monday 30-Apr-90 17:26:10
    2                   * === hsfx.mac =======================================
    3                   *
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   18
                        6502:macros/hsfx.mac            14:39:10  

    4                   * HSFX (Handy Sound Effects) Macros  --  Handy Softwar
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   12                   * 13 May 89	-RJ		Added SEPARATE_HMUSIC_HSFX support
   13                   * 11 Apr 89	-RJ		Added INITHSFX warning
   14                   * 4-Jan-89	=RJ Mical=	Created this file!
   15                   *
   16                   * ====================================================
   17                   
   18                   
   19                   		#MACRO	INITHSFX
   20 MACRO             		#IFDEF HANDYMUSIC
   21 MACRO             		  #IFNDEF SEPARATE_HMUSIC_HSFX
   22 MACRO             		    .ECHO	""
   23 MACRO             		    .ECHO	"WARNING:  When using HMUSIC you should us
   24 MACRO             		    .ECHO	"          INITHMUSIC and you should not"
   25 MACRO             		    .ECHO	"          use INITHSFX!"
   26 MACRO             		  #ELSE
   27 MACRO             		    JSR	InitHSFX
   28 MACRO             		  #ENDIF
   29 MACRO             		#ELSE
   30 MACRO             		  JSR	InitHSFX
   31 MACRO             		#ENDIF
   32                   		#ENDMACRO
   33                   
   34                   
   35                   		#MACRO	RESETHSFX
   36 MACRO             		JSR	ResetHSFX
   37                   		#ENDMACRO
   38                   
   39                   
   40                   		#MACRO	PLAYHSFX
   41 MACRO             		JSR	StartHSFX
   42                   		#ENDMACRO
   43                   
   44                   
   45                   
   46                   * The SET_AUDIO_CLOCK sets the audio system's timer to
   47                   * specified rate.  Also, it causes the HMUSIC and HSFX
   48                   * to their initial state.
   49                   * ON ENTRY:
   50                   *     A has the audio timer preload value
   51                   *     X has the audio clock frequency select mask
   52                   
   53                   	#MACRO SET_AUDIO_CLOCK
   54 MACRO             	   phx
   55 MACRO             	     pha
   56 MACRO             	      #IFDEF HANDYMUSIC
   57 MACRO             		INITHMUSIC
   58 MACRO             	      #ELSE
   59 MACRO             		INITHSFX
   60 MACRO             	      #ENDIF
   61 MACRO             	     pla
   62 MACRO             	    sta TIMER0+{AUDIO_TIMER*4}+TIM_BACKUP
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   19
                        6502:macros/hsfx.mac            14:39:10  

   63 MACRO             	   pla
   64 MACRO             	  ora #ENABLE_INT+ENABLE_RELOAD+ENABLE_COUNT
   65 MACRO             	  sta TIMER0+{AUDIO_TIMER*4}+TIM_CONTROLA
   66                   	#ENDMACRO
   67                   
   68                   
   69                   
   70                   
   38                   
   39                   
   40 FFFE:             		.ORG	$0800
   41                   
   42                   
   43                   Start		.RUN
   44                   
   45                   		INITSYS
    1 0800:A9 0D      + 	LDA #DISP_COLOR+DISP_FOURBIT+DMA_ENABLE
    2 0802:8D ** **   + 	STA DISPCTL_RAM
    3 0805:A9 08      + 	LDA #LEFTHAND		
    4 0807:8D ** **   + 	STA SPRSYS_RAM
    5 080A:8D 92 FC   + 	STA SPRSYS
    6 080D:A9 08      + 	LDA #VECTOR_SPACE	
    7 080F:8D F9 FF   + 	STA MAPCTL
    8      FALSE         #IFDEF RAMCART_USER
   10                 +  #ELSE
   11 0812:A9 0A      + 	LDA #CART_ADDR_DATA+RESTLESS
   12                 +  #ENDIF
   13 0814:8D ** **   + 	STA IODAT_RAM
   14 0817:8D 8B FD   + 	STA IODAT
   15 081A:8D ** **   + 	STA IODIR_RAM
   16 081D:8D 8A FD   + 	STA IODIR
   17 0820:A9 04      + 	LDA #TXOPEN	
   18 0822:8D 8C FD   + 	STA SERCTL	
   19      FALSE        	  #IFDEF AUTO_TIMEOUT_USER
   22                 + 	  #ENDIF
   23                 + 
   46                   		INITINT	InterruptTable,SafeReturn
    1      ****       + sysIntTable	.EQ InterruptTable
    2 0825:A9 **      + 		LDA #<UserIntHandler
    3 0827:8D FE FF   + 		STA CPU_IRQ
    4 082A:A9 **      + 		LDA #>UserIntHandler
    5 082C:8D FF FF   + 		STA CPU_IRQ+1
    6 082F:A2 0F      + 		LDX #8*2-1
    7      0831       + INITINT.0004	.= *
    8 0831:A9 **      + 		  LDA #>IntReturn
    9 0833:9D ** **   + 		  STA InterruptTable,X
   10 0836:CA         + 		  DEX
   11 0837:A9 **      + 		  LDA #<IntReturn
   12 0839:9D ** **   + 		  STA InterruptTable,X
   13 083C:CA         + 		  DEX
   14 083D:10 F2      + 		 BPL INITINT.0004
   15      TRUE       + 	  #IFDEF BRK_USER
   16 083F:AD FA FF   + 		LDA CPU_NMI
   17 0842:8D ** **   + 		STA BRK_vector+2
   18 0845:AD FB FF   + 		LDA CPU_NMI+1
   19 0848:8D ** **   + 		STA BRK_vector+3
   20                 + 	  #ENDIF 
   21      FALSE        	  #IFDEF SERIALPORT_USER
   26                 + 	  #ENDIF
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   20
                        testaudio.src                   14:39:10  

   27                 + 
   47                   
   48                   * Set up for normal operation
   49 084B:58           		CLI
   50 084C:D8           		CLD
   51 084D:A2 FF        		LDX	#$FF
   52 084F:9A           		TXS
   53                   
   54                   		INITHSFX
    1      FALSE        		#IFDEF HANDYMUSIC
   10                 + 		#ELSE
   11 0850:20 ** **   + 		  JSR	InitHSFX
   12                 + 		#ENDIF
   13                 + 
   55                   
   56 0853:AD ** **     Loop		LDA	Index
   57 0856:1A           		INC
   58 0857:29 03        		AND	#3
   59 0859:8D ** **     		STA	Index
   60 085C:D0 **        		BNE	.10
   61                   		
   62 085E:A2 00        		LDX	#KNOCK_KNOCK
   63 0860:20 ** **     		JSR	LaunchSound
   64 0863:80 FE        		BRA	*
   65                   
   66 0865:C9 01        .10		CMP	#1
   67 0867:D0 **        		BNE	.20
   68                   
   69 0869:A2 01        		LDX	#WOOP_WOOP_WOOP
   70 086B:20 ** **     		JSR	LaunchSound
   71 086E:80 FE        		BRA	*
   72                   
   73 0870:A2 02        .20		LDX	#SPARKLE
   74 0872:20 ** **     		JSR	LaunchSound
   75 0875:80 FE        		BRA	*
   76                   
   77                   
   78                   
   79 0877:             LaunchSound
   80                   * ====================================================
   81                   * This routine expects the sound effect number to be i
   82                   * Asks the HSFX driver to play that sound effect.  
   83                   
   84 0877:BC ** **     		LDY	SoundPriorities,X
   85 087A:BD ** **     		LDA	SoundTableHigh,X
   86 087D:48           		PHA
   87 087E:BD ** **     		LDA	SoundTableLow,X
   88 0881:FA           		PLX
   89                   		PLAYHSFX
    1 0882:20 ** **   + 		JSR	StartHSFX
    2                 + 
   90                   
   91 0885:             SafeReturn
   92 0885:60           		RTS
   93                   
   94                   
   95                   
   96 0886:64 64 64     SoundPriorities	.BYTE	100,100,100
   97 0889:00 ** **     SoundTableLow	.BYTE	<KnockKnock,<WoopWoopWoop,<Sparkle
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   21
                                                        14:39:10  

   98 088C:00 ** **     SoundTableHigh	.BYTE	>KnockKnock,>WoopWoopWoop,>Sparkl
   99 088F:00           Index		.BYTE	0
  100 0890:             InterruptTable	.DS	8*2
  101                   
  102                   
  103                   		.IN	6502:src/sysdata.src
    1                   ; Tuesday 27-Mar-90 10:58:04
    2                   * === sysdata.src ====================================
    3                   * 
    4                   * System Data Allocations  --  the 6502 Side of Handy
    5                   * 
    6                   * Copyright (c) 1988,1990 Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   * 
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 27-Mar-90	SHL		Removed BufferAddrL, BufferAddrH
   13                   * 22-Mar-90	SHL		Added INTSET_RAM shadow for IRQs
   14                   * 9-Feb-90	SHL		Removed Apple emulation compatibility
   15                   * 30 May 89	-RJ		Added IODAT_RAM
   16                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   17                   * 20 Apr 89	-RJ		Added IODIR_RAM
   18                   * 19 Apr 89	-RJ		Moved DisplayFrameCount to display.sr
   19                   * 20 Mar 89	-RJ		Added DisplayFrameCount
   20                   * 13 Feb 89	-RJ		Added DisplayBuffer
   21                   * 26 Jan 88	-RJ		Ended Interruptus
   22                   * 24 Dec 88	-RJ		Added Interruptus
   23                   * 22 Dec 88	-RJ		Added DISPCTL_RAM, RenderBuffer, 
   24                   *				BufferAddrL/H, and DisplayFlags with its defs
   25                   *				Added note about .ORGing to non-zpage
   26                   * Early 88	=RJ Mical=	Created this file!
   27                   * 
   28                   * ====================================================
   29                   
   30                   
   31                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   32                   * 
   33                   * This file should be included before any of the 6502:
   34                   * 
   35                   * Note that you should .ORG to a non-zero page address
   36                   * this file.  This is because this file includes data 
   37                   * don't need to be in zero-page memory.
   38                   * 
   39                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   40                   
   41                   
   42                   * Here are the declarations of the local copies of wri
   43                   * (and read-doesn't-equal-write registers such as SPRS
   44                   * Whenever you want to make a change to one of the har
   45                   * that's write-only, you should read from this RAM cop
   46                   * and then write the value out to both the RAM copy an
   47 08A0:             SPRSYS_RAM	.DS 1
   48 08A1:             DISPCTL_RAM	.DS 1
   49 08A2:             IODAT_RAM	.DS 1
   50 08A3:             IODIR_RAM	.DS 1
   51                   
   52                   
   53                   * Display buffer pointers for use by the system displa
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   22
                        6502:src/sysdata.src            14:39:10  

   54 08A4:             RenderBuffer	.DS 2
   55 08A6:             DisplayBuffer	.DS 2
   56                   
   57                   * Shadow of INTSET used in IRQ handler
   58 08A8:             INTSET_RAM	.DS 1
   59                   
   60                   
   61      FALSE        	#IFDEF AUTO_TIMEOUT_USER
   63                   	#ENDIF
   64                   
   65                   
   66                   * The DisplayFlags field is a field that may enjoy mul
   67                   * read-modify-write operations peformed by both interr
   68                   * Because of this, any code must make sure that interr
   69                   * beginning a read-modify-write cycle, or use the TSB/
   70 08A9:             DisplayFlags	.DS	1
   71                   * Here's the definitions of DisplayFlags
   72      0080         DISPLAY_EOFFLAG		.EQ $80	; Set every EOF
   73      0040         DISPLAY_EOLFLAG		.EQ $40	; Set every EOL
   74                   
   75                   
   76                   
  104                   		.IN	6502:src/sys.src
    1                   ; Tue Sep 18 17:43:25 1990
    2                   * === sys.src ========================================
    3                   *
    4                   * General System Source Code  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 28-Mar-90	SHL		IRQ handler quick checks for serial I
   12                   *				if SERIALPORT_USER defined now.
   13                   * 22-Mar-90	SHL		IRQ handler only touches 1 IRQ at a t
   14                   *				Individual handlers need not preserve X and A
   15                   *				IRQ handlers now required to PLX PLA RTI
   16                   *				instead of RTS
   17                   *				Renamed SafeIntRts to IntReturn, which now
   18                   *				does PLX PLA RTI
   19                   * 16-Mar-90	SHL		Modified BRK detect for 1 cycle impro
   20                   *				in the case of IRQ
   21                   * 15-Mar-90	SHL		Provided faster vector to Redeye inte
   22                   *				Serial interrupts now must PLX PLA RTI to
   23                   *				exit.
   24                   * 14-Mar-90	SHL		Added SafeIntRts
   25                   *				INITINT now vectors all IRQS to SafeIntRts
   26                   *				instead of user supplied RTS
   27                   * 26-Feb-90	SHL		Minor code tightening
   28                   * 9-Feb-90	SHL		INITINT is now required before any use
   29                   *				INITEOF, INITEOL or SET_DISPLAY... macros
   30                   *				This file can now be included before user
   31                   *				calls INITINT
   32                   * 7-Feb-90	SHL		Modified BRK_USER to force Howard Brea
   33                   * 31 May 89	-RJ		Added BRK_USER support code to UserIn
   34                   *				Removed InitSys routine
   35                   * 6 Apr 89	=RJ Mical=	Created this file!
   36                   *
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   23
                        6502:src/sys.src                14:39:10  

   37                   * ====================================================
   38                   
   39                   
   40                   * This code is called whenever a non-NMI interrupt occ
   41                   * interrupt or execution of a software BRK).
   42                   
   43 08AA:             UserIntHandler
   44 08AA:48           		PHA
   45 08AB:DA           		PHX
   46                   
   47      TRUE         	  #IFDEF BRK_USER
   48                   	  ;-- Check if we got here because of a BRK instructi
   49                   	  ;-- the BRK routine if so, else branch to the inter
   50 08AC:BA           		TSX
   51 08AD:E8           		INX
   52 08AE:E8           		INX
   53 08AF:E8           		INX
   54 08B0:BD 00 01     		LDA $0100,X		; Get a copy of the status byte
   55 08B3:89 10        		bit #$10		; Check break bit
   56 08B5:D0 **        		BNE brkInt		; and branch if clear (hardware int)
   57                   	  #ENDIF ; of #IFDEF BRK_USER
   58                   
   59 08B7:             hardInt
   60                   		;------	We had a hardware interrupt.
   61                   		;------	Get the interrupt flags value, reset the bit
   62 08B7:AD 81 FD     		LDA INTSET		; This gets the bits
   63                   
   64      FALSE        	  #IFDEF SERIALPORT_USER
   68                   	  #ENDIF
   69                   
   70 08BA:8D A8 08     .02		STA INTSET_RAM
   71                   
   72                   		;------	For least set bit in the interrupt value,
   73                   		;------	vector to the routine
   74 08BD:A2 00        		LDX #0
   75 08BF:A9 01        		lda #1
   76 08C1:2C A8 08     .00		  bit INTSET_RAM
   77 08C4:D0 **        		  bne jumpIntTable
   78 08C6:E8           		  INX
   79 08C7:E8           		  INX
   80 08C8:0A           		  asl a
   81 08C9:D0 F6        		 bne .00
   82 08CB:             IntReturn
   83                   		;------	At end of interrupt processing, restore the
   84                   		;------	registers and return from interrupt
   85                   
   86 08CB:FA           		PLX
   87 08CC:68           		PLA
   88 08CD:40           		RTI
   89                   
   90                   
   91                   
   92                   
   93                   * The above interrupt dispatcher does a JSR to this li
   94                   * This code jumps to the particular handler.  The inte
   95                   * should end with an RTS, which will return control to
   96                   
   97 08CE:             jumpIntTable
   98 08CE:8D 80 FD     		sta INTRST	; clear interrupt we're processing
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   24
                        6502:src/sys.src                14:39:10  

   99 08D1:7C 90 08     		JMP	(sysIntTable,X)
  100                   
  101                   
  102      TRUE         	  #IFDEF BRK_USER
  103 08D4:             brkInt
  104 08D4:FA           		PLX
  105 08D5:68           		PLA
  106                   BRK_vector	HBRK			; force BRK on Howard board
    1 08D6:13         + 	.HS 13
    2                 + 
  107 08D7:4C D6 08     		JMP BRK_vector		; Will be modified by INITINT call
  108                   	  #ENDIF ; of #IFDEF BRK_USER
  109                   
  110                   
  111                   
  105                   		.IN	6502:src/hsfx.src
    1                   ; Tue Sep 18 17:43:53 1990
    2                   * === hsfx.src =======================================
    3                   *
    4                   * Handy Sound Effects Driver  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 04-May-90	SHL		If not integrated, voice bias reset o
   12                   *				channel.  If integrating, voice bias ramped to
   13                   *				zero.  No longer tries to play sounds if voice
   14                   *				owned by someone else.
   15                   * 19-Apr-90	SHL		AllocAudio and GrabAudio routines now
   16                   *				inly if GRABAUDIO_USER is set.
   17                   *				General code tightening and cleanup.
   18                   *				Moved top_of_loop0,1 variables to hsfx.var .
   19                   *				Moved hsfx_temp to zero page.
   20                   * 18-Apr-90	SHL		InitHSFX now zeroes all HSFX variable
   21                   *				FreeAudio now zeroes bias on stopped channel
   22                   * 01-Apr-90	SHL & G Colgate	Added USER_HSFX switch and
   23                   * 26-Mar-90	SHL		Removed PHA, PHX instructions from hs
   24                   *				Changed driver exit to match new IRQ handler
   25                   * 6 Oct 89	SHL		Modified driver to catch dropped frame
   26                   *				Modified START_DISABLE and END_DISABLE macros
   27                   *				to use the new flag audio_lockout
   28                   * 14 Sep 89	SJ		Fix to register clear in StartHSFX
   29                   * 5 Sept 89	SJ		Changed public calls to lock out just 
   30                   * 31 Aug 89	SJ		Changed code to use HSFX_CHANNELCOUNT 
   31                   *				Made variables relocatable in HSFX.var
   32                   *				User programs now must include HSFX.var also.
   33                   *				Tightened up key frame loop in update_frame.
   34                   * 30 Aug 89	Stephen Jungels	Clear launch_channel flag 
   35                   *				Simplified channel killing code.
   36                   *				Modified grunt main loops.
   37                   *				Changed ResetHSFX to call FreeAudio.
   38                   * 11 Aug 89	-RJ		Restore I flag at end of int. driver 
   39                   *				clearing audio_interruptus
   40                   * 1 June 89	-RJ		Added some pre-CES bullet-proofing to
   41                   *				channel number in FreeAudio and GrabAudio
   42                   * 1 June 89	SHL		Moved hsfx_driver core to hsfx_driver
   43                   *				called by both hsfx_driver and hmusic_driver
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   25
                        6502:src/hsfx.src               14:39:10  

   44                   *				allowing SEPARATE_HMUSIC_HSFX to work
   45                   * 31 May 89	SHL		Added the required 5th element to Cha
   46                   * 13 May 89	-RJ		Added SEPARATE_HMUSIC_HSFX support
   47                   * 11 May 89	-RJ		FrameClock and FramePreload are chang
   48                   *				AudioClock and AudioPreload.  These are now
   49                   *				set using AUDIO_CLOCK_MASK and AUDIO_PRELOAD.
   50                   *				Removed HFIX1 references.  Made InitHSFX
   51                   *				always disable interrupts
   52                   * 1 May 89	-RJ		Changed all IntTable references to sys
   53                   *				which is defined now in the sys.mac file
   54                   * 30 Apr 89	-RJ		Got rid of old CES_SLOWCLOCK stuff
   55                   * 5 Apr 89	-RJ		Added audio_interruptus.  The hsfx dri
   56                   *				interrupt code now clears interrupt disable
   57                   *				as soon as its taken steps to prevent
   58                   *				reentrancy, thereby allowing other more
   59                   *				important interrupts to be processed.
   60                   * 22 Mar 89	-RJ		Moved declaration of audio_ptr into t
   61                   *				Changed order of steps in ResetHSFX.
   62                   *				Added cancellation of launch_channel in Reset.
   63                   *				Tightened code in calc_next_audio
   64                   * 21 Mar 89	-RJ		Changed name of effect_in_use to Chan
   65                   *				By request, changed name of temp to hsfx_temp.
   66                   *				Tightened up loop in ResetHSFX
   67                   * 20 Mar 89	-RJ		Merged RG's changes into this file, a
   68                   *				many comments, general cleanup
   69                   * 19 Mar 89	-RJ		Added many calls to HFIX1 macros as n
   70                   * Feb 89	RG		Tightened code, folded music into HSFX
   71                   * 4 Jan 89	=RJ Mical=	Stripped out sample program, cha
   72                   *				to match harddefs.i
   73                   *				Added AUDIO_TIMER definition and more
   74                   * Late 88	RG Goudy	Created this file!
   75                   *
   76                   * ====================================================
   77                   
   78                   
   79                   
   80                   
   81      TRUE            #IFNDEF START_DISABLE
   82                   
   83      0001         AUDIO_DISABLE	.EQU	1
   84                   ; Define AUDIO_DISABLE to disable audio interrupts *on
   85                   ; routines.  Undefine AUDIO_DISABLE to lock out *all* 
   86                   
   87                   	#MACRO START_DISABLE
   88 MACRO             		#IFDEF AUDIO_DISABLE
   89 MACRO             		 INC	audio_lockout
   90 MACRO             		#ELSE
   91 MACRO             		 PHP
   92 MACRO             		 SEI
   93 MACRO             		#ENDIF
   94                   	#ENDM	; START_DISABLE
   95                   
   96                   	#MACRO END_DISABLE
   97 MACRO             		#IFDEF AUDIO_DISABLE
   98 MACRO             		 DEC	audio_lockout
   99 MACRO             		#ELSE
  100 MACRO             		 PLP
  101 MACRO             		#ENDIF
  102                   	#ENDM	; END_DISABLE
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   26
                        6502:src/hsfx.src               14:39:10  

  103                   
  104                   
  105                      #ENDIF	; OF IFNDEF START_DISABLE
  106                   
  107                   
  108                   
  109                   		BEGIN_ZPAGE
    1      08DA       + TEMPORG	  .= *
    2 08DA:           + 	  .ORG NEXTZPG
    3                 + 
  110 0006:             audio_ptr	.DS 2		; grab some zero page variables
  111 0008:             hsfx_temp	.DS 1
  112                   		END_ZPAGE
    1      0009       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 0009:           + 	  .ORG TEMPORG
    6                 + 
  113                   
  114                   
  115                   
  116                   * If HMUSIC is out there and if the programmer hasn't 
  117                   * SEPARATE_HMUSIC_HSFX then define hsfxSysCancel, whic
  118                   * little more than a subroutine call for HMUSIC
  119      FALSE        	#IFDEF HANDYMUSIC
  123                   	#ENDIF
  124                   
  125                   
  126                   
  127 08DA:             InitHSFX
  128                   * ====================================================
  129                   * Sound Effects Driver Initialization
  130                   * You should call this routine only once, during the i
  131                   * portion of your code
  132                   * Warning from RG:  if you muck with it and it doesn't
  133                   * (yes, straight to bed with no dinner).
  134                   *
  135                   * If you are using the Handy music driver you are supp
  136                   * the audio system by calling InitMusic.  InitMusic ca
  137                   * aren't required to call both.
  138                   
  139                   
  140      TRUE          #IFNDEF hsfxSysCancel
  141 08DA:08           	 php
  142 08DB:78           	  sei
  143                   
  144 08DC:A9 **        	  lda #<hsfx_driver			; link HSFX in IRQ handler
  145 08DE:8D 9C 08     	  sta sysIntTable+{AUDIO_TIMER*2}
  146 08E1:A9 **        	  lda #>hsfx_driver
  147 08E3:8D 9D 08     	  sta sysIntTable+{AUDIO_TIMER*2}+1
  148                    #ENDIF
  149                   
  150 08E6:A9 9E        	  lda #AUDIO_CLOCK_MASK+ENABLE_INT+ENABLE_RELOAD+ENAB
  151 08E8:A0 40        	  ldy #AUDIO_PRELOAD
  152 08EA:8D 19 FD     	  sta TIMER0+{AUDIO_TIMER*4}+TIM_CONTROLA
  153 08ED:8C 18 FD     	  sty TIMER0+{AUDIO_TIMER*4}+TIM_BACKUP
  154                   
  155      TRUE          #IFNDEF hsfxSysCancel
  156 08F0:28           	 plp
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   27
                        6502:src/hsfx.src               14:39:10  

  157                    #ENDIF
  158                   
  159                   * ... and intentionally fall into ResetHSFX
  160                   
  161                   
  162                   
  163 08F1:             ResetHSFX
  164                   * ====================================================
  165                   * This routine turns off the audio channels and clears
  166                   * usage of all the channels.  You can call this routin
  167                   * whenever you like, as often as you like.
  168                   
  169                   * Warning:  this code is fallen into from above
  170                   
  171 08F1:08           	 php
  172 08F2:78           	  sei
  173                   
  174 08F3:A2 **        	  ldx #HSFXVarEnd-HSFXVarStart	; clear all HSFX varia
  175 08F5:9E ** **     .00	    stz HSFXVarStart-1,x
  176 08F8:CA           	    dex
  177 08F9:D0 FA        	   bne .00
  178                   
  179 08FB:A2 03        	  ldx #HSFX_CHANNELCOUNT-1	; free each audio channel
  180 08FD:20 ** **     .10	    jsr FreeAudio
  181 0900:CA           	    dex
  182 0901:10 FA        	   bpl .10
  183                   
  184 0903:28           	 plp
  185 0904:60           	rts
  186                   
  187                   
  188 0905:             StartHSFX
  189                   * ====================================================
  190                   * The StartHSFX routine is called to add a sound effec
  191                   * Call with the address of your HSFX table in A,X (low
  192                   * with the priority of this sound effect in Y.
  193                   *
  194                   * If your sound effect is successfully added, carry is
  195                   * has the audio channel number of your sound effect.  
  196                   * couldn't be added, carry is set on return and X will
  197                   * Channel 4 is a mock HSFX channel, the priority of wh
  198                   * ChannelInUse) will always be zero and therefore will
  199                   * priority of a sound effect submitted to StartHSFX.  
  200                   * convenience of being able to check at a later time w
  201                   * sound effect is still active without requiring the o
  202                   * whether the call to StartHSFX succeeded or failed in
  203                   *
  204                   * On return:
  205                   *    carry clear = success
  206                   *      carry set = failure
  207                   *              X = channel number (0 - 3) of sound eff
  208                   
  209                   
  210                   	START_DISABLE	; disable sound IRQs
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0905:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   28
                        6502:src/hsfx.src               14:39:10  

  211                   
  212 0908:85 06        	sta audio_ptr		; hsfx table address lsb
  213 090A:86 07        	stx audio_ptr+1		; hsfx table address msb
  214                   
  215 090C:20 ** **     	jsr find_lesser_channel
  216 090F:B0 **        	bcs .00
  217                   
  218 0911:A2 04        	ldx #HSFX_CHANNELCOUNT	; Return mock channel number
  219                   
  220                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0913:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  221                   
  222 0916:38           	sec			; Return result:  no channel available
  223 0917:60           	rts
  224                   
  225                   
  226 0918:9D ** **     .00	sta ChannelInUse,x	; Store priority of this channe
  227 091B:A5 06        	lda audio_ptr
  228 091D:9D ** **     	sta hsfx_basel,x
  229 0920:A5 07        	lda audio_ptr+1
  230 0922:9D ** **     	sta hsfx_baseh,x
  231                   
  232 0925:8A           	txa			; Clear accumulators & interpolators
  233 0926:18           	clc
  234 0927:69 3C        	adc #HSFX_CHANNELCOUNT*{HSFX_REGSIZE*HSFX_REGCOUNT-1}
  235 0929:38           	sec
  236 092A:AA           .11	  tax
  237 092B:9E ** **     	  stz freql,x
  238 092E:E9 04        	  sbc #HSFX_CHANNELCOUNT
  239 0930:B0 F8        	 bcs .11		; X comes out of loop with correct index
  240                   
  241 0932:20 ** **     	jsr update_frame	; read in first key frame
  242 0935:20 ** **     	jsr calc_next_audio	; set up for first hardware load
  243                   
  244 0938:A9 80        	lda #$80		; set signal to start sound effect
  245 093A:9D ** **     	sta launch_channel,x
  246                   
  247                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 093D:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  248                   
  249 0940:18           	clc			; tell caller that channel was gotten
  250 0941:60           	rts
  251                   
  252                   
  253                   
  254 0942:             StopHSFX
  255                   * ====================================================
  256                   * This routine is called to remove a sound effect from
  257                   * Call with the priority of the sound effect to stop i
  258                   *
  259                   * On return:
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   29
                        6502:src/hsfx.src               14:39:10  

  260                   *    A, X and Y are trashed
  261                   *    carry clear = a sound effect with this priority w
  262                   *    carry set = no sound effect with this priority wa
  263                   
  264                   
  265                   	START_DISABLE		; kill sound IRQs
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0942:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
  266                   
  267 0945:98           	tya
  268 0946:A2 04        	ldx #HSFX_CHANNELCOUNT
  269                   
  270 0948:CA           .11	  dex
  271 0949:30 **        	  bmi .20
  272 094B:DD ** **     	  cmp ChannelInUse,x
  273 094E:D0 F8        	 bne .11
  274                   
  275 0950:20 ** **     	jsr freeChannelX	 ; found channel with desired priori
  276                   
  277                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0953:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  278 0956:18           	clc
  279 0957:60           	rts
  280                   
  281                   .20	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0958:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  282 095B:38           	sec
  283 095C:60           	rts
  284                   
  285                   
  286                   
  287 095D:             FreeAudio
  288                   * ====================================================
  289                   * This routine is called to free an audio channel that
  290                   * using AllocAudio or GrabAudio.  It's used also by th
  291                   * free up the channel at the end of a note.
  292                   *
  293                   * Call with the channel number that you want to free i
  294                   *
  295                   * On return:
  296                   *    carry wil be clear, which equals success
  297                   
  298      FALSE         #IFDEF SOUND_DEBUG
  303                    #ENDIF
  304                   
  305                   
  306                   	START_DISABLE	; kill sound IRQs
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   30
                        6502:src/hsfx.src               14:39:10  

    2 095D:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
  307                   
  308 0960:20 ** **     	jsr freeChannelX
  309                   
  310                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0963:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  311 0966:18           	clc
  312 0967:60           	rts
  313                   
  314                   
  315                   
  316      FALSE         #IFDEF GRABAUDIO_USER
  367                    #ENDIF ; of #IFDEF GRABAUDIO_USER
  368                   
  369                   
  370                   
  371                   * find_lesser_channel and freeChannelX don't affect th
  372                   
  373                   
  374 0968:             find_lesser_channel
  375                   * ====================================================
  376                   * The find_lesser_channel routine feels through the pr
  377                   * channels, looking for one that's the most less than 
  378                   * priority of interest.
  379                   *
  380                   * On entry:  the priority to beat is in Y
  381                   * On exit:  The lowest priority channel number is retu
  382                   *	of the channel is less than or equal to request	then
  383                   
  384      TRUE          #IF HSFX_CHANNELCOUNT>1
  385                   
  386 0968:5A           	phy
  387                   
  388 0969:A2 03        	ldx #HSFX_CHANNELCOUNT-1
  389 096B:A0 02        	ldy #HSFX_CHANNELCOUNT-2
  390 096D:BD ** **     .40	  lda ChannelInUse,x
  391 0970:D9 ** **     	  cmp ChannelInUse,y
  392 0973:90 **        	  blt .41		; Branch if x-priority is less than y-prio
  393 0975:98           	  tya		; else copy y to x
  394 0976:AA           	  tax
  395 0977:88           .41	  dey
  396 0978:10 F3        	 bpl .40
  397                   
  398 097A:68           	pla	
  399                   
  400                    #ELSE
  405                    #ENDIF
  406                   
  407 097B:DD ** **     	cmp ChannelInUse,x	; compare with lowest priority cha
  408                   
  409 097E:60           	rts
  410                   
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   31
                        6502:src/hsfx.src               14:39:10  

  411                   
  412                   
  413 097F:             freeChannelX
  414                   * ====================================================
  415                   * Here, X has the index of the channel to be freed
  416 097F:A9 00        	lda #0
  417                   
  418 0981:             killChannelX
  419 0981:9D ** **     	sta ChannelInUse,x		; either free or grab channel
  420                   
  421 0984:9E ** **     	stz launch_channel,x		; make sure we zero launch flag
  422 0987:BC ** **     	ldy audio_offsets,x
  423 098A:B9 25 FD     	lda AUDIO0+AUD_CONTROL,y
  424 098D:29 20        	and #ENABLE_INTEGRATE
  425 098F:99 25 FD     	sta AUDIO0+AUD_CONTROL,y	; kill channel
  426 0992:D0 **        	bne .90
  427 0994:99 22 FD     	sta AUDIO0+AUD_OUTPUT,y	; reset volume (DC bias) if n
  428 0997:60           .90	rts
  429                   
  430                   
  431                   
  432                   
  433                   
  434                   
  435                   
  436                   * ====================================================
  437                   * ====                    ============================
  438                   * ====   Interrupt Code   ============================
  439                   * ====                    ============================
  440                   * ====================================================
  441                   
  442                   
  443      TRUE          #IFNDEF hsfxSysCancel
  444                   
  445 0998:             hsfx_driver
  446                   * ====================================================
  447                   * Here's the entry point HSFX interrupt code
  448                   * Note that if hsfxSysCancel is defined this code does
  449                   
  450                   	;-- Test if this is an hsfx interrupt re-entering
  451                   	;-- If audio_interruptus is zero, this is a top-level
  452                   	;-- into the interrupt code so it's safe to proceed. 
  453                   	;-- if audio_interruptus isn't zero we're re-entering
  454                   	;-- got so pushed so deep in the queue that another a
  455                   	;-- interrupt occurred!  It's not safe to re-enter, s
  456                   	;-- (causing the audio to skip a beat, it's true).
  457 0998:AD ** **     	lda audio_lockout	; are we being locked out?
  458 099B:D0 **        	bne .12
  459 099D:AD ** **     	lda audio_interruptus	; Were we here before
  460 09A0:F0 **        	beq .10			; Branch if not
  461 09A2:EE ** **     .12	inc audio_dropout	; count dropped frames
  462 09A5:80 **        	bra .90			; branch to exit
  463                   
  464 09A7:EE ** **     .10	inc audio_interruptus	; Mark that we are here
  465 09AA:EE ** **     	inc audio_dropout	; record frame we're doing
  466 09AD:58           	cli			; and let other interrupts run
  467                   
  468 09AE:5A           	 phy
  469 09AF:20 ** **     .11	    jsr hsfx_driver_grunt
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   32
                        6502:src/hsfx.src               14:39:10  

  470 09B2:CE ** **     	    dec audio_dropout	; mark that we've played a fram
  471 09B5:D0 F8        	   bne .11		; loop back for dropped frames
  472 09B7:7A           	 ply
  473                   
  474 09B8:9C ** **     	stz audio_interruptus	; reset flag so we know it's OK
  475                   
  476 09BB:             .90
  477 09BB:FA           	plx
  478 09BC:68           	pla
  479 09BD:40           	rti
  480                   
  481                    #ENDIF ; of IFNDEF hsfxSysCancel
  482                   
  483                   
  484                   
  485                   
  486                   
  487 09BE:             hsfx_driver_grunt
  488                   * ====================================================
  489                   * Here's the actual HSFX interrupt code
  490                   * The audio driver turns itself into "low-priority" in
  491                   * enabling interrupts as soon as it has protected itse
  492                   * reentered.  This will allow more important (especial
  493                   * interrupt routines to wrest control away from audio 
  494                   
  495      FALSE         #IFDEF USER_HSFX
  497                    #ENDIF
  498                   
  499                   * Lay our hands on the hardware of each active channel
  500                   * (although note that this loop won't actually start t
  501                   * for the channel if the timer isn't already running. 
  502                   * in the launch_channel loop below).
  503                   
  504 09BE:A2 03        	ldx #HSFX_CHANNELCOUNT-1
  505                   
  506 09C0:BC ** **     .00	  ldy audio_offsets,x
  507 09C3:BD ** **     	  lda ChannelInUse,x	; Is this an active channel?
  508 09C6:D0 **        	  bne .02
  509 09C8:B9 22 FD     	  lda AUDIO0+AUD_OUTPUT,y	; not active, ramp volume t
  510 09CB:F0 **        	  beq .01
  511 09CD:10 **        	  bpl .03
  512 09CF:1A           	  inc a
  513 09D0:1A           	  inc a
  514 09D1:3A           .03	  dec a
  515 09D2:99 22 FD     	  sta AUDIO0+AUD_OUTPUT,y
  516 09D5:80 **        	  bra .01
  517                   
  518 09D7:C9 FF        .02	  cmp #HSFX_NOCHANNEL	; does someone else own this
  519 09D9:F0 **        	  beq .01
  520                   
  521 09DB:BD ** **     .10	  lda volumeh,x
  522 09DE:99 20 FD     	  sta AUDIO0+AUD_VOLCNTRL,y	; Volume
  523                   
  524 09E1:BD ** **     	  lda preload_temp,x
  525 09E4:99 24 FD     	  sta AUDIO0+AUD_BACKUP,y	; Frequency lsb
  526                   
  527 09E7:BD ** **     	  lda data_temp,x
  528 09EA:99 21 FD     	  sta AUDIO0+AUD_FEEDBACK,y	; Update feedback
  529                   
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   33
                        6502:src/hsfx.src               14:39:10  

  530 09ED:BD ** **     	  lda flagsl,x
  531 09F0:29 04        	  and #SHIFT_ALWAYS		; Store shifter value always?
  532 09F2:D0 **        	  bne .20			; Branch if yes
  533 09F4:1E ** **     	  asl shift_flag,x		; Store new shifter this time onl
  534 09F7:90 **        	  bcc .22			; Branch if no
  535                   
  536 09F9:B9 27 FD     .20	  lda AUDIO0+AUD_OTHER,y	; Do masking as needed
  537 09FC:29 0F        	  and #$f
  538 09FE:1D ** **     	  ora shift_temp,x
  539 0A01:99 27 FD     	  sta AUDIO0+AUD_OTHER,y
  540                   
  541 0A04:BD ** **     	  lda shiftl,x
  542 0A07:99 23 FD     	  sta AUDIO0+AUD_SHIFT,y
  543                   
  544 0A0A:B9 25 FD     .22	  lda AUDIO0+AUD_CONTROL,y	; patch in new control 
  545 0A0D:29 58        	  and #ENABLE_COUNT+ENABLE_RELOAD+RESET_DONE
  546 0A0F:1D ** **     	  ora clock_temp,x
  547 0A12:99 25 FD     	  sta AUDIO0+AUD_CONTROL,y
  548                   
  549 0A15:CA           .01	  dex
  550 0A16:10 A8        	 bpl .00
  551                   
  552                   ;	jmp launch_channels		; fall through
  553                   
  554                   
  555                   * If two notes start with the same frequency they shou
  556                   * at very close to the same time to prevent them from 
  557                   * 180 degrees out of phase with each other.  Being out
  558                   * them to cancel each other out; we know this from exp
  559                   * notes should be launched as close together as possib
  560                   * avoid the out-of-phase cancellation problem.  This l
  561                   * and the overhead of the additional loop is well wort
  562                   
  563 0A18:             launch_channels
  564 0A18:78           	sei
  565 0A19:A2 03        	ldx #HSFX_CHANNELCOUNT-1
  566                   
  567 0A1B:             launch_next_channel
  568 0A1B:BD ** **     .00	  lda launch_channel,x		; Launch this channel?
  569 0A1E:F0 **        	  beq .01			; Branch if not
  570 0A20:9E ** **     	  stz launch_channel,x		; finished launching
  571                   
  572 0A23:BC ** **     	  ldy audio_offsets,x
  573 0A26:B9 24 FD     	  lda AUDIO0+AUD_BACKUP,y	; Frequency lsb
  574 0A29:99 26 FD     	  sta AUDIO0+AUD_COUNTER,y	; Copy prevents phase erro
  575                   
  576 0A2C:B9 25 FD     	  lda AUDIO0+AUD_CONTROL,y	; Start audio timer
  577 0A2F:09 18        	  ora #ENABLE_RELOAD+ENABLE_COUNT
  578 0A31:99 25 FD     	  sta AUDIO0+AUD_CONTROL,y
  579                   
  580 0A34:CA           .01	  dex
  581 0A35:10 E4        	 bpl .00
  582                   
  583                   * Advance the HSFX values of each active channel
  584                   
  585 0A37:             advance_channels
  586 0A37:58           	cli
  587 0A38:A2 03        	ldx #HSFX_CHANNELCOUNT-1
  588                   
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   34
                        6502:src/hsfx.src               14:39:10  

  589 0A3A:BD ** **     .00	  lda ChannelInUse,x	; Is this an active channel?
  590 0A3D:F0 **        	  beq .01		; skip if not
  591 0A3F:C9 FF        	  cmp #HSFX_NOCHANNEL	; do we own this channel?
  592 0A41:F0 **        	  beq .01
  593 0A43:BD ** **     	  lda current_framel,x	; Do we match next key frame e
  594 0A46:DD ** **     	  cmp next_keyframel,x
  595 0A49:D0 **        	  bne .10		; ... no, do interpolation only
  596 0A4B:BD ** **     	  lda current_frameh,x
  597 0A4E:DD ** **     	  cmp next_keyframeh,x
  598 0A51:D0 **        	  bne .10		; ... no, do interpolation only
  599 0A53:20 ** **     	  jsr update_frame	; It's time to do something differ
  600 0A56:80 **        	  bra .20		; First time, don't interpolate
  601                   
  602                   * Add the interpolators to the accumulators
  603                   
  604 0A58:DA           .10	   phx
  605                   
  606 0A59:18           .11	    clc
  607 0A5A:BD ** **     	    lda freq_interpl,x
  608 0A5D:7D ** **     	    adc freql,x
  609 0A60:9D ** **     	    sta freql,x
  610 0A63:BD ** **     	    lda freq_interph,x
  611 0A66:7D ** **     	    adc freqh,x
  612 0A69:9D ** **     	    sta freqh,x
  613                   
  614                   	    ; Bump x to next accumulator-interpolator pair
  615                   
  616      TRUE          #IF HSFX_REGSIZE*HSFX_CHANNELCOUNT > 4
  617 0A6C:8A           	    txa
  618 0A6D:18           	    clc
  619 0A6E:69 08        	    adc #HSFX_REGSIZE*HSFX_CHANNELCOUNT
  620 0A70:AA           	    tax
  621                    #ELSE
  625                    #ENDIF
  626                   
  627                   ; Has index overshot into accumulator-interpolator pai
  628 0A71:E0 20        	    cpx #HSFX_CHANNELCOUNT*HSFX_REGSIZE*HSFX_ACCUMCOU
  629 0A73:90 E4        	    bcc .11		; Branch if not
  630 0A75:FA           	   plx
  631                   
  632 0A76:20 ** **     .20	  jsr calc_next_audio	; Prepare data for hardware 
  633                   
  634 0A79:CA           .01	  dex
  635 0A7A:10 BE        	 bpl .00
  636                   
  637 0A7C:60           	rts
  638                   
  639                   
  640                   
  641                   
  642 0A7D:             update_frame
  643                   * ====================================================
  644                   * Updates an HSFX channel's arrays based on the keyfra
  645                   * pointed to by hsfx_basel,h.
  646                   *
  647                   * On entry:
  648                   *   x = HSFX channel number
  649                   *   hsfx_basel,x points to low flag byte of current fr
  650                   *
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   35
                        6502:src/hsfx.src               14:39:10  

  651                   * On exit:
  652                   *   accumulators & interpolators pre-loaded
  653                   *   next_keyframel,h set to frame number for next keyf
  654                   *   hsfx_basel,x points to low flag byte of next frame
  655                   *   This routine trashes A and Y, leaves X intact
  656                   
  657 0A7D:BD ** **     	lda hsfx_basel,x	; Set up indirect pointer
  658 0A80:85 06        	sta audio_ptr
  659 0A82:BD ** **     	lda hsfx_baseh,x
  660 0A85:85 07        	sta audio_ptr+1
  661 0A87:             loop_frame
  662 0A87:A0 01        	  ldy #1
  663                   
  664 0A89:B2 06        	  lda (audio_ptr)	; this is where current_frame gets 
  665 0A8B:9D ** **     	  sta current_framel,x	; when a sound is started.
  666 0A8E:B1 06        	  lda (audio_ptr),y
  667 0A90:9D ** **     	  sta current_frameh,x
  668                   
  669 0A93:C8           	  iny
  670 0A94:B1 06        	  lda (audio_ptr),y	; Find out what to do this time
  671 0A96:9D ** **     	  sta flagsl,x
  672 0A99:C8           	  iny
  673 0A9A:B1 06        	  lda (audio_ptr),y
  674 0A9C:9D ** **     	  sta flagsh,x
  675 0A9F:C8           	  iny
  676                   
  677 0AA0:0E ** **     	  asl top_of_loop0	; Returning to the top of a loop?
  678 0AA3:B0 **        	  bcs stuff0		; Yes, don't reload count byte
  679 0AA5:BD ** **     	  lda flagsh,x
  680 0AA8:29 40        	  and #>NEXT0		; At the bottom of an inner loop?
  681 0AAA:F0 **        	  beq next0_done	; Branch if not
  682 0AAC:BD ** **     	  lda loop_count0,x	; Infinite loop?
  683 0AAF:F0 **        	  beq infinite0		; Yes, don't count
  684 0AB1:DE ** **     	  dec loop_count0,x	; Not infinite, so are we done?
  685 0AB4:F0 **        	  beq next0_done	; Branch if yes.
  686 0AB6:             infinite0
  687 0AB6:BD ** **     	  lda loop_adrl0,x	; Reload pointer to top of loop
  688 0AB9:85 06        	  sta audio_ptr
  689 0ABB:BD ** **     	  lda loop_adrh0,x
  690 0ABE:85 07        	  sta audio_ptr+1
  691 0AC0:A9 80        	  lda #$80		; Set 'skip loading count' flag
  692 0AC2:8D ** **     	  sta top_of_loop0
  693 0AC5:80 C0        	 bra loop_frame		; Go do top of loop
  694                   
  695                   
  696 0AC7:             next0_done
  697                   
  698 0AC7:BD ** **     	  lda flagsh,x
  699 0ACA:29 80        	  and #>LOOP0		; Starting an inner loop?
  700 0ACC:F0 **        	  beq no_loop0		; Branch if not
  701 0ACE:A5 06        	  lda audio_ptr		; else save this table pointer value
  702 0AD0:9D ** **     	  sta loop_adrl0,x
  703 0AD3:A5 07        	  lda audio_ptr+1
  704 0AD5:9D ** **     	  sta loop_adrh0,x
  705 0AD8:B1 06        	  lda (audio_ptr),y	; Get # of loops to do
  706 0ADA:9D ** **     	  sta loop_count0,x
  707 0ADD:             stuff0
  708 0ADD:C8           	  iny
  709 0ADE:             no_loop0
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   36
                        6502:src/hsfx.src               14:39:10  

  710                   
  711 0ADE:0E ** **     	  asl top_of_loop1	; Returning to the top of a loop?
  712 0AE1:B0 **        	  bcs stuff1		; Yes, don't reload count byte
  713 0AE3:BD ** **     	  lda flagsh,x
  714 0AE6:29 10        	  and #>NEXT1		; At the bottom of an outer loop?
  715 0AE8:F0 **        	  beq next1_done	; Branch if not
  716 0AEA:BD ** **     	  lda loop_count1,x	; Infinite loop?
  717 0AED:F0 **        	  beq infinite1		; Yes, so don't count
  718 0AEF:DE ** **     	  dec loop_count1,x	; Not infinite, so are we done?
  719 0AF2:F0 **        	  beq next1_done	; Branch if yes
  720 0AF4:             infinite1
  721 0AF4:BD ** **     	  lda loop_adrl1,x	; Reload pointer to top of loop
  722 0AF7:85 06        	  sta audio_ptr
  723 0AF9:BD ** **     	  lda loop_adrh1,x
  724 0AFC:85 07        	  sta audio_ptr+1
  725 0AFE:A9 80        	  lda #$80		; Set 'skip loading count' flag
  726 0B00:8D ** **     	  sta top_of_loop1
  727 0B03:4C 87 0A     	 jmp loop_frame		; Go do top of loop
  728                   
  729                   
  730 0B06:             next1_done
  731 0B06:BD ** **     	lda flagsh,x
  732 0B09:29 20        	and #>LOOP1		; Are we starting an outer loop?
  733 0B0B:F0 **        	beq no_loop1		; Branch if not
  734 0B0D:A5 06        	lda audio_ptr		; Save this table pointer value
  735 0B0F:9D ** **     	sta loop_adrl1,x
  736 0B12:A5 07        	lda audio_ptr+1
  737 0B14:9D ** **     	sta loop_adrh1,x
  738 0B17:B1 06        	lda (audio_ptr),y	; Get # of loops to do
  739 0B19:9D ** **     	sta loop_count1,x
  740 0B1C:             stuff1
  741 0B1C:C8           	iny
  742                   
  743 0B1D:             no_loop1		; now load appropriate accumulator/interpola
  744                   
  745                   			; The following piece of code takes the center 8 bi
  746                   			; from the middle of flagsl,h and puts them in orde
  747                   			; into hsfx_temp
  748 0B1D:BD ** **     	lda flagsl,x	; Get a temporary copy of this channel's
  749 0B20:0A           	asl a
  750 0B21:5D ** **     	eor flagsh,x	; smush together upper flagsl bits + low
  751 0B24:29 E0        	and #$e0
  752 0B26:5D ** **     	eor flagsh,x
  753 0B29:2A           	rol a		; bring flagsh bits to the top
  754 0B2A:2A           	rol a
  755 0B2B:2A           	rol a
  756 0B2C:2A           	rol a
  757 0B2D:85 08        	sta hsfx_temp
  758                   
  759 0B2F:DA           	 phx		; Stash the channel number
  760                   
  761                   			; NOTE: the BPL at top of the loop depends on the
  762                   			; ROL instruction above, and the ASL below
  763 0B30:10 **        .22	    bpl .33		; copy key frame data for each flag b
  764 0B32:B1 06        	    lda (audio_ptr),y	; get new value
  765 0B34:9D ** **     	    sta freql,x		; this presumes specific array order
  766 0B37:C8           	    iny
  767 0B38:B1 06        	    lda (audio_ptr),y
  768 0B3A:9D ** **     	    sta freqh,x
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   37
                        6502:src/hsfx.src               14:39:10  

  769 0B3D:C8           	    iny
  770 0B3E:             .33
  771      TRUE          #IF HSFX_REGSIZE*HSFX_CHANNELCOUNT > 4
  772 0B3E:18           	    clc
  773 0B3F:8A           	    txa	 ; Offset X to next accumulator/interpolator 
  774 0B40:69 08        	    adc #HSFX_REGSIZE*HSFX_CHANNELCOUNT
  775 0B42:AA           	    tax
  776                    #ELSE
  780                    #ENDIF
  781 0B43:06 08        	    asl hsfx_temp	; stop when no more flags are set
  782 0B45:D0 E9        	   bne .22
  783                   
  784 0B47:FA           	 plx	; Restore the channel number
  785                   
  786 0B48:BD ** **     	lda flagsh,x
  787 0B4B:29 04        	and #>SHIFT_ACCUM	; New absolute_shifter?
  788 0B4D:F0 **        	beq .55		;no
  789 0B4F:A9 80        	lda #$80
  790 0B51:9D ** **     .55	sta shift_flag,x	; Set 'store once' flag
  791                   
  792 0B54:BD ** **     	lda flagsl,x
  793 0B57:29 08        	and #INTEGRATE		; This is a 'force on/off' flag
  794 0B59:0A           	asl a			; Move into pos for hardware register
  795 0B5A:0A           	asl a
  796 0B5B:9D ** **     	sta integrate,x
  797                   
  798 0B5E:BD ** **     	lda flagsl,x
  799 0B61:29 01        	and #END_OF_EFFECT	; Are we at end of this effect?
  800 0B63:D0 **        	bne end_of_effect
  801                   
  802                   	; Advance hsfx_basel,h to point to next key frame ent
  803 0B65:98           	tya
  804 0B66:18           	clc
  805 0B67:65 06        	adc audio_ptr
  806 0B69:9D ** **     	sta hsfx_basel,x
  807 0B6C:A9 00        	lda #0
  808 0B6E:65 07        	adc audio_ptr+1
  809 0B70:9D ** **     	sta hsfx_baseh,x
  810                   
  811 0B73:B1 06        	lda (audio_ptr),y	;get next key frames' frame #
  812 0B75:9D ** **     	sta next_keyframel,x
  813 0B78:C8           	iny
  814 0B79:B1 06        	lda (audio_ptr),y
  815 0B7B:9D ** **     	sta next_keyframeh,x
  816                   
  817 0B7E:60           	rts			;end of key frame entry
  818                   
  819                   
  820 0B7F:             end_of_effect
  821 0B7F:4C 7F 09     	jmp freeChannelX
  822                   
  823                   
  824                   
  825                   
  826 0B82:             calc_next_audio
  827                   * ====================================================
  828                   * This routuine converts the channel's accumulators in
  829                   * designed for easy hardware loading.  This is done be
  830                   * audio frame, so that at the start of the audio frame
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   38
                        6502:src/hsfx.src               14:39:10  

  831                   * values can be picked up and jammed into the audio re
  832                   * delay, thereby creating purer sounds.
  833                   *
  834                   * This routine trashes A and Y, leaves X intact
  835                   
  836                   
  837                   * Select the clock by normalizing the frequency accumu
  838                   * (the algorithm and proof is actually a rather hairy 
  839 0B82:A0 07        	ldy #7
  840 0B84:BD ** **     	lda freql,x
  841 0B87:85 08        	sta hsfx_temp
  842 0B89:BD ** **     	lda freqh,x
  843                   
  844 0B8C:06 08        .00	  asl hsfx_temp
  845 0B8E:2A           	  rol a
  846 0B8F:88           	  dey
  847 0B90:B0 **        	  bcs .01
  848 0B92:D0 F8        	 bne .00
  849                   
  850 0B94:6A           .01	ror a
  851                   
  852 0B95:             end_freq
  853 0B95:9D ** **     	sta preload_temp,x
  854 0B98:98           	tya
  855 0B99:9D ** **     	sta clock_temp,x
  856                   
  857                   
  858                   * Preset the 12-bit shifter values
  859 0B9C:BD ** **     	lda shifth,x
  860 0B9F:0A           	asl a
  861 0BA0:0A           	asl a
  862 0BA1:0A           	asl a
  863 0BA2:0A           	asl a
  864 0BA3:9D ** **     	sta shift_temp,x
  865                   
  866                   * Preset the lower 8 feedback enables
  867 0BA6:BD ** **     	lda feedbackl,x
  868 0BA9:0A           	asl
  869 0BAA:85 08        	sta hsfx_temp
  870 0BAC:BD ** **     	lda feedbackh,x
  871 0BAF:2A           	rol a
  872 0BB0:06 08        	asl hsfx_temp
  873 0BB2:2A           	rol a
  874 0BB3:06 08        	asl hsfx_temp
  875 0BB5:2A           	rol a
  876 0BB6:06 08        	asl hsfx_temp
  877 0BB8:2A           	rol a
  878 0BB9:C9 80        	cmp #$80		; sec if high bit set
  879 0BBB:5D ** **     	eor feedbackh,x		; merge in top two bits of feedbackh
  880 0BBE:29 3F        	and #$3f
  881 0BC0:5D ** **     	eor feedbackh,x
  882 0BC3:9D ** **     	sta data_temp,x
  883                   
  884                   * Grab the other feedback enable, or'ing it into the o
  885 0BC6:A9 00        	lda #0
  886 0BC8:6A           	ror a			; bring carry into top bit
  887 0BC9:1D ** **     	ora integrate,x		; OR with integration
  888 0BCC:1D ** **     	ora clock_temp,x	; OR in with clock
  889 0BCF:9D ** **     	sta clock_temp,x
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   39
                        6502:src/hsfx.src               14:39:10  

  890                   
  891                   
  892                   * Increment this sound effect's current frame counter
  893 0BD2:FE ** **     	inc current_framel,x
  894 0BD5:D0 **        	bne .11
  895 0BD7:FE ** **     	inc current_frameh,x
  896                   
  897 0BDA:60           .11	rts
  898                   
  899                   
  900                   
  901                   
  902                   
  903                   * === ================================================
  904                   * ===               ==================================
  905                   * ===      Data     ==================================
  906                   * ===               ==================================
  907                   * === ================================================
  908                   
  909                   
  910 0BDB:00 08 10 18  audio_offsets	.by $00,$08,$10,$18 ; Offsets into the h
  910                   
  911                   
  912                   
  106                   
  107                   
  108 0BDF:             KnockKnock
  109                   ; HSFX Table for KnockKnock sound effect
  110                   	;------ Next Frame
  111 0BDF:00 00        	.WORD	0	; Frame number
  112 0BE1:90 8F        	.WORD	$8f90	; Flags
  113 0BE3:02           	.BYTE	$02	; Outer loop count
  114 0BE4:00 00        	.WORD	$0000	; Freq accum
  115 0BE6:FF FF        	.WORD	$ffff	; Shifter accum
  116 0BE8:90 02        	.WORD	$0290	; Feedback accum
  117 0BEA:00 7F        	.WORD	$7f00	; Volume accum
  118 0BEC:23 03        	.WORD	$0323	; Freq interp
  119 0BEE:76 FD        	.WORD	$fd76	; Volume interp
  120                   	;------ Next Frame
  121 0BF0:32 00        	.WORD	50	; Frame number
  122 0BF2:01 40        	.WORD	$4001	; Flags
  123                   
  124 0BF4:             WoopWoopWoop
  125                   ; HSFX Table for WoopWoopWoop sound effect
  126                   	;------ Next Frame
  127 0BF4:00 00        	.WORD	0	; Frame number
  128 0BF6:90 8F        	.WORD	$8f90	; Flags
  129 0BF8:03           	.BYTE	$03	; Outer loop count
  130 0BF9:FC 9C        	.WORD	$9cfc	; Freq accum
  131 0BFB:FF FF        	.WORD	$ffff	; Shifter accum
  132 0BFD:10 00        	.WORD	$0010	; Feedback accum
  133 0BFF:00 00        	.WORD	$0000	; Volume accum
  134 0C01:ED FC        	.WORD	$fced	; Freq interp
  135 0C03:8A 02        	.WORD	$028a	; Volume interp
  136                   	;------ Next Frame
  137 0C05:32 00        	.WORD	50	; Frame number
  138 0C07:01 40        	.WORD	$4001	; Flags
  139                   
  140 0C09:             Sparkle
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   40
                                                        14:39:10  

  141                   ; HSFX Table for Sparkle sound effect
  142                   	;------ Next Frame
  143 0C09:00 00        	.WORD	0	; Frame number
  144 0C0B:30 0F        	.WORD	$0f30	; Flags
  145 0C0D:24 00        	.WORD	$0024	; Freq accum
  146 0C0F:FF FF        	.WORD	$ffff	; Shifter accum
  147 0C11:10 00        	.WORD	$0010	; Feedback accum
  148 0C13:00 7F        	.WORD	$7f00	; Volume accum
  149 0C15:04 00        	.WORD	$0004	; Feedback interp
  150 0C17:02 FF        	.WORD	$ff02	; Volume interp
  151                   	;------ Next Frame
  152 0C19:80 00        	.WORD	128	; Frame number
  153 0C1B:01 00        	.WORD	$0001	; Flags
  154                   
  155                   
  156                   
  157                   	.IN 6502:src/hsfx.var
    1                   ; Thursday 19-Apr-90 16:17:32
    2                   * === hsfx.var =======================================
    3                   *
    4                   * Handy Sound Effects Driver  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 19-Apr-90	SHL		Moved top_of_loop0,1 variables from h
   12                   *				Moved hsfx_temp to zero page in hsfx.src
   13                   * 18-Apr-90	SHL		Added HSFXVarStart and HSFXVarEnd mar
   14                   * 31-Aug-89	Stephen Jungels	Split this file from hsfx.
   15                   *
   16                   * ====================================================
   17                   
   18                   
   19                   ; Variables used by the HSFX driver
   20                   
   21                   ; If you are using HSFX you must include this file
   22                   
   23                   
   24 0C1D:             HSFXVarStart
   25                   
   26                   
   27 0C1D:             audio_interruptus .ds 1	; Set on entry to audio interr
   28 0C1E:             audio_lockout	.ds 1	; flag to lock out audio interrupt
   29 0C1F:             audio_dropout	.ds 1	; count of audio frames that have 
   30                   
   31 0C20:             top_of_loop0	.ds 1	; recursion flag
   32 0C21:             top_of_loop1	.ds 1	; recursion flag
   33                   
   34                   
   35                   * ChannelInUse is used to denote both that the HSFX ch
   36                   * and the priority of the effect currently playing on 
   37                   * A ChannelInUse value of 0 (HSFX_FREECHANNEL) denotes
   38                   * A value of $FF (HSFX_NOCHANNEL) denotes channel not 
   39                   * Any other value is a channel-priority value, where s
   40                   * odd priorities and music notes get even priorities.
   41                   * Note that ChannelInUse has 5 elements, allowing for 
   42                   * "mock channel" which is guaranteed to always have a 
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   41
                        6502:src/hsfx.var               14:39:10  

   43                   * Channel 4 is returned by StartHSFX when the effect c
   44                   
   45 0C22:             ChannelInUse	.ds HSFX_CHANNELCOUNT+1
   46                   
   47                   
   48                   * NOTE:  The above software depends on the exact order
   49                   * accumulators and interpolators.
   50                   * Also, the software presumes that:  there are HSFX_AC
   51                   * accumulators; there are a total of HSFX_REGCOUNT arr
   52                   * and each pair is (HSFX_CHANNELCOUNT * HSFX_REGSIZE) 
   53                   
   54 0C27:             freql		.ds HSFX_CHANNELCOUNT
   55 0C2B:             freqh		.ds HSFX_CHANNELCOUNT
   56 0C2F:             shiftl		.ds HSFX_CHANNELCOUNT
   57 0C33:             shifth		.ds HSFX_CHANNELCOUNT
   58 0C37:             feedbackl	.ds HSFX_CHANNELCOUNT
   59 0C3B:             feedbackh	.ds HSFX_CHANNELCOUNT
   60 0C3F:             volumel		.ds HSFX_CHANNELCOUNT
   61 0C43:             volumeh		.ds HSFX_CHANNELCOUNT
   62 0C47:             freq_interpl	.ds HSFX_CHANNELCOUNT
   63 0C4B:             freq_interph	.ds HSFX_CHANNELCOUNT
   64 0C4F:             shift_interpl	.ds HSFX_CHANNELCOUNT
   65 0C53:             shift_interph	.ds HSFX_CHANNELCOUNT
   66 0C57:             feed_interpl	.ds HSFX_CHANNELCOUNT
   67 0C5B:             feed_interph	.ds HSFX_CHANNELCOUNT
   68 0C5F:             vol_interpl	.ds HSFX_CHANNELCOUNT
   69 0C63:             vol_interph	.ds HSFX_CHANNELCOUNT
   70                   
   71 0C67:             flagsl		.ds HSFX_CHANNELCOUNT	;16 bit flags
   72 0C6B:             flagsh		.ds HSFX_CHANNELCOUNT
   73                   
   74 0C6F:             next_keyframel	.ds HSFX_CHANNELCOUNT	;next 'change of 
   75 0C73:             next_keyframeh	.ds HSFX_CHANNELCOUNT
   76                   
   77 0C77:             current_framel	.ds HSFX_CHANNELCOUNT	;current frame be
   78 0C7B:             current_frameh	.ds HSFX_CHANNELCOUNT
   79                   
   80 0C7F:             loop_count0	.ds HSFX_CHANNELCOUNT	;# loops to perform
   81 0C83:             loop_adrl0	.ds HSFX_CHANNELCOUNT	;'top of loop' addres
   82 0C87:             loop_adrh0	.ds HSFX_CHANNELCOUNT
   83                   
   84 0C8B:             loop_count1	.ds HSFX_CHANNELCOUNT	;# loops to perform
   85 0C8F:             loop_adrl1	.ds HSFX_CHANNELCOUNT	;'top of loop' addres
   86 0C93:             loop_adrh1	.ds HSFX_CHANNELCOUNT
   87                   
   88 0C97:             shift_flag	.ds HSFX_CHANNELCOUNT
   89                   
   90 0C9B:             clock_temp	.ds HSFX_CHANNELCOUNT	;something wrong here
   91 0C9F:             preload_temp	.ds HSFX_CHANNELCOUNT
   92 0CA3:             data_temp	.ds HSFX_CHANNELCOUNT
   93 0CA7:             shift_temp	.ds HSFX_CHANNELCOUNT
   94 0CAB:             integrate	.ds HSFX_CHANNELCOUNT
   95                   
   96 0CAF:             hsfx_basel	.ds HSFX_CHANNELCOUNT	;pointers to data tab
   97 0CB3:             hsfx_baseh	.ds HSFX_CHANNELCOUNT
   98                   
   99 0CB7:             launch_channel	.ds HSFX_CHANNELCOUNT	;for out of phase
  100                   
  101                   
Epyx HandyAsm 1.12      testaudio                       15-Apr-12514:39:10 Page   42
                        6502:src/hsfx.var               14:39:10  

  102 0CBB:             HSFXVarEnd
  103                   
  158                   
  159                   
  160                   
  161                   
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:39:10 Page   43
                                                        14:39:10  

$0040 ACCUMULATE                        $0040 ALGO_3
$0000 ASM.EQUSYMS                       $010C ASM.VERSION
$FD40 ATTENREG0                         $FD41 ATTENREG1
$FD42 ATTENREG2                         $FD43 ATTENREG3
$FD86 AUDIN                             $0010 AUDIN_BIT
$FD20 AUDIO0                            $FD28 AUDIO1
$FD30 AUDIO2                            $FD38 AUDIO3
$0006 AUDIO_CLOCK_MASK                  $0001 AUDIO_DISABLE
$0040 AUDIO_PRELOAD                     $0006 AUDIO_TIMER
$0000 AUD_1                             $0004 AUD_16
$0001 AUD_2                             $0005 AUD_32
$0002 AUD_4                             $0006 AUD_64
$0003 AUD_8                             $0004 AUD_BACKUP
$0007 AUD_CLOCK_MASK                    $0005 AUD_CONTROL
$0006 AUD_COUNTER                       $0001 AUD_FEEDBACK
$0007 AUD_LINKING                       $0007 AUD_OTHER
$0002 AUD_OUTPUT                        $0003 AUD_SHIFT
$0000 AUD_VOLCNTRL                      $0001 A_BUTTON
$0000 A_OFFSET                          $0000 BACKGROUND_SPRITE
$0001 BACKNONCOLL_SPRITE                $0000 BACK_SHADOW_SPRITE
MACRO BEGIN_ALLOCATE_ZEROPAGE           MACRO BEGIN_ZPAGE
$00C0 BITS_MASK                         $FDB0 BLUERED0
$FDB1 BLUERED1                          $FDB2 BLUERED2
$FDB3 BLUERED3                          $FDB4 BLUERED4
$FDB5 BLUERED5                          $FDB6 BLUERED6
$FDB7 BLUERED7                          $FDB8 BLUERED8
$FDB9 BLUERED9                          $FDBA BLUEREDA
$FDBB BLUEREDB                          $FDBC BLUEREDC
$FDBD BLUEREDD                          $FDBE BLUEREDE
$FDBF BLUEREDF                          $0002 BORROW_IN
$0001 BORROW_OUT                        $0003 BOUNDARY_SPRITE
$0015 BREAK_CONTROLS                    $0001 BRK_USER
$08D6 BRK_vector                        $0002 BSHADOW_SPRITE
$0013 BUS_MONITOR                       $0002 B_BUTTON
$0002 CART0_IO_INACTIVE                 $0004 CART1_IO_INACTIVE
$0002 CART_ADDR_DATA                    $0001 CART_ADDR_STROBE
$0002 CART_POWER_OFF                    $FC0F COLLADRH
$FC0E COLLADRL                          $FC0B COLLBASH
$FC0A COLLBASL                          $FC25 COLLOFFH
$FC24 COLLOFFL                          $0003 CONTINUE_REQUEST
$FD91 CPUSLEEP                          $FFFE CPU_IRQ
$FFFA CPU_NMI                           $FFFC CPU_RESET
$0C22 ChannelInUse                      $0002 DATA
$FD95 DISPADRH                          $FD94 DISPADRL
$FD92 DISPCTL                           $08A1 DISPCTL_RAM
$1FE0 DISPLAY_BUFSIZE                   $0080 DISPLAY_EOFFLAG
$0040 DISPLAY_EOLFLAG                   $0008 DISP_COLOR
$0002 DISP_FLIP                         $0004 DISP_FOURBIT
$0001 DMA_ENABLE                        $0001 DOWNLOAD_REQUEST
$0001 DRAW_LEFT                         $0002 DRAW_UP
$08A6 DisplayBuffer                     $08A9 DisplayFlags
MACRO ECHO_VALUE                        $0008 ENABLE_COUNT
$0080 ENABLE_INT                        $0020 ENABLE_INTEGRATE
$0010 ENABLE_RELOAD                     MACRO END_ALLOCATE_ZEROPAGE
MACRO END_DISABLE                       $0001 END_OF_EFFECT
$0000 END_OF_FILE                       MACRO END_ZPAGE
$0004 EVER_ON                           $0001 EXTERNAL_POWER
$0200 FBACK_ACCUM                       $0020 FBACK_INTERP
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:39:10 Page   44
                                                        14:39:10  

$0080 FEEDBACK_7                        $0011 FILL_MEM
$0004 FLIP_BUTTON                       $00C0 FOUR_PER_PIXEL
$0004 FRAMERR                           $0800 FREQ_ACCUM
$0080 FREQ_INTERP                       $095D FreeAudio
$0005 GO_REQUEST                        $FDA0 GREEN0
$FDA1 GREEN1                            $FDA2 GREEN2
$FDA3 GREEN3                            $FDA4 GREEN4
$FDA5 GREEN5                            $FDA6 GREEN6
$FDA7 GREEN7                            $FDA8 GREEN8
$FDA9 GREEN9                            $FDAA GREENA
$FDAB GREENB                            $FDAC GREENC
$FDAD GREEND                            $FDAE GREENE
$FDAF GREENF                            $FC00 HARDWARE_START
MACRO HBRK                              $FD00 HCOUNT
$0020 HFLIP                             $0007 HIDE_HOWARD_REQUEST
$FC05 HOFFH                             $FC04 HOFFL
$0001 HORIZONTAL_INT                    $0016 HOWARD_ABUS
$0017 HOWARD_BBUS                       $0018 HOWARD_CBUS
$0019 HOWARD_DBUS                       $FCC4 HOWIE
$FC15 HPOSSTRTH                         $FC14 HPOSSTRTL
$0CBB HSFXVarEnd                        $0C1D HSFXVarStart
$0004 HSFX_ACCUMCOUNT                   $00FE HSFX_BIGPRIORITY
$0004 HSFX_CHANNELCOUNT                 $0000 HSFX_FREECHANNEL
$0001 HSFX_LILPRIORITY                  $00FF HSFX_NOCHANNEL
$0008 HSFX_REGCOUNT                     $0002 HSFX_REGSIZE
$FC29 HSIZOFFH                          $FC28 HSIZOFFL
MACRO INITHSFX                          MACRO INITINT
$0831 INITINT.0004                      MACRO INITSYS
$0002 INNER_BUTTON                      $0008 INTEGRATE
$FD80 INTRST                            $FD81 INTSET
$08A8 INTSET_RAM                        $FD8B IODAT
$08A2 IODAT_RAM                         $FD8A IODIR
$08A3 IODIR_RAM                         $FCC3 IOData
$FCC2 IOStatus                          $088F Index
$08DA InitHSFX                          $08CB IntReturn
$FBF0 IntTable                          $0890 InterruptTable
$FCB0 JOYSTICK                          $0080 JOY_DOWN
$0010 JOY_LEFT                          $0020 JOY_RIGHT
$0040 JOY_UP                            $0000 KNOCK_KNOCK
$0BDF KnockKnock                        $0012 LARGE_DATA
$0004 LAST_CLOCK                        $FCC0 LEDS
$0010 LEFT0_SELECT                      $0020 LEFT1_SELECT
$0040 LEFT2_SELECT                      $0080 LEFT3_SELECT
$0008 LEFTHAND                          $0008 LEFTHANDED
$00F0 LEFT_ATTENMASK                    $0080 LITERAL
$8000 LOOP0                             $2000 LOOP1
$0877 LaunchSound                       $0853 Loop
$FFF9 MAPCTL                            $FC55 MATHA
$FC54 MATHB                             $FC53 MATHC
$0020 MATHCARRY                         $FC52 MATHD
$FC63 MATHE                             $FC62 MATHF
$FC61 MATHG                             $FC60 MATHH
$FC6F MATHJ                             $FC6E MATHK
$FC6D MATHL                             $FC6C MATHM
$FC57 MATHN                             $FC56 MATHP
$0040 MATHWARNING                       $0080 MATHWORKING
$FD88 MIKEYHREV                         $FD89 MIKEYSREV
$FD00 MIKEY_BASE                        $0002 MIKEY_SPACE
$0010 MONITOR_BYTECOUNT                 $0001 MONITOR_I
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:39:10 Page   45
                                                        14:39:10  

$F900 MONITOR_RAM_RESERVED              $00F8 MONITOR_ZP_RESERVED
$FD44 MPAN                              $FD50 MSTEREO
$FD9C MTEST0                            $FD9D MTEST1
$FD9E MTEST2                            $4000 NEXT0
$1000 NEXT1                             $0009 NEXTZPG
$0004 NOEXP                             $0005 NONCOLL_SPRITE
$0000 NOP_REQUEST                       $0004 NORMAL_SPRITE
$0020 NO_COLLIDE                        $0000 ONE_PER_PIXEL
$0008 OPTION1_BUTTON                    $0004 OPTION2_BUTTON
$0001 ORIGIN                            $0001 OUTER_BUTTON
$0008 OVERRUN                           $0001 PARBIT
$0010 PAREN                             $0010 PARERR
$0001 PAREVEN                           $0001 PAUSE_SWITCH
$FD93 PBKUP                             $0004 PC_OFFSET
MACRO PLAYHSFX                          $0002 POWERON
$FC2F PROCADRH                          $FC2E PROCADRL
$0006 P_OFFSET                          $FCB2 RCART_0
$FCB3 RCART_1                           $0010 READ_ENABLE
$0010 REGISTER                          $0007 REGISTER_BYTECOUNT
$0010 RELOAD_HV                         $0020 RELOAD_HVS
$0030 RELOAD_HVST                       $0030 RELOAD_MASK
$0000 RELOAD_NONE                       $0008 RESETERR
MACRO RESETHSFX                         $0040 RESET_DONE
MACRO RESET_TIMEOUT                     $0008 RESTART_BUTTON
$0008 RESTLESS                          $0008 REUSE_PALETTE
$0001 RIGHT0_SELECT                     $0002 RIGHT1_SELECT
$0004 RIGHT2_SELECT                     $0008 RIGHT3_SELECT
$000F RIGHT_ATTENMASK                   $001A ROM
$0004 ROM_SPACE                         $0003 RUN_ADDRESS
$0002 RXBRK                             $0040 RXINTEN
$0040 RXRDY                             $08A4 RenderBuffer
$08F1 ResetHSFX                         $FC2D SCBADRH
$FC2C SCBADRL                           $FC11 SCBNEXTH
$FC10 SCBNEXTL                          $FC23 SCVPOSH
$FC22 SCVPOSL                           $FD90 SDONEACK
$0006 SEE_HOWARD_REQUEST                $FD8C SERCTL
$FD8D SERDAT                            $FD10 SERIALRATE
$0010 SERIAL_INT                        MACRO SET_AUDIO_CLOCK
MACRO SET_BRK                           $0007 SHADOW_SPRITE
$0400 SHIFT_ACCUM                       $0004 SHIFT_ALWAYS
$0040 SHIFT_INTERP                      $0080 SIGNMATH
$0004 SKIP_SPRITE                       $0004 SLAVE_REQUEST
$0002 SPARKLE                           $FC82 SPRCOLL
$FC80 SPRCTL0                           $FC81 SPRCTL1
$FC13 SPRDLINEH                         $FC12 SPRDLINEL
$FC21 SPRDOFFH                          $FC20 SPRDOFFL
$FC91 SPRGO                             $FC19 SPRHSIZH
$FC18 SPRHSIZL                          $FC83 SPRINIT
$0002 SPRITESTOP                        $0002 SPRITETOSTOP
$0001 SPRITEWORKING                     $0001 SPRITE_GO
$FC92 SPRSYS                            $08A0 SPRSYS_RAM
$FC1B SPRVSIZH                          $FC1A SPRVSIZL
MACRO START_DISABLE                     $FC1D STRETCHH
$FC1C STRETCHL                          $FC90 SUZYBUSEN
$FC88 SUZYHREV                          $FC89 SUZYSREV
$FC00 SUZY_BASE                         $0001 SUZY_SPACE
$FCB1 SWITCHES                          $FD87 SYSCTL1
$0003 S_OFFSET                          $0885 SafeReturn
$0886 SoundPriorities                   $088C SoundTableHigh
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:39:10 Page   46
                                                        14:39:10  

$0889 SoundTableLow                     $0C09 Sparkle
$0800 Start                             $0905 StartHSFX
$0942 StopHSFX                          $08DA TEMPORG
$0080 THREE_PER_PIXEL                   $FC03 TILTACUMH
$FC02 TILTACUML                         $FC1F TILTH
$FC1E TILTL                             $FD00 TIMER0
$0001 TIMER0_INT                        $FD04 TIMER1
$0002 TIMER1_INT                        $FD08 TIMER2
$0004 TIMER2_INT                        $FD0C TIMER3
$0008 TIMER3_INT                        $FD10 TIMER4
$FD14 TIMER5                            $0020 TIMER5_INT
$FD18 TIMER6                            $0040 TIMER6_INT
$FD1C TIMER7                            $0080 TIMER7_INT
$0008 TIMER_DONE                        $0000 TIM_BACKUP
$0001 TIM_CONTROLA                      $0003 TIM_CONTROLB
$0002 TIM_COUNT                         $FC01 TMPADRH
$FC00 TMPADRL                           $0014 TRACE
$0080 TURBO_DISABLE                     $0040 TWO_PER_PIXEL
$0002 TXBRK                             $0020 TXEMPTY
$0080 TXINTEN                           $0004 TXOPEN
$0080 TXRDY                             $0004 UNSAFEACCESS
$0004 UNSAFEACCESSRST                   $0002 UPLOAD_REQUEST
$0002 UP_CURRENT_PAGE                   $0005 UP_HAHDATA
$0004 UP_MEMWATCH                       $0003 UP_REGISTERS
$0001 UP_THIS_PAGE                      $08AA UserIntHandler
$FD08 VCOUNT                            $0008 VECTOR_SPACE
$0004 VERTICAL_INT                      $0010 VFLIP
$FC0D VIDADRH                           $FC0C VIDADRL
$FC09 VIDBASH                           $FC08 VIDBASL
$FC07 VOFFH                             $FC06 VOFFL
$0100 VOL_ACCUM                         $0010 VOL_INTERP
$FC17 VPOSSTRTH                         $FC16 VPOSSTRTL
$FC27 VSIZACUMH                         $FC26 VSIZACUML
$FC2B VSIZOFFH                          $FC2A VSIZOFFL
$0010 VSTRETCH                          $0010 VSTRETCHING
$0001 WOOP_WOOP_WOOP                    $0BF4 WoopWoopWoop
$0006 XOR_SHADOW_SPRITE                 $0006 XOR_SPRITE
$0001 X_OFFSET                          $0002 Y_OFFSET
$0A37 advance_channels                  $0C1F audio_dropout
$0C1D audio_interruptus                 $0C1E audio_lockout
$0BDB audio_offsets                     $0006 audio_ptr
$08D4 brkInt                            $0B82 calc_next_audio
$0C9B clock_temp                        $0C7B current_frameh
$0C77 current_framel                    $0CA3 data_temp
$0B95 end_freq                          $0B7F end_of_effect
$0C5B feed_interph                      $0C57 feed_interpl
$0C3B feedbackh                         $0C37 feedbackl
$0968 find_lesser_channel               $0C6B flagsh
$0C67 flagsl                            $097F freeChannelX
$0C4B freq_interph                      $0C47 freq_interpl
$0C2B freqh                             $0C27 freql
$08B7 hardInt                           $0CB3 hsfx_baseh
$0CAF hsfx_basel                        $0998 hsfx_driver
$09BE hsfx_driver_grunt                 $0008 hsfx_temp
$0AB6 infinite0                         $0AF4 infinite1
$0CAB integrate                         $08CE jumpIntTable
$0981 killChannelX                      $0CB7 launch_channel
$0A18 launch_channels                   $0A1B launch_next_channel
$0C87 loop_adrh0                        $0C93 loop_adrh1
Epyx HandyAsm 1.12      Symbols                         15-Apr-12514:39:10 Page   47
                                                        14:39:10  

$0C83 loop_adrl0                        $0C8F loop_adrl1
$0C7F loop_count0                       $0C8B loop_count1
$0A87 loop_frame                        $0AC7 next0_done
$0B06 next1_done                        $0C73 next_keyframeh
$0C6F next_keyframel                    $0ADE no_loop0
$0B1D no_loop1                          $0C9F preload_temp
$0C97 shift_flag                        $0C53 shift_interph
$0C4F shift_interpl                     $0CA7 shift_temp
$0C33 shifth                            $0C2F shiftl
$0ADD stuff0                            $0B1C stuff1
$0890 sysIntTable                       $0000 sysptr
$0002 sysptr2                           $0004 sysptr3
$0C20 top_of_loop0                      $0C21 top_of_loop1
$0A7D update_frame                      $0C63 vol_interph
$0C5F vol_interpl                       $0C43 volumeh
$0C3F volumel                           
