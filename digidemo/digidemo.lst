Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page    1
                                                        16:35:31  

    1                   
    2                   *****************************************
    3                   *										*
    4                   * 	DIGIDEMO.SRC						*
    5                   *										*
    6                   *	A demonstration of digitized sample	*
    7                   * 	playback on the Lynx				*
    8                   *										*
    9                   *	Confidential and Proprietary		*
   10                   *	Copyright (C) 1990, Atari Corp.		*
   11                   *										*
   12                   *****************************************
   13                   
   14                   *
   15                   * Programmer : Stephen Jungels
   16                   *
   17                   
   18                   * 12/10		added sample stereo code
   19                   
   20                   * 11/19		added attenuation, variable sample rate, paus
   21                   * 			and restart, and stop sound requests
   22                   
   23                   * 11/12		created
   24                   
   25                   ;DEBUG			.eq 1
   26                   
   27                   * ----------------------------------------------------
   28                   * Standard handy switches and defines
   29                   * 
   30      0001         EOF_USER		.eq 1
   31      0001         GETDIR_USER		.eq 1
   32      0001         GRABAUDIO_USER	.eq 1
   33      0001         FRAMECOUNT_UP	.eq 1
   34                   * ----------------------------------------------------
   35                   * Digitized sound switches and defines
   36                   *
   37      0001         HSFX_ACTIVE		.eq 1	; Tell the sampler to allocate its 
   38      0001         VARIVOLUME		.eq 1	; Include variable volume code
   39      0005         DIGITIMER		.eq	5	; This timer will be used to generate
   40                   * 
   41                   * ----------------------------------------------------
   42                   * Some equates for the example program
   43                   * 
   44      4240         MIL				.eq 1000000
   45      0041         MINRELOAD		.eq 65
   46      00FF         MAXRELOAD		.eq 255
   47                   
   48                   * screen definitions
   49                   
   50      004D         TOPEDGE         .eq 77
   51      0030         LEFTEDGE        .eq 48
   52      00A0         SCREENWIDTH     .eq 160
   53      0066         SCREENHEIGHT    .eq 102
   54      0080         SCREENHCENTER   .eq LEFTEDGE+SCREENWIDTH/2
   55      0080         SCREENVCENTER   .eq TOPEDGE+SCREENHEIGHT/2
   56                   
   57                   * rom font template
   58                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page    2
                                                        16:35:31  

   59      0000         FONTSIZE	.eq 0
   60      0001         FONTOFFSET	.eq 1
   61      0002         FONTCHARLEN	.eq 2
   62      0003         FONTWIDTH	.eq 3
   63      0004         FONTBLANK	.eq 4	; first char of font
   64                   
   65                   
   66                   * ----------------------------------------------------
   67                   								
   68                   
   69                   * HANDY includes and macros
   70                   
   71                   	.in 6502:include/harddefs.i
    1                   ; Wednesday 27-Jun-90 10:45:41
    2                   * === harddefs.i =====================================
    3                   *
    4                   * Hardware Definitions  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 27-Jun-90	SHL		Removed MAGxx alternate names for tim
   12                   *				Added READ_ENABLE definition for IODAT
   13                   * 12-Apr-90	SHL		Added SUZY_BASE and MIKEY_BASE defini
   14                   *				Removed SUZY_ADDRESS definition
   15                   *				Corrected LEFT_ATTENMASK and RIGHT_ATTENMASK
   16                   * 9-Mar-90	SHL		Added new stereo register definitions
   17                   * 7-Mar-90	SHL		Removed MAGRDYx definitions
   18                   *				Commented out MSTEREO until get real info
   19                   * 26-Feb-90	SHL		Corrected some bit definitions
   20                   * 13-Feb-90	SHL		Added a few more missing definitions
   21                   * 9-Feb-90	SHL		Added rest of the hardware definitions
   22                   *				Added CPU interrupt and reset vectors
   23                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   24                   * 25 May 89	-RJ		Deleted LEFT_ and RIGHT_FIRE_BUTTON d
   25                   * 22 May 89	-RJ		Added RESTLESS definition, changed LI
   26                   *				to EXTERNAL_POWER
   27                   * 11 May 89	-RJ		Changed sprite definitions to track t
   28                   *				definitions caused by the Shadow-E chip bug
   29                   * 10 May 89	-RJ		Added INNER_ and OUTER_BUTTON and MST
   30                   *				CART0,1_IO_INACTIVE definitions
   31                   * 20 Apr 89	-RJ		Changed the game button definitions t
   32                   *				the new way to handle Pause, Restart, Flip and
   33                   *				Game Options 1 & 2.  Added bit defs to DISPCTL
   34                   * 19 Apr 89	RG Goudy	Added serial port bit definitions
   35                   * 18 Apr 89	-RJ		The RELOAD_ definition comments say "
   36                   * 19 Mar 89	-RJ		Added TURBO_DISABLE definition to MAP
   37                   * 17 Jan 89	-RJ		Added POWERON and MOTORON of SYSCTL1
   38                   *				Renamed RCART to RCART_0 and added RCART_1
   39                   *				Deleted VIDEO/MIKEYTEST, added MTEST0/1/2
   40                   * 2 Jan 89	-RJ		Added EVER_ON and NO_COLLIDE
   41                   * 31 Dec 88	-RJ		When HANDYMATH is non-zero, the hardw
   42                   *				math registers now aren't defined here either
   43                   *				Added JOYSTICK and SWITCHES flag definitions
   44                   * 30 Dec 88	-RJ		Added sprite type defs.  Renamed REUS
   45                   *				et al to the more accurate RELOAD_NONE et al
   46                   * 24-Dec-88	-RJ		Added sprite control register and aud
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page    3
                        6502:include/harddefs.i         16:35:31  

   47                   *				channel declarations and control bits
   48                   * 22 Dec 88	-RJ		Redefined all addresses, turning them
   49                   *				symbols that Handebug will recognize
   50                   *
   51                   * Mid 87	=RJ Mical=	Created this file!
   52                   *
   53                   * ====================================================
   54                   
   55                   
   56                   * Size of a display buffer
   57      1FE0         DISPLAY_BUFSIZE	.EQ $1FE0
   58                   
   59                   
   60                   * First address of the block of hardware addresses.
   61      FC00         HARDWARE_START	.EQ $FC00
   62                   
   63                   
   64                   
   65                   * SUZY chip functions are mapped into the $FC00 page
   66 0000:             		.OR $FC00
   67 FC00:             SUZY_BASE		; FC00
   68                   
   69                   * SUZY registers from $FC00-$FC7F (both sprite and MAT
   70                   * when the lower byte is stored to.
   71                   
   72                   * Sprite engine registers - *'ed values are used inter
   73                   * cannot be usefully initialized externally.
   74                   
   75 FC00:             TMPADRL		.DS 1	; FC00 *
   76 FC01:             TMPADRH		.DS 1	; FC01 *
   77 FC02:             TILTACUML	.DS 1	; FC02 *
   78 FC03:             TILTACUMH	.DS 1	; FC03 *
   79 FC04:             HOFFL		.DS 1	; FC04
   80 FC05:             HOFFH		.DS 1	; FC05
   81 FC06:             VOFFL		.DS 1	; FC06
   82 FC07:             VOFFH		.DS 1	; FC07
   83 FC08:             VIDBASL		.DS 1	; FC08
   84 FC09:             VIDBASH		.DS 1	; FC09
   85 FC0A:             COLLBASL	.DS 1	; FC0A
   86 FC0B:             COLLBASH	.DS 1	; FC0B
   87 FC0C:             VIDADRL		.DS 1	; FC0C *
   88 FC0D:             VIDADRH		.DS 1	; FC0D *
   89 FC0E:             COLLADRL	.DS 1	; FC0E *
   90 FC0F:             COLLADRH	.DS 1	; FC0F *
   91 FC10:             SCBNEXTL	.DS 1	; FC10
   92 FC11:             SCBNEXTH	.DS 1	; FC11
   93 FC12:             SPRDLINEL	.DS 1	; FC12 *
   94 FC13:             SPRDLINEH	.DS 1	; FC13 *
   95 FC14:             HPOSSTRTL	.DS 1	; FC14 *
   96 FC15:             HPOSSTRTH	.DS 1	; FC15 *
   97 FC16:             VPOSSTRTL	.DS 1	; FC16 *
   98 FC17:             VPOSSTRTH	.DS 1	; FC17 *
   99 FC18:             SPRHSIZL	.DS 1	; FC18
  100 FC19:             SPRHSIZH	.DS 1	; FC19
  101 FC1A:             SPRVSIZL	.DS 1	; FC1A
  102 FC1B:             SPRVSIZH	.DS 1	; FC1B
  103 FC1C:             STRETCHL	.DS 1	; FC1C *
  104 FC1D:             STRETCHH	.DS 1	; FC1D *
  105 FC1E:             TILTL		.DS 1	; FC1E *
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page    4
                        6502:include/harddefs.i         16:35:31  

  106 FC1F:             TILTH		.DS 1	; FC1F *
  107 FC20:             SPRDOFFL	.DS 1	; FC20 *
  108 FC21:             SPRDOFFH	.DS 1	; FC21 *
  109 FC22:             SCVPOSL		.DS 1	; FC22 *
  110 FC23:             SCVPOSH		.DS 1	; FC23 *
  111 FC24:             COLLOFFL	.DS 1	; FC24
  112 FC25:             COLLOFFH	.DS 1	; FC25
  113 FC26:             VSIZACUML	.DS 1	; FC26 *
  114 FC27:             VSIZACUMH	.DS 1	; FC27 *
  115 FC28:             HSIZOFFL	.DS 1	; FC28
  116 FC29:             HSIZOFFH	.DS 1	; FC29
  117 FC2A:             VSIZOFFL	.DS 1	; FC2A
  118 FC2B:             VSIZOFFH	.DS 1	; FC2B
  119 FC2C:             SCBADRL		.DS 1	; FC2C *
  120 FC2D:             SCBADRH		.DS 1	; FC2D *
  121 FC2E:             PROCADRL	.DS 1	; FC2E *
  122 FC2F:             PROCADRH	.DS 1	; FC2F *
  123                   
  124                   
  125                   * Math engine registers
  126                   
  127 FC30:             		.OR $FC52
  128 FC52:             MATHD		.DS 1	; FC52
  129 FC53:             MATHC		.DS 1	; FC53
  130 FC54:             MATHB		.DS 1	; FC54
  131 FC55:             MATHA		.DS 1	; FC55
  132 FC56:             MATHP		.DS 1	; FC56
  133 FC57:             MATHN		.DS 1	; FC57
  134 FC58:             		.OR $FC60
  135 FC60:             MATHH		.DS 1	; FC60
  136 FC61:             MATHG		.DS 1	; FC61
  137 FC62:             MATHF		.DS 1	; FC62
  138 FC63:             MATHE		.DS 1	; FC63
  139 FC64:             		.OR $FC6C
  140 FC6C:             MATHM		.DS 1	; FC6C
  141 FC6D:             MATHL		.DS 1	; FC6D
  142 FC6E:             MATHK		.DS 1	; FC6E
  143 FC6F:             MATHJ		.DS 1	; FC6F
  144                   
  145                   
  146                   * More SUZY control registers
  147                   
  148 FC70:             		.OR $FC80
  149 FC80:             SPRCTL0		.DS 1	; FC80
  150                   * Sprite control 0 bit definitions
  151      00C0         BITS_MASK	.EQ %11000000	; Mask for settings bits per p
  152                   * Sprite bits-per-pixel definitions
  153      0000         ONE_PER_PIXEL	.EQ %00000000
  154      0040         TWO_PER_PIXEL	.EQ %01000000
  155      0080         THREE_PER_PIXEL	.EQ %10000000
  156      00C0         FOUR_PER_PIXEL	.EQ %11000000
  157                   * More sprite control 0 bit definitions
  158      0020         HFLIP		.EQ %00100000
  159      0010         VFLIP		.EQ %00010000
  160                   * Sprite types - redefined to reflect the reality caus
  161                   ; NORMAL_SPRITE		.EQ %00000111
  162      0007         SHADOW_SPRITE		.EQ %00000111
  163                   
  164      0006         XOR_SPRITE		.EQ %00000110
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page    5
                        6502:include/harddefs.i         16:35:31  

  165      0006         XOR_SHADOW_SPRITE	.EQ %00000110
  166                   
  167      0005         NONCOLL_SPRITE		.EQ %00000101
  168                   
  169                   ; SHADOW_SPRITE		.EQ %00000100
  170      0004         NORMAL_SPRITE		.EQ %00000100
  171                   
  172                   ; BSHADOW_SPRITE	.EQ %00000011
  173      0003         BOUNDARY_SPRITE		.EQ %00000011
  174                   
  175                   ; BOUNDARY_SPRITE	.EQ %00000010
  176      0002         BSHADOW_SPRITE		.EQ %00000010
  177                   
  178      0001         BACKNONCOLL_SPRITE	.EQ %00000001
  179                   
  180      0000         BACKGROUND_SPRITE	.EQ %00000000
  181      0000         BACK_SHADOW_SPRITE	.EQ %00000000
  182                   
  183                   
  184 FC81:             SPRCTL1		.DS 1	; FC81
  185                   * Sprite control 1 bit definitions
  186      0080         LITERAL		.EQ %10000000
  187      0040         ALGO_3		.EQ %01000000	; broken, do not set this bit!
  188      0030         RELOAD_MASK	.EQ %00110000
  189                   * Sprite reload mask definitions
  190      0000         RELOAD_NONE	.EQ %00000000	; Reload nothing
  191      0010         RELOAD_HV	.EQ %00010000	; Reload hsize, vsize
  192      0020         RELOAD_HVS	.EQ %00100000	; Reload hsize, vsize, stretc
  193      0030         RELOAD_HVST	.EQ %00110000	; Reload hsize, vsize, stret
  194                   * More sprite control 1 bit definitions
  195      0008         REUSE_PALETTE	.EQ %00001000
  196      0004         SKIP_SPRITE	.EQ %00000100
  197      0002         DRAW_UP		.EQ %00000010
  198      0001         DRAW_LEFT	.EQ %00000001
  199                   
  200                   
  201 FC82:             SPRCOLL		.DS 1	; FC82
  202                   * SPRCOLL bit definitions
  203      0020         NO_COLLIDE	.EQ %00100000
  204                   
  205 FC83:             SPRINIT		.DS 1	; FC83
  206                   
  207 FC84:             		.OR $FC88
  208 FC88:             SUZYHREV	.DS 1	; FC88
  209 FC89:             SUZYSREV	.DS 1	; FC89
  210                   
  211 FC8A:             		.OR $FC90
  212 FC90:             SUZYBUSEN	.DS 1	; FC90
  213                   
  214 FC91:             SPRGO		.DS 1	; FC91
  215                   * These are the SPRGO flag definitions
  216      0004         EVER_ON		.EQ %00000100
  217      0001         SPRITE_GO	.EQ %00000001
  218                   
  219 FC92:             SPRSYS		.DS 1	; FC92
  220                   * These are the SPRSYS flag definitions when writing
  221      0080         SIGNMATH	.EQ %10000000
  222      0040         ACCUMULATE	.EQ %01000000
  223                   ;NO_COLLIDE	.EQ %00100000	; same as for SPRCOLL
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page    6
                        6502:include/harddefs.i         16:35:31  

  224      0010         VSTRETCH	.EQ %00010000
  225      0008         LEFTHAND	.EQ %00001000
  226      0004         UNSAFEACCESSRST	.EQ %00000100
  227      0002         SPRITESTOP	.EQ %00000010
  228                   * These are the SPRSYS flag definitions when reading
  229      0080         MATHWORKING	.EQ %10000000
  230      0040         MATHWARNING	.EQ %01000000
  231      0020         MATHCARRY	.EQ %00100000
  232      0010         VSTRETCHING	.EQ %00010000
  233      0008         LEFTHANDED	.EQ %00001000
  234      0004         UNSAFEACCESS	.EQ %00000100
  235      0002         SPRITETOSTOP	.EQ %00000010
  236      0001         SPRITEWORKING	.EQ %00000001
  237                   
  238 FC93:             		.OR $FCB0
  239 FCB0:             JOYSTICK	.DS 1	; FCB0
  240      0080         JOY_DOWN	.EQ %10000000
  241      0040         JOY_UP		.EQ %01000000
  242      0020         JOY_RIGHT	.EQ %00100000
  243      0010         JOY_LEFT	.EQ %00010000
  244      0008         OPTION1_BUTTON	.EQ %00001000
  245      0004         OPTION2_BUTTON	.EQ %00000100
  246      0002         INNER_BUTTON	.EQ %00000010
  247      0001         OUTER_BUTTON	.EQ %00000001
  248      0001         A_BUTTON	.EQ OUTER_BUTTON
  249      0002         B_BUTTON	.EQ INNER_BUTTON
  250      0008         RESTART_BUTTON	.EQ OPTION1_BUTTON
  251      0004         FLIP_BUTTON	.EQ OPTION2_BUTTON
  252                   
  253 FCB1:             SWITCHES	.DS 1	; FCB1
  254      0004         CART1_IO_INACTIVE .EQ %00000100
  255      0002         CART0_IO_INACTIVE .EQ %00000010
  256      0001         PAUSE_SWITCH	.EQ %00000001
  257                   
  258 FCB2:             RCART_0		.DS 1	; FCB2
  259 FCB3:             RCART_1		.DS 1	; FCB3
  260                   
  261                   
  262                   * LEDS output register only exists on early wire-wrap 
  263 FCB4:             		.OR $FCC0
  264 FCC0:             LEDS		.DS 1	; FCC0
  265                   
  266                   
  267                   * The parallel IO port only exists on early wire-wrap 
  268 FCC1:             		.OR $FCC2
  269 FCC2:             IOStatus	.DS 1	; FCC2
  270 FCC3:             IOData		.DS 1	; FCC3
  271                   
  272 FCC4:             HOWIE		.DS 1	; FCC4
  273                   
  274                   
  275                   
  276                   
  277                   * MIKEY chip functions are mapped into the $FD00 page
  278                   
  279 FCC5:             		.OR $FD00
  280 FD00:             MIKEY_BASE	; FD00
  281                   
  282                   * The Mikey Timers
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page    7
                        6502:include/harddefs.i         16:35:31  

  283                   * First the logical timer names are defined, then the 
  284 FD00:             HCOUNT		; FD00
  285 FD00:             TIMER0		; FD00
  286 FD00:             	.DS 4
  287 FD04:             TIMER1		; FD04
  288 FD04:             	.DS 4
  289 FD08:             VCOUNT		; FD08
  290 FD08:             TIMER2		; FD08
  291 FD08:             	.DS 4
  292 FD0C:             TIMER3		; FD0C
  293 FD0C:             	.DS 4
  294 FD10:             SERIALRATE	; FD10
  295 FD10:             TIMER4		; FD10
  296 FD10:             	.DS 4
  297 FD14:             TIMER5		; FD14
  298 FD14:             	.DS 4
  299 FD18:             TIMER6		; FD18
  300 FD18:             	.DS 4
  301 FD1C:             TIMER7		; FD1C
  302 FD1C:             	.DS 4
  303                   
  304                   * Here's the timer offsets
  305      0000         TIM_BACKUP	.EQ 0
  306      0001         TIM_CONTROLA	.EQ 1
  307      0002         TIM_COUNT	.EQ 2
  308      0003         TIM_CONTROLB	.EQ 3
  309                   
  310                   * TIM_CONTROLA control bits
  311      0080         ENABLE_INT	.EQ %10000000
  312      0040         RESET_DONE	.EQ %01000000
  313      0010         ENABLE_RELOAD	.EQ %00010000
  314      0008         ENABLE_COUNT	.EQ %00001000
  315      0007         AUD_CLOCK_MASK	.EQ %00000111
  316                   * Clock settings
  317      0007         AUD_LINKING	.EQ %00000111
  318      0006         AUD_64		.EQ %00000110
  319      0005         AUD_32		.EQ %00000101
  320      0004         AUD_16		.EQ %00000100
  321      0003         AUD_8		.EQ %00000011
  322      0002         AUD_4		.EQ %00000010
  323      0001         AUD_2		.EQ %00000001
  324      0000         AUD_1		.EQ %00000000
  325                   
  326                   * TIM_CONTROLB control bits
  327      0008         TIMER_DONE	.EQ %00001000
  328      0004         LAST_CLOCK	.EQ %00000100
  329      0002         BORROW_IN	.EQ %00000010
  330      0001         BORROW_OUT	.EQ %00000001
  331                   
  332                   
  333 FD20:             AUDIO0		.DS 8	; FD20
  334 FD28:             AUDIO1		.DS 8	; FD28
  335 FD30:             AUDIO2		.DS 8	; FD30
  336 FD38:             AUDIO3		.DS 8	; FD38
  337                   * Here's the audio channel offsets
  338      0000         AUD_VOLCNTRL	.EQ 0
  339      0001         AUD_FEEDBACK	.EQ 1
  340      0002         AUD_OUTPUT	.EQ 2
  341      0003         AUD_SHIFT	.EQ 3
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page    8
                        6502:include/harddefs.i         16:35:31  

  342      0004         AUD_BACKUP	.EQ 4
  343      0005         AUD_CONTROL	.EQ 5
  344      0006         AUD_COUNTER	.EQ 6
  345      0007         AUD_OTHER	.EQ 7
  346                   * The AUD_CONTROL bits are almost identical to the TIM
  347                   * Here's the AUD_CONTROL control bits that are differe
  348                   * control bits.
  349                   * See TIM_CONTROLA above for the other definitions
  350      0080         FEEDBACK_7		.EQ %10000000
  351      0020         ENABLE_INTEGRATE	.EQ %00100000
  352                   
  353                   
  354                   ; Stereo control registers follow
  355                   ; Stereo capability does not exist in all Lynxes
  356                   ; Left and right may be reversed, and if so will be co
  357                   ; release
  358                   
  359 FD40:             		.OR $FD40
  360 FD40:             ATTENREG0	.DS 1	; FD40	; Stereo attenuation registers
  361 FD41:             ATTENREG1	.DS 1	; FD41
  362 FD42:             ATTENREG2	.DS 1	; FD42
  363 FD43:             ATTENREG3	.DS 1	; FD43
  364      00F0         LEFT_ATTENMASK	.EQ %11110000
  365      000F         RIGHT_ATTENMASK	.EQ %00001111
  366                   
  367 FD44:             MPAN		.DS 1	; FD44	; Stereo attenuation select registe
  368                   
  369 FD45:             		.OR $FD50
  370 FD50:             MSTEREO		.DS 1	; FD50	; Stereo channel disable registe
  371                   
  372                   ; bit definitions for MPAN and MSTEREO registers
  373      0080         LEFT3_SELECT	.EQ %10000000
  374      0040         LEFT2_SELECT	.EQ %01000000
  375      0020         LEFT1_SELECT	.EQ %00100000
  376      0010         LEFT0_SELECT	.EQ %00010000
  377      0008         RIGHT3_SELECT	.EQ %00001000
  378      0004         RIGHT2_SELECT	.EQ %00000100
  379      0002         RIGHT1_SELECT	.EQ %00000010
  380      0001         RIGHT0_SELECT	.EQ %00000001
  381                   
  382                   
  383 FD51:             		.OR $FD80
  384 FD80:             INTRST		.DS 1	; FD80	; Interrupt Reset and Set registe
  385 FD81:             INTSET		.DS 1	; FD81
  386                   
  387                   * Interrupt Reset and Set bit definitions
  388      0080         TIMER7_INT	.EQ %10000000
  389      0040         TIMER6_INT	.EQ %01000000
  390      0020         TIMER5_INT	.EQ %00100000
  391      0010         SERIAL_INT	.EQ %00010000
  392      0008         TIMER3_INT	.EQ %00001000
  393      0004         TIMER2_INT	.EQ %00000100
  394      0002         TIMER1_INT	.EQ %00000010
  395      0001         TIMER0_INT	.EQ %00000001
  396      0004         VERTICAL_INT	.EQ TIMER2_INT
  397      0001         HORIZONTAL_INT	.EQ TIMER0_INT
  398                   
  399 FD82:             		.OR $FD86
  400 FD86:             AUDIN		.DS 1	; FD86	; Audio in -or- cartridge r/w line
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page    9
                        6502:include/harddefs.i         16:35:31  

  401 FD87:             SYSCTL1		.DS 1	; FD87
  402                   * SYSCTL1 bit definitions
  403      0002         POWERON		.EQ %00000010
  404      0001         CART_ADDR_STROBE .EQ %00000001
  405                   
  406 FD88:             MIKEYHREV	.DS 1	; FD88	; Mikey hardware rev
  407 FD89:             MIKEYSREV	.DS 1	; FD89	; Mikey software rev
  408 FD8A:             IODIR		.DS 1	; FD8A
  409 FD8B:             IODAT		.DS 1	; FD8B
  410                   * Here's the IODIR and IODAT bit definitions
  411      0010         AUDIN_BIT	.EQ %00010000	; note that there is also the 
  412      0010         READ_ENABLE	.EQ %00010000	; same bit for AUDIN_BIT
  413      0008         RESTLESS	.EQ %00001000
  414      0004         NOEXP		.EQ %00000100	; If set, redeye is not connected
  415      0002         CART_ADDR_DATA	.EQ %00000010
  416      0002         CART_POWER_OFF	.EQ %00000010	; same bit for CART_ADDR_
  417      0001         EXTERNAL_POWER	.EQ %00000001
  418                   
  419 FD8C:             SERCTL		.DS 1	; FD8C	; Serial control
  420                   * Here's the SERCTL bit definitions when writing
  421      0080         TXINTEN		.EQ %10000000
  422      0040         RXINTEN		.EQ %01000000
  423                   ;unused		.EQ %00100000	; Leave unused bit 0 for future
  424      0010         PAREN		.EQ %00010000
  425      0008         RESETERR	.EQ %00001000
  426      0004         TXOPEN		.EQ %00000100
  427      0002         TXBRK		.EQ %00000010
  428      0001         PAREVEN		.EQ %00000001
  429                   * Here's the SERCTL bit definitions when reading
  430      0080         TXRDY		.EQ %10000000
  431      0040         RXRDY		.EQ %01000000
  432      0020         TXEMPTY		.EQ %00100000
  433      0010         PARERR		.EQ %00010000
  434      0008         OVERRUN		.EQ %00001000
  435      0004         FRAMERR		.EQ %00000100
  436      0002         RXBRK		.EQ %00000010
  437      0001         PARBIT		.EQ %00000001
  438                   
  439 FD8D:             SERDAT		.DS 1	; FD8D	; Serial data
  440                   
  441                   
  442                   
  443 FD8E:             		.OR $FD90
  444 FD90:             SDONEACK	.DS 1	; FD90	; Suzy done ack
  445 FD91:             CPUSLEEP	.DS 1	; FD91	; zzz
  446 FD92:             DISPCTL		.DS 1	; FD92	; Display control
  447                   * Here are the DISPCTL bit definitions
  448      0008         DISP_COLOR	.EQ %00001000	; must be set to 1
  449      0004         DISP_FOURBIT	.EQ %00000100	; must be set to 1
  450      0002         DISP_FLIP	.EQ %00000010
  451      0001         DMA_ENABLE	.EQ %00000001	; must be set to 1
  452                   
  453 FD93:             PBKUP		.DS 1	; FD93	; Display's magic 'P' count
  454 FD94:             DISPADRL	.DS 1	; FD94	; Start of display
  455 FD95:             DISPADRH	.DS 1	; FD95
  456                   
  457 FD96:             		.OR $FD9C
  458 FD9C:             MTEST0		.DS 1	; FD9C	; System test vectors, see spec f
  459 FD9D:             MTEST1		.DS 1	; FD9D
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   10
                        6502:include/harddefs.i         16:35:31  

  460 FD9E:             MTEST2		.DS 1	; FD9E
  461                   
  462                   * The Color registers
  463 FD9F:             		.OR $FDA0
  464 FDA0:             GREEN0		.DS 1	; FDA0
  465 FDA1:             GREEN1		.DS 1	; FDA1
  466 FDA2:             GREEN2		.DS 1	; FDA2
  467 FDA3:             GREEN3		.DS 1	; FDA3
  468 FDA4:             GREEN4		.DS 1	; FDA4
  469 FDA5:             GREEN5		.DS 1	; FDA5
  470 FDA6:             GREEN6		.DS 1	; FDA6
  471 FDA7:             GREEN7		.DS 1	; FDA7
  472 FDA8:             GREEN8		.DS 1	; FDA8
  473 FDA9:             GREEN9		.DS 1	; FDA9
  474 FDAA:             GREENA		.DS 1	; FDAA
  475 FDAB:             GREENB		.DS 1	; FDAB
  476 FDAC:             GREENC		.DS 1	; FDAC
  477 FDAD:             GREEND		.DS 1	; FDAD
  478 FDAE:             GREENE		.DS 1	; FDAE
  479 FDAF:             GREENF		.DS 1	; FDAF
  480                   
  481 FDB0:             BLUERED0	.DS 1	; FDB0
  482 FDB1:             BLUERED1	.DS 1	; FDB1
  483 FDB2:             BLUERED2	.DS 1	; FDB2
  484 FDB3:             BLUERED3	.DS 1	; FDB3
  485 FDB4:             BLUERED4	.DS 1	; FDB4
  486 FDB5:             BLUERED5	.DS 1	; FDB5
  487 FDB6:             BLUERED6	.DS 1	; FDB6
  488 FDB7:             BLUERED7	.DS 1	; FDB7
  489 FDB8:             BLUERED8	.DS 1	; FDB8
  490 FDB9:             BLUERED9	.DS 1	; FDB9
  491 FDBA:             BLUEREDA	.DS 1	; FDBA
  492 FDBB:             BLUEREDB	.DS 1	; FDBB
  493 FDBC:             BLUEREDC	.DS 1	; FDBC
  494 FDBD:             BLUEREDD	.DS 1	; FDBD
  495 FDBE:             BLUEREDE	.DS 1	; FDBE
  496 FDBF:             BLUEREDF	.DS 1	; FDBF
  497                   
  498                   
  499                   * The Map Control register
  500 FDC0:             		.OR $FFF9
  501 FFF9:             MAPCTL		.DS 1	; FFF9
  502                   * These are the MAPCTL flag definitions
  503      0080         TURBO_DISABLE	.EQ %10000000
  504      0008         VECTOR_SPACE	.EQ %00001000	; 1 maps RAM into specified
  505      0004         ROM_SPACE	.EQ %00000100
  506      0002         MIKEY_SPACE	.EQ %00000010
  507      0001         SUZY_SPACE	.EQ %00000001
  508                   
  509                   * 65C02 hardware interrupt and reset vectors
  510 FFFA:             CPU_NMI		.DS 2	; FFFA
  511 FFFC:             CPU_RESET	.DS 2	; FFFC
  512 FFFE:             CPU_IRQ			; FFFE
  513                   
  514                   
  515                   
   72                   	.in 6502:include/sprite.i
    1                   * Here are the sprite control block offsets
    2                   * The final offset, SCB_SIZEOF, contains the byte-size
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   11
                        6502:include/sprite.i           16:35:31  

    3                   * Note that the palette will move up if any of HSIZE, 
    4                   * are not used
    5      0000         SCB_CTRL0	.EQ 0
    6      0001         SCB_CTRL1	.EQ {SCB_CTRL0+1}
    7      0002         SCB_CTRL2	.EQ {SCB_CTRL1+1}
    8      0003         SCB_NEXT	.EQ {SCB_CTRL2+1}
    9      0005         SCB_DATA	.EQ {SCB_NEXT+2}
   10      0007         SCB_HPOS	.EQ {SCB_DATA+2}
   11      0009         SCB_VPOS	.EQ {SCB_HPOS+2}
   12      000B         SCB_HSIZE	.EQ {SCB_VPOS+2}
   13      000D         SCB_VSIZE	.EQ {SCB_HSIZE+2}
   14      000F         SCB_STRETCH	.EQ {SCB_VSIZE+2}
   15      0011         SCB_TILT	.EQ {SCB_STRETCH+2}
   16      0013         SCB_PALETTE	.EQ {SCB_TILT+2}
   17                   
   18      001B         SCB_SIZEOF	.EQ {SCB_PALETTE+8}
   19                   
   20                   
   21                   
   73                   	.in 6502:include/hsfx.i
    1                   
    2                   * === hsfx.i =========================================
    3                   * 
    4                   * Handy Sound Effects Driver Definitions  --  Handy So
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date       Name              Description
   10                   * ---------  ----------------  -----------------------
   11                   * 11 May 89  -RJ               Made AUDIO_TIMER defini
   12                   *                              Added AUDIO_CLOCK and A
   13                   * 22 Mar 89  -RJ               Added FREECHANNEL and N
   14                   * 21 Mar 89  -RJ               Commented out CES_SLOWC
   15                   * 4 Jan 88   =RJ Mical=        Added AUDIO_TIMER defin
   16                   * Late 88    RG Goudy          Created this file!
   17                   * 
   18                   * ====================================================
   19                   
   20                   
   21                   * This defines the total number of accumulators and in
   22                   
   23      TRUE         	#IFNDEF	HSFX_CHANNELCOUNT
   24      0004         HSFX_CHANNELCOUNT	.=	4	; number of HSFX channels
   25                   	#ENDIF				; you may redefine from 1 to 4
   26                   
   27      0002         HSFX_REGSIZE		.EQU	2	; bytes per accumulator or interp
   28                   					; (must be 2 for this code)
   29      0004         HSFX_ACCUMCOUNT		.EQU	4	; number of accumulators
   30                   					;
   31      0008         HSFX_REGCOUNT		.EQU	2*HSFX_ACCUMCOUNT ; total number o
   32                   
   33                   
   34                   
   35                   
   36      TRUE          #IFNDEF AUDIO_TIMER
   37      0006         AUDIO_TIMER		.=	6
   38                    #ENDIF
   39      TRUE          #IFNDEF AUDIO_CLOCK_MASK
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   12
                        6502:include/hsfx.i             16:35:31  

   40      0006         AUDIO_CLOCK_MASK	.=	6		; 64uS clock
   41                    #ENDIF
   42      TRUE          #IFNDEF AUDIO_PRELOAD
   43      0040         AUDIO_PRELOAD		.=	64
   44                    #ENDIF
   45                   
   46                   
   47      0000         HSFX_FREECHANNEL	.EQU	0	; This channel is free and ava
   48      0001         HSFX_LILPRIORITY	.EQU	$01	; Minimum allowable priority
   49      00FE         HSFX_BIGPRIORITY	.EQU	$FE	; Maximum allowable priority
   50      00FF         HSFX_NOCHANNEL		.EQU	$FF	; Channel not available to HS
   51                   
   52                   
   53                   * HSFX keyframe entry flags
   54      8000         LOOP0			.EQU $8000	; one 'loop start' flag
   55      4000         NEXT0			.EQU $4000	; one 'loop end' flag
   56      2000         LOOP1			.EQU $2000	; another 'loop start' flag
   57      1000         NEXT1			.EQU $1000	; another 'loop end' flag
   58      0800         FREQ_ACCUM		.EQU $0800	; frequency accumulator
   59      0400         SHIFT_ACCUM		.EQU $0400	; shifter absolute store
   60      0200         FBACK_ACCUM		.EQU $0200	; feedback accumulator
   61      0100         VOL_ACCUM		.EQU $0100	; volume accumulator
   62      0080         FREQ_INTERP		.EQU $80	; frequency interpolation
   63      0040         SHIFT_INTERP		.EQU $40	; shifter interpolation
   64      0020         FBACK_INTERP		.EQU $20	; feedback interpolation
   65      0010         VOL_INTERP		.EQU $10	; volume interpolation
   66      0008         INTEGRATE		.EQU $08	; integration - 1=on, 0=off
   67      0004         SHIFT_ALWAYS		.EQU $04	; store shifter every frame
   68                   ; 			.EQU $02	; ignored
   69      0001         END_OF_EFFECT		.EQU $01	; end of effect (last bit test
   70                   
   71                   
   72                   
   74                   	.in 6502:include/hprint.i
    1                   
    2                   * === hprint.i =======================================
    3                   * 
    4                   * HandyPrint Include File  --  Handy Software
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date       Name              Description
   10                   * ---------  ----------------  -----------------------
   11                   * 8 Feb 89   =RJ Mical=        Created this file!
   12                   * 
   13                   * ====================================================
   14                   
   15                   
   16                   
   17                   * These are the different font types you can request
   18      0001         HPR_DIGIT	.EQU $01
   19      0002         HPR_UPPER	.EQU $02
   20      0004         HPR_LOWER	.EQU $04
   21      0008         HPR_PUNC	.EQU $08
   22      0010         HPR_OTHER	.EQU $10
   23                   
   24                   
   25                   * These are some common font types
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   13
                        6502:include/hprint.i           16:35:31  

   26      0006         HPR_ALPHA	.EQU HPR_UPPER+HPR_LOWER
   27      000B         HPR_BASIC	.EQU HPR_DIGIT+HPR_UPPER+HPR_PUNC
   28      001F         HPR_ALL		.EQU HPR_DIGIT+HPR_UPPER+HPR_LOWER+HPR_PUNC+H
   29                   
   30                   	.END
   75                   
   76                   	.in 6502:macros/zpage.mac
    1                   ; ----------------------------------------------------
    2                   ; Zero-Page memory allocation macros
    3                   ;  Created:  Mike Ireton, 10/07/88
    4                   ; Modified:  RJ Mical, 14 Nov 88
    5                   ; 
    6                   ; BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPAGE) 
    7                   ; and END_ZPAGE (or END_ALLOCATE_ZEROPAGE) are two ver
    8                   ; for safely allocating zero-page memory space in any 
    9                   ; If you use these macros around every z-page memory a
   10                   ; the macros will track your allocations and dole out 
   11                   ; memory locations every time you ask for them.  This 
   12                   ; emulator to make z-page allocations without stepping
   13                   ; allows you to make z-page allocations locally in the
   14                   ; rather than making all your allocations in one file 
   15                   ; down all free zero page locations and figuring out w
   16                   ; 
   17                   ; -- TO USE ---
   18                   ; This file defines a redefinable value named NEXTZPG,
   19                   ; to 0.  NEXTZPG holds the address of the next availab
   20                   ; which in most cases will be at memory location $00. 
   21                   ; zero-page memory locations starting from $00, you ca
   22                   ; a value of your own choice after you've included thi
   23                   ; used any of this file's macros.  For example, say th
   24                   ; to stash away memory locations $00 through $0F.  At 
   25                   ; before calling BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPA
   26                   ;                .IN    6502:macros/zpage.mac
   27                   ;   NEXTZPG     .=     $10
   28                   ; 
   29                   ; Then, when the need arises for zero page variables, 
   30                   ; BEGIN_ZPAGE (or BEGIN_ALLOCATE_ZEROPAGE).  This will
   31                   ; labels and re-assign the assembler's location counte
   32                   ; zero-page (as pointed to by the current NEXTZPG).  A
   33                   ; end with END_ZPAGE (or END_ALLOCATE_ZEROPAGE), which
   34                   ; z-page offset and restore the program counter.  For 
   35                   ;   RoutineX                        RoutineX
   36                   ;           BEGIN_ZPAGE                     BEGIN_ALLO
   37                   ;   ZPG1    .DS    2      - or -    ZPG1    .DS    2
   38                   ;   COUNT   .DS    1                COUNT   .DS    1
   39                   ;           END_ZPAGE                       END_ALLOCA
   40                   ;           STA    ZPG1                     STA    ZPG
   41                   ; 
   42                   ; Remember that you should only define data areas betw
   43                   ; Anything else is dangerous and should be avoided (an
   44                   ; you should find another line of work... :-)  )
   45                   ; 
   46                   ; Also, note that these macros use another redefinable
   47                   ; record and restore the program counter 
   48                   
   49      0000         NEXTZPG	.= $00
   50                   
   51                   	#MACRO BEGIN_ZPAGE
   52 MACRO             TEMPORG	  .= *
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   14
                        6502:macros/zpage.mac           16:35:31  

   53 MACRO             	  .ORG NEXTZPG
   54                   	#ENDM
   55                   
   56                   	#MACRO BEGIN_ALLOCATE_ZEROPAGE
   57 MACRO             	  BEGIN_ZPAGE
   58                   	#ENDM
   59                   
   60                   
   61                   	#MACRO END_ZPAGE
   62 MACRO             NEXTZPG	  .= *
   63 MACRO             	  #IF NEXTZPG > $0100
   64 MACRO             	    .ECHO "ERROR:  z-page allocations went out of pag
   65 MACRO             	  #ENDIF
   66 MACRO             	  .ORG TEMPORG
   67                   	#ENDM
   68                   
   69                   	#MACRO END_ALLOCATE_ZEROPAGE
   70 MACRO             	  END_ZPAGE
   71                   	#ENDM
   72                   
   73                   
   74                   
   77                   	.in 6502:src/syszpage.src
    1                   
    2                   * === syszpage.src ===================================
    3                   *
    4                   * System Zero-Page Data Allocations  --  the 6502 Side
    5                   *
    6                   * Copyright (C) 1988, Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   *
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   13                   * 19 Apr 89	-RJ		Added description of rule for using s
   14                   * 22 Mar 89	-RJ		Removed the audio variables from this
   15                   * 20 Mar 89	RG Goudy	Added several new zpage pointers
   16                   * 26 Jan 89	-RJ		Got rid of Interruptus
   17                   * 26-Dec-88	=RJ Mical=	Created this file from sysdata.
   18                   *
   19                   * ====================================================
   20                   
   21                   
   22                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   23                   *
   24                   * This file should be included before any source code 
   25                   *
   26                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   27                   
   28                   
   29                   
   30                   * System programmers note:  the sysptrs are defined as
   31                   * pointers.  These can't be used during interrupt code
   32                   * no promises regarding the usage of these for anythin
   33                   * while using one of these is a dangerous thing to do
   34                   		BEGIN_ZPAGE
    1      FFFE       + TEMPORG	  .= *
    2 FFFE:           + 	  .ORG NEXTZPG
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   15
                        6502:src/syszpage.src           16:35:31  

    3                 + 
   35 0000:             sysptr		.DS 2
   36 0002:             sysptr2		.DS 2
   37 0004:             sysptr3		.DS 2
   38                   		END_ZPAGE
    1      0006       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 0006:           + 	  .ORG TEMPORG
    6                 + 
   39                   
   40                   
   41                   
   78                   	.in 6502:macros/sys.mac
    1                   ; Wednesday 27-Jun-90 11:49:43
    2                   * == sys.mac =========================================
    3                   *
    4                   * System Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 20-Jun-90	SHL		RAMCART_USER support added
   12                   * 28-Mar-90	SHL		INITINT new clears and resets serial 
   13                   *				if SERIALPORT_USER defined
   14                   * 22-Mar-90	SHL		INITINT now vectors all IRQS to IntRe
   15                   *				instead of user supplied RTS
   16                   * 20-Mar-90	SHL		Removed SEI, CLI from INITINT macro
   17                   * 7-Mar-90	SHL		DISPCTL_RAM now initialized in INITSYS
   18                   * 9-Feb-90	SHL		Modified BRK_USER support to force bre
   19                   *				Howard board, unless user uses the SET_BRK
   20                   *				macro to redirect breaks
   21                   *				INITINT is now required before any use of
   22                   *				INITEOF, INITEOL or SET_DISPLAY... macros
   23                   *				Added HBRK macro
   24                   *				Moved initialization of MAPCTL to INITSYS
   25                   *				Removed HFIX1 macros
   26                   * 31 May 89	-RJ		Added BRK_USER support to INITINT mac
   27                   *				Killed call to InitSys
   28                   *				Added SET_BRK macro
   29                   * 25 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   30                   * 22 May 89	-RJ		Changed init'ing of IODIR's LIGHT_OFF
   31                   *				RESTLESS, also now init IODAT too
   32                   * 16 May 89	-RJ		Added setting TXOPEN to SERCTL in INI
   33                   * 11 May 89	-RJ		Moved declaration of sysIntTable to s
   34                   * 10 May 89	-RJ		Changed CART_STROBE to CART_ADDR_DATA
   35                   * 1 May 89	-RJ		Added the INITINTS macro for user-cont
   36                   *				interrupt table handling.  Also defined
   37                   *				and allow redefinition of sysIntTable, which
   38                   *				is now used in the display.src file
   39                   * 20 Apr 89	-RJ		Added initialization of IODIR and IOD
   40                   * 6 Apr 89	-RJ		Moved init of SPRSYS into INITSYS
   41                   * 19 Mar 89	-RJ		Added HFIX1 macros, modified INITSYS 
   42                   * 18 Mar 89	=RJ Mical=	Created this file!
   43                   *
   44                   * ====================================================
   45                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   16
                        6502:macros/sys.mac             16:35:31  

   46                   
   47                   * HBRK macro forces a break on a Howard board.  On a c
   48                   * executed as one-byte one-cycle NOP.
   49                   	#MACRO HBRK
   50 MACRO             	.HS 13
   51                   	#ENDM
   52                   
   53                   
   54                   * Do some needed hardware initialization to get system
   55                   	#MACRO INITSYS
   56 MACRO             
   57 MACRO             	LDA #DISP_COLOR+DISP_FOURBIT+DMA_ENABLE
   58 MACRO             	STA DISPCTL_RAM
   59 MACRO             
   60 MACRO             	LDA #LEFTHAND		; the equates have been defined to pre
   61 MACRO             	STA SPRSYS_RAM
   62 MACRO             	STA SPRSYS
   63 MACRO             
   64 MACRO             	LDA #VECTOR_SPACE	; map in all RAM except for CPU vec
   65 MACRO             	STA MAPCTL
   66 MACRO             
   67 MACRO             	;------	Set parallel CART_ADDR_DATA and RESTLESS as o
   68 MACRO             	;------ If RAMCART_USER, set AUDIN (READ_ENABLE) as o
   69 MACRO             	;------	all others as input
   70 MACRO              #IFDEF RAMCART_USER
   71 MACRO             	LDA #CART_ADDR_DATA+RESTLESS+READ_ENABLE
   72 MACRO              #ELSE
   73 MACRO             	LDA #CART_ADDR_DATA+RESTLESS
   74 MACRO              #ENDIF
   75 MACRO             	STA IODAT_RAM
   76 MACRO             	STA IODAT
   77 MACRO             	STA IODIR_RAM
   78 MACRO             	STA IODIR
   79 MACRO             
   80 MACRO             	LDA #TXOPEN	; Turn off serial IRQs before starting
   81 MACRO             	STA SERCTL	;  and make sure serial port is open-colle
   82 MACRO             
   83 MACRO             	  #IFDEF AUTO_TIMEOUT_USER
   84 MACRO             		STZ TimeoutCount+1
   85 MACRO             		STZ TimeoutCount+2
   86 MACRO             	  #ENDIF
   87 MACRO             
   88                   	#ENDMACRO
   89                   
   90                   
   91                   	#MACRO	INITINT
   92 MACRO             sysIntTable	.EQ ?0
   93 MACRO             
   94 MACRO             		;------	Set the break and int vectors to point to ou
   95 MACRO             		LDA #<UserIntHandler
   96 MACRO             		STA CPU_IRQ
   97 MACRO             		LDA #>UserIntHandler
   98 MACRO             		STA CPU_IRQ+1
   99 MACRO             
  100 MACRO             		LDX #8*2-1
  101 MACRO             ??	.= *
  102 MACRO             		  LDA #>IntReturn
  103 MACRO             		  STA ?0,X
  104 MACRO             		  DEX
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   17
                        6502:macros/sys.mac             16:35:31  

  105 MACRO             		  LDA #<IntReturn
  106 MACRO             		  STA ?0,X
  107 MACRO             		  DEX
  108 MACRO             		 BPL ??
  109 MACRO             
  110 MACRO             	  #IFDEF BRK_USER
  111 MACRO             		LDA CPU_NMI
  112 MACRO             		STA BRK_vector+2
  113 MACRO             		LDA CPU_NMI+1
  114 MACRO             		STA BRK_vector+3
  115 MACRO             	  #ENDIF ; of #IFDEF BRK_USER
  116 MACRO             
  117 MACRO             	  #IFDEF SERIALPORT_USER
  118 MACRO             		lda #TXOPEN
  119 MACRO             		sta SERCTL
  120 MACRO             		lda #SERIAL_INT
  121 MACRO             		sta INTRST
  122 MACRO             	  #ENDIF
  123 MACRO             
  124                   	#ENDMACRO
  125                   
  126                   
  127                   	#MACRO SET_BRK
  128 MACRO             		LDA #<?0
  129 MACRO             		STA BRK_vector+2
  130 MACRO             		LDA #>?0
  131 MACRO             		STA BRK_vector+3
  132 MACRO             		LDA #$EA	; nop
  133 MACRO             		STA BRK_vector
  134                   	#ENDMACRO
  135                   
  136                   
  137                   	#MACRO RESET_TIMEOUT
  138 MACRO             		STZ TimeoutCount+1	; else reset timeout counter
  139 MACRO             		STZ TimeoutCount+2
  140                   	#ENDMACRO
  141                   
  142                   
  143                   	#MACRO ECHO_VALUE
  144 MACRO             		.ECHO "Value of ?0 is ?%d0 ($?%x0)"
  145                   	#ENDMACRO
  146                   
  147                   
   79                   	.in 6502:macros/hsfx.mac
    1                   ; Monday 30-Apr-90 17:26:10
    2                   * === hsfx.mac =======================================
    3                   *
    4                   * HSFX (Handy Sound Effects) Macros  --  Handy Softwar
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   12                   * 13 May 89	-RJ		Added SEPARATE_HMUSIC_HSFX support
   13                   * 11 Apr 89	-RJ		Added INITHSFX warning
   14                   * 4-Jan-89	=RJ Mical=	Created this file!
   15                   *
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   18
                        6502:macros/hsfx.mac            16:35:31  

   16                   * ====================================================
   17                   
   18                   
   19                   		#MACRO	INITHSFX
   20 MACRO             		#IFDEF HANDYMUSIC
   21 MACRO             		  #IFNDEF SEPARATE_HMUSIC_HSFX
   22 MACRO             		    .ECHO	""
   23 MACRO             		    .ECHO	"WARNING:  When using HMUSIC you should us
   24 MACRO             		    .ECHO	"          INITHMUSIC and you should not"
   25 MACRO             		    .ECHO	"          use INITHSFX!"
   26 MACRO             		  #ELSE
   27 MACRO             		    JSR	InitHSFX
   28 MACRO             		  #ENDIF
   29 MACRO             		#ELSE
   30 MACRO             		  JSR	InitHSFX
   31 MACRO             		#ENDIF
   32                   		#ENDMACRO
   33                   
   34                   
   35                   		#MACRO	RESETHSFX
   36 MACRO             		JSR	ResetHSFX
   37                   		#ENDMACRO
   38                   
   39                   
   40                   		#MACRO	PLAYHSFX
   41 MACRO             		JSR	StartHSFX
   42                   		#ENDMACRO
   43                   
   44                   
   45                   
   46                   * The SET_AUDIO_CLOCK sets the audio system's timer to
   47                   * specified rate.  Also, it causes the HMUSIC and HSFX
   48                   * to their initial state.
   49                   * ON ENTRY:
   50                   *     A has the audio timer preload value
   51                   *     X has the audio clock frequency select mask
   52                   
   53                   	#MACRO SET_AUDIO_CLOCK
   54 MACRO             	   phx
   55 MACRO             	     pha
   56 MACRO             	      #IFDEF HANDYMUSIC
   57 MACRO             		INITHMUSIC
   58 MACRO             	      #ELSE
   59 MACRO             		INITHSFX
   60 MACRO             	      #ENDIF
   61 MACRO             	     pla
   62 MACRO             	    sta TIMER0+{AUDIO_TIMER*4}+TIM_BACKUP
   63 MACRO             	   pla
   64 MACRO             	  ora #ENABLE_INT+ENABLE_RELOAD+ENABLE_COUNT
   65 MACRO             	  sta TIMER0+{AUDIO_TIMER*4}+TIM_CONTROLA
   66                   	#ENDMACRO
   67                   
   68                   
   69                   
   70                   
   80                   	.in 6502:macros/hprint.mac
    1                   
    2                   * === hprint.mac =====================================
    3                   *
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   19
                        6502:macros/hprint.mac          16:35:31  

    4                   * HandyPrint Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 26-Feb-90	SHL		Minor code tightening
   12                   * 29 May 89	Omi and Mical	Cleaned up to use new assemb
   13                   *				The new HPR_CHARSET macro is a laugh
   14                   * 17 Mar 89	-RJ		.CHARSET is .CSET when ASM.VERSION is
   15                   * 16 Mar 89	-RJ		Got rid of an extraneous #ENDIF in HP
   16                   * 8-Jan-89	=RJ Mical=	Created this file!
   17                   *
   18                   * ====================================================
   19                   
   20                   
   21                   
   22                   * The INITLIT macro initializes an Handy Print buffer 
   23                   * sprite bufer.  After this macro has been invoked, ea
   24                   * an offset to the next line of the buffer, and the la
   25                   * to 0.  The buffer is presumed to be Width (as specif
   26                   * FONT_HEIGHT plus 1 big.
   27                   * The first argument specifies the address of the buff
   28                   * The second argument specifies the byte-width of each
   29                   * NOTE:  the buffer line width includes the sprite dat
   30                   * which means that the number of characters you can pr
   31                   * buffer line width minus one.  For a full-screen widt
   32                   * width of 21 (20 characters * 8 per character equals 
   33                   	#MACRO INITLIT
   34 MACRO             	LDA #<?0
   35 MACRO             	LDX #>?0
   36 MACRO             	STA sysptr
   37 MACRO             	STX sysptr+1
   38 MACRO             	LDX #FONT_HEIGHT
   39 MACRO             ??	.= *
   40 MACRO             	  lda #?1
   41 MACRO             	  STA (sysptr)
   42 MACRO             	  CLC
   43 MACRO             	  ADC sysptr
   44 MACRO             	  STA sysptr
   45 MACRO             	  bcc ??1
   46 MACRO             	  inc sysptr+1
   47 MACRO             ??1	.= *
   48 MACRO             	  DEX
   49 MACRO             	 BNE ??
   50 MACRO             	LDA #0
   51 MACRO             	STA (sysptr)
   52                   	#ENDMACRO
   53                   
   54                   
   55                   
   56                   * The HPRFONT macro causes the FontBase variable to be
   57                   * the pieces of the desired font to be loaded.  If you
   58                   * HPRINT either you use HPRFONT or you take all the st
   59                   * The first argument should be a text string describin
   60                   * (the normal system font is named "plain").
   61                   * ??? NOTE:  currently only supports FONT_HEIGHT of 7
   62                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   20
                        6502:macros/hprint.mac          16:35:31  

   63                   	#MACRO HPRFONT
   64 MACRO             FontBase  ;-- Load in only the font pieces requested b
   65 MACRO             	    .IN 6502:fonts/?0_space7.src
   66 MACRO             	  #IF {FONT_TYPE&HPR_DIGIT} <> 0
   67 MACRO             	    .IN 6502:fonts/?0_digit7.src
   68 MACRO             	  #ENDIF
   69 MACRO             	  #IF {FONT_TYPE&HPR_UPPER} <> 0
   70 MACRO             	    .IN 6502:fonts/?0_upper7.src
   71 MACRO             	  #ENDIF
   72 MACRO             	  #IF {FONT_TYPE&HPR_LOWER} <> 0
   73 MACRO             	    .IN 6502:fonts/?0_lower7.src
   74 MACRO             	  #ENDIF
   75 MACRO             	  #IF {FONT_TYPE&HPR_PUNC} <> 0
   76 MACRO             	    .IN 6502:fonts/?0_punc7.src
   77 MACRO             	  #ENDIF
   78 MACRO             	  #IF {FONT_TYPE&HPR_OTHER} <> 0
   79 MACRO             	    .IN 6502:fonts/?0_other7.src
   80 MACRO             	  #ENDIF
   81 MACRO             	    .IN 6502:fonts/?0_nix7.src
   82                   	#ENDMACRO
   83                   
   84                   
   85                   
   86                   * The HPR_CHARSET macro is used to specify that you wa
   87                   * character set to be used for your ASCII characters. 
   88                   * character set will match the character positions gen
   89                   * call to the HPRFONT macro.
   90                   * Here, we load in a character set that contains the A
   91                   * according to the font requests of the user.  Note th
   92                   * ASCII is translated into the NIXFONT character
   93                   
   94                   	#MACRO HPR_CHARSET
   95 MACRO             	  #IF {FONT_TYPE&HPR_OTHER} != 0
   96 MACRO             	    #IF {FONT_TYPE&HPR_PUNC} != 0
   97 MACRO             	      #IF {FONT_TYPE&HPR_LOWER} != 0
   98 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
   99 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  100 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_LOWER+HPR_UPPE
  101 MACRO             	            .CS 6502:fonts/cset_1f.src
  102 MACRO             	          #ELSE
  103 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_LOWER+HPR_UPPE
  104 MACRO             	            .CS 6502:fonts/cset_1e.src
  105 MACRO             	          #ENDIF
  106 MACRO             	        #ELSE
  107 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  108 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_LOWER+HPR_DIGI
  109 MACRO             	            .CS 6502:fonts/cset_1d.src
  110 MACRO             	          #ELSE
  111 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_LOWER
  112 MACRO             	            .CS 6502:fonts/cset_1c.src
  113 MACRO             	          #ENDIF
  114 MACRO             	        #ENDIF
  115 MACRO             	      #ELSE
  116 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  117 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  118 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_UPPER+HPR_DIGI
  119 MACRO             	            .CS 6502:fonts/cset_1b.src
  120 MACRO             	          #ELSE
  121 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_UPPER
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   21
                        6502:macros/hprint.mac          16:35:31  

  122 MACRO             	            .CS 6502:fonts/cset_1a.src
  123 MACRO             	          #ENDIF
  124 MACRO             	        #ELSE
  125 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  126 MACRO             	            ;-- HPR_OTHER+HPR_PUNC+HPR_DIGIT
  127 MACRO             	            .CS 6502:fonts/cset_19.src
  128 MACRO             	          #ELSE
  129 MACRO             	            ;-- HPR_OTHER+HPR_PUNC
  130 MACRO             	            .CS 6502:fonts/cset_18.src
  131 MACRO             	          #ENDIF
  132 MACRO             	        #ENDIF
  133 MACRO             	      #ENDIF
  134 MACRO             	    #ELSE
  135 MACRO             	      #IF {FONT_TYPE&HPR_LOWER} != 0
  136 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  137 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  138 MACRO             	            ;-- HPR_OTHER+HPR_LOWER+HPR_UPPER+HPR_DIG
  139 MACRO             	            .CS 6502:fonts/cset_17.src
  140 MACRO             	          #ELSE
  141 MACRO             	            ;-- HPR_OTHER+HPR_LOWER+HPR_UPPER
  142 MACRO             	            .CS 6502:fonts/cset_16.src
  143 MACRO             	          #ENDIF
  144 MACRO             	        #ELSE
  145 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  146 MACRO             	            ;-- HPR_OTHER+HPR_LOWER+HPR_DIGIT
  147 MACRO             	            .CS 6502:fonts/cset_15.src
  148 MACRO             	          #ELSE
  149 MACRO             	            ;-- HPR_OTHER+HPR_LOWER
  150 MACRO             	            .CS 6502:fonts/cset_14.src
  151 MACRO             	          #ENDIF
  152 MACRO             	        #ENDIF
  153 MACRO             	      #ELSE
  154 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  155 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  156 MACRO             	            ;-- HPR_OTHER+HPR_UPPER+HPR_DIGIT
  157 MACRO             	            .CS 6502:fonts/cset_13.src
  158 MACRO             	          #ELSE
  159 MACRO             	            ;-- HPR_OTHER+HPR_UPPER
  160 MACRO             	            .CS 6502:fonts/cset_12.src
  161 MACRO             	          #ENDIF
  162 MACRO             	        #ELSE
  163 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  164 MACRO             	            ;-- HPR_OTHER+HPR_DIGIT
  165 MACRO             	            .CS 6502:fonts/cset_11.src
  166 MACRO             	          #ELSE
  167 MACRO             	            ;-- HPR_OTHER
  168 MACRO             	            .CS 6502:fonts/cset_10.src
  169 MACRO             	          #ENDIF
  170 MACRO             	        #ENDIF
  171 MACRO             	      #ENDIF
  172 MACRO             	    #ENDIF
  173 MACRO             	  #ELSE ; no HPR_OTHER
  174 MACRO             	    #IF {FONT_TYPE&HPR_PUNC} != 0
  175 MACRO             	      #IF {FONT_TYPE&HPR_LOWER} != 0
  176 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  177 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  178 MACRO             	            ;-- HPR_PUNC+HPR_LOWER+HPR_UPPER+HPR_DIGI
  179 MACRO             	            .CS 6502:fonts/cset_0f.src
  180 MACRO             	          #ELSE
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   22
                        6502:macros/hprint.mac          16:35:31  

  181 MACRO             	            ;-- HPR_PUNC+HPR_LOWER+HPR_UPPER
  182 MACRO             	            .CS 6502:fonts/cset_0e.src
  183 MACRO             	          #ENDIF
  184 MACRO             	        #ELSE
  185 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  186 MACRO             	            ;-- HPR_PUNC+HPR_LOWER+HPR_DIGIT
  187 MACRO             	            .CS 6502:fonts/cset_0d.src
  188 MACRO             	          #ELSE
  189 MACRO             	            ;-- HPR_PUNC+HPR_LOWER
  190 MACRO             	            .CS 6502:fonts/cset_0c.src
  191 MACRO             	          #ENDIF
  192 MACRO             	        #ENDIF
  193 MACRO             	      #ELSE
  194 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  195 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  196 MACRO             	            ;-- HPR_PUNC+HPR_UPPER+HPR_DIGIT
  197 MACRO             	            .CS 6502:fonts/cset_0b.src
  198 MACRO             	          #ELSE
  199 MACRO             	            ;-- HPR_PUNC+HPR_UPPER
  200 MACRO             	            .CS 6502:fonts/cset_0a.src
  201 MACRO             	          #ENDIF
  202 MACRO             	        #ELSE
  203 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  204 MACRO             	            ;-- HPR_PUNC+HPR_DIGIT
  205 MACRO             	            .CS 6502:fonts/cset_09.src
  206 MACRO             	          #ELSE
  207 MACRO             	            ;-- HPR_PUNC
  208 MACRO             	            .CS 6502:fonts/cset_08.src
  209 MACRO             	          #ENDIF
  210 MACRO             	        #ENDIF
  211 MACRO             	      #ENDIF
  212 MACRO             	    #ELSE
  213 MACRO             	      #IF {FONT_TYPE&HPR_LOWER} != 0
  214 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  215 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  216 MACRO             	            ;-- HPR_LOWER+HPR_UPPER+HPR_DIGIT
  217 MACRO             	            .CS 6502:fonts/cset_07.src
  218 MACRO             	          #ELSE
  219 MACRO             	            ;-- HPR_LOWER+HPR_UPPER
  220 MACRO             	            .CS 6502:fonts/cset_06.src
  221 MACRO             	          #ENDIF
  222 MACRO             	        #ELSE
  223 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  224 MACRO             	            ;-- HPR_LOWER+HPR_DIGIT
  225 MACRO             	            .CS 6502:fonts/cset_05.src
  226 MACRO             	          #ELSE
  227 MACRO             	            ;-- HPR_LOWER
  228 MACRO             	            .CS 6502:fonts/cset_04.src
  229 MACRO             	          #ENDIF
  230 MACRO             	        #ENDIF
  231 MACRO             	      #ELSE
  232 MACRO             	        #IF {FONT_TYPE&HPR_UPPER} != 0
  233 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  234 MACRO             	            ;-- HPR_UPPER+HPR_DIGIT
  235 MACRO             	            .CS 6502:fonts/cset_03.src
  236 MACRO             	          #ELSE
  237 MACRO             	            ;-- HPR_UPPER
  238 MACRO             	            .CS 6502:fonts/cset_02.src
  239 MACRO             	          #ENDIF
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   23
                        6502:macros/hprint.mac          16:35:31  

  240 MACRO             	        #ELSE
  241 MACRO             	          #IF {FONT_TYPE&HPR_DIGIT} != 0
  242 MACRO             	            ;-- HPR_DIGIT
  243 MACRO             	            .CS 6502:fonts/cset_01.src
  244 MACRO             	          #ELSE
  245 MACRO             	            .ECHO ""
  246 MACRO             	            .ECHO "ERROR:  No font FONT_TYPES flags s
  247 MACRO             	            .ECHO ""
  248 MACRO             	          #ENDIF
  249 MACRO             	        #ENDIF
  250 MACRO             	      #ENDIF
  251 MACRO             	    #ENDIF
  252 MACRO             	  #ENDIF
  253                   	#ENDMACRO
  254                   
  255                   
  256                   * The HPRINT macro causes your text to be printed
  257                   * The first arg is the text pointer, which can point t
  258                   * depending on the value of the second arg.
  259                   * The second arg should be 0 or 1, standing for:
  260                   *     0 = first arg is the address of the text
  261                   *     1 = first arg is the address of a variable point
  262                   * The third arg is the address of your buffer, which s
  263                   * initialized as a completely-literal sprite buffer (s
  264                   
  265                   	#MACRO HPRINT
  266 MACRO             
  267 MACRO             	  #IF	?1 = 1
  268 MACRO             	    LDA ?0
  269 MACRO             	    STA	sysptr
  270 MACRO             	    LDA ?0+1
  271 MACRO             	    STA sysptr+1
  272 MACRO             	  #ELSE
  273 MACRO             	    LDA #<?0
  274 MACRO             	    STA sysptr
  275 MACRO             	    LDA #>?0
  276 MACRO             	    STA sysptr+1
  277 MACRO             	  #ENDIF
  278 MACRO             
  279 MACRO             	  LDA #<?2
  280 MACRO             	  STA TextPtr
  281 MACRO             	  LDA #>?2
  282 MACRO             	  STA TextPtr+1
  283 MACRO             	  JSR HandyPrint
  284 MACRO             
  285                   	#ENDMACRO
  286                   
  287                   
  288                   
   81                   	.in 6502:macros/cart.mac
    1                   ; Thursday 28-Jun-90 14:29:38
    2                   * == cart.mac ========================================
    3                   * 
    4                   * Game Cartridge I/O Macros  --  Handy Software
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date		Name		Description
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   24
                        6502:macros/cart.mac            16:35:31  

   10                   * ---------	--------------	---------------------------
   11                   * 22-Jun-90	SHL		Added READRAMCART and WRITERAMCART ma
   12                   * 20-Jun-90	SHL		Added RAMCART_USER support
   13                   * 11-Apr-90	SHL		Removed the SETCARTOFFSET macro
   14                   *				Registers for OPENFILE and SETCARTADDR
   15                   *				arguments changed: A = cartridge page,
   16                   *				X,Y = cartridge address
   17                   *				SETCARTPAGE now takes argument in A reg
   18                   *				GETDIR and GETDIRFAST macros are now identical
   19                   * 26-Feb-90	SHL		Removed all references to WRITECART_U
   20                   *				Minor code tightening
   21                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   22                   * 30 May 89	-RJ		Added IODAT_RAM mask
   23                   * 20 Apr 89	=RJ Mical=	Created this file!
   24                   * 
   25                   * ====================================================
   26                   
   27                   
   28                   
   29                   * The GETDIR macro accepts as an argument a file numbe
   30                   * the A, X and Y registers with the cartridge address 
   31                   * directory entry.  The call to GETDIR sets up the reg
   32                   * for a call to the OPENFILE command
   33                   * 
   34                   * ON ENTRY:
   35                   *     A = File number for which the cartridge address 
   36                   
   37                   	#MACRO GETDIR
   38 MACRO             		JSR GetDirAddress
   39                   	#ENDMACRO
   40                   
   41                   	#MACRO GETDIRFAST
   42 MACRO             		JSR GetDirAddress
   43                   	#ENDMACRO
   44                   
   45                   
   46                   
   47                   
   48                   * The OPENFILE macro expects the A, X and Y registers 
   49                   * address of a file's directory entry, where A has the
   50                   * X,Y (low,high) has the offset.  After this call is m
   51                   * data structure contains a copy of the file's directo
   52                   * cartridge hardware is set up to allow a read or writ
   53                   * byte of the file.  
   54                   * 
   55                   * Note that the register settings required by this mac
   56                   * ones returned by the GETDIR macro.  
   57                   * 
   58                   * ON ENTRY:
   59                   *     X = Cartridge page number of the file's director
   60                   *     A = Low byte of page offset of the file's direct
   61                   *     Y = High byte of page offset of the file's direc
   62                   
   63      TRUE           #IFNDEF ROM_NODIR
   64                   
   65                   	#MACRO OPENFILE
   66 MACRO             		JSR	OpenFile0
   67                   	#ENDMACRO
   68                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   25
                        6502:macros/cart.mac            16:35:31  

   69                     #ENDIF
   70                   
   71                   
   72                   
   73                   * The READFILE macro reads the file's data into RAM.  
   74                   * Which arguments should be passed to the READFILE mac
   75                   * the type of file directory you have declared.  
   76                   * 
   77                   * If your directory has a ROMDIR_DEST field which defi
   78                   * destination for the file's data then it's your choic
   79                   * data loaded to its regular RAM destination or to an 
   80                   * You define which you want by setting A to zero or no
   81                   * specify that you want the default RAM destination to
   82                   * non-zero to specify that X,Y (low,high) contain the 
   83                   * for the data.  
   84                   * 
   85                   * If ROMDIR_DEST isn't part of your directory entry, t
   86                   * specify in X,Y (low,high) a RAM destination for the 
   87                   * 
   88                   * ON ENTRY:
   89                   *     - For the entry arguments, see the above descrip
   90                   
   91      TRUE           #IFNDEF ROM_NODIR
   92                   
   93                   	#MACRO READFILE
   94 MACRO             		JSR	ReadFile0
   95                   	#ENDMACRO
   96                   
   97                     #ENDIF
   98                   
   99                   
  100                   
  101                   * The SETCARTADDR macro sets up the system pointers us
  102                   * cartridge, and then sets the cartridge hardware to t
  103                   * 
  104                   * ON ENTRY:
  105                   *     A = Cartridge page
  106                   *     X = Low byte of page offset
  107                   *     Y = High byte of page offset
  108                   *
  109                   * On exit A, X and Y are trashed and the cartridge pow
  110                   * CartOffsetLow, CartOffsetHigh and CartPage are set t
  111                   
  112                   	#MACRO SETCARTADDR
  113 MACRO             		JSR	SetCartAddress
  114                   	#ENDMACRO
  115                   
  116                   
  117                   
  118                   * The SETCARTPAGE macro sets the cartridge hardware to
  119                   * page specified in A.
  120                   * 
  121                   * ON ENTRY:
  122                   *     A = Cartridge page
  123                   *
  124                   * On exit A, X and Y are trashed and cart power is ena
  125                   * CartPage is set to the current cartridge page
  126                   * Note: CartOffsetLow and CartOffsetHigh are not affec
  127                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   26
                        6502:macros/cart.mac            16:35:31  

  128                   	#MACRO SETCARTPAGE
  129 MACRO             		sta CartPage
  130 MACRO             		JSR SetCartPage
  131                   	#ENDMACRO
  132                   
  133                   
  134                   * The SET_TO_READ_CART macro turns on the cartridge po
  135                   * line to read
  136                   * The A register is trashed
  137                   	#MACRO SET_TO_READ_CART
  138 MACRO             		LDA	IODAT_RAM
  139 MACRO             		AND	#~CART_POWER_OFF ; Make sure cart power is on
  140 MACRO             	  #IFDEF RAMCART_USER
  141 MACRO             	  	ora #READ_ENABLE
  142 MACRO             	  #ENDIF
  143 MACRO             		STA	IODAT_RAM
  144 MACRO             		STA	IODAT
  145                   	#ENDMACRO
  146                   
  147                   
  148                   * The SET_TO_WRITE_CART macro turns on the cartridge p
  149                   * line to write
  150                   * The A register is trashed
  151      FALSE          #IFDEF RAMCART_USER
  158                     #ENDIF
  159                   
  160                   
  161                   * The RESTORE_CART macro turns off the cartridge power
  162                   * to read
  163                   * The A register is trashed
  164                   	#MACRO RESTORE_CART
  165 MACRO             		LDA IODAT_RAM
  166 MACRO             	  #IFDEF RAMCART_USER
  167 MACRO             		ora #CART_POWER_OFF+READ_ENABLE	; Turn off cartridge
  168 MACRO             	  #ELSE
  169 MACRO             		ORA #CART_POWER_OFF	; Turn off cartridge power
  170 MACRO             	  #ENDIF
  171 MACRO             		STA IODAT_RAM
  172 MACRO             		STA IODAT
  173                   	#ENDMACRO
  174                   
  175                   
  176                   
  177                   * The READCART macro is used to read in bytes from the
  178                   * ON ENTRY:
  179                   *    -	CartIOCount must be initialized to number of by
  180                   *	each byte incremented once (for instance: to read $0
  181                   *	CartIOCount to $0224, to read $04ff bytes set CartIO
  182                   *    -	sysptr points to buffer for incoming data
  183                   *    -	CartOffsetLow,High and CartPage to have valid n
  184                   * 
  185                   * ON EXIT:
  186                   *    -	CartPage and CartOffsetLow,High are advanced to
  187                   *	the last byte read
  188                   *    -	X,Y (low,high) has RAM address of the byte beyo
  189                   *    -  sysptr also has RAM address of the byte beyond
  190                   *    -	The A register is trashed
  191                   
  192                   	#MACRO READCART
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   27
                        6502:macros/cart.mac            16:35:31  

  193 MACRO             		JSR	ReadCart
  194                   	#ENDMACRO
  195                   
  196                   
  197      FALSE         #IFDEF RAMCART_USER
  288                    #ENDIF	; #IFDEF RAMCART_USER
  289                   
  290                   
  291                   
   82                   	.in 6502:macros/display.mac
    1                   ; Tuesday 27-Mar-90 10:58:38
    2                   * === display.mac ====================================
    3                   *
    4                   * Display Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1988,1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 27-Mar-90	SHL		Removed BufferAddrL, BufferAddrH
   12                   * 20-Mar-90	SHL		SETDISP... macros no longer SEI/CLI a
   13                   *				be invoked when IRQs disabled
   14                   *				Tightened up WAITEOF, WAITNEOF macros
   15                   * 7-Mar-90	SHL		Removed the DISPLAY_ON and DISPLAY_OFF
   16                   *				Moved initialization of DISPCTL_RAM to INITSYS
   17                   *				in sys.mac
   18                   * 27-Feb-90	SHL		Removed unnecessary STZs from HOFF8,V
   19                   * 26-Feb-90	SHL		Minor code tightening
   20                   * 9-Feb-90	SHL		Removed all references to HFIX1
   21                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   22                   *				General cleanup and prettification
   23                   * 31 May 89	Larry Abel	Changed WAITEOF and WAITEOL to 
   24                   * 27 Apr 89	RG Goudy	Changed SETDISP_50 PCOUNT to $31
   25                   * 19 Apr 89	-RJ		DISPCTL bit definitions now used
   26                   * 6 Apr 89	-RJ		Added SETDISP_75
   27                   * 19 Mar 89	-RJ		Added HFIX1 macros to SETDISP
   28                   * 16 Mar 89	-RJ		Changed the DISPLAY macro to remove t
   29                   *				forward reference to DisplayBuffer forbidden
   30                   *				by the new assembler
   31                   * 13 Feb 89	-RJ		Added JSR InitDisplayer to SETDISP wh
   32                   *				EOF_USER isn't defined.  Also, removed the
   33                   *				invocation of DISPLAY from DBUF_DISPLAY.
   34                   *				DISPLAY now happens during EOF processing.
   35                   *				Because of this, the EOF interrupt is now
   36                   *				always turned on even if not EOF_USER.
   37                   *				DBUF_DISPLAY now writes RenderBuffer to
   38                   *				DisplayBuffer.  DISPLAY now reads from there.
   39                   * 26 Jan 89	-RJ		Deleted SETDISP_30/25/20/15/10 macros
   40                   * 16 Jan 89	SHL		Modified SETDISP macro to only enable
   41                   *				interrupts needed according to the EOF_USER
   42                   *				and EOL_USER flags
   43                   * 5 Jan 89	-RJ		Set interrupt disable before writing t
   44                   *				display hardware addresses.
   45                   *				Removed writing of DISPCTL from FLIP macro.
   46                   *				Added writing of DISPCTL to DISPLAY macro.
   47                   * 30 Dec 88	-RJ		Moved DISPLAY macro to top of DBUF_DI
   48                   *				rid of redundant assignment there
   49                   * 28 Dec 88	-RJ		Changed SETCOLL to store to COLLBASL,
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   28
                        6502:macros/display.mac         16:35:31  

   50                   * 27 Dec 88	-RJ		Added DISPLAY, DISP_AX, DISP_AY,
   51                   *				SETDISP_20/15/10
   52                   * 24-Dec-88	-RJ		Renamed DISPLAY to DBUF_DISPLAY.  Cha
   53                   *				ptr references to sysptr
   54                   * 23-Dec-88	-RJ		Modified the DISPLAY macro to support
   55                   *				Added RGB16_I macro.
   56                   * 22-Dec-88	-RJ		Added many display macros:  SETDISP_6
   57                   *				SETDISP, SETDBUF, SETCOLL, DISPLAY_ON,
   58                   *				DISPLAY_OFF, INITEOF, WAITEOF, and FLIP.
   59                   * Early 88	=RJ Mical=	Created this file!
   60                   *
   61                   * ====================================================
   62                   
   63                   
   64                   
   65                   * The SETDISP macro sets up the horizontal and vertica
   66                   * (thereby defining the frame rate) and sets the magic
   67                   * initializes the DISPCTL_RAM shadow mask of the hardw
   68                   * The macro expects 5 arguments:
   69                   *     - the backup value for the horizontal timer
   70                   *     - the control bits for the horiz timer
   71                   *     - the backup value for the vertical timer
   72                   *     - the control bits for the vertical timer
   73                   *     - the magic 'P' value
   74                   		#MACRO	SETDISP
   75 MACRO             
   76 MACRO             		LDA	#?0
   77 MACRO             		STA	HCOUNT+TIM_BACKUP
   78 MACRO             	#IFDEF EOL_USER
   79 MACRO             		lda #?1|%10000000
   80 MACRO             	#ELSE
   81 MACRO             		lda #?1&%01111111
   82 MACRO             	#ENDIF
   83 MACRO             		STA	HCOUNT+TIM_CONTROLA
   84 MACRO             		LDA	#?2
   85 MACRO             		STA	VCOUNT+TIM_BACKUP
   86 MACRO             		lda #?3|%10000000
   87 MACRO             		STA	VCOUNT+TIM_CONTROLA
   88 MACRO             
   89 MACRO             		LDA	#?4
   90 MACRO             		STA	PBKUP
   91 MACRO             	#IFNDEF	EOF_USER
   92 MACRO             		JSR	InitDisplayer
   93 MACRO             	#ENDIF
   94                   		#ENDMACRO
   95                   
   96                   
   97                   
   98                   * These macros allow you to easily set up a 'standard'
   99                   		#MACRO SETDISP_75
  100 MACRO             		SETDISP	$7E,$98,$68,$9F,$20
  101                   		#ENDMACRO
  102                   
  103                   		#MACRO SETDISP_60
  104 MACRO             		SETDISP	$9E,$98,$68,$9F,$29
  105                   		#ENDMACRO
  106                   
  107                   		#MACRO SETDISP_50
  108 MACRO             		SETDISP	$BD,$98,$68,$9F,$31
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   29
                        6502:macros/display.mac         16:35:31  

  109                   		#ENDMACRO
  110                   
  111                   
  112                   
  113                   * The SETDBUF macro sets up the systems awareness of t
  114                   * to use for the display.  The macro wants two argumen
  115                   * the two buffers you will be using for your displays.
  116                   * the two buffers by calling this macro, DBUF_DISPLAY 
  117                   * do all the double-buffer display work for you automa
  118                   * At any time after calling this routine, the address 
  119                   * off-display buffer can be found in the variable Rend
  120                   		#MACRO	SETDBUF
  121 MACRO             		LDA	#<?0
  122 MACRO             		STA	RenderBuffer
  123 MACRO             		LDA	#>?0
  124 MACRO             		STA	RenderBuffer+1
  125 MACRO             		LDA	#<?1
  126 MACRO             		STA	DisplayBuffer
  127 MACRO             		LDA	#>?1
  128 MACRO             		STA	DisplayBuffer+1
  129 MACRO             		STZ	DisplayFlags
  130                   		#ENDMACRO
  131                   
  132                   
  133                   * The SETCOLL macro sets up the hardware and system so
  134                   * hardware collisions for you.  The macro expects two 
  135                   * the address of your 8K collision buffer, and the off
  136                   * byte of your SCB to the SCB's collision depository b
  137                   		#MACRO	SETCOLL
  138 MACRO             		LDA	#<?0
  139 MACRO             		STA	COLLBASL
  140 MACRO             		LDA	#>?0
  141 MACRO             		STA	COLLBASH
  142 MACRO             		LDA	#<?1
  143 MACRO             		STA	COLLOFFL
  144 MACRO             		LDA	#>?1
  145 MACRO             		STA	COLLOFFH
  146                   		#ENDMACRO
  147                   
  148                   
  149                   
  150                   * The INITEOF macro is used to initialize the end-of-f
  151                   * You should invoke this macro only once, any time bef
  152                   * of WAITEOF.
  153      TRUE         	#IFDEF	EOF_USER
  154                   		#MACRO	INITEOF
  155 MACRO             		JSR	InitEOF
  156                   		#ENDMACRO
  157                   	#ENDIF
  158                   
  159                   
  160                   * The INITEOL macro is used to initialize the end-of-l
  161                   * You should invoke this macro only once, any time bef
  162                   * of WAITEOL.
  163      FALSE        	#IFDEF	EOL_USER
  167                   	#ENDIF
  168                   
  169                   
  170                   * The WAITEOF macro allows the programmer to wait unti
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   30
                        6502:macros/display.mac         16:35:31  

  171                   * hardware has just finished displaying the end-of-fra
  172                   * There's a short while (about 3 display lines of time
  173                   * hardware starts working on the first line of the new
  174                   * after end-of-frame it's safe to do stuff like change
  175                   * palette and things like that there
  176                   *??? Note that this macro currently provides only a cl
  177                   *??? EOF timing.  The EOF interrupt handler needs a bi
  178                   *??? get timing just right
  179                   		#MACRO	WAITEOF
  180 MACRO             		LDA	#DISPLAY_EOFFLAG
  181 MACRO             		TRB	DisplayFlags
  182 MACRO             systemp		.=	*
  183 MACRO             		BIT	DisplayFlags
  184 MACRO             		BEQ	systemp
  185                   		#ENDMACRO
  186                   
  187                   * The WAITNEOF macro waits until at least one EOF inte
  188                   * the last time the DISPLAY_EOFFLAG bit was reset
  189                   
  190                   		#MACRO	WAITNEOF
  191 MACRO             systemp		.=	*
  192 MACRO             		bit	DisplayFlags
  193 MACRO             		BPL	systemp		; assumes DISPLAY_EOFFLAG = $80
  194                   		#ENDMACRO
  195                   
  196                   
  197                   
  198                   * The WAITEOL macro allows the programmer to wait unti
  199                   * hardware has just finished displaying the end-of-lin
  200                   * There's a short while (many pixels of time) before t
  201                   * hardware starts working on the first pixel of the ne
  202                   * after end-of-line it's safe to do stuff like change 
  203                   * palette and things like that there
  204                   *??? Note that this macro currently provides only a cl
  205                   *??? EOL timing.  The EOL interrupt handler needs a bi
  206                   *??? get the timing just right
  207                   		#MACRO	WAITEOL
  208 MACRO             
  209 MACRO             		LDA	#DISPLAY_EOLFLAG
  210 MACRO             		TRB	DisplayFlags
  211 MACRO             systemp		.=	*
  212 MACRO             		BIT	DisplayFlags
  213 MACRO             		BEQ	systemp
  214                   		#ENDMACRO
  215                   
  216                   
  217                   		#MACRO	WAITNEOL
  218 MACRO             systemp		.=	*
  219 MACRO             		BIT	DisplayFlags
  220 MACRO             		BVC	systemp		; presumes that EOLFLAG equals $40
  221                   		#ENDMACRO
  222                   
  223                   
  224                   
  225                   * The FLIP macro does everything you need to flip the 
  226                   * The current orientation of the display should be tra
  227                   * code unless you happen to be rendering directly into
  228                   * can check the DISPLAY_SWAPFLAG of the DisplayFlags v
  229                   * whether or not the display is currently flipped.
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   31
                        6502:macros/display.mac         16:35:31  

  230                   		#MACRO	FLIP
  231 MACRO             		LDA	DISPCTL_RAM
  232 MACRO             		EOR	#DISP_FLIP
  233 MACRO             		STA	DISPCTL_RAM
  234 MACRO             		LDA	SPRSYS_RAM
  235 MACRO             		EOR	#LEFTHAND
  236 MACRO             		STA	SPRSYS_RAM
  237 MACRO             		STA	SPRSYS
  238                   		#ENDMACRO
  239                   
  240                   
  241                   
  242                   * The DBUF_DISPLAY macro does the double-buffering swa
  243                   * The macro causes the current offscreen buffer to be 
  244                   * as the buffer that will be displayed starting with t
  245                   * Also, it sets things up such that the current displa
  246                   * the new off-display rendering buffer that sprites wi
  247                   * with subsequent calls to SPRITES.
  248                   * Note that this macro doesn't swap the display buffer
  249                   * rather it sets things up for the buffers to be swapp
  250                   * the display is finished displaying the current on-di
  251                   * If you want to wait until just after the buffers are
  252                   * then you should use the WAITEOF macro immediately af
  253                   		#MACRO	DBUF_DISPLAY
  254 MACRO             ;!!! DISPLAY used to be called here in the DBUF macro.
  255 MACRO             ;!!! called during the end-of-frame handling
  256 MACRO             ;!!!		DISPLAY
  257 MACRO             
  258 MACRO             		PHP
  259 MACRO             		SEI
  260 MACRO             
  261 MACRO             
  262 MACRO             		;------	While still protected by the SEI,
  263 MACRO             		;------	copy RenderBuffer to DisplayBuffer
  264 MACRO             		LDA	RenderBuffer
  265 MACRO             		ldx	DisplayBuffer
  266 MACRO             		STA	DisplayBuffer
  267 MACRO             		stx	RenderBuffer
  268 MACRO             		LDA	RenderBuffer+1
  269 MACRO             		ldx	DisplayBuffer+1
  270 MACRO             		STA	DisplayBuffer+1
  271 MACRO             		stx	RenderBuffer+1
  272 MACRO             
  273 MACRO             		PLP
  274 MACRO             
  275                   		#ENDMACRO
  276                   
  277                   
  278                   
  279                   * The DISPLAY macro, after flipping DisplayBuffer as a
  280                   * state of FLIP, tells Handy hardware that DisplayBuff
  281                   * to be displayed
  282                   		#MACRO	DISPLAY
  283 MACRO             		LDA	DISPCTL_RAM
  284 MACRO             		STA	DISPCTL
  285 MACRO             		AND	#DISP_FLIP
  286 MACRO             		BEQ	??
  287 MACRO             		LDA	DisplayBuffer
  288 MACRO             		CLC
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   32
                        6502:macros/display.mac         16:35:31  

  289 MACRO             		ADC	#<DISPLAY_BUFSIZE-1
  290 MACRO             		TAX
  291 MACRO             		LDA	DisplayBuffer+1
  292 MACRO             		ADC	#>DISPLAY_BUFSIZE-1
  293 MACRO             		BRA	??2
  294 MACRO             ??
  295 MACRO             		LDX	DisplayBuffer
  296 MACRO             		LDA	DisplayBuffer+1
  297 MACRO             ??2
  298 MACRO             		DISP_AX
  299                   		#ENDMACRO
  300                   
  301                   
  302                   * The DISP_AX and DISP_AY macros set up the address co
  303                   * A (high-byte) and X or Y (low byte) as the next buff
  304                   * after the next end-of-frame
  305                   		#MACRO	DISP_AX
  306 MACRO             		PHP
  307 MACRO             		SEI
  308 MACRO             		STX	DISPADRL
  309 MACRO             		STA	DISPADRH
  310 MACRO             		PLP
  311                   		#ENDMACRO
  312                   
  313                   		#MACRO	DISP_AY
  314 MACRO             		PHP
  315 MACRO             		SEI
  316 MACRO             		STY	DISPADRL
  317 MACRO             		STA	DISPADRH
  318 MACRO             		PLP
  319                   		#ENDMACRO
  320                   
  321                   
  322                   
  323                   * The RGB_AXY macro presumes that you have Red, Green 
  324                   * registers A, X and Y respectively, and that you want
  325                   * to the color pen specified by the macro argument whe
  326                   * address of the GREEN register for the pen you want t
  327                   * Example setting pen 4 to yellow:
  328                   *     LDA     #$0F
  329                   *     LDX     #$0F
  330                   *     LDY     #$00
  331                   *     RGB_AXY GREEN4
  332                   		#MACRO	RGB_AXY
  333 MACRO             		STX	?0
  334 MACRO             		STA	sysptr
  335 MACRO             		TYA
  336 MACRO             		ASL
  337 MACRO             		ASL
  338 MACRO             		ASL
  339 MACRO             		ASL
  340 MACRO             		ORA	sysptr
  341 MACRO             		STA	?0+16
  342                   		#ENDMACRO
  343                   
  344                   
  345                   
  346                   * The RGB16 macros let you set up all the color regist
  347                   * One way or another, you supply to the macro with the
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   33
                        6502:macros/display.mac         16:35:31  

  348                   * that has an exact image of the sort of data that the
  349                   * registers expect, which is to say a table of 16 byte
  350                   * in the lower nybble your 16 green values,
  351                   * followed by a table of 16 bytes each with the upper 
  352                   * blue and the lower nybble containing red.
  353                   * The RGB16 macro expects an absolute address of the R
  354                   * The RGB16_I macro expects the address of a variable 
  355                   * the absolute address of the RGB table.
  356                   * Note that this macro presumes that 16 Green register
  357                   * sequentially by 16 BlueRed registers.
  358                   
  359                   		#MACRO	RGB16
  360 MACRO             		;------	Write the absolute address to sysptr
  361 MACRO             		LDA	#<?0
  362 MACRO             		STA	sysptr
  363 MACRO             		LDA	#>?0
  364 MACRO             		STA	sysptr+1
  365 MACRO             		;------	copy the palette
  366 MACRO             		LDY	#31
  367 MACRO             		LDA	(sysptr),Y
  368 MACRO             		STA	GREEN0,Y
  369 MACRO             		DEY
  370 MACRO             		BPL	*-6
  371                   		#ENDMACRO
  372                   
  373                   		#MACRO	RGB16_I
  374 MACRO             		LDA	?0
  375 MACRO             		STA	sysptr
  376 MACRO             		LDA	?0+1
  377 MACRO             		STA	sysptr+1
  378 MACRO             		;------	copy the palette
  379 MACRO             		LDY	#31
  380 MACRO             		LDA	(sysptr),Y
  381 MACRO             		STA	GREEN0,Y
  382 MACRO             		DEY
  383 MACRO             		BPL	*-6
  384                   		#ENDMACRO
  385                   
  386                   
  387                   
  388                   * The HOFF and VOFF macros set up the HOFF and VOFF fo
  389                   * display list rendering.
  390                   * HOFF8 and VOFF8 are used with 8-bit positioning wher
  391                   * is in A (the upper byte is set to zero for you)
  392                   *
  393                   * HOFF16 and VOFF16 are used with 16-bit positioning w
  394                   * your offset value is in A, the upper byte is in Y
  395                   		#MACRO	HOFF8
  396 MACRO             		STA	HOFFL
  397                   		#ENDMACRO
  398                   
  399                   		#MACRO	VOFF8
  400 MACRO             		STA	VOFFL
  401                   		#ENDMACRO
  402                   
  403                   		#MACRO	HOFF16
  404 MACRO             		STA	HOFFL
  405 MACRO             		STY	HOFFH
  406                   		#ENDMACRO
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   34
                        6502:macros/display.mac         16:35:31  

  407                   
  408                   		#MACRO	VOFF16
  409 MACRO             		STA	VOFFL
  410 MACRO             		STY	VOFFH
  411                   		#ENDMACRO
  412                   
  413                   
  414                   
  415                   * If AUTO_TIMEOUT_USER is defined, then add body to th
  416      FALSE        	  #IFDEF AUTO_TIMEOUT_USER
  445                   	  #ELSE
  446                   	    #MACRO TIMEOUT
  447                   	    #ENDM
  448                   	  #ENDIF
  449                   
  450                   
  451                   
   83                   	.in 6502:macros/sprite.mac
    1                   ; Tue Sep 18 16:53:24 1990
    2                   * == sprite.mac ======================================
    3                   *
    4                   * Sprite Rendering Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 18-Sep-90	SHL		Added code to work around RICOH bug
   12                   *				and support for the NO_RICOH_PATCH switch
   13                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   14                   *				Shortened INITSUZY (removed unneeded STZs)
   15                   *				Shortened WAITSUZY (removed NOPs)
   16                   * 8 May 89	-RJ		Rewrote the SPRITES macro to use the f
   17                   *				of the new assembler, added the RESPRITE macro
   18                   * 6 Apr 89	-RJ		Moved SPRSYS init out of INITSUZY into
   19                   * 2 Feb 89	James Donald	Fix to WAITSUZY macro makes BC
   20                   *				to the correct location
   21                   * 26 Jan 89	-RJ		Incorporated Steve's WAITSUZY change,
   22                   *				rid of all references to Interruptus
   23                   * 18 Jan 89	-RJ		INITSUZY nows initializes SPRSYS and
   24                   *				SPRSYS_RAM to zero
   25                   * 16 Jan 89	SHL		Modified WAITSUZY to wait until SUZY 
   26                   *				instead of waiting for interrupts to not
   27                   *				happen.
   28                   * 30 Dec 88	-RJ		Changed errant #<?0 to #>?0 in SPRITE
   29                   *				Non-HANDYIO SPRITES macro no longer sets a
   30                   *				DISPLAY-request bit in X register
   31                   *				Moved WAITSUZY above SPRITES
   32                   * 26 Dec 88	-RJ		Added INITSUZY and WAITSUZY macros
   33                   * 24 Dec 88	-RJ		Got rid of the PSPRITE macro.  Redefi
   34                   *				SPRITES so that it doesn't automatically do
   35                   *				a DISPLAY anymore.
   36                   * Early 88	=RJ Mical=	Created this file!
   37                   *
   38                   * ====================================================
   39                   
   40                   
   41                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   35
                        6502:macros/sprite.mac          16:35:31  

   42                   * The INITSUZY macro sets up Suzy to do sprites correc
   43                   * to render sprites (which you do with the SPRITES mac
   44                   * the INITSUZY macro first
   45                   		#MACRO	INITSUZY
   46 MACRO             		LDA	#$F3
   47 MACRO             		STA	SPRINIT
   48 MACRO             		LDA	#$7F
   49 MACRO             		STA	HSIZOFFL
   50 MACRO             		STA	VSIZOFFL
   51 MACRO             		LDA	#$01
   52 MACRO             		STA	SUZYBUSEN
   53 MACRO             		STZ	SDONEACK
   54                   		#ENDMACRO
   55                   
   56                   
   57                   
   58                   * The WAITSUZY macro allows us to wait for Suzy to be 
   59                   * 16-Jan-89 - SHL - modified to wait until SUZY is fin
   60                   * politely if she is done yet.
   61                   * NOTE:  this macro now presumes that the SPRITEWORKIN
   62                   * is bit 0.
   63                   
   64      FALSE        	#IFDEF NO_RICOH_PATCH
   75                   	#ELSE
   76                   
   77                   		#MACRO	WAITSUZY
   78 MACRO             ??1	.= *
   79 MACRO             		lda #SUZY_SPACE
   80 MACRO             		tsb MAPCTL		; disable SUZY addresses
   81 MACRO             		STZ	CPUSLEEP
   82 MACRO             		trb MAPCTL		; reenable SUZY addresses
   83 MACRO             		LDA	SPRSYS		; check to see if SUZY is done
   84 MACRO             		LSR	A		; get bit 0 into carry
   85 MACRO             		BCS	??1		; nope, let's wait some more
   86 MACRO             		STZ	SDONEACK
   87                   		#ENDMACRO
   88                   
   89                   	#ENDIF ;DEF NO_RICOH_PATCH
   90                   
   91                   
   92                   
   93                   * The SPRITES macro causes sprites to be rendered star
   94                   * sprite address arg.
   95                   *
   96                   * If you are going to render more than one sprite list
   97                   * display, you should use the SPRITES macro for the fi
   98                   * the RESPRITE macro for all following lists.
   99                   *
  100                   * Note that this macro does not cause the buffer to be
  101                   * the buffer displayed, you need to use a display macr
  102                   *
  103                   * The first arg is an address of either the first SCB 
  104                   * the address of a variable that contains the address 
  105                   * The second arg to the SPRITES macro describes whethe
  106                   * an absolute or indirect SCB address.
  107                   * The second arg should be 0 or 1, standing for:
  108                   *     0 = first arg is the address is the first SCB to
  109                   *     1 = first arg is the addr of a variable pointing
  110                   		#MACRO	SPRITES
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   36
                        6502:macros/sprite.mac          16:35:31  

  111 MACRO             		#IF	?1 <> 0
  112 MACRO             		  LDA	?0
  113 MACRO             		  STA	SCBNEXTL
  114 MACRO             		  LDA	?0+1
  115 MACRO             		  STA	SCBNEXTH
  116 MACRO             		#ELSE
  117 MACRO             		  LDA	#<?0
  118 MACRO             		  STA	SCBNEXTL
  119 MACRO             		  LDA	#>?0
  120 MACRO             		  STA	SCBNEXTH
  121 MACRO             		#ENDIF
  122 MACRO             
  123 MACRO             		LDA	RenderBuffer
  124 MACRO             		STA	VIDBASL
  125 MACRO             		LDA	RenderBuffer+1
  126 MACRO             		STA	VIDBASH
  127 MACRO             
  128 MACRO             		STZ	SDONEACK
  129 MACRO             
  130 MACRO             		LDA	#$01
  131 MACRO             		STA	SPRGO
  132 MACRO             		WAITSUZY
  133                   		#ENDMACRO
  134                   
  135                   
  136                   
  137                   * The RESPRITE macro causes sprites to be rendered sta
  138                   * sprite address arg.  This macro should be used by th
  139                   * want to render more than one sprite list when buildi
  140                   * This macro is identical to the SPRITES macro except 
  141                   * startup code isn't included.  You should call You sh
  142                   * RESPRITE macro only after a call to the SPRITES macr
  143                   *
  144                   * Note that this macro does not cause the buffer to be
  145                   * the buffer displayed, you need to use a display macr
  146                   *
  147                   * The first arg is an address of either the first SCB 
  148                   * the address of a variable that contains the address 
  149                   * The second arg to the SPRITES macro describes whethe
  150                   * an absolute or indirect SCB address.
  151                   * The second arg should be 0 or 1, standing for:
  152                   *     0 = first arg is the address is the first SCB to
  153                   *     1 = first arg is the addr of a variable pointing
  154                   		#MACRO	RESPRITE
  155 MACRO             		#IF	?1 <> 0
  156 MACRO             		  LDA	?0
  157 MACRO             		  STA	SCBNEXTL
  158 MACRO             		  LDA	?0+1
  159 MACRO             		  STA	SCBNEXTH
  160 MACRO             		#ELSE
  161 MACRO             		  LDA	#<?0
  162 MACRO             		  STA	SCBNEXTL
  163 MACRO             		  LDA	#>?0
  164 MACRO             		  STA	SCBNEXTH
  165 MACRO             		#ENDIF
  166 MACRO             
  167 MACRO             		STZ	SDONEACK
  168 MACRO             
  169 MACRO             		LDA	#$01
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   37
                        6502:macros/sprite.mac          16:35:31  

  170 MACRO             		STA	SPRGO
  171 MACRO             		WAITSUZY
  172                   		#ENDMACRO
  173                   
  174                   
  175                   
   84                   	.in 6502:macros/controls.mac
    1                   
    2                   * === controls.mac ===================================
    3                   * 
    4                   * Apple Joystick / Switches Input Macros  --  Handy So
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, 1989, Epyx, Inc.
    8                   * 
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 7-Feb-90	SHL		Removed Apple emulation compatibility
   12                   *				Removed GETINPUT
   13                   * 3 July 89	-RJ		The RESET_TIMEOUT logic is moved from
   14                   *				input macros to the display TIMEOUT macro
   15                   * 15 Jun 89	Carl Mey	Modified GETSWITCH to test PAUSE_
   16                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   17                   *  2 Jan 89	-RJ		Added GETINPUT, which you must call b
   18                   *				GETJOY and/or GETSWITCH.
   19                   * Mid 88	=RJ Mical=	Created this file!
   20                   * 
   21                   * ====================================================
   22                   
   23                   
   24                   
   25                   	#MACRO GETJOY
   26 MACRO             	  LDA JOYSTICK
   27                   	#ENDMACRO
   28                   
   29                   
   30                   
   31                   	#MACRO GETSWITCH
   32 MACRO             	  LDA SWITCHES
   33                   	#ENDMACRO
   34                   
   35                   
   36                   
   85                   	.in 6502:macros/handymath.mac
    1                   
    2                   * === handymath.mac ==================================
    3                   *
    4                   * Handy Math Macros  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1988, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 9-Feb-90	SHL		Removed Apple emulation compatibility
   12                   *				Removed all references to HANDYMATH
   13                   * 2 Jan 89	-RJ		Changed HANDYMATH so that it must be d
   14                   *				0 = Handy hardware exists, so use it
   15                   *				1 = Use Handy math software
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   38
                        6502:macros/handymath.mac       16:35:31  

   16                   *				2 = Use math software with fast fat multiply
   17                   * 30-Dec-88	=RJ Mical=	Changed define throughout file 
   18                   *				HANDYMATH rather than HANDYIO to be defined
   19                   *				to use Handy math hardware or fake software
   20                   * Late 88	=RJ Mical=	Created this file!
   21                   *
   22                   * ====================================================
   23                   
   24                   
   25                   * The WAITMATH macro is used if you don't have anythin
   26                   * Suzy is executing your math.  You must wait for Suzy
   27                   * reading the results, but you don't have to wait if y
   28                   * else to do in the meanwhile.
   29                   	#MACRO WAITMATH
   30 MACRO             ??0	.= *
   31 MACRO             	BIT SPRSYS
   32 MACRO             	BMI ??0
   33                   	#ENDM
   34                   
   35                   
   36                   * If you are doing multiply-and-accumulate, you need t
   37                   * to some known state.  If you want the accumulator se
   38                   * the CLEARACCUM macro.  This macro is good because it
   39                   * the autoreset math register scheme when your code is
   40                   	#MACRO CLEARACCUM
   41 MACRO             	STZ MATHK
   42 MACRO             	STZ MATHM
   43                   	#ENDM
   44                   
   45                   
   46                   
   86                   
   87                   	.in cartdefs.i
    1                   
    2                   *****************************************
    3                   *                                       *
    4                   * CARTDEFS.I                            *
    5                   *                                       *
    6                   * ROM cart layout description			*
    7                   *                                       *
    8                   *****************************************
    9                   
   10                   
   11      019A         ROM_HEADER_SIZE     .EQ 410
   12                   
   13                   
   14                   * file number definitions
   15                   
   16      0002         FIRST_FONT_FILE	.eq 2
   17      0000         LILFONT			.eq 0
   18      0001         PLAINFONT		.eq 1
   19                   
   20      0004         FIRST_SOUND_FILE	.eq 4
   21      0005         NUMSOUNDS			.eq 5
   22                   
   23                   * standard rj cart definitions
   24                   
   25      0000         ROMDIR_PAGE         .EQU    0   ; This field is requir
   26      0001         ROMDIR_OFFSET       .EQU    1   ; This field is requir
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   39
                        cartdefs.i                      16:35:31  

   27      0003         ROMDIR_FLAG         .EQU    3
   28      0004         ROMDIR_DEST         .EQU    4
   29      0006         ROMDIR_SIZE         .EQU    6   ; This field is requir
   30      0008         ROMDIR_ENTRY_SIZE   .EQU    8   ; This field is requir
   31                   
   32                   
   33                   * The ROMFILE_ALIGN value is used to define the byte b
   34                   * file's first byte will be aligned.   This constant m
   35                   * must have a reasonable power-of-2 value (such as 1, 
   36      0001         ROMFILE_ALIGN       .EQU    1
   37                   
   38                   
   39                   * Edit this value as needed to declare the size of you
   40      0000         ROMSIZE         .EQU    $100*1024
   41                   
   42                   
   43                   * If you don't want a file directory in your ROM and y
   44                   * using the CART file system, you should define the RO
   45                   * ROM_NODIR is defined, the file system support code w
   46                   * CART system is assembled and HandyROM will not add a
   47                   ; ROM_NODIR
   48                   
   49                   
   50                   * This value is used by the ROM loader when blanking t
   51                   * color.  This value is written to all of the GREEN an
   52                   ;ROM_SCREENBLANK_VALUE  .EQU    $F3 ; Clear to blue-gr
   53      0000         ROM_SCREENBLANK_VALUE   .EQU    $00 ; Clear to black
   54                   
   55                   
   56                   * Edit this value as needed to declare the number of p
   57                   * You should never need to change this value!
   58      0100         ROMPAGECOUNT        .EQU    256
   59                   
   60                   
   61                   
   62                   * ----------------------------------------------------
   63                   * These constants should not be edited.  You should al
   64                   * be computed based on the values that you've entered 
   65      0400         ROMPAGESIZE     .EQU    ROMSIZE/ROMPAGECOUNT
   66      0000         ROMDIR_FILE0_PAGE   .EQU    ROM_HEADER_SIZE/ROMPAGESIZ
   67      019A         ROMDIR_FILE0_OFFSET .EQU    ROM_HEADER_SIZE-{ROMDIR_FI
   68      01A2         ROMDIR_FILE1_LOC    .EQU    ROM_HEADER_SIZE+ROMDIR_ENT
   69      0000         ROMDIR_FILE1_PAGE   .EQU    ROMDIR_FILE1_LOC/ROMPAGESI
   70      01A2         ROMDIR_FILE1_OFFSET .EQU    ROMDIR_FILE1_LOC-{ROMDIR_F
   71                   * ----------------------------------------------------
   72                   
   88                   
   89      000B         FONT_TYPE	   .eq HPR_UPPER+HPR_DIGIT+HPR_PUNC
   90                   
   91                   	HPR_CHARSET
    1      FALSE        	  #IF {FONT_TYPE&HPR_OTHER} != 0
   63                 + 	  #ELSE 
   64      TRUE       + 	    #IF {FONT_TYPE&HPR_PUNC} != 0
   65      FALSE        	      #IF {FONT_TYPE&HPR_LOWER} != 0
   79                 + 	      #ELSE
   80      TRUE       + 	        #IF {FONT_TYPE&HPR_UPPER} != 0
   81      TRUE       + 	          #IF {FONT_TYPE&HPR_DIGIT} != 0
   82                 + 	            .CS 6502:fonts/cset_0b.src
   83                   	          #ELSE
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   40
                        digidemo.src                    16:35:31  

   85                 + 	          #ENDIF
   86                   	        #ELSE
   92                 + 	        #ENDIF
   93                 + 	      #ENDIF
   94                   	    #ELSE
  126                 + 	    #ENDIF
  127                 + 	  #ENDIF
  128                 + 
   92                   
   93                   
   94                   * ----------------------------------------------------
   95                   
   96                   	BEGIN_ZPAGE
    1      FFFE       + TEMPORG	  .= *
    2 FFFE:           + 	  .ORG NEXTZPG
    3                 + 
   97                   
   98 0006:             samplenum		.ds 1
   99 0007:             samplerequest	.ds 1
  100 0008:             joystick		.ds 1
  101 0009:             lastjoy			.ds 1
  102 000A:             switch			.ds 1
  103 000B:             lastswitch		.ds 1
  104 000C:             fontptr			.ds 2
  105 000E:             pausestate		.ds 1
  106 000F:             timersave		.ds 1
  107 0010:             numfonts		.ds 1
  108 0011:             panval			.ds 1
  109 0012:             slider			.ds 1
  110 0013:             fontwidth		.ds 1
  111                   
  112                   	END_ZPAGE
    1      0014       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 0014:           + 	  .ORG TEMPORG
    6                 + 
  113                   
  114                   
  115                   * ----------------------------------------------------
  116                   
  117                   
  118 FFFE:             	.or $400
  119                   
  120 0400:             main
  121      FALSE        	#ifdef DEBUG
  123                   	#endif
  124                   
  125 0400:78           	SEI
  126 0401:D8           	cld
  127                   	INITSYS
    1 0402:A9 0D      + 	LDA #DISP_COLOR+DISP_FOURBIT+DMA_ENABLE
    2 0404:8D ** **   + 	STA DISPCTL_RAM
    3 0407:A9 08      + 	LDA #LEFTHAND		
    4 0409:8D ** **   + 	STA SPRSYS_RAM
    5 040C:8D 92 FC   + 	STA SPRSYS
    6 040F:A9 08      + 	LDA #VECTOR_SPACE	
    7 0411:8D F9 FF   + 	STA MAPCTL
    8      FALSE         #IFDEF RAMCART_USER
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   41
                        digidemo.src                    16:35:31  

   10                 +  #ELSE
   11 0414:A9 0A      + 	LDA #CART_ADDR_DATA+RESTLESS
   12                 +  #ENDIF
   13 0416:8D ** **   + 	STA IODAT_RAM
   14 0419:8D 8B FD   + 	STA IODAT
   15 041C:8D ** **   + 	STA IODIR_RAM
   16 041F:8D 8A FD   + 	STA IODIR
   17 0422:A9 04      + 	LDA #TXOPEN	
   18 0424:8D 8C FD   + 	STA SERCTL	
   19      FALSE        	  #IFDEF AUTO_TIMEOUT_USER
   22                 + 	  #ENDIF
   23                 + 
  128                   
  129 0427:             restart
  130 0427:A2 FF        	ldx #$ff
  131 0429:9A           	txs
  132                   
  133                   	INITINT interrupts
    1      ****       + sysIntTable	.EQ interrupts
    2 042A:A9 **      + 		LDA #<UserIntHandler
    3 042C:8D FE FF   + 		STA CPU_IRQ
    4 042F:A9 **      + 		LDA #>UserIntHandler
    5 0431:8D FF FF   + 		STA CPU_IRQ+1
    6 0434:A2 0F      + 		LDX #8*2-1
    7      0436       + INITINT.0007	.= *
    8 0436:A9 **      + 		  LDA #>IntReturn
    9 0438:9D ** **   + 		  STA interrupts,X
   10 043B:CA         + 		  DEX
   11 043C:A9 **      + 		  LDA #<IntReturn
   12 043E:9D ** **   + 		  STA interrupts,X
   13 0441:CA         + 		  DEX
   14 0442:10 F2      + 		 BPL INITINT.0007
   15      FALSE        	  #IFDEF BRK_USER
   20                 + 	  #ENDIF 
   21      FALSE        	  #IFDEF SERIALPORT_USER
   26                 + 	  #ENDIF
   27                 + 
  134 0444:20 ** **     	jsr init_sampler	; call init_sampler while protected 
  135                   
  136      TRUE         	#IFDEF HSFX_ACTIVE
  137                   	 INITHSFX
    1      FALSE        		#IFDEF HANDYMUSIC
   10                 + 		#ELSE
   11 0447:20 ** **   + 		  JSR	InitHSFX
   12                 + 		#ENDIF
   13                 + 
  138                   	#ENDIF
  139                   
  140                   	SETDISP_60
    1                   		SETDISP	$9E,$98,$68,$9F,$29
    1 044A:A9 9E      + 		LDA	#$9E
    2 044C:8D 00 FD   + 		STA	HCOUNT+TIM_BACKUP
    3      FALSE        	#IFDEF EOL_USER
    5                 + 	#ELSE
    6 044F:A9 18      + 		lda #$98&%01111111
    7                 + 	#ENDIF
    8 0451:8D 01 FD   + 		STA	HCOUNT+TIM_CONTROLA
    9 0454:A9 68      + 		LDA	#$68
   10 0456:8D 08 FD   + 		STA	VCOUNT+TIM_BACKUP
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   42
                        digidemo.src                    16:35:31  

   11 0459:A9 9F      + 		lda #$9F|%10000000
   12 045B:8D 09 FD   + 		STA	VCOUNT+TIM_CONTROLA
   13 045E:A9 29      + 		LDA	#$29
   14 0460:8D 93 FD   + 		STA	PBKUP
   15      FALSE        	#IFNDEF	EOF_USER
   17                 + 	#ENDIF
   18                 + 
    2                 + 
  141                   	INITEOF
    1 0463:20 ** **   + 		JSR	InitEOF
    2                 + 
  142                   	INITSUZY
    1 0466:A9 F3      + 		LDA	#$F3
    2 0468:8D 83 FC   + 		STA	SPRINIT
    3 046B:A9 7F      + 		LDA	#$7F
    4 046D:8D 28 FC   + 		STA	HSIZOFFL
    5 0470:8D 2A FC   + 		STA	VSIZOFFL
    6 0473:A9 01      + 		LDA	#$01
    7 0475:8D 90 FC   + 		STA	SUZYBUSEN
    8 0478:9C 90 FD   + 		STZ	SDONEACK
    9                 + 
  143                   	SETDBUF dispbuf0,dispbuf1
    1 047B:A9 **      + 		LDA	#<dispbuf0
    2 047D:8D ** **   + 		STA	RenderBuffer
    3 0480:A9 **      + 		LDA	#>dispbuf0
    4 0482:8D ** **   + 		STA	RenderBuffer+1
    5 0485:A9 **      + 		LDA	#<dispbuf1
    6 0487:8D ** **   + 		STA	DisplayBuffer
    7 048A:A9 **      + 		LDA	#>dispbuf1
    8 048C:8D ** **   + 		STA	DisplayBuffer+1
    9 048F:9C ** **   + 		STZ	DisplayFlags
   10                 + 
  144                   
  145 0492:AD ** **     	lda SPRSYS_RAM
  146 0495:09 20        	ora #NO_COLLIDE
  147 0497:8D ** **     	sta SPRSYS_RAM
  148 049A:8D 92 FC     	sta SPRSYS
  149                   
  150 049D:A9 30        	lda #LEFTEDGE
  151 049F:8D 04 FC     	sta HOFFL
  152                   
  153 04A2:A9 4D        	lda #TOPEDGE
  154 04A4:8D 06 FC     	sta VOFFL
  155                   
  156 04A7:20 ** **     	jsr init_my_stereo
  157 04AA:A9 1F        	lda #31
  158 04AC:85 11        	sta panval
  159                   
  160 04AE:A2 1F        	ldx #31			; set up palette
  161 04B0:BD ** **     .0	  lda palette,x
  162 04B3:9D A0 FD     	  sta GREEN0,x
  163 04B6:CA           	  dex
  164 04B7:10 F7        	 bpl .0
  165                   
  166 04B9:64 06        	stz samplenum
  167 04BB:A9 FF        	lda #$ff
  168 04BD:85 09        	sta lastjoy
  169 04BF:64 07        	stz samplerequest
  170 04C1:64 12        	stz slider
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   43
                                                        16:35:31  

  171                   
  172 04C3:A2 05        	ldx #NUMSOUNDS
  173 04C5:BD ** **     .1	lda defaultrates-1,x
  174 04C8:9D ** **     	sta samplerates-1,x
  175 04CB:CA           	dex
  176 04CC:D0 F7        	bne .1
  177                   
  178 04CE:64 0E        	stz pausestate
  179                   
  180 04D0:64 10        	stz numfonts
  181 04D2:A2 **        	ldx #<lilfont	 	; load font files
  182 04D4:A0 **        	ldy #>lilfont
  183 04D6:A9 02        	lda #FIRST_FONT_FILE+LILFONT
  184 04D8:20 ** **     	jsr load_font
  185                   
  186 04DB:A2 **        	ldx #<plainfont
  187 04DD:A0 **        	ldy #>plainfont
  188 04DF:A9 03        	lda #FIRST_FONT_FILE+PLAINFONT
  189 04E1:20 ** **     	jsr load_font
  190                   
  191 04E4:A9 **        	lda #<helptext
  192 04E6:85 00        	sta sysptr
  193 04E8:A9 **        	lda #>helptext
  194 04EA:85 01        	sta sysptr+1
  195 04EC:A2 **        	ldx #<helpbuffer
  196 04EE:A0 **        	ldy #>helpbuffer
  197 04F0:20 ** **     	jsr create_sprite_text
  198                   
  199 04F3:A9 **        	lda #<slidertext
  200 04F5:85 00        	sta sysptr
  201 04F7:A9 **        	lda #>slidertext
  202 04F9:85 01        	sta sysptr+1
  203 04FB:A2 **        	ldx #<sliderbuffer
  204 04FD:A0 **        	ldy #>sliderbuffer
  205 04FF:20 ** **     	jsr create_sprite_text
  206                   
  207 0502:A9 **        	lda #<ratetext
  208 0504:85 00        	sta sysptr
  209 0506:A9 **        	lda #>ratetext
  210 0508:85 01        	sta sysptr+1
  211 050A:A2 **        	ldx #<rbuf
  212 050C:A0 **        	ldy #>rbuf
  213 050E:20 ** **     	jsr create_sprite_text
  214                   
  215 0511:A2 00        	ldx #0
  216 0513:18           .2	clc
  217 0514:BD ** **     	lda stextoffsets,x
  218 0517:69 **        	adc #<stbase
  219 0519:85 00        	sta sysptr
  220 051B:A9 00        	lda #0
  221 051D:69 **        	adc #>stbase
  222 051F:85 01        	sta sysptr+1
  223 0521:BC ** **     	ldy sscabs_h,x
  224 0524:BD ** **     	lda sscabs_l,x
  225 0527:DA           	phx
  226 0528:AA           	tax
  227 0529:20 ** **     	jsr create_sprite_text
  228 052C:FA           	plx
  229 052D:E8           	inx
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   44
                                                        16:35:31  

  230 052E:E0 06        	cpx #NUMSOUNDS+1
  231 0530:D0 E1        	bne .2
  232                   	
  233 0532:58           	CLI
  234                   
  235 0533:             loop
  236                   
  237                   	WAITEOF
    1 0533:A9 **      + 		LDA	#DISPLAY_EOFFLAG
    2 0535:1C ** **   + 		TRB	DisplayFlags
    3      0538       + systemp		.=	*
    4 0538:2C ** **   + 		BIT	DisplayFlags
    5 053B:F0 FB      + 		BEQ	systemp
    6                 + 
  238 053D:AD ** **     	lda DisplayFrameCount
  239 0540:9C ** **     	stz DisplayFrameCount
  240 0543:18           	clc
  241 0544:69 02        	adc #"0"
  242 0546:8D ** **     	sta rate
  243                   
  244 0549:20 ** **     	jsr draw_screen
  245                   
  246                   	DBUF_DISPLAY
    1 054C:08         + 		PHP
    2 054D:78         + 		SEI
    3 054E:AD ** **   + 		LDA	RenderBuffer
    4 0551:AE ** **   + 		ldx	DisplayBuffer
    5 0554:8D ** **   + 		STA	DisplayBuffer
    6 0557:8E ** **   + 		stx	RenderBuffer
    7 055A:AD ** **   + 		LDA	RenderBuffer+1
    8 055D:AE ** **   + 		ldx	DisplayBuffer+1
    9 0560:8D ** **   + 		STA	DisplayBuffer+1
   10 0563:8E ** **   + 		stx	RenderBuffer+1
   11 0566:28         + 		PLP
   12                 + 
  247 0567:20 ** **     	jsr read_controls
  248 056A:20 ** **     	jsr set_sliders
  249                   
  250 056D:24 0E        	bit pausestate
  251 056F:30 C2        	bmi loop
  252 0571:20 ** **     	jsr play_sample
  253 0574:80 BD        	bra loop
  254                   
  255                   
  256                   * ----------------------------------------------------
  257                   
  258                   
  259 0576:             read_controls
  260                   
  261                   	GETSWITCH
    1 0576:AD B1 FC   + 	  LDA SWITCHES
    2                 + 
  262 0579:85 0A        	sta switch
  263                   	GETJOY
    1 057B:AD B0 FC   + 	  LDA JOYSTICK
    2                 + 
  264 057E:85 08        	sta joystick
  265                   
  266 0580:20 ** **     	jsr pause_flip_restart	; standard option buttons
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   45
                                                        16:35:31  

  267                   
  268 0583:24 0E        	bit pausestate
  269 0585:30 **        	bmi .f
  270                   
  271 0587:A5 08        .1	lda joystick
  272 0589:89 02        	bit #INNER_BUTTON
  273 058B:F0 **        	beq .2
  274 058D:89 10        	bit #JOY_LEFT
  275 058F:F0 **        	beq .3
  276 0591:20 ** **     	  jsr slider_down
  277 0594:80 **        	  bra .f
  278 0596:89 20        .3	bit #JOY_RIGHT
  279 0598:F0 **        	beq .f
  280 059A:20 ** **     	  jsr slider_up
  281 059D:80 **        	  bra .f
  282                   
  283 059F:A5 08        .2	lda joystick
  284 05A1:45 09        	eor lastjoy
  285 05A3:25 08        	and joystick
  286                   
  287 05A5:89 10        	bit #JOY_LEFT
  288 05A7:F0 **        	beq .4
  289 05A9:A5 06        	  lda samplenum
  290 05AB:D0 **        	  bne .41
  291 05AD:A9 05        	   lda #NUMSOUNDS
  292 05AF:3A           .41	  dec
  293 05B0:85 06        	  sta samplenum
  294 05B2:80 **        	bra .f
  295 05B4:89 20        .4	bit #JOY_RIGHT
  296 05B6:F0 **        	beq .5
  297 05B8:A5 06        	  lda samplenum
  298 05BA:1A           	  inc
  299 05BB:C9 05        	  cmp #NUMSOUNDS
  300 05BD:90 **        	  bcc .51
  301 05BF:A9 00        	    lda #0
  302 05C1:85 06        .51	  sta samplenum
  303 05C3:80 **        	bra .f
  304                   
  305 05C5:89 40        .5	bit #JOY_UP
  306 05C7:F0 **        	beq .6
  307 05C9:C6 12        	  dec slider
  308 05CB:10 **        	  bpl .f
  309 05CD:A9 02        	  lda #2
  310 05CF:85 12        	  sta slider
  311 05D1:80 **        	bra .f
  312                   
  313 05D3:89 80        .6	bit #JOY_DOWN
  314 05D5:F0 **        	beq .f
  315 05D7:A5 12        	  lda slider
  316 05D9:1A           	  inc
  317 05DA:C9 03        	  cmp #3
  318 05DC:D0 **        	  bne .71
  319 05DE:A9 00        	  lda #0
  320 05E0:85 12        .71	  sta slider
  321                   	;bra .f
  322                   
  323 05E2:A5 08        .f	lda joystick
  324 05E4:45 09        	eor lastjoy
  325 05E6:25 08        	and joystick
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   46
                                                        16:35:31  

  326 05E8:89 01        	bit #OUTER_BUTTON
  327 05EA:F0 **        	beq .f1
  328 05EC:C6 07        	  dec samplerequest
  329 05EE:A5 08        .f1	lda joystick
  330 05F0:85 09        	sta lastjoy
  331 05F2:A5 0A        	lda switch
  332 05F4:85 0B        	sta lastswitch
  333                   
  334 05F6:60           	rts
  335                   
  336                   
  337 05F7:             set_sliders
  338                   
  339 05F7:A9 01        	lda #" "
  340 05F9:8D ** **     	sta vstext
  341 05FC:8D ** **     	sta rstext
  342 05FF:8D ** **     	sta pstext
  343 0602:A9 2F        	lda #";"
  344 0604:A4 12        	ldy slider
  345 0606:BE ** **     	ldx sltextoffsets,y
  346 0609:9D ** **     	sta slbase,x
  347                   
  348      TRUE         	#ifdef VARIVOLUME
  349 060C:AD ** **     	 lda volume
  350                   	#else
  352                   	#endif
  353 060F:4A           	lsr
  354 0610:4A           	lsr
  355 0611:18           	clc
  356 0612:69 74        	adc #LEFTEDGE+4+8*8
  357 0614:8D ** **     	sta volumeslider+SCB_HPOS
  358                   
  359 0617:A4 06        	ldy samplenum
  360 0619:B9 ** **     	lda samplerates,y
  361 061C:49 FF        	eor #$ff
  362 061E:1A           	inc
  363 061F:4A           	lsr
  364 0620:4A           	lsr
  365 0621:18           	clc
  366 0622:69 74        	adc #LEFTEDGE+4+8*8
  367 0624:8D ** **     	sta rateslider+SCB_HPOS
  368                   
  369                   	; panning
  370                   
  371 0627:A5 11        	lda panval
  372 0629:AE ** **     	ldx digichannel
  373 062C:20 ** **     	jsr set_stereo_pan
  374                   
  375 062F:A5 11        	lda panval
  376 0631:18           	clc
  377 0632:69 74        	adc #LEFTEDGE+4+8*8
  378 0634:8D ** **     	sta panslider+SCB_HPOS
  379                   
  380 0637:60           	rts
  381                   
  382                   
  383 0638:             slider_down
  384 0638:A5 12        	  lda slider
  385 063A:0A           	  asl
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   47
                                                        16:35:31  

  386 063B:AA           	  tax
  387 063C:7C ** **     	  jmp (.1,x)
  388 063F:00 ** ** **  .1	.wo voldown, ratedown, pandown
  388      ** **        
  389                   
  390 0645:             voldown
  391      TRUE         	#ifdef VARIVOLUME
  392 0645:AD ** **     	  lda volume
  393 0648:F0 **        	  beq .1
  394 064A:CE ** **     	  dec volume
  395 064D:20 ** **     .1	  jsr set_volume
  396                   	#endif
  397 0650:60           	rts
  398                   
  399 0651:             ratedown
  400 0651:A4 06        	ldy samplenum
  401 0653:B9 ** **     	lda samplerates,y
  402 0656:C9 FF        	cmp #MAXRELOAD
  403 0658:F0 **        	beq .1
  404 065A:1A           	inc
  405 065B:80 **        .1	bra setrate
  406                   
  407 065D:             pandown
  408 065D:A5 11        	lda panval
  409 065F:F0 **        	beq .1
  410 0661:3A           	dec
  411 0662:85 11        	sta panval
  412 0664:60           .1	rts
  413                   
  414                   
  415 0665:             slider_up
  416 0665:A5 12        	  lda slider
  417 0667:0A           	  asl
  418 0668:AA           	  tax
  419 0669:7C ** **     	  jmp (.1,x)
  420 066C:00 ** ** **  .1	.wo volup, rateup, panup
  420      ** **        
  421                   
  422 0672:             volup
  423      TRUE         	#ifdef VARIVOLUME
  424 0672:AD ** **     	  lda volume
  425 0675:1A           	  inc
  426 0676:F0 **        	  beq .1
  427 0678:8D ** **     	  sta volume
  428 067B:20 ** **     .1	  jsr set_volume
  429                   	#endif
  430 067E:60           	rts
  431                   
  432 067F:             panup
  433 067F:A5 11        	lda panval
  434 0681:C9 3F        	cmp #63
  435 0683:F0 **        	beq .1
  436 0685:1A           	inc
  437 0686:85 11        	sta panval
  438 0688:60           .1	rts
  439                   
  440 0689:             rateup
  441 0689:A4 06        	ldy samplenum
  442 068B:B9 ** **     	lda samplerates,y
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   48
                                                        16:35:31  

  443 068E:C9 41        	cmp #MINRELOAD
  444 0690:F0 **        	beq setrate
  445 0692:3A           	dec
  446                   
  447                   * fall in ...
  448                   
  449 0693:             setrate
  450 0693:99 ** **     	sta samplerates,y
  451 0696:78           	sei
  452 0697:8D 14 FD     	sta TIMER0+DIGITIMER*4+TIM_BACKUP
  453 069A:58           	cli
  454 069B:60           	rts
  455                   
  456                   
  457 069C:             pause_flip_restart
  458                   
  459 069C:A9 01        	lda #PAUSE_SWITCH
  460 069E:24 0A        	bit switch
  461 06A0:F0 **        	beq .1
  462 06A2:24 0B        	bit lastswitch
  463 06A4:D0 **        	bne .2
  464 06A6:20 ** **     	  jsr toggle_pause_state
  465 06A9:A9 04        .2	lda #OPTION2_BUTTON
  466 06AB:20 ** **     	jsr check_option
  467 06AE:90 **        	bcc .3
  468                   	  FLIP
    1 06B0:AD ** **   + 		LDA	DISPCTL_RAM
    2 06B3:49 02      + 		EOR	#DISP_FLIP
    3 06B5:8D ** **   + 		STA	DISPCTL_RAM
    4 06B8:AD ** **   + 		LDA	SPRSYS_RAM
    5 06BB:49 08      + 		EOR	#LEFTHAND
    6 06BD:8D ** **   + 		STA	SPRSYS_RAM
    7 06C0:8D 92 FC   + 		STA	SPRSYS
    8                 + 
  469 06C3:A9 08        .3	lda #OPTION1_BUTTON
  470 06C5:20 ** **     	jsr check_option
  471 06C8:90 **        	bcc .1
  472 06CA:4C 27 04     	  jmp restart
  473 06CD:60           .1	rts
  474                   
  475                   
  476 06CE:             check_option
  477 06CE:18           	clc
  478 06CF:24 08        	bit joystick
  479 06D1:F0 **        	beq .1
  480 06D3:24 09        	bit lastjoy
  481 06D5:F0 **        	beq .2
  482 06D7:A5 0B        	lda lastswitch
  483 06D9:89 01        	bit #PAUSE_SWITCH
  484 06DB:D0 **        	bne .1
  485 06DD:38           .2	sec
  486 06DE:60           .1	rts
  487                   
  488                   
  489 06DF:             toggle_pause_state
  490 06DF:78           	sei
  491 06E0:A5 0E        	lda pausestate
  492 06E2:49 FF        	eor #$ff
  493 06E4:85 0E        	sta pausestate
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   49
                                                        16:35:31  

  494 06E6:30 **        	bmi .1
  495 06E8:A5 0F        	  lda timersave			  				; let's get unpaused
  496 06EA:8D 15 FD     	  sta TIMER0+DIGITIMER*4+TIM_CONTROLA
  497 06ED:80 **        	bra .2
  498 06EF:AD 15 FD     .1	  lda TIMER0+DIGITIMER*4+TIM_CONTROLA	; let's get p
  499 06F2:9C 15 FD     	  stz TIMER0+DIGITIMER*4+TIM_CONTROLA
  500 06F5:85 0F        	  sta timersave
  501 06F7:58           .2	cli
  502 06F8:60           	rts
  503                   
  504                   
  505                   * 
  506 06F9:             play_sample
  507                   * 
  508                   * If a sample is playing when we want to start a new o
  509                   * politely request that the sample be stopped, then 
  510                   * wait till we detect that it has before launching the
  511                   * new one:
  512                   * 
  513 06F9:24 07        	bit samplerequest
  514 06FB:10 **        	bpl .1
  515 06FD:2C ** **     	bit soundactive
  516 0700:30 **        	bmi .2
  517 0702:64 07        	  stz samplerequest
  518 0704:A4 06        	  ldy samplenum	  
  519 0706:BE ** **     	  ldx samplerates,y
  520 0709:98           	  tya
  521 070A:18           	  clc
  522 070B:69 04        	  adc #FIRST_SOUND_FILE
  523 070D:A0 80        	  ldy #128
  524 070F:4C ** **     	  jmp launch_sound
  525 0712:A9 FF        .2	lda #$ff
  526 0714:8D ** **     	sta stopsound
  527 0717:60           .1	rts
  528                   
  529                   
  530                   * ----------------------------------------------------
  531                   
  532                   
  533 0718:             draw_screen
  534                   
  535 0718:AD ** **     	lda RenderBuffer
  536 071B:8D 08 FC     	sta VIDBASL
  537 071E:AD ** **     	lda RenderBuffer+1
  538 0721:8D 09 FC     	sta VIDBASH
  539                   
  540 0724:A2 **        	ldx #<screenerase
  541 0726:A9 **        	lda #>screenerase
  542 0728:20 ** **     	jsr resprite
  543                   
  544 072B:24 0E        	bit pausestate
  545 072D:10 **        	bpl .1
  546                   
  547 072F:A0 00        	ldy #0
  548 0731:80 **        	bra .2
  549                   
  550 0733:20 ** **     .1	jsr draw_glider
  551 0736:A4 06        	ldy samplenum			; show sample name
  552 0738:C8           	iny
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   50
                                                        16:35:31  

  553 0739:B9 ** **     .2	lda sscabs_l,y
  554 073C:AA           	tax
  555 073D:B9 ** **     	lda sscabs_h,y
  556 0740:20 ** **     	jsr resprite
  557                   
  558 0743:A9 **        	lda #<ratetext			; show rate text
  559 0745:85 00        	sta sysptr
  560 0747:A9 **        	lda #>ratetext
  561 0749:85 01        	sta sysptr+1
  562 074B:A2 **        	ldx #<rbuf
  563 074D:A0 **        	ldy #>rbuf
  564 074F:20 ** **     	jsr set_sprite_text
  565                   
  566 0752:A9 **        	lda #<slidertext
  567 0754:85 00        	sta sysptr
  568 0756:A9 **        	lda #>slidertext
  569 0758:85 01        	sta sysptr+1
  570 075A:A2 **        	ldx #<sliderbuffer
  571 075C:A0 **        	ldy #>sliderbuffer
  572 075E:20 ** **     	jsr set_sprite_text
  573                   
  574 0761:A2 **        	ldx #<sliderbuffer
  575 0763:A9 **        	lda #>sliderbuffer
  576 0765:20 ** **     	jsr resprite
  577                   
  578 0768:A2 **        	ldx #<helpbuffer
  579 076A:A9 **        	lda #>helpbuffer
  580 076C:4C ** **     	jmp resprite
  581                   	;jsr resprite
  582                   	;rts
  583                   
  584 076F:             draw_glider
  585                   
  586 076F:AD ** **     	lda glider+SCB_CTRL0
  587 0772:89 20        	bit #HFLIP
  588 0774:D0 **        	bne .1
  589 0776:EE ** **     	inc glider+SCB_HPOS
  590 0779:AD ** **     	lda glider+SCB_HPOS
  591 077C:C9 D0        	cmp #LEFTEDGE+SCREENWIDTH
  592 077E:90 **        	bcc .2
  593 0780:A9 20        	lda #HFLIP
  594 0782:0C ** **     	tsb glider+SCB_CTRL0
  595 0785:80 **        	bra .2
  596                   
  597 0787:CE ** **     .1	dec glider+SCB_HPOS
  598 078A:AD ** **     	lda glider+SCB_HPOS
  599 078D:C9 30        	cmp #LEFTEDGE
  600 078F:B0 **        	bcs .2
  601 0791:A9 20        	lda #HFLIP
  602 0793:1C ** **     	trb glider+SCB_CTRL0
  603                   
  604 0796:A2 **        .2	ldx #<glider
  605 0798:A9 **        	lda #>glider
  606                   	;jmp resprite
  607                   	;jsr resprite
  608                   	;rts
  609                   
  610                   * fall in ...
  611                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   51
                                                        16:35:31  

  612 079A:             resprite
  613 079A:8E 10 FC     	stx SCBNEXTL
  614 079D:8D 11 FC     	sta SCBNEXTH
  615 07A0:9C 90 FD     	stz SDONEACK
  616 07A3:A9 01        	lda #$01
  617 07A5:8D 91 FC     	sta SPRGO
  618                   	WAITSUZY
    1      07A8       + WAITSUZY.00131	.= *
    2 07A8:A9 01      + 		lda #SUZY_SPACE
    3 07AA:0C F9 FF   + 		tsb MAPCTL		
    4 07AD:9C 91 FD   + 		STZ	CPUSLEEP
    5 07B0:1C F9 FF   + 		trb MAPCTL		
    6 07B3:AD 92 FC   + 		LDA	SPRSYS		
    7 07B6:4A         + 		LSR	A		
    8 07B7:B0 EF      + 		BCS	WAITSUZY.00131		
    9 07B9:9C 90 FD   + 		STZ	SDONEACK
   10                 + 
  619                   
  620 07BC:60           	rts
  621                   
  622                   
  623                   * ----------------------------------------------------
  624                   
  625                   
  626                   * 
  627                   * stereo routines
  628                   * 
  629                   
  630                   * 
  631 07BD:             init_my_stereo
  632                   * 
  633                   * Entry:		none
  634                   * Exit:			the stereo hardware is initialized
  635                   * 
  636 07BD:9C 50 FD     	stz MSTEREO		; turn on all channels
  637 07C0:A9 FF        	lda #255
  638 07C2:8D 44 FD     	sta MPAN		; enable panning on all channels
  639 07C5:8D 40 FD     	sta ATTENREG0	; set attenuation to full on both sides
  640 07C8:8D 41 FD     	sta ATTENREG1	; for all channels
  641 07CB:8D 42 FD     	sta ATTENREG2
  642 07CE:8D 43 FD     	sta ATTENREG3
  643                   
  644 07D1:60           	rts
  645                   
  646                   
  647                   * 
  648 07D2:             set_stereo_pan
  649                   * 
  650                   * Entry:		a		-		pan value (0..63)
  651                   * 				x		-		audio channel (0..3)
  652                   * 
  653                   * this routine demonstrates one method of panning a so
  654                   * it is table driven to get equal total volume levels 
  655                   * all pan positions, and equal sized steps.
  656                   * 
  657                   * 
  658 07D2:48           	pha
  659 07D3:49 3F        	eor #63
  660 07D5:A8           	tay
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   52
                                                        16:35:31  

  661 07D6:B9 ** **     	lda .1,y
  662 07D9:0A           	asl
  663 07DA:0A           	asl
  664 07DB:0A           	asl
  665 07DC:0A           	asl
  666 07DD:7A           	ply
  667 07DE:19 ** **     	ora .1,y
  668 07E1:9D 40 FD     	sta ATTENREG0,x
  669 07E4:60           	rts
  670                   
  671                   ; square root table
  672 07E5:01 02 02 03  .1	.by  1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8
  672      04 04 05 05  
  672      05 06 06 06  
  672      07 07 07 08  
  672                   
  673 07F5:08 08 08 08  	.by  8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,10,10,10,10,10
  673      08 09 09 09  
  673      09 09 09 0A  
  673      0A 0A 0A 0A  
  673                   
  674 0805:0B 0B 0B 0B  	.by 11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13
  674      0C 0C 0C 0C  
  674      0C 0C 0D 0D  
  674      0D 0D 0D 0D  
  674                   
  675 0815:0D 0E 0E 0E  	.by 13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15
  675      0E 0E 0E 0E  
  675      0E 0F 0F 0F  
  675      0F 0F 0F 0F  
  675                   
  676                   
  677                   
  678                   
  679                   * ----------------------------------------------------
  680                   
  681                   * 
  682                   * Standard handy code
  683                   * 
  684                   	.in 6502:src/sysdata.src
    1                   ; Tuesday 27-Mar-90 10:58:04
    2                   * === sysdata.src ====================================
    3                   * 
    4                   * System Data Allocations  --  the 6502 Side of Handy
    5                   * 
    6                   * Copyright (c) 1988,1990 Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   * 
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 27-Mar-90	SHL		Removed BufferAddrL, BufferAddrH
   13                   * 22-Mar-90	SHL		Added INTSET_RAM shadow for IRQs
   14                   * 9-Feb-90	SHL		Removed Apple emulation compatibility
   15                   * 30 May 89	-RJ		Added IODAT_RAM
   16                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   17                   * 20 Apr 89	-RJ		Added IODIR_RAM
   18                   * 19 Apr 89	-RJ		Moved DisplayFrameCount to display.sr
   19                   * 20 Mar 89	-RJ		Added DisplayFrameCount
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   53
                        6502:src/sysdata.src            16:35:31  

   20                   * 13 Feb 89	-RJ		Added DisplayBuffer
   21                   * 26 Jan 88	-RJ		Ended Interruptus
   22                   * 24 Dec 88	-RJ		Added Interruptus
   23                   * 22 Dec 88	-RJ		Added DISPCTL_RAM, RenderBuffer, 
   24                   *				BufferAddrL/H, and DisplayFlags with its defs
   25                   *				Added note about .ORGing to non-zpage
   26                   * Early 88	=RJ Mical=	Created this file!
   27                   * 
   28                   * ====================================================
   29                   
   30                   
   31                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   32                   * 
   33                   * This file should be included before any of the 6502:
   34                   * 
   35                   * Note that you should .ORG to a non-zero page address
   36                   * this file.  This is because this file includes data 
   37                   * don't need to be in zero-page memory.
   38                   * 
   39                   * NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
   40                   
   41                   
   42                   * Here are the declarations of the local copies of wri
   43                   * (and read-doesn't-equal-write registers such as SPRS
   44                   * Whenever you want to make a change to one of the har
   45                   * that's write-only, you should read from this RAM cop
   46                   * and then write the value out to both the RAM copy an
   47 0825:             SPRSYS_RAM	.DS 1
   48 0826:             DISPCTL_RAM	.DS 1
   49 0827:             IODAT_RAM	.DS 1
   50 0828:             IODIR_RAM	.DS 1
   51                   
   52                   
   53                   * Display buffer pointers for use by the system displa
   54 0829:             RenderBuffer	.DS 2
   55 082B:             DisplayBuffer	.DS 2
   56                   
   57                   * Shadow of INTSET used in IRQ handler
   58 082D:             INTSET_RAM	.DS 1
   59                   
   60                   
   61      FALSE        	#IFDEF AUTO_TIMEOUT_USER
   63                   	#ENDIF
   64                   
   65                   
   66                   * The DisplayFlags field is a field that may enjoy mul
   67                   * read-modify-write operations peformed by both interr
   68                   * Because of this, any code must make sure that interr
   69                   * beginning a read-modify-write cycle, or use the TSB/
   70 082E:             DisplayFlags	.DS	1
   71                   * Here's the definitions of DisplayFlags
   72      0080         DISPLAY_EOFFLAG		.EQ $80	; Set every EOF
   73      0040         DISPLAY_EOLFLAG		.EQ $40	; Set every EOL
   74                   
   75                   
   76                   
  685                   	.in 6502:src/sys.src
    1                   ; Tue Sep 18 17:43:25 1990
    2                   * === sys.src ========================================
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   54
                        6502:src/sys.src                16:35:31  

    3                   *
    4                   * General System Source Code  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (c) 1989,1990 Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 28-Mar-90	SHL		IRQ handler quick checks for serial I
   12                   *				if SERIALPORT_USER defined now.
   13                   * 22-Mar-90	SHL		IRQ handler only touches 1 IRQ at a t
   14                   *				Individual handlers need not preserve X and A
   15                   *				IRQ handlers now required to PLX PLA RTI
   16                   *				instead of RTS
   17                   *				Renamed SafeIntRts to IntReturn, which now
   18                   *				does PLX PLA RTI
   19                   * 16-Mar-90	SHL		Modified BRK detect for 1 cycle impro
   20                   *				in the case of IRQ
   21                   * 15-Mar-90	SHL		Provided faster vector to Redeye inte
   22                   *				Serial interrupts now must PLX PLA RTI to
   23                   *				exit.
   24                   * 14-Mar-90	SHL		Added SafeIntRts
   25                   *				INITINT now vectors all IRQS to SafeIntRts
   26                   *				instead of user supplied RTS
   27                   * 26-Feb-90	SHL		Minor code tightening
   28                   * 9-Feb-90	SHL		INITINT is now required before any use
   29                   *				INITEOF, INITEOL or SET_DISPLAY... macros
   30                   *				This file can now be included before user
   31                   *				calls INITINT
   32                   * 7-Feb-90	SHL		Modified BRK_USER to force Howard Brea
   33                   * 31 May 89	-RJ		Added BRK_USER support code to UserIn
   34                   *				Removed InitSys routine
   35                   * 6 Apr 89	=RJ Mical=	Created this file!
   36                   *
   37                   * ====================================================
   38                   
   39                   
   40                   * This code is called whenever a non-NMI interrupt occ
   41                   * interrupt or execution of a software BRK).
   42                   
   43 082F:             UserIntHandler
   44 082F:48           		PHA
   45 0830:DA           		PHX
   46                   
   47      FALSE        	  #IFDEF BRK_USER
   57                   	  #ENDIF ; of #IFDEF BRK_USER
   58                   
   59 0831:             hardInt
   60                   		;------	We had a hardware interrupt.
   61                   		;------	Get the interrupt flags value, reset the bit
   62 0831:AD 81 FD     		LDA INTSET		; This gets the bits
   63                   
   64      FALSE        	  #IFDEF SERIALPORT_USER
   68                   	  #ENDIF
   69                   
   70 0834:8D 2D 08     .02		STA INTSET_RAM
   71                   
   72                   		;------	For least set bit in the interrupt value,
   73                   		;------	vector to the routine
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   55
                        6502:src/sys.src                16:35:31  

   74 0837:A2 00        		LDX #0
   75 0839:A9 01        		lda #1
   76 083B:2C 2D 08     .00		  bit INTSET_RAM
   77 083E:D0 **        		  bne jumpIntTable
   78 0840:E8           		  INX
   79 0841:E8           		  INX
   80 0842:0A           		  asl a
   81 0843:D0 F6        		 bne .00
   82 0845:             IntReturn
   83                   		;------	At end of interrupt processing, restore the
   84                   		;------	registers and return from interrupt
   85                   
   86 0845:FA           		PLX
   87 0846:68           		PLA
   88 0847:40           		RTI
   89                   
   90                   
   91                   
   92                   
   93                   * The above interrupt dispatcher does a JSR to this li
   94                   * This code jumps to the particular handler.  The inte
   95                   * should end with an RTS, which will return control to
   96                   
   97 0848:             jumpIntTable
   98 0848:8D 80 FD     		sta INTRST	; clear interrupt we're processing
   99 084B:7C ** **     		JMP	(sysIntTable,X)
  100                   
  101                   
  102      FALSE        	  #IFDEF BRK_USER
  108                   	  #ENDIF ; of #IFDEF BRK_USER
  109                   
  110                   
  111                   
  686                   	.in 6502:src/cart.src
    1                   ; Wednesday 18-Apr-90 08:45:32
    2                   * === cart.src =======================================
    3                   * 
    4                   * Game Cartridge I/O Routines  --  Handy Software
    5                   * 
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   * 
    9                   * Date		Name		Description
   10                   * ---------	-------------	----------------------------
   11                   * 11-Apr-90	SHL		Code optimized for size and speed
   12                   *				Registers for OpenFile0 and SetCartAddress
   13                   *				arguments changed: A = cartridge page,
   14                   *				X,Y = byte offset into page
   15                   *				SetCartPage now takes argument in A reg
   16                   *				GetDirAddress routine rewritten, returns
   17                   *				arguments as expected for OPENFILE routine
   18                   *				GetDirAddressFast routine removed
   19                   *
   20                   * 26-Feb-90	SHL		Removed all references to WRITECART_U
   21                   *				Minor code tightening
   22                   * 14-Feb-90	SHL		Fixed a horrible error that turns off
   23                   *				during file reads that cross page boundaries
   24                   * 7-Feb-90	SHL		Minor math touch-up work (slightly spe
   25                   * 7-Feb-90	SHL		Fixed bug in math usage in GetDirAddre
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   56
                        6502:src/cart.src               16:35:31  

   26                   * 1 June 89	-RJ		Vectored RESTORE_CART usage to a subr
   27                   * 15 May 89	-RJ		Made SetCartOffset use of RCART_1 int
   28                   * 20 Apr 89	=RJ Mical=	Created this file!
   29                   * 
   30                   * ====================================================
   31                   
   32                   
   33                   
   34 084E:             CartOffsetLow	.DS	1
   35      TRUE          #IF ROMPAGESIZE>256
   36 084F:             CartOffsetHigh	.DS	1
   37                    #ENDIF
   38 0850:             CartPage	.DS	1
   39 0851:             CartIOCount	.DS	2
   40      TRUE         	#IFNDEF	ROM_NODIR
   41 0853:             CartDirectory	.DS	ROMDIR_ENTRY_SIZE
   42                   	#ENDIF
   43                   
   44                   
   45                   
   46      TRUE         	#IFNDEF	ROM_NODIR
   47                   
   48 085B:             OpenFile0
   49                   * ****************************************************
   50                   * OpenFile0 "opens" a file by reading its directory en
   51                   * CartDirectory buffer and then setting the hardware r
   52                   * first data byte.  On entry, the cartridge address of
   53                   * is specified with the page in X and the offset in A,
   54                   * 
   55                   * ON ENTRY:
   56                   *     - A has the cartridge page of the file's directo
   57                   *     - X,Y (low,high) has the offset of the file's di
   58                   * 
   59                   * ON EXIT:
   60                   *     - A, X and Y are trashed
   61                   *     - CartPage and CartOffsetLow,High are set
   62                   *     - CartDirectory contains the a copy of the file'
   63                   *     - The cart hardware is ready to read the first b
   64                   
   65                   		;------	Set up address of the directory specified by
   66 085B:20 ** **     		JSR SetCartAddress
   67                   
   68                   		;------	Read the directory
   69 085E:A9 09        		LDA #<{ROMDIR_ENTRY_SIZE+1}
   70 0860:8D 51 08     		STA CartIOCount
   71 0863:A9 01        		LDA #>{ROMDIR_ENTRY_SIZE+$100}
   72 0865:8D 52 08     		STA CartIOCount+1
   73 0868:A9 53        		LDA #<CartDirectory
   74 086A:85 00        		STA sysptr
   75 086C:A9 08        		LDA #>CartDirectory
   76 086E:85 01        		STA sysptr+1
   77 0870:20 ** **     		JSR readCart0Grunt
   78                   
   79                   		;------	Set up to read the first byte of the file
   80 0873:AD 53 08     		LDA CartDirectory+ROMDIR_PAGE
   81 0876:AE 54 08     		LDX CartDirectory+ROMDIR_OFFSET
   82      TRUE          #IF ROMPAGESIZE>256
   83 0879:AC 55 08     		LDY CartDirectory+ROMDIR_OFFSET+1
   84                    #ENDIF
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   57
                        6502:src/cart.src               16:35:31  

   85                   
   86                   * ... and fall into SetCartAddress
   87                   
   88                   	#ENDIF	; of #IFNDEF ROM_NODIR
   89                   
   90                   
   91                   
   92 087C:             SetCartAddress
   93                   * ****************************************************
   94                   * This routine sets the cartridge ports to be ready to
   95                   * byte addressed by the page in X and the offset in A,
   96                   * 
   97                   * WARNING:  this routine is fallen into from above.
   98                   * 
   99                   * ON ENTRY:
  100                   *     - X has the page of the cartridge address
  101                   *     - A,Y (low,high) has the offset of the address
  102                   * 
  103                   * ON EXIT:
  104                   *     - A, X and Y are trashed
  105                   *     - CartPage and CartOffsetLow,High are set
  106                   *     - The cart hardware is ready to read the first b
  107                   
  108 087C:8D 50 08     		STA CartPage	; Save the cartridge 1 values
  109 087F:8E 4E 08     		STX CartOffsetLow
  110      TRUE          #IF ROMPAGESIZE>256
  111 0882:8C 4F 08     		STY CartOffsetHigh
  112                    #ENDIF
  113                   
  114 0885:20 ** **     		JSR SetCartPage
  115                   
  116                   * ... and fall into SetCartOffset to advance the cartr
  117                   * the desired offset
  118                   
  119                   
  120                   
  121 0888:             SetCartOffset
  122                   * ****************************************************
  123                   * This routine reads the cartridge (using port 0) unti
  124                   * advanced to the byte described by CartOffsetLow,High
  125                   * is currently at offset 0.  
  126                   * 
  127                   * NOTE:  this code fallen into from above
  128                   * 
  129                   * ON ENTRY:
  130                   *     - CartOffsetLow,High has the offset
  131                   *     - Cart hardware is set to read byte 0 of the pag
  132                   * 
  133                   * ON EXIT:
  134                   *     - The cart hardware is advanced to the specified
  135                   
  136 0888:AC 4F 08     	ldy CartOffsetHigh	; get desired offset
  137 088B:AE 4E 08     	ldx CartOffsetLow
  138 088E:C8           	iny			; increment for zero checking
  139 088F:E8           	inx
  140 0890:80 **        	bra .10
  141                   
  142 0892:AD B2 FC     .20	    lda RCART_0		; count off bytes to advance cart
  143 0895:CA           .10	    dex
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   58
                        6502:src/cart.src               16:35:31  

  144 0896:D0 FA        	   bne .20
  145 0898:88           .30	  dey
  146 0899:D0 F7        	 bne .20
  147                   
  148                   ;	jmp RestoreReturn	; fall through
  149                   
  150 089B:             RestoreReturn
  151                   	RESTORE_CART
    1 089B:AD 27 08   + 		LDA IODAT_RAM
    2      FALSE        	  #IFDEF RAMCART_USER
    4                 + 	  #ELSE
    5 089E:09 02      + 		ORA #CART_POWER_OFF	
    6                 + 	  #ENDIF
    7 08A0:8D 27 08   + 		STA IODAT_RAM
    8 08A3:8D 8B FD   + 		STA IODAT
    9                 + 
  152 08A6:60           	rts
  153                   
  154                   
  155                   
  156      TRUE         	#IFNDEF	ROM_NODIR
  157                   
  158 08A7:             ReadFile0
  159                   * ****************************************************
  160                   * This routine will read an entire game cartridge file
  161                   * that the cartridge 0 port is all set up to start rea
  162                   * that sysptr points to the directory entry of the fil
  163                   * CartDirectory buffer is filled out, and that CartPag
  164                   * CartOffsetLow,High reflect the state of port 0.  
  165                   * 
  166                   * ON ENTRY:
  167                   *    - If you have specified that the file directory h
  168                   *      which specifies that the directory has a RAM de
  169                   *         If the A register is non-zero, X,Y (low,high
  170                   *         the RAM destination for the file; if A is ze
  171                   *         destination is taken from the directory entr
  172                   *    - If you have not specified that the file directo
  173                   *      field you must specify RAM destination of the f
  174                   *         X,Y (low,high) has the RAM destination for t
  175                   *    - The cartridge 0 port is all set up to read the 
  176                   * 
  177                   * ON EXIT:
  178                   *    - CartPage and CartOffsetLow,High are advanced to
  179                   *      the last byte read
  180                   *    - X,Y (low,high) has RAM address of the byte beyo
  181                   
  182                   
  183                   ;??? For now, presume that all data will be coming fro
  184                   ;??? entry.  Later, it will come from either there or 
  185                   ;??? list if the programmer is willing to burn the byt
  186                   
  187      TRUE         	#IFDEF	ROMDIR_DEST
  188 08A7:C9 01        	cmp #1
  189 08A9:B0 **        	bcs .30
  190 08AB:AE 57 08     	ldx CartDirectory+ROMDIR_DEST	; get RAM destination f
  191 08AE:AC 58 08     	ldy CartDirectory+ROMDIR_DEST+1
  192                   	#ENDIF
  193                   
  194 08B1:AD 5A 08     .30	lda CartDirectory+ROMDIR_SIZE+1	; set up count of 
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   59
                        6502:src/cart.src               16:35:31  

  195 08B4:1A           	ina
  196 08B5:8D 52 08     	sta CartIOCount+1
  197 08B8:AD 59 08     	lda CartDirectory+ROMDIR_SIZE
  198 08BB:1A           	ina
  199 08BC:8D 51 08     	sta CartIOCount
  200                   
  201 08BF:86 00        	STX sysptr		; X,Y has the RAM destination pointer
  202 08C1:84 01        	STY sysptr+1
  203                   
  204                   ;	jmp readCart0Grunt	; fall through
  205                   
  206                   
  207                   	#ENDIF	; of #IFNDEF ROM_NODIR
  208                   
  209                   
  210                   
  211 08C3:             readCart0Grunt
  212                   * ****************************************************
  213                   * Grunt routine used by several cart-reading routines,
  214                   * have been tended to and everything is ready for the 
  215                   * 
  216                   * ON ENTRY:
  217                   *    - CartIOCount is initialized to number of bytes t
  218                   *      byte incremented once (for instance: to read $0
  219                   *      CartIOCount to $0224, to read $04ff bytes set C
  220                   *    - sysptr points to buffer for incoming data
  221                   *    - CartOffsetLow,High and CartPage to have valid n
  222                   * 
  223                   * ON EXIT:
  224                   *    - CartPage and CartOffsetLow,High are advanced to
  225                   *      the last byte read
  226                   *    - X,Y (low,high) have RAM address of the byte bey
  227                   
  228                   	SET_TO_READ_CART
    1 08C3:AD 27 08   + 		LDA	IODAT_RAM
    2 08C6:29 FD      + 		AND	#~CART_POWER_OFF 
    3      FALSE        	  #IFDEF RAMCART_USER
    5                 + 	  #ENDIF
    6 08C8:8D 27 08   + 		STA	IODAT_RAM
    7 08CB:8D 8B FD   + 		STA	IODAT
    8                 + 
  229                   
  230 08CE:AE 4E 08     	ldx CartOffsetLow	; ROMPAGESIZE is assumed to be mult
  231      TRUE          #IF ROMPAGESIZE>256
  232 08D1:38           	sec			; set Y to complement of CartOffsetHigh
  233 08D2:AD 4F 08     	lda CartOffsetHigh	;  to facilitate bounds checking
  234 08D5:E9 04        	sbc #>ROMPAGESIZE
  235 08D7:A8           	tay
  236                    #ENDIF
  237                   
  238 08D8:CE 51 08     .30	      dec CartIOCount	; count down bytes to read
  239 08DB:F0 **        	      beq .31
  240 08DD:AD B2 FC     .32	      LDA RCART_0	; read and store byte
  241 08E0:92 00        	      STA (sysptr)
  242 08E2:E6 00        	      inc sysptr
  243 08E4:F0 **        	      beq .44
  244                   
  245 08E6:E8           .33	      inx		; bump the cart page counters
  246 08E7:D0 EF        	     BNE .30
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   60
                        6502:src/cart.src               16:35:31  

  247      TRUE          #IF ROMPAGESIZE>256
  248 08E9:C8           	    iny
  249 08EA:D0 EC        	   BNE .30
  250                    #ENDIF
  251                   
  252 08EC:EE 50 08     	  inc CartPage		; get next page from cartridge
  253 08EF:AD 50 08     	  lda CartPage
  254 08F2:20 ** **     	  JSR SetCartPage
  255                   
  256 08F5:A2 00        	  ldx #<{-ROMPAGESIZE}	; set count to read whole page
  257      TRUE          #IF ROMPAGESIZE>256
  258 08F7:A0 FC        	  ldy #>{-ROMPAGESIZE}
  259                    #ENDIF
  260 08F9:80 DD        	 BRA .30
  261                   
  262 08FB:E6 01        .44	      INC sysptr+1	; not done frequently so pulled
  263 08FD:80 E7        	      bra .33
  264                   
  265                   
  266 08FF:CE 52 08     .31	      dec CartIOCount+1	; check to see if load is 
  267 0902:D0 D9        	      bne .32		; if not, get back in there
  268                   
  269 0904:8E 4E 08     .80	stx CartOffsetLow	; ROMPAGESIZE is assumed to be m
  270      TRUE          #IF ROMPAGESIZE>256
  271 0907:18           	clc			; restore true offset value
  272 0908:98           	tya
  273 0909:69 04        	ADC #>ROMPAGESIZE
  274 090B:8D 4F 08     	STA CartOffsetHigh
  275                    #ENDIF
  276                   
  277 090E:A6 00        	ldx sysptr
  278 0910:A4 01        	ldy sysptr+1
  279                   
  280 0912:4C 9B 08     	jmp RestoreReturn	; only affects A register
  281                   
  282                   
  283                   
  284                   * ****************************************************
  285                   * SetCartPage strobes the cartridge page number in A i
  286                   * The result of this also leaves the counter reset to 
  287                   *
  288                   * On return, A, X and Y are trashed, and ROM power is 
  289                   
  290 0915:             SetCartPage
  291 0915:8D ** **     	sta .ff
  292                   
  293 0918:AD 27 08     	lda IODAT_RAM
  294 091B:09 0A        	ora #RESTLESS+CART_ADDR_DATA
  295 091D:A8           	tay
  296 091E:29 FD        	and #~CART_ADDR_DATA
  297                   
  298 0920:38           	sec
  299 0921:80 **        	bra .2
  300 0923:90 **        .0	  bcc .1
  301 0925:8C 8B FD     	  sty IODAT	; set CART_ADDR_DATA to clock in 1 bit
  302 0928:18           	  clc
  303 0929:E8           .1	  inx		; ldx #3, adds in CART_ADDR_STROBE
  304 092A:8E 87 FD     	  stx SYSCTL1
  305 092D:A2 02        .2	  ldx #POWERON
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   61
                        6502:src/cart.src               16:35:31  

  306 092F:8E 87 FD     	  stx SYSCTL1
  307 0932:2E ** **     	  rol .ff
  308 0935:8D 8B FD     	  sta IODAT	; reset CART_ADDR_DATA to clock 0 bit and
  309 0938:D0 E9        	 bne .0
  310                   
  311 093A:60           	rts
  312                   
  313 093B:00           .ff	.BY 0
  314                   
  315                   
  316                   
  317                   
  318                   ;	#IFDEF	GETDIR_USER
  319                   ;
  320                   ;GetDirAddress
  321                   ;* ***************************************************
  322                   ;
  323                   ;		;------	Get copy of file number
  324                   ;		TAY
  325                   ;		INY	; Increment it so we can count down to zero
  326                   ;
  327                   ;		;------	Init the result fields to the file 0 entry
  328                   ;		LDX	#ROMDIR_FILE0_PAGE	; X will keep the page
  329                   ;		LDA	#<ROMDIR_FILE0_OFFSET
  330                   ;		STA	.FE
  331                   ;		LDA	#>ROMDIR_FILE0_OFFSET
  332                   ;		STA	.FF
  333                   ;
  334                   ;.10		;------	Loop until file number is reduced to zer
  335                   ;		DEY
  336                   ;		BEQ	.20
  337                   ;
  338                   ;		;------	Add the size of an entry to the current car
  339                   ;		LDA	#ROMDIR_ENTRY_SIZE
  340                   ;		CLC
  341                   ;		ADC	.FE
  342                   ;		STA	.FE
  343                   ;	bcc .11
  344                   ;	inc .ff
  345                   ;;		LDA	#0
  346                   ;;		ADC	.FF
  347                   ;;		STA	.FF
  348                   ;
  349                   ;		;------	Compare the current offset with the largest
  350                   ;		;------	allowable offset
  351                   ;.11		LDA	#<ROMPAGESIZE-1
  352                   ;		CMP	.FE
  353                   ;		LDA	#>ROMPAGESIZE-1
  354                   ;		SBC	.FF
  355                   ;		BCS	.10		; Branch if offset <= largest allowed
  356                   ;
  357                   ;		;------	Offset too big.  Back offset down by one pa
  358                   ;		;------	bump page
  359                   ;		LDA	.FE
  360                   ;		SEC
  361                   ;		SBC	#<ROMPAGESIZE
  362                   ;		STA	.FE
  363                   ;		LDA	.FF
  364                   ;		SBC	#>ROMPAGESIZE
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   62
                        6502:src/cart.src               16:35:31  

  365                   ;		STA	.FF
  366                   ;		INX
  367                   ;		BRA	.10		; Go do it again
  368                   ;
  369                   ;.20		;------	Return with the registers containing the
  370                   ;		LDA	.FE
  371                   ;		LDY	.FF
  372                   ;		RTS
  373                   ;
  374                   ;.FE		.DS	1
  375                   ;.FF		.DS	1
  376                   ;
  377                   ;	#ENDIF	; of #IFDEF GETDIR_USER
  378                   ;
  379                   ;
  380                   ;	#IFDEF	GETDIRFAST_USER
  381                   ;
  382                   ;GetDirAddressFast
  383                   ;* ***************************************************
  384                   ;
  385                   ;		;------	Create the offset from the start of the dir
  386                   ;		;------	this directory entry
  387                   ;		STA MATHD
  388                   ;		STZ MATHC
  389                   ;		LDA #ROMDIR_ENTRY_SIZE
  390                   ;		STA MATHB
  391                   ;		STZ MATHA	; MULTIPLY
  392                   ;
  393                   ;		;------	Create the page of this entry by adding the
  394                   ;		;------	ROM header to the directory entry offset an
  395                   ;		;------	dividing this by the size of a page
  396                   ;		LDA	#<ROMPAGESIZE
  397                   ;		WAITMATH
  398                   ;		STA	MATHP
  399                   ;		LDA	#>ROMPAGESIZE
  400                   ;		STA	MATHN
  401                   ;		LDA	#<ROM_HEADER_SIZE
  402                   ;		CLC
  403                   ;		ADC	MATHH
  404                   ;		TAX
  405                   ;		LDA	#>ROM_HEADER_SIZE
  406                   ;		ADC	MATHG
  407                   ;		STX	MATHH
  408                   ;		STA	MATHG
  409                   ;		LDA	#0
  410                   ;		ADC	MATHF
  411                   ;		STA	MATHF
  412                   ;		STZ	MATHE	; DIVIDE
  413                   ;
  414                   ;		;------	Create the byte offset of the entry by subt
  415                   ;		;------	start byte offset from the real byte offset
  416                   ;		;------	Wouldn't have to do this if division remain
  417                   ;		WAITMATH
  418                   ;		lda	MATHH
  419                   ;		ldy	MATHG
  420                   ;
  421                   ;		ldx	#<ROMPAGESIZE
  422                   ;		stx	MATHB
  423                   ;		ldx	#>ROMPAGESIZE
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   63
                        6502:src/cart.src               16:35:31  

  424                   ;		stx	MATHA	; MULTIPLY
  425                   ;
  426                   ;		SEC
  427                   ;		WAITMATH
  428                   ;		SBC	MATHH
  429                   ;		TAX
  430                   ;		tya
  431                   ;		SBC	MATHG
  432                   ;		TAY
  433                   ;		TXA
  434                   ;		LDX	MATHD
  435                   ;
  436                   ;		RTS
  437                   ;
  438                   ;.FD		.DS	1
  439                   ;.FE		.DS	1
  440                   ;
  441                   ;	#ENDIF	; of #IFDEF GETDIRFAST_USER
  442                   
  443                   
  444      TRUE         	#IFDEF GETDIR_USER | GETDIRFAST_USER
  445                   
  446                   * GetDirAddress calculates the ROM address of the dire
  447                   * specified in the A register
  448                   *
  449                   * ROMPAGESIZE is assumed to be one of 256, 512, 1024, 
  450                   *
  451                   * On exit:
  452                   *	A = page number
  453                   *	X,Y = byte offset into page
  454                   
  455 093C:             GetDirAddress
  456      TRUE           #IF ROMDIR_ENTRY_SIZE=8
  457 093C:9C ** **     	stz .ff
  458 093F:0A           	asl a
  459 0940:2E ** **     	rol .ff
  460 0943:0A           	asl a
  461 0944:2E ** **     	rol .ff
  462 0947:0A           	asl a
  463 0948:2E ** **     	rol .ff
  464                     #ELSE
  473                     #ENDIF
  474                   
  475      TRUE           #IF ROM_HEADER_SIZE&$ff>0
  476 094B:69 9A        	adc #<ROM_HEADER_SIZE
  477                     #ENDIF
  478 094D:AA           	tax
  479      TRUE           #IF ROMDIR_ENTRY_SIZE=8
  480 094E:AD ** **     	lda .ff
  481                     #ELSE
  483                     #ENDIF
  484 0951:69 01        	adc #>ROM_HEADER_SIZE
  485      TRUE           #IF ROMPAGESIZE>256
  486 0953:48           	 pha
  487 0954:29 03        	  and #>{ROMPAGESIZE-1}
  488 0956:A8           	  tay
  489 0957:68           	 pla
  490 0958:4A           	lsr a
  491      TRUE             #IF ROMPAGESIZE>512
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   64
                        6502:src/cart.src               16:35:31  

  492 0959:4A           	lsr a
  493      FALSE              #IF ROMPAGESIZE>1024
  495                         #ENDIF
  496                       #ENDIF
  497                     #ENDIF
  498                   
  499 095A:60           	rts
  500                   
  501      TRUE           #IF ROMDIR_ENTRY_SIZE=8
  502 095B:             .ff	.ds 1
  503                     #ENDIF
  504                   
  505                   	#ENDIF	; of #IFDEF GETDIR_USER | GETDIRFAST_USER
  506                   
  507                   
  508                   
  509                   
  510                   
  511                   
  687                   	.in 6502:src/display.src
    1                   ; Tue Sep 18 17:51:17 1990
    2                   * === display.src ====================================
    3                   *
    4                   * Display and Color IO Routines --  the 6502 Side of H
    5                   *
    6                   * Copyright (C) 1988,1989,1990 Epyx, Inc.
    7                   * All Rights Reserved
    8                   * CONFIDENTIAL and PROPRIETARY
    9                   *
   10                   * Date		Name		Description
   11                   * ---------	--------------	---------------------------
   12                   * 18-Sep-90	SHL		Added code to work around RICOH bug
   13                   *				and support for the NO_RICOH_PATCH switch
   14                   * 22-Mar-90	SHL		Removed PHA PHX and PLX PLA from IRQ 
   15                   * 20-Mar-90	SHL		Removed SEI, CLI from InitDisplayer, 
   16                   *				InitEOL
   17                   * 7-Feb-90	SHL		Apple compatibility removed
   18                   *				TIMEOUT macro moved to display.mac
   19                   *				General cleanup and prettification
   20                   * 3 July 89	-RJ		The RESET_TIMEOUT logic is moved from
   21                   *				input macros to the TIMEOUT macro here
   22                   * 16 Jun 89	Peter Engelbrite Timeout constant set to 1
   23                   * 24 May 89	-RJ		Added AUTO_TIMEOUT_USER support code
   24                   * 1 May 89	-RJ		Changed all IntTable references to sys
   25                   *				which is defined now in the sys.mac file
   26                   * 20 Apr 89	-RJ		Changed DisplayFrameCount so that it'
   27                   *				included and incremented if FRAMECOUNT_UP is
   28                   *				defined, included and decremented if
   29                   *				FRAMECOUNT_DOWN is defined, else nothing.
   30                   *				Moved DisplayFrameCount to this file.
   31                   * 20 Mar 89	-RJ		Added increment of DisplayFrameCount 
   32                   *				handler that's included for EOF_USER's
   33                   * 13 Feb 89	-RJ		Added InitDisplayer routine.  Added i
   34                   *				of DISPLAY to normal EOF handler (FrameEnd).
   35                   * 12 Feb 89	-RJ		EOF and EOL code save and restore A
   36                   * 26-Dec-88	-RJ		Added EOL code
   37                   * 23-Dec-88	-RJ		Added EOF code
   38                   * Early 88	=RJ Mical=	Created this file!
   39                   *
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   65
                        6502:src/display.src            16:35:31  

   40                   * ====================================================
   41                   
   42                   
   43                   
   44                   * If either FRAMECOUNT_UP or _DOWN is defined, then de
   45      TRUE         	#IFDEF	FRAMECOUNT_UP | FRAMECOUNT_DOWN
   46 095C:             DisplayFrameCount	.DS	1
   47                   	#ENDIF
   48                   
   49                   
   50      TRUE         	#IFDEF EOF_USER
   51                   * - - - - - - - - - - - - -  - - - - - - - - - - - - -
   52                   * - - - - - - - - - - - - -  - - - - - - - - - - - - -
   53                   * - - - - - - - - - - - - -  - - - - - - - - - - - - -
   54                   	;------	If an EOF user, create the elaborate version 
   55                   	;------	end-of-frame handler
   56                   
   57 095D:             InitEOF
   58                   		;------	Copy old vector into our exit JMP instructio
   59 095D:AD ** **     		LDA	sysIntTable+{2*2}
   60 0960:8D ** **     		STA	FrameEndExit+1
   61 0963:AD ** **     		LDA	sysIntTable+{2*2}+1
   62 0966:8D ** **     		STA	FrameEndExit+2
   63                   		;------	Install our vector into the interrupt table
   64 0969:A9 **        		LDA	#<FrameEnd
   65 096B:8D ** **     		STA	sysIntTable+{2*2}
   66 096E:A9 **        		LDA	#>FrameEnd
   67 0970:8D ** **     		STA	sysIntTable+{2*2}+1
   68 0973:60           		RTS
   69                   
   70 0974:             FrameEnd
   71                   * End-of-Frame handler
   72 0974:5A           		PHY
   73                   
   74                   		;------	The TIMEOUT macro will do nothing unless
   75                   		;------ AUTO_TIMEOUT_USER has been defined in which 
   76                   		;------	system will turn off after a given amount of
   77      TRUE         	  #IFNDEF NO_RICOH_PATCH
   78 0975:AD F9 FF     		lda MAPCTL
   79 0978:48           		pha
   80 0979:09 01        		 ora #SUZY_SPACE
   81 097B:8D F9 FF     		 sta MAPCTL
   82                   		 TIMEOUT
    1                 + 
   83 097E:68           		pla
   84 097F:8D F9 FF     		sta MAPCTL
   85                   	  #ELSE
   87                   	  #ENDIF ;NDEF NO_RICOH_PATCH
   88                   
   89                   		;------	Turn on the display, and then EOF flag
   90                   ;!!! New:  invoke the DISPLAY macro here during EOF pr
   91                   		DISPLAY
    1 0982:AD 26 08   + 		LDA	DISPCTL_RAM
    2 0985:8D 92 FD   + 		STA	DISPCTL
    3 0988:29 02      + 		AND	#DISP_FLIP
    4 098A:F0 **      + 		BEQ	DISPLAY.0017
    5 098C:AD 2B 08   + 		LDA	DisplayBuffer
    6 098F:18         + 		CLC
    7 0990:69 DF      + 		ADC	#<DISPLAY_BUFSIZE-1
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   66
                        6502:src/display.src            16:35:31  

    8 0992:AA         + 		TAX
    9 0993:AD 2C 08   + 		LDA	DisplayBuffer+1
   10 0996:69 1F      + 		ADC	#>DISPLAY_BUFSIZE-1
   11 0998:80 **      + 		BRA	DISPLAY.00172
   12 099A:           + DISPLAY.0017
   13 099A:AE 2B 08   + 		LDX	DisplayBuffer
   14 099D:AD 2C 08   + 		LDA	DisplayBuffer+1
   15 09A0:           + DISPLAY.00172
   16                   		DISP_AX
    1 09A0:08         + 		PHP
    2 09A1:78         + 		SEI
    3 09A2:8E 94 FD   + 		STX	DISPADRL
    4 09A5:8D 95 FD   + 		STA	DISPADRH
    5 09A8:28         + 		PLP
    6                 + 
   17                 + 
   92                   
   93      TRUE         	  #IFDEF FRAMECOUNT_UP
   94                   		;------	Increment the DisplayFrameCount
   95 09A9:EE 5C 09     		INC	DisplayFrameCount
   96                   	  #ELSE ; put this #ELSE here to avoid both UP and DO
  104                   	  #ENDIF
  105                   
  106 09AC:AD 2E 08     		LDA	DisplayFlags
  107 09AF:09 80        		ORA	#DISPLAY_EOFFLAG
  108 09B1:8D 2E 08     		STA	DisplayFlags
  109                   
  110 09B4:7A           		PLY
  111 09B5:             FrameEndExit
  112                   		;------	This vector ought to be patched by the Init 
  113 09B5:4C 45 08     		JMP	IntReturn
  114                   
  115                   
  116                   	#ELSE ; of #IFDEF EOF_USER
  160                   	#ENDIF	; of #IFDEF EOF_USER
  161                   
  162                   * - - - - - - - - - - - - -  - - - - - - - - - - - - -
  163                   
  164                   
  165                   
  166                   
  167      FALSE        	#IFDEF	EOL_USER
  192                   	#ENDIF	; of #IFDEF EOL_USER
  193                   
  194                   
  195                   
  196                   
  688                   	.in 6502:src/hsfx.src
    1                   ; Tue Sep 18 17:43:53 1990
    2                   * === hsfx.src =======================================
    3                   *
    4                   * Handy Sound Effects Driver  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 04-May-90	SHL		If not integrated, voice bias reset o
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   67
                        6502:src/hsfx.src               16:35:31  

   12                   *				channel.  If integrating, voice bias ramped to
   13                   *				zero.  No longer tries to play sounds if voice
   14                   *				owned by someone else.
   15                   * 19-Apr-90	SHL		AllocAudio and GrabAudio routines now
   16                   *				inly if GRABAUDIO_USER is set.
   17                   *				General code tightening and cleanup.
   18                   *				Moved top_of_loop0,1 variables to hsfx.var .
   19                   *				Moved hsfx_temp to zero page.
   20                   * 18-Apr-90	SHL		InitHSFX now zeroes all HSFX variable
   21                   *				FreeAudio now zeroes bias on stopped channel
   22                   * 01-Apr-90	SHL & G Colgate	Added USER_HSFX switch and
   23                   * 26-Mar-90	SHL		Removed PHA, PHX instructions from hs
   24                   *				Changed driver exit to match new IRQ handler
   25                   * 6 Oct 89	SHL		Modified driver to catch dropped frame
   26                   *				Modified START_DISABLE and END_DISABLE macros
   27                   *				to use the new flag audio_lockout
   28                   * 14 Sep 89	SJ		Fix to register clear in StartHSFX
   29                   * 5 Sept 89	SJ		Changed public calls to lock out just 
   30                   * 31 Aug 89	SJ		Changed code to use HSFX_CHANNELCOUNT 
   31                   *				Made variables relocatable in HSFX.var
   32                   *				User programs now must include HSFX.var also.
   33                   *				Tightened up key frame loop in update_frame.
   34                   * 30 Aug 89	Stephen Jungels	Clear launch_channel flag 
   35                   *				Simplified channel killing code.
   36                   *				Modified grunt main loops.
   37                   *				Changed ResetHSFX to call FreeAudio.
   38                   * 11 Aug 89	-RJ		Restore I flag at end of int. driver 
   39                   *				clearing audio_interruptus
   40                   * 1 June 89	-RJ		Added some pre-CES bullet-proofing to
   41                   *				channel number in FreeAudio and GrabAudio
   42                   * 1 June 89	SHL		Moved hsfx_driver core to hsfx_driver
   43                   *				called by both hsfx_driver and hmusic_driver
   44                   *				allowing SEPARATE_HMUSIC_HSFX to work
   45                   * 31 May 89	SHL		Added the required 5th element to Cha
   46                   * 13 May 89	-RJ		Added SEPARATE_HMUSIC_HSFX support
   47                   * 11 May 89	-RJ		FrameClock and FramePreload are chang
   48                   *				AudioClock and AudioPreload.  These are now
   49                   *				set using AUDIO_CLOCK_MASK and AUDIO_PRELOAD.
   50                   *				Removed HFIX1 references.  Made InitHSFX
   51                   *				always disable interrupts
   52                   * 1 May 89	-RJ		Changed all IntTable references to sys
   53                   *				which is defined now in the sys.mac file
   54                   * 30 Apr 89	-RJ		Got rid of old CES_SLOWCLOCK stuff
   55                   * 5 Apr 89	-RJ		Added audio_interruptus.  The hsfx dri
   56                   *				interrupt code now clears interrupt disable
   57                   *				as soon as its taken steps to prevent
   58                   *				reentrancy, thereby allowing other more
   59                   *				important interrupts to be processed.
   60                   * 22 Mar 89	-RJ		Moved declaration of audio_ptr into t
   61                   *				Changed order of steps in ResetHSFX.
   62                   *				Added cancellation of launch_channel in Reset.
   63                   *				Tightened code in calc_next_audio
   64                   * 21 Mar 89	-RJ		Changed name of effect_in_use to Chan
   65                   *				By request, changed name of temp to hsfx_temp.
   66                   *				Tightened up loop in ResetHSFX
   67                   * 20 Mar 89	-RJ		Merged RG's changes into this file, a
   68                   *				many comments, general cleanup
   69                   * 19 Mar 89	-RJ		Added many calls to HFIX1 macros as n
   70                   * Feb 89	RG		Tightened code, folded music into HSFX
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   68
                        6502:src/hsfx.src               16:35:31  

   71                   * 4 Jan 89	=RJ Mical=	Stripped out sample program, cha
   72                   *				to match harddefs.i
   73                   *				Added AUDIO_TIMER definition and more
   74                   * Late 88	RG Goudy	Created this file!
   75                   *
   76                   * ====================================================
   77                   
   78                   
   79                   
   80                   
   81      TRUE            #IFNDEF START_DISABLE
   82                   
   83      0001         AUDIO_DISABLE	.EQU	1
   84                   ; Define AUDIO_DISABLE to disable audio interrupts *on
   85                   ; routines.  Undefine AUDIO_DISABLE to lock out *all* 
   86                   
   87                   	#MACRO START_DISABLE
   88 MACRO             		#IFDEF AUDIO_DISABLE
   89 MACRO             		 INC	audio_lockout
   90 MACRO             		#ELSE
   91 MACRO             		 PHP
   92 MACRO             		 SEI
   93 MACRO             		#ENDIF
   94                   	#ENDM	; START_DISABLE
   95                   
   96                   	#MACRO END_DISABLE
   97 MACRO             		#IFDEF AUDIO_DISABLE
   98 MACRO             		 DEC	audio_lockout
   99 MACRO             		#ELSE
  100 MACRO             		 PLP
  101 MACRO             		#ENDIF
  102                   	#ENDM	; END_DISABLE
  103                   
  104                   
  105                      #ENDIF	; OF IFNDEF START_DISABLE
  106                   
  107                   
  108                   
  109                   		BEGIN_ZPAGE
    1      09B8       + TEMPORG	  .= *
    2 09B8:           + 	  .ORG NEXTZPG
    3                 + 
  110 0014:             audio_ptr	.DS 2		; grab some zero page variables
  111 0016:             hsfx_temp	.DS 1
  112                   		END_ZPAGE
    1      0017       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 0017:           + 	  .ORG TEMPORG
    6                 + 
  113                   
  114                   
  115                   
  116                   * If HMUSIC is out there and if the programmer hasn't 
  117                   * SEPARATE_HMUSIC_HSFX then define hsfxSysCancel, whic
  118                   * little more than a subroutine call for HMUSIC
  119      FALSE        	#IFDEF HANDYMUSIC
  123                   	#ENDIF
  124                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   69
                        6502:src/hsfx.src               16:35:31  

  125                   
  126                   
  127 09B8:             InitHSFX
  128                   * ====================================================
  129                   * Sound Effects Driver Initialization
  130                   * You should call this routine only once, during the i
  131                   * portion of your code
  132                   * Warning from RG:  if you muck with it and it doesn't
  133                   * (yes, straight to bed with no dinner).
  134                   *
  135                   * If you are using the Handy music driver you are supp
  136                   * the audio system by calling InitMusic.  InitMusic ca
  137                   * aren't required to call both.
  138                   
  139                   
  140      TRUE          #IFNDEF hsfxSysCancel
  141 09B8:08           	 php
  142 09B9:78           	  sei
  143                   
  144 09BA:A9 **        	  lda #<hsfx_driver			; link HSFX in IRQ handler
  145 09BC:8D ** **     	  sta sysIntTable+{AUDIO_TIMER*2}
  146 09BF:A9 **        	  lda #>hsfx_driver
  147 09C1:8D ** **     	  sta sysIntTable+{AUDIO_TIMER*2}+1
  148                    #ENDIF
  149                   
  150 09C4:A9 9E        	  lda #AUDIO_CLOCK_MASK+ENABLE_INT+ENABLE_RELOAD+ENAB
  151 09C6:A0 40        	  ldy #AUDIO_PRELOAD
  152 09C8:8D 19 FD     	  sta TIMER0+{AUDIO_TIMER*4}+TIM_CONTROLA
  153 09CB:8C 18 FD     	  sty TIMER0+{AUDIO_TIMER*4}+TIM_BACKUP
  154                   
  155      TRUE          #IFNDEF hsfxSysCancel
  156 09CE:28           	 plp
  157                    #ENDIF
  158                   
  159                   * ... and intentionally fall into ResetHSFX
  160                   
  161                   
  162                   
  163 09CF:             ResetHSFX
  164                   * ====================================================
  165                   * This routine turns off the audio channels and clears
  166                   * usage of all the channels.  You can call this routin
  167                   * whenever you like, as often as you like.
  168                   
  169                   * Warning:  this code is fallen into from above
  170                   
  171 09CF:08           	 php
  172 09D0:78           	  sei
  173                   
  174 09D1:A2 **        	  ldx #HSFXVarEnd-HSFXVarStart	; clear all HSFX varia
  175 09D3:9E ** **     .00	    stz HSFXVarStart-1,x
  176 09D6:CA           	    dex
  177 09D7:D0 FA        	   bne .00
  178                   
  179 09D9:A2 03        	  ldx #HSFX_CHANNELCOUNT-1	; free each audio channel
  180 09DB:20 ** **     .10	    jsr FreeAudio
  181 09DE:CA           	    dex
  182 09DF:10 FA        	   bpl .10
  183                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   70
                        6502:src/hsfx.src               16:35:31  

  184 09E1:28           	 plp
  185 09E2:60           	rts
  186                   
  187                   
  188 09E3:             StartHSFX
  189                   * ====================================================
  190                   * The StartHSFX routine is called to add a sound effec
  191                   * Call with the address of your HSFX table in A,X (low
  192                   * with the priority of this sound effect in Y.
  193                   *
  194                   * If your sound effect is successfully added, carry is
  195                   * has the audio channel number of your sound effect.  
  196                   * couldn't be added, carry is set on return and X will
  197                   * Channel 4 is a mock HSFX channel, the priority of wh
  198                   * ChannelInUse) will always be zero and therefore will
  199                   * priority of a sound effect submitted to StartHSFX.  
  200                   * convenience of being able to check at a later time w
  201                   * sound effect is still active without requiring the o
  202                   * whether the call to StartHSFX succeeded or failed in
  203                   *
  204                   * On return:
  205                   *    carry clear = success
  206                   *      carry set = failure
  207                   *              X = channel number (0 - 3) of sound eff
  208                   
  209                   
  210                   	START_DISABLE	; disable sound IRQs
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 09E3:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
  211                   
  212 09E6:85 14        	sta audio_ptr		; hsfx table address lsb
  213 09E8:86 15        	stx audio_ptr+1		; hsfx table address msb
  214                   
  215 09EA:20 ** **     	jsr find_lesser_channel
  216 09ED:B0 **        	bcs .00
  217                   
  218 09EF:A2 04        	ldx #HSFX_CHANNELCOUNT	; Return mock channel number
  219                   
  220                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 09F1:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  221                   
  222 09F4:38           	sec			; Return result:  no channel available
  223 09F5:60           	rts
  224                   
  225                   
  226 09F6:9D ** **     .00	sta ChannelInUse,x	; Store priority of this channe
  227 09F9:A5 14        	lda audio_ptr
  228 09FB:9D ** **     	sta hsfx_basel,x
  229 09FE:A5 15        	lda audio_ptr+1
  230 0A00:9D ** **     	sta hsfx_baseh,x
  231                   
  232 0A03:8A           	txa			; Clear accumulators & interpolators
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   71
                        6502:src/hsfx.src               16:35:31  

  233 0A04:18           	clc
  234 0A05:69 3C        	adc #HSFX_CHANNELCOUNT*{HSFX_REGSIZE*HSFX_REGCOUNT-1}
  235 0A07:38           	sec
  236 0A08:AA           .11	  tax
  237 0A09:9E ** **     	  stz freql,x
  238 0A0C:E9 04        	  sbc #HSFX_CHANNELCOUNT
  239 0A0E:B0 F8        	 bcs .11		; X comes out of loop with correct index
  240                   
  241 0A10:20 ** **     	jsr update_frame	; read in first key frame
  242 0A13:20 ** **     	jsr calc_next_audio	; set up for first hardware load
  243                   
  244 0A16:A9 80        	lda #$80		; set signal to start sound effect
  245 0A18:9D ** **     	sta launch_channel,x
  246                   
  247                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0A1B:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  248                   
  249 0A1E:18           	clc			; tell caller that channel was gotten
  250 0A1F:60           	rts
  251                   
  252                   
  253                   
  254 0A20:             StopHSFX
  255                   * ====================================================
  256                   * This routine is called to remove a sound effect from
  257                   * Call with the priority of the sound effect to stop i
  258                   *
  259                   * On return:
  260                   *    A, X and Y are trashed
  261                   *    carry clear = a sound effect with this priority w
  262                   *    carry set = no sound effect with this priority wa
  263                   
  264                   
  265                   	START_DISABLE		; kill sound IRQs
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0A20:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
  266                   
  267 0A23:98           	tya
  268 0A24:A2 04        	ldx #HSFX_CHANNELCOUNT
  269                   
  270 0A26:CA           .11	  dex
  271 0A27:30 **        	  bmi .20
  272 0A29:DD ** **     	  cmp ChannelInUse,x
  273 0A2C:D0 F8        	 bne .11
  274                   
  275 0A2E:20 ** **     	jsr freeChannelX	 ; found channel with desired priori
  276                   
  277                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0A31:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   72
                        6502:src/hsfx.src               16:35:31  

    6                 + 
  278 0A34:18           	clc
  279 0A35:60           	rts
  280                   
  281                   .20	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0A36:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  282 0A39:38           	sec
  283 0A3A:60           	rts
  284                   
  285                   
  286                   
  287 0A3B:             FreeAudio
  288                   * ====================================================
  289                   * This routine is called to free an audio channel that
  290                   * using AllocAudio or GrabAudio.  It's used also by th
  291                   * free up the channel at the end of a note.
  292                   *
  293                   * Call with the channel number that you want to free i
  294                   *
  295                   * On return:
  296                   *    carry wil be clear, which equals success
  297                   
  298      FALSE         #IFDEF SOUND_DEBUG
  303                    #ENDIF
  304                   
  305                   
  306                   	START_DISABLE	; kill sound IRQs
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0A3B:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
  307                   
  308 0A3E:20 ** **     	jsr freeChannelX
  309                   
  310                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0A41:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  311 0A44:18           	clc
  312 0A45:60           	rts
  313                   
  314                   
  315                   
  316      TRUE          #IFDEF GRABAUDIO_USER
  317                   
  318 0A46:             AllocAudio
  319                   * ====================================================
  320                   * This routine is called to attempt to allocate an aud
  321                   * HSFX.  If you successfully allocate a channel, HSFX 
  322                   * until you return the channel using FreeAudio, or unt
  323                   * INITHMUSIC or RESETHSFX
  324                   *
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   73
                        6502:src/hsfx.src               16:35:31  

  325                   * To permanently allocate a channel, 
  326                   *
  327                   * Call with the priority of your desire for an audio c
  328                   *
  329                   * On return:
  330                   *    carry clear = success
  331                   *      carry set = failure
  332                   *              X = Number of your new audio channel if
  333                   
  334                   	START_DISABLE		; kill sound IRQs
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0A46:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
  335                   
  336 0A49:20 ** **     	jsr find_lesser_channel
  337 0A4C:B0 **        	bcs grabChannelX	; Branch if channel available
  338                   
  339                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0A4E:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
  340 0A51:38           	sec			; Signal no channel is available
  341 0A52:60           	rts
  342                   
  343                   
  344                   
  345 0A53:             GrabAudio
  346                   * ====================================================
  347                   * This routine is called to grab an audio channel for 
  348                   * any lip from the HSFX driver.  When ya' just want to
  349                   * you don't want no hassles, grab it with GrabAudio.
  350                   *
  351                   * Call with the number of the audio channel you want t
  352                   *
  353                   * After you've grabbed a channel, it remains unavailab
  354                   * return it with a call to FreeAudio, or until you cal
  355                   * or RESETHSFX
  356                   
  357                   	START_DISABLE		; kill sound IRQs
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0A53:EE ** **   + 		 INC	audio_lockout
    3                   		#ELSE
    6                 + 		#ENDIF
    7                 + 
  358                   
  359 0A56:             grabChannelX
  360 0A56:A9 FF        	lda #HSFX_NOCHANNEL	; mark channel as unavailable
  361 0A58:20 ** **     	jsr killChannelX
  362                   
  363                   	END_DISABLE
    1      TRUE       + 		#IFDEF AUDIO_DISABLE
    2 0A5B:CE ** **   + 		 DEC	audio_lockout
    3                   		#ELSE
    5                 + 		#ENDIF
    6                 + 
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   74
                        6502:src/hsfx.src               16:35:31  

  364 0A5E:18           	clc
  365 0A5F:60           	rts
  366                   
  367                    #ENDIF ; of #IFDEF GRABAUDIO_USER
  368                   
  369                   
  370                   
  371                   * find_lesser_channel and freeChannelX don't affect th
  372                   
  373                   
  374 0A60:             find_lesser_channel
  375                   * ====================================================
  376                   * The find_lesser_channel routine feels through the pr
  377                   * channels, looking for one that's the most less than 
  378                   * priority of interest.
  379                   *
  380                   * On entry:  the priority to beat is in Y
  381                   * On exit:  The lowest priority channel number is retu
  382                   *	of the channel is less than or equal to request	then
  383                   
  384      TRUE          #IF HSFX_CHANNELCOUNT>1
  385                   
  386 0A60:5A           	phy
  387                   
  388 0A61:A2 03        	ldx #HSFX_CHANNELCOUNT-1
  389 0A63:A0 02        	ldy #HSFX_CHANNELCOUNT-2
  390 0A65:BD ** **     .40	  lda ChannelInUse,x
  391 0A68:D9 ** **     	  cmp ChannelInUse,y
  392 0A6B:90 **        	  blt .41		; Branch if x-priority is less than y-prio
  393 0A6D:98           	  tya		; else copy y to x
  394 0A6E:AA           	  tax
  395 0A6F:88           .41	  dey
  396 0A70:10 F3        	 bpl .40
  397                   
  398 0A72:68           	pla	
  399                   
  400                    #ELSE
  405                    #ENDIF
  406                   
  407 0A73:DD ** **     	cmp ChannelInUse,x	; compare with lowest priority cha
  408                   
  409 0A76:60           	rts
  410                   
  411                   
  412                   
  413 0A77:             freeChannelX
  414                   * ====================================================
  415                   * Here, X has the index of the channel to be freed
  416 0A77:A9 00        	lda #0
  417                   
  418 0A79:             killChannelX
  419 0A79:9D ** **     	sta ChannelInUse,x		; either free or grab channel
  420                   
  421 0A7C:9E ** **     	stz launch_channel,x		; make sure we zero launch flag
  422 0A7F:BC ** **     	ldy audio_offsets,x
  423 0A82:B9 25 FD     	lda AUDIO0+AUD_CONTROL,y
  424 0A85:29 20        	and #ENABLE_INTEGRATE
  425 0A87:99 25 FD     	sta AUDIO0+AUD_CONTROL,y	; kill channel
  426 0A8A:D0 **        	bne .90
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   75
                        6502:src/hsfx.src               16:35:31  

  427 0A8C:99 22 FD     	sta AUDIO0+AUD_OUTPUT,y	; reset volume (DC bias) if n
  428 0A8F:60           .90	rts
  429                   
  430                   
  431                   
  432                   
  433                   
  434                   
  435                   
  436                   * ====================================================
  437                   * ====                    ============================
  438                   * ====   Interrupt Code   ============================
  439                   * ====                    ============================
  440                   * ====================================================
  441                   
  442                   
  443      TRUE          #IFNDEF hsfxSysCancel
  444                   
  445 0A90:             hsfx_driver
  446                   * ====================================================
  447                   * Here's the entry point HSFX interrupt code
  448                   * Note that if hsfxSysCancel is defined this code does
  449                   
  450                   	;-- Test if this is an hsfx interrupt re-entering
  451                   	;-- If audio_interruptus is zero, this is a top-level
  452                   	;-- into the interrupt code so it's safe to proceed. 
  453                   	;-- if audio_interruptus isn't zero we're re-entering
  454                   	;-- got so pushed so deep in the queue that another a
  455                   	;-- interrupt occurred!  It's not safe to re-enter, s
  456                   	;-- (causing the audio to skip a beat, it's true).
  457 0A90:AD ** **     	lda audio_lockout	; are we being locked out?
  458 0A93:D0 **        	bne .12
  459 0A95:AD ** **     	lda audio_interruptus	; Were we here before
  460 0A98:F0 **        	beq .10			; Branch if not
  461 0A9A:EE ** **     .12	inc audio_dropout	; count dropped frames
  462 0A9D:80 **        	bra .90			; branch to exit
  463                   
  464 0A9F:EE ** **     .10	inc audio_interruptus	; Mark that we are here
  465 0AA2:EE ** **     	inc audio_dropout	; record frame we're doing
  466 0AA5:58           	cli			; and let other interrupts run
  467                   
  468 0AA6:5A           	 phy
  469 0AA7:20 ** **     .11	    jsr hsfx_driver_grunt
  470 0AAA:CE ** **     	    dec audio_dropout	; mark that we've played a fram
  471 0AAD:D0 F8        	   bne .11		; loop back for dropped frames
  472 0AAF:7A           	 ply
  473                   
  474 0AB0:9C ** **     	stz audio_interruptus	; reset flag so we know it's OK
  475                   
  476 0AB3:             .90
  477 0AB3:FA           	plx
  478 0AB4:68           	pla
  479 0AB5:40           	rti
  480                   
  481                    #ENDIF ; of IFNDEF hsfxSysCancel
  482                   
  483                   
  484                   
  485                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   76
                        6502:src/hsfx.src               16:35:31  

  486                   
  487 0AB6:             hsfx_driver_grunt
  488                   * ====================================================
  489                   * Here's the actual HSFX interrupt code
  490                   * The audio driver turns itself into "low-priority" in
  491                   * enabling interrupts as soon as it has protected itse
  492                   * reentered.  This will allow more important (especial
  493                   * interrupt routines to wrest control away from audio 
  494                   
  495      FALSE         #IFDEF USER_HSFX
  497                    #ENDIF
  498                   
  499                   * Lay our hands on the hardware of each active channel
  500                   * (although note that this loop won't actually start t
  501                   * for the channel if the timer isn't already running. 
  502                   * in the launch_channel loop below).
  503                   
  504 0AB6:A2 03        	ldx #HSFX_CHANNELCOUNT-1
  505                   
  506 0AB8:BC ** **     .00	  ldy audio_offsets,x
  507 0ABB:BD ** **     	  lda ChannelInUse,x	; Is this an active channel?
  508 0ABE:D0 **        	  bne .02
  509 0AC0:B9 22 FD     	  lda AUDIO0+AUD_OUTPUT,y	; not active, ramp volume t
  510 0AC3:F0 **        	  beq .01
  511 0AC5:10 **        	  bpl .03
  512 0AC7:1A           	  inc a
  513 0AC8:1A           	  inc a
  514 0AC9:3A           .03	  dec a
  515 0ACA:99 22 FD     	  sta AUDIO0+AUD_OUTPUT,y
  516 0ACD:80 **        	  bra .01
  517                   
  518 0ACF:C9 FF        .02	  cmp #HSFX_NOCHANNEL	; does someone else own this
  519 0AD1:F0 **        	  beq .01
  520                   
  521 0AD3:BD ** **     .10	  lda volumeh,x
  522 0AD6:99 20 FD     	  sta AUDIO0+AUD_VOLCNTRL,y	; Volume
  523                   
  524 0AD9:BD ** **     	  lda preload_temp,x
  525 0ADC:99 24 FD     	  sta AUDIO0+AUD_BACKUP,y	; Frequency lsb
  526                   
  527 0ADF:BD ** **     	  lda data_temp,x
  528 0AE2:99 21 FD     	  sta AUDIO0+AUD_FEEDBACK,y	; Update feedback
  529                   
  530 0AE5:BD ** **     	  lda flagsl,x
  531 0AE8:29 04        	  and #SHIFT_ALWAYS		; Store shifter value always?
  532 0AEA:D0 **        	  bne .20			; Branch if yes
  533 0AEC:1E ** **     	  asl shift_flag,x		; Store new shifter this time onl
  534 0AEF:90 **        	  bcc .22			; Branch if no
  535                   
  536 0AF1:B9 27 FD     .20	  lda AUDIO0+AUD_OTHER,y	; Do masking as needed
  537 0AF4:29 0F        	  and #$f
  538 0AF6:1D ** **     	  ora shift_temp,x
  539 0AF9:99 27 FD     	  sta AUDIO0+AUD_OTHER,y
  540                   
  541 0AFC:BD ** **     	  lda shiftl,x
  542 0AFF:99 23 FD     	  sta AUDIO0+AUD_SHIFT,y
  543                   
  544 0B02:B9 25 FD     .22	  lda AUDIO0+AUD_CONTROL,y	; patch in new control 
  545 0B05:29 58        	  and #ENABLE_COUNT+ENABLE_RELOAD+RESET_DONE
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   77
                        6502:src/hsfx.src               16:35:31  

  546 0B07:1D ** **     	  ora clock_temp,x
  547 0B0A:99 25 FD     	  sta AUDIO0+AUD_CONTROL,y
  548                   
  549 0B0D:CA           .01	  dex
  550 0B0E:10 A8        	 bpl .00
  551                   
  552                   ;	jmp launch_channels		; fall through
  553                   
  554                   
  555                   * If two notes start with the same frequency they shou
  556                   * at very close to the same time to prevent them from 
  557                   * 180 degrees out of phase with each other.  Being out
  558                   * them to cancel each other out; we know this from exp
  559                   * notes should be launched as close together as possib
  560                   * avoid the out-of-phase cancellation problem.  This l
  561                   * and the overhead of the additional loop is well wort
  562                   
  563 0B10:             launch_channels
  564 0B10:78           	sei
  565 0B11:A2 03        	ldx #HSFX_CHANNELCOUNT-1
  566                   
  567 0B13:             launch_next_channel
  568 0B13:BD ** **     .00	  lda launch_channel,x		; Launch this channel?
  569 0B16:F0 **        	  beq .01			; Branch if not
  570 0B18:9E ** **     	  stz launch_channel,x		; finished launching
  571                   
  572 0B1B:BC ** **     	  ldy audio_offsets,x
  573 0B1E:B9 24 FD     	  lda AUDIO0+AUD_BACKUP,y	; Frequency lsb
  574 0B21:99 26 FD     	  sta AUDIO0+AUD_COUNTER,y	; Copy prevents phase erro
  575                   
  576 0B24:B9 25 FD     	  lda AUDIO0+AUD_CONTROL,y	; Start audio timer
  577 0B27:09 18        	  ora #ENABLE_RELOAD+ENABLE_COUNT
  578 0B29:99 25 FD     	  sta AUDIO0+AUD_CONTROL,y
  579                   
  580 0B2C:CA           .01	  dex
  581 0B2D:10 E4        	 bpl .00
  582                   
  583                   * Advance the HSFX values of each active channel
  584                   
  585 0B2F:             advance_channels
  586 0B2F:58           	cli
  587 0B30:A2 03        	ldx #HSFX_CHANNELCOUNT-1
  588                   
  589 0B32:BD ** **     .00	  lda ChannelInUse,x	; Is this an active channel?
  590 0B35:F0 **        	  beq .01		; skip if not
  591 0B37:C9 FF        	  cmp #HSFX_NOCHANNEL	; do we own this channel?
  592 0B39:F0 **        	  beq .01
  593 0B3B:BD ** **     	  lda current_framel,x	; Do we match next key frame e
  594 0B3E:DD ** **     	  cmp next_keyframel,x
  595 0B41:D0 **        	  bne .10		; ... no, do interpolation only
  596 0B43:BD ** **     	  lda current_frameh,x
  597 0B46:DD ** **     	  cmp next_keyframeh,x
  598 0B49:D0 **        	  bne .10		; ... no, do interpolation only
  599 0B4B:20 ** **     	  jsr update_frame	; It's time to do something differ
  600 0B4E:80 **        	  bra .20		; First time, don't interpolate
  601                   
  602                   * Add the interpolators to the accumulators
  603                   
  604 0B50:DA           .10	   phx
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   78
                        6502:src/hsfx.src               16:35:31  

  605                   
  606 0B51:18           .11	    clc
  607 0B52:BD ** **     	    lda freq_interpl,x
  608 0B55:7D ** **     	    adc freql,x
  609 0B58:9D ** **     	    sta freql,x
  610 0B5B:BD ** **     	    lda freq_interph,x
  611 0B5E:7D ** **     	    adc freqh,x
  612 0B61:9D ** **     	    sta freqh,x
  613                   
  614                   	    ; Bump x to next accumulator-interpolator pair
  615                   
  616      TRUE          #IF HSFX_REGSIZE*HSFX_CHANNELCOUNT > 4
  617 0B64:8A           	    txa
  618 0B65:18           	    clc
  619 0B66:69 08        	    adc #HSFX_REGSIZE*HSFX_CHANNELCOUNT
  620 0B68:AA           	    tax
  621                    #ELSE
  625                    #ENDIF
  626                   
  627                   ; Has index overshot into accumulator-interpolator pai
  628 0B69:E0 20        	    cpx #HSFX_CHANNELCOUNT*HSFX_REGSIZE*HSFX_ACCUMCOU
  629 0B6B:90 E4        	    bcc .11		; Branch if not
  630 0B6D:FA           	   plx
  631                   
  632 0B6E:20 ** **     .20	  jsr calc_next_audio	; Prepare data for hardware 
  633                   
  634 0B71:CA           .01	  dex
  635 0B72:10 BE        	 bpl .00
  636                   
  637 0B74:60           	rts
  638                   
  639                   
  640                   
  641                   
  642 0B75:             update_frame
  643                   * ====================================================
  644                   * Updates an HSFX channel's arrays based on the keyfra
  645                   * pointed to by hsfx_basel,h.
  646                   *
  647                   * On entry:
  648                   *   x = HSFX channel number
  649                   *   hsfx_basel,x points to low flag byte of current fr
  650                   *
  651                   * On exit:
  652                   *   accumulators & interpolators pre-loaded
  653                   *   next_keyframel,h set to frame number for next keyf
  654                   *   hsfx_basel,x points to low flag byte of next frame
  655                   *   This routine trashes A and Y, leaves X intact
  656                   
  657 0B75:BD ** **     	lda hsfx_basel,x	; Set up indirect pointer
  658 0B78:85 14        	sta audio_ptr
  659 0B7A:BD ** **     	lda hsfx_baseh,x
  660 0B7D:85 15        	sta audio_ptr+1
  661 0B7F:             loop_frame
  662 0B7F:A0 01        	  ldy #1
  663                   
  664 0B81:B2 14        	  lda (audio_ptr)	; this is where current_frame gets 
  665 0B83:9D ** **     	  sta current_framel,x	; when a sound is started.
  666 0B86:B1 14        	  lda (audio_ptr),y
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   79
                        6502:src/hsfx.src               16:35:31  

  667 0B88:9D ** **     	  sta current_frameh,x
  668                   
  669 0B8B:C8           	  iny
  670 0B8C:B1 14        	  lda (audio_ptr),y	; Find out what to do this time
  671 0B8E:9D ** **     	  sta flagsl,x
  672 0B91:C8           	  iny
  673 0B92:B1 14        	  lda (audio_ptr),y
  674 0B94:9D ** **     	  sta flagsh,x
  675 0B97:C8           	  iny
  676                   
  677 0B98:0E ** **     	  asl top_of_loop0	; Returning to the top of a loop?
  678 0B9B:B0 **        	  bcs stuff0		; Yes, don't reload count byte
  679 0B9D:BD ** **     	  lda flagsh,x
  680 0BA0:29 40        	  and #>NEXT0		; At the bottom of an inner loop?
  681 0BA2:F0 **        	  beq next0_done	; Branch if not
  682 0BA4:BD ** **     	  lda loop_count0,x	; Infinite loop?
  683 0BA7:F0 **        	  beq infinite0		; Yes, don't count
  684 0BA9:DE ** **     	  dec loop_count0,x	; Not infinite, so are we done?
  685 0BAC:F0 **        	  beq next0_done	; Branch if yes.
  686 0BAE:             infinite0
  687 0BAE:BD ** **     	  lda loop_adrl0,x	; Reload pointer to top of loop
  688 0BB1:85 14        	  sta audio_ptr
  689 0BB3:BD ** **     	  lda loop_adrh0,x
  690 0BB6:85 15        	  sta audio_ptr+1
  691 0BB8:A9 80        	  lda #$80		; Set 'skip loading count' flag
  692 0BBA:8D ** **     	  sta top_of_loop0
  693 0BBD:80 C0        	 bra loop_frame		; Go do top of loop
  694                   
  695                   
  696 0BBF:             next0_done
  697                   
  698 0BBF:BD ** **     	  lda flagsh,x
  699 0BC2:29 80        	  and #>LOOP0		; Starting an inner loop?
  700 0BC4:F0 **        	  beq no_loop0		; Branch if not
  701 0BC6:A5 14        	  lda audio_ptr		; else save this table pointer value
  702 0BC8:9D ** **     	  sta loop_adrl0,x
  703 0BCB:A5 15        	  lda audio_ptr+1
  704 0BCD:9D ** **     	  sta loop_adrh0,x
  705 0BD0:B1 14        	  lda (audio_ptr),y	; Get # of loops to do
  706 0BD2:9D ** **     	  sta loop_count0,x
  707 0BD5:             stuff0
  708 0BD5:C8           	  iny
  709 0BD6:             no_loop0
  710                   
  711 0BD6:0E ** **     	  asl top_of_loop1	; Returning to the top of a loop?
  712 0BD9:B0 **        	  bcs stuff1		; Yes, don't reload count byte
  713 0BDB:BD ** **     	  lda flagsh,x
  714 0BDE:29 10        	  and #>NEXT1		; At the bottom of an outer loop?
  715 0BE0:F0 **        	  beq next1_done	; Branch if not
  716 0BE2:BD ** **     	  lda loop_count1,x	; Infinite loop?
  717 0BE5:F0 **        	  beq infinite1		; Yes, so don't count
  718 0BE7:DE ** **     	  dec loop_count1,x	; Not infinite, so are we done?
  719 0BEA:F0 **        	  beq next1_done	; Branch if yes
  720 0BEC:             infinite1
  721 0BEC:BD ** **     	  lda loop_adrl1,x	; Reload pointer to top of loop
  722 0BEF:85 14        	  sta audio_ptr
  723 0BF1:BD ** **     	  lda loop_adrh1,x
  724 0BF4:85 15        	  sta audio_ptr+1
  725 0BF6:A9 80        	  lda #$80		; Set 'skip loading count' flag
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   80
                        6502:src/hsfx.src               16:35:31  

  726 0BF8:8D ** **     	  sta top_of_loop1
  727 0BFB:4C 7F 0B     	 jmp loop_frame		; Go do top of loop
  728                   
  729                   
  730 0BFE:             next1_done
  731 0BFE:BD ** **     	lda flagsh,x
  732 0C01:29 20        	and #>LOOP1		; Are we starting an outer loop?
  733 0C03:F0 **        	beq no_loop1		; Branch if not
  734 0C05:A5 14        	lda audio_ptr		; Save this table pointer value
  735 0C07:9D ** **     	sta loop_adrl1,x
  736 0C0A:A5 15        	lda audio_ptr+1
  737 0C0C:9D ** **     	sta loop_adrh1,x
  738 0C0F:B1 14        	lda (audio_ptr),y	; Get # of loops to do
  739 0C11:9D ** **     	sta loop_count1,x
  740 0C14:             stuff1
  741 0C14:C8           	iny
  742                   
  743 0C15:             no_loop1		; now load appropriate accumulator/interpola
  744                   
  745                   			; The following piece of code takes the center 8 bi
  746                   			; from the middle of flagsl,h and puts them in orde
  747                   			; into hsfx_temp
  748 0C15:BD ** **     	lda flagsl,x	; Get a temporary copy of this channel's
  749 0C18:0A           	asl a
  750 0C19:5D ** **     	eor flagsh,x	; smush together upper flagsl bits + low
  751 0C1C:29 E0        	and #$e0
  752 0C1E:5D ** **     	eor flagsh,x
  753 0C21:2A           	rol a		; bring flagsh bits to the top
  754 0C22:2A           	rol a
  755 0C23:2A           	rol a
  756 0C24:2A           	rol a
  757 0C25:85 16        	sta hsfx_temp
  758                   
  759 0C27:DA           	 phx		; Stash the channel number
  760                   
  761                   			; NOTE: the BPL at top of the loop depends on the
  762                   			; ROL instruction above, and the ASL below
  763 0C28:10 **        .22	    bpl .33		; copy key frame data for each flag b
  764 0C2A:B1 14        	    lda (audio_ptr),y	; get new value
  765 0C2C:9D ** **     	    sta freql,x		; this presumes specific array order
  766 0C2F:C8           	    iny
  767 0C30:B1 14        	    lda (audio_ptr),y
  768 0C32:9D ** **     	    sta freqh,x
  769 0C35:C8           	    iny
  770 0C36:             .33
  771      TRUE          #IF HSFX_REGSIZE*HSFX_CHANNELCOUNT > 4
  772 0C36:18           	    clc
  773 0C37:8A           	    txa	 ; Offset X to next accumulator/interpolator 
  774 0C38:69 08        	    adc #HSFX_REGSIZE*HSFX_CHANNELCOUNT
  775 0C3A:AA           	    tax
  776                    #ELSE
  780                    #ENDIF
  781 0C3B:06 16        	    asl hsfx_temp	; stop when no more flags are set
  782 0C3D:D0 E9        	   bne .22
  783                   
  784 0C3F:FA           	 plx	; Restore the channel number
  785                   
  786 0C40:BD ** **     	lda flagsh,x
  787 0C43:29 04        	and #>SHIFT_ACCUM	; New absolute_shifter?
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   81
                        6502:src/hsfx.src               16:35:31  

  788 0C45:F0 **        	beq .55		;no
  789 0C47:A9 80        	lda #$80
  790 0C49:9D ** **     .55	sta shift_flag,x	; Set 'store once' flag
  791                   
  792 0C4C:BD ** **     	lda flagsl,x
  793 0C4F:29 08        	and #INTEGRATE		; This is a 'force on/off' flag
  794 0C51:0A           	asl a			; Move into pos for hardware register
  795 0C52:0A           	asl a
  796 0C53:9D ** **     	sta integrate,x
  797                   
  798 0C56:BD ** **     	lda flagsl,x
  799 0C59:29 01        	and #END_OF_EFFECT	; Are we at end of this effect?
  800 0C5B:D0 **        	bne end_of_effect
  801                   
  802                   	; Advance hsfx_basel,h to point to next key frame ent
  803 0C5D:98           	tya
  804 0C5E:18           	clc
  805 0C5F:65 14        	adc audio_ptr
  806 0C61:9D ** **     	sta hsfx_basel,x
  807 0C64:A9 00        	lda #0
  808 0C66:65 15        	adc audio_ptr+1
  809 0C68:9D ** **     	sta hsfx_baseh,x
  810                   
  811 0C6B:B1 14        	lda (audio_ptr),y	;get next key frames' frame #
  812 0C6D:9D ** **     	sta next_keyframel,x
  813 0C70:C8           	iny
  814 0C71:B1 14        	lda (audio_ptr),y
  815 0C73:9D ** **     	sta next_keyframeh,x
  816                   
  817 0C76:60           	rts			;end of key frame entry
  818                   
  819                   
  820 0C77:             end_of_effect
  821 0C77:4C 77 0A     	jmp freeChannelX
  822                   
  823                   
  824                   
  825                   
  826 0C7A:             calc_next_audio
  827                   * ====================================================
  828                   * This routuine converts the channel's accumulators in
  829                   * designed for easy hardware loading.  This is done be
  830                   * audio frame, so that at the start of the audio frame
  831                   * values can be picked up and jammed into the audio re
  832                   * delay, thereby creating purer sounds.
  833                   *
  834                   * This routine trashes A and Y, leaves X intact
  835                   
  836                   
  837                   * Select the clock by normalizing the frequency accumu
  838                   * (the algorithm and proof is actually a rather hairy 
  839 0C7A:A0 07        	ldy #7
  840 0C7C:BD ** **     	lda freql,x
  841 0C7F:85 16        	sta hsfx_temp
  842 0C81:BD ** **     	lda freqh,x
  843                   
  844 0C84:06 16        .00	  asl hsfx_temp
  845 0C86:2A           	  rol a
  846 0C87:88           	  dey
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   82
                        6502:src/hsfx.src               16:35:31  

  847 0C88:B0 **        	  bcs .01
  848 0C8A:D0 F8        	 bne .00
  849                   
  850 0C8C:6A           .01	ror a
  851                   
  852 0C8D:             end_freq
  853 0C8D:9D ** **     	sta preload_temp,x
  854 0C90:98           	tya
  855 0C91:9D ** **     	sta clock_temp,x
  856                   
  857                   
  858                   * Preset the 12-bit shifter values
  859 0C94:BD ** **     	lda shifth,x
  860 0C97:0A           	asl a
  861 0C98:0A           	asl a
  862 0C99:0A           	asl a
  863 0C9A:0A           	asl a
  864 0C9B:9D ** **     	sta shift_temp,x
  865                   
  866                   * Preset the lower 8 feedback enables
  867 0C9E:BD ** **     	lda feedbackl,x
  868 0CA1:0A           	asl
  869 0CA2:85 16        	sta hsfx_temp
  870 0CA4:BD ** **     	lda feedbackh,x
  871 0CA7:2A           	rol a
  872 0CA8:06 16        	asl hsfx_temp
  873 0CAA:2A           	rol a
  874 0CAB:06 16        	asl hsfx_temp
  875 0CAD:2A           	rol a
  876 0CAE:06 16        	asl hsfx_temp
  877 0CB0:2A           	rol a
  878 0CB1:C9 80        	cmp #$80		; sec if high bit set
  879 0CB3:5D ** **     	eor feedbackh,x		; merge in top two bits of feedbackh
  880 0CB6:29 3F        	and #$3f
  881 0CB8:5D ** **     	eor feedbackh,x
  882 0CBB:9D ** **     	sta data_temp,x
  883                   
  884                   * Grab the other feedback enable, or'ing it into the o
  885 0CBE:A9 00        	lda #0
  886 0CC0:6A           	ror a			; bring carry into top bit
  887 0CC1:1D ** **     	ora integrate,x		; OR with integration
  888 0CC4:1D ** **     	ora clock_temp,x	; OR in with clock
  889 0CC7:9D ** **     	sta clock_temp,x
  890                   
  891                   
  892                   * Increment this sound effect's current frame counter
  893 0CCA:FE ** **     	inc current_framel,x
  894 0CCD:D0 **        	bne .11
  895 0CCF:FE ** **     	inc current_frameh,x
  896                   
  897 0CD2:60           .11	rts
  898                   
  899                   
  900                   
  901                   
  902                   
  903                   * === ================================================
  904                   * ===               ==================================
  905                   * ===      Data     ==================================
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   83
                        6502:src/hsfx.src               16:35:31  

  906                   * ===               ==================================
  907                   * === ================================================
  908                   
  909                   
  910 0CD3:00 08 10 18  audio_offsets	.by $00,$08,$10,$18 ; Offsets into the h
  910                   
  911                   
  912                   
  689                   
  690                   	.in 6502:Examples/DigiDemo/digi.src	; get the sample 
    1                   
    2                   *****************************************
    3                   *										*
    4                   *	DIGI.SRC							*
    5                   *										*
    6                   *	Lynx digitized sound playback 		*
    7                   *	routines							*
    8                   *										*
    9                   *	Confidential and Proprietary		*
   10                   *	Copyright (C) 1990, Atari Corp.		*
   11                   *										*
   12                   *****************************************
   13                   
   14                   *
   15                   * Programmer : Stephen Jungels
   16                   *
   17                   
   18                   * 12/18		fixed channel allocation bug in launch_sound
   19                   
   20                   * 12/3		changed to fast cart loading, code cleanup
   21                   *			for release, variable volume
   22                   
   23                   * 11/19		added attenuation, variable sample rate,
   24                   * 			and stop sound requests
   25                   
   26                   * 11/12		created
   27                   
   28                   
   29                   * ----------------------------------------------------
   30                   * 
   31                   * These routines will play back ROM based digital audi
   32                   * samples.  The technique used is to page the ROM data
   33                   * into a 256 byte buffer.  An interrupt is set up to
   34                   * play back the sample at a constant sample rate,
   35                   * while loading the next segment of sample data in the
   36                   * background.
   37                   * 
   38                   * A custom cart reader is used which reads page-aligne
   39                   * files 128 bytes at a time.  This allows the cart rea
   40                   * loop to be sped up significantly.
   41                   *
   42                   * See the release notes for documentation
   43                   * 
   44                   * ----------------------------------------------------
   45                   
   46                   
   47                   
   48                   * ----------------------------------------------------
   49                   * Sampler constants 
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   84
                        6502:Examples/DigiDemo/digi.src 16:35:31  

   50                   * 
   51                   * This value should not be changed
   52                   * 
   53      0008         ROMSEGSPERPAGE	.eq ROMPAGESIZE/128
   54                   
   55                   * ----------------------------------------------------
   56                   
   57                   	BEGIN_ZPAGE
    1      0CD7       + TEMPORG	  .= *
    2 0CD7:           + 	  .ORG NEXTZPG
    3                 + 
   58                   * 
   59                   * Game interface variables
   60                   * 
   61 0017:             soundactive		.ds 1	; true (-1) while the sound interru
   62 0018:             stopsound		.ds 1	; set to -1 to ask for the current so
   63 0019:             digichannel		.ds 1	; the audio channel used for curren
   64      TRUE          #IFDEF VARIVOLUME
   65 001A:             volume			.ds 1	; set volume from none (0) to highest (
   66                    #ENDIF
   67                   
   68                   * Internal variables
   69                   * 
   70 001B:             loadinprogress	.ds 1	; to prevent reentry if a buffer 
   71 001C:             cartseg			.ds 1	; segment of the current cart page are
   72                   * 
   73                    END_ZPAGE
    1      001D       + NEXTZPG	  .= *
    2      FALSE        	  #IF NEXTZPG > $0100
    4                 + 	  #ENDIF
    5 001D:           + 	  .ORG TEMPORG
    6                 + 
   74                   
   75                   
   76                   * ----------------------------------------------------
   77                   * Game interface routines
   78                   * 
   79                   
   80                   
   81                   * 
   82 0CD7:             init_sampler
   83                   * 
   84                   * Call this routine once to initialize the
   85                   * sample interrupt driver.
   86                   * 
   87                   * Interrupts should be disabled when you
   88                   * call this routine.
   89                   * 
   90                   * Entry:		none
   91                   * Exit:			none
   92                   * 
   93 0CD7:64 17        	stz soundactive
   94 0CD9:64 1B        	stz loadinprogress
   95 0CDB:9C 15 FD     	stz TIMER0+DIGITIMER*4+TIM_CONTROLA
   96      FALSE        	#IFNDEF HSFX_ACTIVE
   98                   	#ENDIF
   99      TRUE         	#IFDEF VARIVOLUME
  100 0CDE:A9 FF        	  lda #255
  101 0CE0:85 1A        	  sta volume
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   85
                        6502:Examples/DigiDemo/digi.src 16:35:31  

  102 0CE2:20 ** **     	  jsr set_volume
  103                   	#ENDIF
  104 0CE5:A9 **        	lda #<sound_interrupt
  105 0CE7:8D ** **     	sta interrupts+2*DIGITIMER
  106 0CEA:A9 **        	lda #>sound_interrupt
  107 0CEC:8D ** **     	sta interrupts+2*DIGITIMER+1
  108                   
  109 0CEF:60           	rts
  110                   
  111                   
  112      TRUE         	#IFDEF VARIVOLUME
  113                   * 
  114 0CF0:             set_volume
  115                   * 
  116                   * Entry:		volume		-		volume level (0..255)
  117                   * Exit:			axy	trashed
  118                   * 
  119 0CF0:A5 1A        	lda volume
  120 0CF2:8D 52 FC     	sta MATHD
  121 0CF5:9C 53 FC     	stz MATHC
  122                   
  123 0CF8:A2 00        	ldx #0
  124 0CFA:A0 7F        	ldy #127
  125 0CFC:8E 54 FC     .1	stx MATHB
  126 0CFF:9C 55 FC     	stz MATHA
  127                   	WAITMATH
    1      0D02       + WAITMATH.00290	.= *
    2 0D02:2C 92 FC   + 	BIT SPRSYS
    3 0D05:30 FB      + 	BMI WAITMATH.00290
    4                 + 
  128 0D07:AD 61 FC     	lda MATHG
  129 0D0A:9D ** **     	sta volumetable,x
  130 0D0D:49 FF        	eor #$ff	
  131 0D0F:1A           	inc
  132 0D10:99 ** **     	sta volumetable+128,y
  133 0D13:E8           	inx
  134 0D14:88           	dey
  135 0D15:10 E5        	bpl .1
  136 0D17:60           	rts
  137                   
  138                   	#ENDIF ; IFDEF VARIVOLUME
  139                   
  140                   
  141                   * 
  142 0D18:             launch_sound
  143                   * 
  144                   * Call this routine with the file number of
  145                   * the sample you want to play in the
  146                   * accumulator, the reload value for the
  147                   * sample rate timer in the x-register, and,
  148                   * if HSFX_ACTIVE is defined, the priority of
  149                   * the sound in the y-register.
  150                   *
  151                   * If HSFX_ACTIVE is defined, an attempt will
  152                   * be made to allocate an audio channel from
  153                   * HSFX at the priority in the y-register.
  154                   * If this attempt fails, no sound will start
  155                   * playing, and carry will be set on return.
  156                   * 
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   86
                        6502:Examples/DigiDemo/digi.src 16:35:31  

  157                   * If the allocation succeeds, or HSFX_ACTIVE
  158                   * isn't defined, the sound will begin playing
  159                   * immediately, and the flag soundactive will
  160                   * be set to true (-1).  Carry will be clear
  161                   * on return.
  162                   * 
  163                   * You can find out when the sound is finished
  164                   * playing by testing soundactive (0 ==> the
  165                   * sound is finished playing).
  166                   * 
  167                   * You can stop the sound at the end of the
  168                   * next segment by setting stopsound to -1.
  169                   * soundactive will drop to zero when the
  170                   * sound has been stopped.
  171                   * 
  172                   *
  173                   * Entry:	a	-	file number of audio sample
  174                   *			x	-	reload value for sample rate timer
  175                   * 			y	-	sound priority if HSFX is active
  176                   * 
  177                   * Exit:		carry clear	-	a sound started playing
  178                   *			carry set	-	no channel was available 
  179                   *							at the selected priority
  180                   * 			soundactive -	-1 if a sound started
  181                   * 			digichannel	-	if a sound started, the audio
  182                   * 							channel used for playback
  183                   * 			
  184                   * 			
  185 0D18:9C 15 FD     	stz TIMER0+DIGITIMER*4+TIM_CONTROLA
  186 0D1B:8E 14 FD     	stx TIMER0+DIGITIMER*4+TIM_BACKUP
  187 0D1E:48           	pha
  188                   
  189      TRUE         	#IFDEF HSFX_ACTIVE
  190 0D1F:20 46 0A     	 jsr AllocAudio
  191 0D22:90 **        	 bcc .1
  192 0D24:68           	 pla
  193 0D25:60           	 rts
  194 0D26:86 19        .1	 stx digichannel
  195                   	#ENDIF
  196                   
  197 0D28:A5 19        	lda digichannel
  198 0D2A:0A           	asl
  199 0D2B:0A           	asl
  200 0D2C:0A           	asl
  201 0D2D:18           	clc
  202 0D2E:69 22        	adc #<{AUDIO0+AUD_OUTPUT}
  203 0D30:8D ** **     	sta soundchannel+1
  204                   
  205 0D33:68           	pla
  206                   	GETDIR
    1 0D34:20 3C 09   + 		JSR GetDirAddress
    2                 + 
  207                   	OPENFILE
    1 0D37:20 5B 08   + 		JSR	OpenFile0
    2                 + 
  208 0D3A:9C ** **     	stz soundmod+1
  209 0D3D:64 18        	stz stopsound
  210 0D3F:C6 17        	dec soundactive		; ff
  211 0D41:A9 80        	lda #128
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   87
                        6502:Examples/DigiDemo/digi.src 16:35:31  

  212 0D43:8D ** **     	sta readsegmod+1
  213                   
  214 0D46:64 1C        	stz cartseg
  215 0D48:20 ** **     	jsr read_sound_segment
  216                   
  217 0D4B:A9 98        	lda #ENABLE_COUNT+ENABLE_RELOAD+AUD_1+ENABLE_INT
  218 0D4D:8D 15 FD     	sta TIMER0+DIGITIMER*4+TIM_CONTROLA
  219                   
  220 0D50:18           	clc
  221 0D51:60           	rts
  222                   
  223                   
  224                   * ----------------------------------------------------
  225                   * Internal routines
  226                   
  227                   
  228                   * 
  229 0D52:             read_sound_segment
  230                   * 
  231                   * 
  232 0D52:24 1B        	bit loadinprogress
  233 0D54:30 **        	bmi rss_done
  234 0D56:C6 1B        	dec loadinprogress	; lock out reentries,
  235 0D58:58           	cli					; but let the sampler run freely
  236                   
  237 0D59:A9 80        	lda #128
  238 0D5B:4D ** **     	eor readsegmod+1
  239 0D5E:8D ** **     	sta readsegmod+1
  240                   
  241                   	SET_TO_READ_CART
    1 0D61:AD 27 08   + 		LDA	IODAT_RAM
    2 0D64:29 FD      + 		AND	#~CART_POWER_OFF 
    3      FALSE        	  #IFDEF RAMCART_USER
    5                 + 	  #ENDIF
    6 0D66:8D 27 08   + 		STA	IODAT_RAM
    7 0D69:8D 8B FD   + 		STA	IODAT
    8                 + 
  242                   
  243 0D6C:A2 00        	ldx #0
  244 0D6E:             readsegloop
  245 0D6E:AD B2 FC     	lda RCART_0
  246 0D71:             readsegmod
  247 0D71:9D ** **     	sta soundbuffer,x
  248 0D74:E8           	inx
  249 0D75:10 F7        	bpl readsegloop
  250                   
  251 0D77:E6 1C        	inc cartseg
  252 0D79:A5 1C        	lda cartseg
  253 0D7B:C9 08        	cmp #ROMSEGSPERPAGE
  254 0D7D:D0 **        	bne .1
  255                   
  256 0D7F:64 1C        	stz cartseg
  257 0D81:EE 50 08     	inc CartPage
  258 0D84:AD 50 08     	lda CartPage
  259 0D87:20 15 09     	jsr SetCartPage
  260                   
  261 0D8A:20 9B 08     .1	jsr RestoreReturn
  262 0D8D:64 1B        	stz loadinprogress
  263                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   88
                        6502:Examples/DigiDemo/digi.src 16:35:31  

  264 0D8F:             rss_done
  265 0D8F:60           	rts
  266                   
  267                   
  268                   * ----------------------------------------------------
  269                   * Interrupt code
  270                   
  271 0D90:             sound_interrupt
  272                   
  273 0D90:             soundmod
  274 0D90:AE ** **     	ldx soundbuffer		; self mod load address here
  275 0D93:E0 80        	cpx #128			; 128 is the end-of-sample flag
  276 0D95:F0 **        	beq sounddone
  277                   
  278      TRUE         	#IFDEF VARIVOLUME
  279 0D97:BD ** **     	 lda volumetable,x
  280 0D9A:             soundchannel				; self mod audio channel here
  281 0D9A:8D 22 FD     	 sta AUDIO0+AUD_OUTPUT	; let's make some noise
  282                   	#ELSE
  285                   	#ENDIF
  286                   
  287 0D9D:EE 91 0D     	inc soundmod+1
  288                   
  289 0DA0:AD 91 0D     	lda soundmod+1			; see if another sound segment needs
  290 0DA3:4D 72 0D     	eor readsegmod+1
  291 0DA6:30 **        	bmi soundload
  292                   
  293 0DA8:             soundexit
  294 0DA8:FA           	plx
  295 0DA9:68           	pla
  296 0DAA:40           	rti
  297                   
  298 0DAB:             soundload ; handle rom load
  299 0DAB:24 18        	bit stopsound			; has someone asked for this sound to
  300 0DAD:30 **        	bmi sounddone
  301 0DAF:5A           	phy
  302 0DB0:20 52 0D     	jsr read_sound_segment
  303 0DB3:7A           	ply
  304 0DB4:80 F2        	bra soundexit
  305                   
  306                   
  307 0DB6:             sounddone					; the sound is finished playing, bye for
  308 0DB6:9C 15 FD     	stz TIMER0+DIGITIMER*4+TIM_CONTROLA
  309 0DB9:64 17        	stz soundactive
  310                   
  311      TRUE         	#IFDEF HSFX_ACTIVE
  312 0DBB:5A           	  phy
  313 0DBC:A6 19        	  ldx digichannel
  314 0DBE:20 3B 0A     	  jsr FreeAudio
  315 0DC1:7A           	  ply
  316                   	#ENDIF
  317 0DC2:80 E4        	bra soundexit
  318                   
  691                   
  692                   
  693                   * ----------------------------------------------------
  694                   
  695                   * 
  696                   * font routines
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   89
                                                        16:35:31  

  697                   * 
  698                   
  699                   * 
  700 0DC4:             set_sprite_text
  701                   * 
  702 0DC4:86 02        	stx sysptr2				; scab pointer
  703 0DC6:84 03        	sty sysptr2+1
  704                   
  705 0DC8:A0 FF        	ldy #255
  706 0DCA:20 ** **     .1	jsr get_char_pointer
  707 0DCD:F0 **        	beq .2	
  708                   
  709 0DCF:5A           	PHY
  710 0DD0:A0 03        	ldy #SCB_NEXT			; next scab
  711 0DD2:B1 02        	lda (sysptr2),y	
  712 0DD4:AA           	tax
  713 0DD5:C8           	iny
  714 0DD6:B1 02        	lda (sysptr2),y	
  715 0DD8:85 03        	sta sysptr2+1
  716 0DDA:86 02        	stx sysptr2
  717                   
  718 0DDC:7A           	PLY
  719 0DDD:80 EB        	bra .1
  720                   
  721 0DDF:60           .2	rts
  722                   
  723                   
  724                   * 
  725 0DE0:             create_sprite_text
  726                   * 
  727 0DE0:86 02        	stx sysptr2
  728 0DE2:84 03        	sty sysptr2+1
  729                   
  730 0DE4:A0 13        	ldy #20-1					; copy firstchar template
  731 0DE6:8C ** **     	sty .ff						; the first char scab is 20 bytes
  732 0DE9:B9 ** **     .3	lda firstchar,y
  733 0DEC:91 02        	sta (sysptr2),y
  734 0DEE:88           	dey
  735 0DEF:10 F8        	bpl .3
  736                   
  737 0DF1:A0 FF        	ldy #255
  738 0DF3:20 ** **     .1	jsr get_char_pointer
  739 0DF6:5A           	PHY
  740 0DF7:C8           	iny
  741 0DF8:B1 00        	lda (sysptr),y
  742 0DFA:F0 **        	beq .2
  743                   
  744 0DFC:A0 07        	ldy #SCB_HPOS				; find next hpos
  745 0DFE:18           	clc
  746 0DFF:A5 13        	lda fontwidth
  747 0E01:71 02        	adc (sysptr2),y
  748 0E03:8D ** **     	sta nextchar+SCB_HPOS
  749 0E06:C8           	iny
  750 0E07:A9 00        	lda #0
  751 0E09:71 02        	adc (sysptr2),y
  752 0E0B:8D ** **     	sta nextchar+SCB_HPOS+1
  753 0E0E:C8           	iny
  754 0E0F:B1 02        	lda (sysptr2),y
  755 0E11:8D ** **     	sta nextchar+SCB_VPOS
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   90
                                                        16:35:31  

  756 0E14:C8           	iny
  757 0E15:B1 02        	lda (sysptr2),y
  758 0E17:8D ** **     	sta nextchar+SCB_VPOS+1
  759                   
  760 0E1A:A0 03        	ldy #SCB_NEXT				; point this scab to next scab
  761 0E1C:38           	sec							; compensate for -1 bias
  762 0E1D:AD ** **     	lda .ff
  763 0E20:65 02        	adc sysptr2
  764 0E22:91 02        	sta (sysptr2),y	
  765 0E24:AA           	tax
  766 0E25:C8           	iny
  767 0E26:A5 03        	lda sysptr2+1
  768 0E28:69 00        	adc #0
  769 0E2A:91 02        	sta (sysptr2),y	
  770                   
  771 0E2C:85 03        	sta sysptr2+1				; advance sysptr2 to next scab
  772 0E2E:86 02        	stx sysptr2	
  773                   
  774 0E30:A0 0A        	ldy #11-1					; copy nextchar template
  775 0E32:8C ** **     	sty .ff						; next char scabs are 11 bytes
  776 0E35:B9 ** **     .5	lda nextchar,y
  777 0E38:91 02        	sta (sysptr2),y
  778 0E3A:88           	dey
  779 0E3B:10 F8        	bpl .5
  780                   
  781 0E3D:7A           	PLY
  782 0E3E:80 B3        	bra .1
  783                   
  784 0E40:7A           .2	PLY
  785 0E41:60           	rts					; SCB_NEXT is already pointing to NIL, so we'
  786 0E42:             .ff	.ds 1
  787                   
  788                   
  789 0E43:             firstchar
  790 0E43:05 B0 00     	.by ONE_PER_PIXEL+NONCOLL_SPRITE, LITERAL+RELOAD_HVST
  791 0E46:00 00        	.wo 0
  792 0E48:00 00        	.wo 0
  793 0E4A:00 00 00 00  	.wo 0, 0
  793                   
  794 0E4E:00 01 00 01  	.wo 1*256, 1*256
  794                   
  795 0E52:00 00 00 00  	.wo 0*256, 0*256
  795                   
  796 0E56:01           	.by 1
  797                   
  798 0E57:             nextchar
  799 0E57:05 88 00     	.by ONE_PER_PIXEL+NONCOLL_SPRITE, LITERAL+RELOAD_NONE
  800 0E5A:00 00        	.wo 0
  801 0E5C:00 00        	.wo 0
  802 0E5E:00 00 00 00  	.wo 0, 0
  802                   
  803                   
  804                   
  805                   * 
  806 0E62:             get_char_pointer
  807                   * 
  808 0E62:C8           .2	iny
  809 0E63:B1 00        	lda (sysptr),y
  810 0E65:F0 **        	beq .3				; done
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   91
                                                        16:35:31  

  811 0E67:85 04        	sta sysptr3
  812 0E69:30 **        	bmi .1
  813                   
  814                   	; handle normal text
  815                   
  816 0E6B:5A           	PHY
  817 0E6C:38           	sec	
  818 0E6D:E9 01        	sbc #" "
  819 0E6F:8D 54 FC     	sta MATHB
  820 0E72:A0 02        	ldy	#FONTCHARLEN
  821 0E74:B1 0C        	lda (fontptr),y			; set up to multiply by char len
  822 0E76:0A           	asl
  823 0E77:1A           	inc
  824 0E78:8D 52 FC     	sta MATHD
  825 0E7B:9C 53 FC     	stz MATHC
  826 0E7E:9C 55 FC     	stz MATHA
  827                   
  828 0E81:A0 05        	ldy #SCB_DATA
  829                   	WAITMATH
    1      0E83       + WAITMATH.002D0	.= *
    2 0E83:2C 92 FC   + 	BIT SPRSYS
    3 0E86:30 FB      + 	BMI WAITMATH.002D0
    4                 + 
  830 0E88:18           	clc	
  831 0E89:AD 60 FC     	lda MATHH
  832 0E8C:65 0C        	adc fontptr
  833 0E8E:AA           	tax
  834 0E8F:AD 61 FC     	lda MATHG
  835 0E92:65 0D        	adc fontptr+1
  836 0E94:48           	pha	
  837 0E95:8A           	txa
  838 0E96:18           	clc
  839 0E97:69 04        	adc #4
  840 0E99:91 02        	sta (sysptr2),y
  841 0E9B:68           	pla
  842 0E9C:69 00        	adc #0
  843 0E9E:C8           	iny
  844 0E9F:91 02        	sta (sysptr2),y
  845                   
  846 0EA1:7A           	PLY
  847 0EA2:A9 01        	lda #1
  848 0EA4:60           .3	rts
  849                   
  850 0EA5:             .1	; handle control byte
  851                   
  852 0EA5:29 30        	and #%00110000			; extract font index
  853 0EA7:4A           	lsr
  854 0EA8:4A           	lsr
  855 0EA9:4A           	lsr
  856 0EAA:AA           	tax
  857 0EAB:BD ** **     	lda fontlist,x
  858 0EAE:85 0C        	sta fontptr
  859 0EB0:BD ** **     	lda fontlist+1,x
  860 0EB3:85 0D        	sta fontptr+1
  861 0EB5:5A           	PHY
  862 0EB6:A0 03        	ldy #FONTWIDTH
  863 0EB8:B1 0C        	lda (fontptr),y
  864 0EBA:85 13        	sta fontwidth
  865                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   92
                                                        16:35:31  

  866 0EBC:A0 01        	ldy #SCB_CTRL1			; new color
  867 0EBE:B1 02        	lda (sysptr2),y
  868 0EC0:89 08        	bit #REUSE_PALETTE
  869 0EC2:D0 **        	bne .4
  870 0EC4:29 30        	and #RELOAD_HVST
  871 0EC6:4A           	lsr
  872 0EC7:4A           	lsr
  873 0EC8:4A           	lsr
  874 0EC9:4A           	lsr
  875 0ECA:AA           	tax
  876 0ECB:BC ** **     	ldy reloaddepth,x
  877 0ECE:A5 04        	lda sysptr3
  878 0ED0:29 0F        	and #%00001111
  879 0ED2:91 02        	sta (sysptr2),y
  880 0ED4:7A           .4	PLY
  881                   
  882 0ED5:A5 04        	lda sysptr3
  883 0ED7:89 40        	bit #64
  884 0ED9:F0 87        	beq .2
  885                   
  886                   	; handle new position request
  887                   
  888 0EDB:C8           	iny	
  889 0EDC:B1 00        	lda (sysptr),y
  890 0EDE:18           	clc
  891 0EDF:69 D1        	adc #<{LEFTEDGE+160-255}
  892 0EE1:AA           	tax
  893 0EE2:A9 FF        	lda #>{LEFTEDGE+160-255}
  894 0EE4:69 00        	adc #0
  895 0EE6:5A           	PHY
  896 0EE7:A0 08        	ldy #SCB_HPOS+1
  897 0EE9:91 02        	sta (sysptr2),y
  898 0EEB:88           	dey
  899 0EEC:8A           	txa
  900 0EED:91 02        	sta (sysptr2),y
  901 0EEF:7A           	PLY	
  902                   
  903 0EF0:C8           	iny	
  904 0EF1:B1 00        	lda (sysptr),y
  905 0EF3:18           	clc
  906 0EF4:69 B4        	adc #<{TOPEDGE+102-255}
  907 0EF6:AA           	tax
  908 0EF7:A9 FF        	lda #>{TOPEDGE+102-255}
  909 0EF9:69 00        	adc #0
  910 0EFB:5A           	PHY
  911 0EFC:A0 0A        	ldy #SCB_VPOS+1
  912 0EFE:91 02        	sta (sysptr2),y
  913 0F00:88           	dey
  914 0F01:8A           	txa
  915 0F02:91 02        	sta (sysptr2),y
  916 0F04:7A           	PLY	
  917                   
  918 0F05:4C 62 0E     	jmp .2
  919                   
  920 0F08:0B 0F 11 13  reloaddepth .by 0+11,4+11,6+11,8+11
  920                   
  921                   
  922                   
  923                   * 
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   93
                                                        16:35:31  

  924 0F0C:             load_font
  925                   * 
  926 0F0C:86 0C        	stx fontptr
  927 0F0E:84 0D        	sty fontptr+1
  928                   	GETDIR
    1 0F10:20 3C 09   + 		JSR GetDirAddress
    2                 + 
  929                   	OPENFILE
    1 0F13:20 5B 08   + 		JSR	OpenFile0
    2                 + 
  930 0F16:A5 0C        	lda fontptr
  931 0F18:85 00        	sta sysptr
  932 0F1A:A5 0D        	lda fontptr+1
  933 0F1C:85 01        	sta sysptr+1
  934 0F1E:A2 04        	ldx #4
  935 0F20:A0 00        	ldy #0
  936 0F22:20 ** **     	jsr read_some_bytes
  937                   
  938 0F25:A0 00        	ldy #FONTSIZE
  939 0F27:B1 0C        	lda (fontptr),y
  940 0F29:85 02        	sta sysptr2					; count down num chars
  941 0F2B:C8           	iny
  942 0F2C:B1 0C        	lda (fontptr),y
  943 0F2E:85 03        	sta sysptr2+1				; save next line offset
  944                   
  945 0F30:A0 02        .1	ldy #FONTCHARLEN
  946 0F32:B1 0C        	lda (fontptr),y
  947 0F34:85 04        	sta sysptr3					; save char len
  948                   
  949 0F36:A5 03        .2	lda sysptr2+1
  950 0F38:92 00        	sta (sysptr)
  951 0F3A:E6 00        	inc sysptr
  952 0F3C:D0 **        	bne .2f
  953 0F3E:E6 01        	 inc sysptr+1
  954 0F40:A2 01        .2f	ldx #1
  955 0F42:A0 00        	ldy #0
  956 0F44:20 ** **     	jsr read_some_bytes
  957 0F47:C6 04        	dec sysptr3
  958 0F49:D0 EB        	bne .2
  959                   
  960 0F4B:A9 00        	lda #0
  961 0F4D:92 00        	sta (sysptr)
  962 0F4F:E6 00        	inc sysptr
  963 0F51:D0 **        	bne .28
  964 0F53:E6 01        	 inc sysptr+1
  965 0F55:C6 02        .28	dec sysptr2
  966 0F57:D0 D7        	bne .1
  967                   
  968                   	; update font list
  969                   
  970 0F59:A5 10        	lda numfonts
  971 0F5B:E6 10        	inc numfonts
  972 0F5D:0A           	asl
  973 0F5E:A8           	tay
  974 0F5F:A5 0C        	lda fontptr
  975 0F61:99 ** **     	sta fontlist,y
  976 0F64:A5 0D        	lda fontptr+1
  977 0F66:99 ** **     	sta fontlist+1,y
  978                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   94
                                                        16:35:31  

  979 0F69:60           	rts
  980                   
  981                   
  982                   * 
  983 0F6A:             read_some_bytes
  984                   * 
  985 0F6A:8E 51 08     	stx CartIOCount	 
  986 0F6D:8C 52 08     	sty CartIOCount+1
  987 0F70:38           	sec
  988 0F71:AD 59 08     	lda CartDirectory+ROMDIR_SIZE
  989 0F74:ED 51 08     	sbc CartIOCount
  990 0F77:AA           	tax
  991 0F78:AD 5A 08     	lda CartDirectory+ROMDIR_SIZE+1
  992 0F7B:ED 52 08     	sbc CartIOCount+1
  993 0F7E:A8           	tay
  994 0F7F:B0 **        	bcs .1
  995                   
  996 0F81:AD 59 08     	lda CartDirectory+ROMDIR_SIZE
  997 0F84:8D 51 08     	sta CartIOCount
  998 0F87:AD 5A 08     	lda CartDirectory+ROMDIR_SIZE+1
  999 0F8A:8D 52 08     	sta CartIOCount+1
 1000 0F8D:A0 00        	ldy #0
 1001 0F8F:A2 00        	ldx #0
 1002                   
 1003 0F91:8E 59 08     .1	stx CartDirectory+ROMDIR_SIZE
 1004 0F94:8C 5A 08     	sty CartDirectory+ROMDIR_SIZE+1
 1005                   
 1006 0F97:EE 51 08     	inc CartIOCount
 1007 0F9A:EE 52 08     	inc CartIOCount+1
 1008 0F9D:4C C3 08     	jmp readCart0Grunt
 1009                   
 1010 0FA0:00 ** ** **  fontlist	.wo plainfont, lilfont
 1010                   
 1011                   
 1012                   
 1013                   * ----------------------------------------------------
 1014                   
 1015                   
 1016                   * 
 1017                   * Display data
 1018                   * 
 1019                   	#MACRO PALDEF
 1020 MACRO             	.BY $?0/256,$?1/256,$?2/256,$?3/256,$?4/256,$?5/256,$
 1021 MACRO             	.BY $?8/256,$?9/256,$?a/256,$?b/256,$?c/256,$?d/256,$
 1022 MACRO             	.BY <$?0,<$?1,<$?2,<$?3,<$?4,<$?5,<$?6,<$?7
 1023 MACRO             	.BY <$?8,<$?9,<$?a,<$?b,<$?c,<$?d,<$?e,<$?f
 1024                   	#ENDM
 1025                   
 1026 0FA4:             palette
 1027                    PALDEF	f00, 0f0, 00f, fff, 000, ff0, f0f, 0ff, 222,44
    1 0FA4:0F 00 00 0F  	.BY $f00/256,$0f0/256,$00f/256,$fff/256,$000/256,$ff0
    1      00 0F 0F 00  
    1                   
    2 0FAC:02 04 06 08  	.BY $222/256,$444/256,$666/256,$888/256,$aaa/256,$bbb
    2      0A 0B 0C 0D  
    2                   
    3 0FB4:00 F0 0F FF  	.BY <$f00,<$0f0,<$00f,<$fff,<$000,<$ff0,<$f0f,<$0ff
    3      00 F0 0F FF  
    3                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   95
                        digidemo.src                    16:35:31  

    4 0FBC:22 44 66 88  	.BY <$222,<$444,<$666,<$888,<$aaa,<$bbb,<$ccc,<$ddd
    4      AA BB CC DD  
    4                   
    5                 + 
 1028                   * 		grn, blu, red, wht, blk, aqu, yel, prp, 
 1029                   
 1030 0FC4:02 00 00 00  pixelsprite			.hs 02000000
 1030                   
 1031                   
 1032 0FC8:             screenerase
 1033 0FC8:C1 90 00     	.by FOUR_PER_PIXEL+BACKNONCOLL_SPRITE, RELOAD_HV+LITE
 1034 0FCB:00 **        	.wo samplebox
 1035 0FCD:C4 0F        	.wo pixelsprite	 
 1036 0FCF:30 00 4D 00  	.wo LEFTEDGE, TOPEDGE
 1036                   
 1037 0FD3:00 A0 00 66  	.wo SCREENWIDTH*256, SCREENHEIGHT*256
 1037                   
 1038 0FD7:11           	.by $11
 1039                   
 1040 0FD8:             samplebox
 1041 0FD8:C1 90 00     	.by FOUR_PER_PIXEL+BACKNONCOLL_SPRITE, RELOAD_HV+LITE
 1042 0FDB:00 **        	.da volumesliderbox
 1043 0FDD:C4 0F        	.da pixelsprite	 
 1044 0FDF:34 00 51 00  	.da LEFTEDGE+4, TOPEDGE+4
 1044                   
 1045 0FE3:00 98 00 2B  	.da {SCREENWIDTH-8}*256, {SCREENHEIGHT/2-8}*256
 1045                   
 1046 0FE7:22           	.by $22
 1047                   
 1048 0FE8:             volumesliderbox
 1049 0FE8:C1 90 00     	.by FOUR_PER_PIXEL+BACKNONCOLL_SPRITE, RELOAD_HV+LITE
 1050 0FEB:00 **        	.da volumeslider
 1051 0FED:C4 0F        	.da pixelsprite	 
 1052 0FEF:74 00 80 00  	.da LEFTEDGE+4+8*8, TOPEDGE+51
 1052                   
 1053 0FF3:00 40 00 06  	.da {64}*256, {6}*256
 1053                   
 1054 0FF7:44           	.by $44
 1055 0FF8:             volumeslider
 1056 0FF8:C1 90 00     	.by FOUR_PER_PIXEL+BACKNONCOLL_SPRITE, RELOAD_HV+LITE
 1057 0FFB:00 **        	.da ratesliderbox
 1058 0FFD:C4 0F        	.da pixelsprite	 
 1059 0FFF:00 00 81 00  	.da 0, TOPEDGE+52
 1059                   
 1060 1003:00 02 00 04  	.da {2}*256, {4}*256
 1060                   
 1061 1007:33           	.by $33
 1062                   
 1063 1008:             ratesliderbox
 1064 1008:C1 90 00     	.by FOUR_PER_PIXEL+BACKNONCOLL_SPRITE, RELOAD_HV+LITE
 1065 100B:00 **        	.da rateslider
 1066 100D:C4 0F        	.da pixelsprite	 
 1067 100F:74 00 8A 00  	.da LEFTEDGE+4+8*8, TOPEDGE+61
 1067                   
 1068 1013:00 40 00 06  	.da {64}*256, {6}*256
 1068                   
 1069 1017:44           	.by $44
 1070 1018:             rateslider
 1071 1018:C1 90 00     	.by FOUR_PER_PIXEL+BACKNONCOLL_SPRITE, RELOAD_HV+LITE
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   96
                                                        16:35:31  

 1072 101B:00 **        	.da pansliderbox
 1073 101D:C4 0F        	.da pixelsprite	 
 1074 101F:00 00 8B 00  	.da 0, TOPEDGE+62
 1074                   
 1075 1023:00 02 00 04  	.da {2}*256, {4}*256
 1075                   
 1076 1027:33           	.by $33
 1077                   
 1078 1028:             pansliderbox
 1079 1028:C1 90 00     	.by FOUR_PER_PIXEL+BACKNONCOLL_SPRITE, RELOAD_HV+LITE
 1080 102B:00 **        	.da panslider
 1081 102D:C4 0F        	.da pixelsprite	 
 1082 102F:74 00 94 00  	.da LEFTEDGE+4+8*8, TOPEDGE+71
 1082                   
 1083 1033:00 40 00 06  	.da {64}*256, {6}*256
 1083                   
 1084 1037:44           	.by $44
 1085 1038:             panslider
 1086 1038:C1 90 00     	.by FOUR_PER_PIXEL+BACKNONCOLL_SPRITE, RELOAD_HV+LITE
 1087 103B:00 **        	.da rbuf
 1088 103D:C4 0F        	.da pixelsprite	 
 1089 103F:00 00 95 00  	.da 0, TOPEDGE+72
 1089                   
 1090 1043:00 02 00 04  	.da {2}*256, {4}*256
 1090                   
 1091 1047:33           	.by $33
 1092                   
 1093                   
 1094 1048:             glidersprite
 1095                   ; Handy Sprite Image Data
 1096                   ; Bits per Pixel = 1
 1097                   ; Next data is down-right
 1098 1048:03 74 30     	.BYTE	$03,$74,$30
 1099 104B:03 98 80     	.BYTE	$03,$98,$80
 1100 104E:03 91 00     	.BYTE	$03,$91,$00
 1101 1051:02 8A        	.BYTE	$02,$8a
 1102 1053:02 84        	.BYTE	$02,$84
 1103 1055:01           	.BYTE	$01
 1104                   ; Next data is up-right
 1105 1056:03 AC 20     	.BYTE	$03,$ac,$20
 1106 1059:03 B2 10     	.BYTE	$03,$b2,$10
 1107 105C:03 B9 08     	.BYTE	$03,$b9,$08
 1108 105F:03 C0 84     	.BYTE	$03,$c0,$84
 1109 1062:03 C8 42     	.BYTE	$03,$c8,$42
 1110 1065:04 D0 21 00  	.BYTE	$04,$d0,$21,$00
 1110                   
 1111 1069:04 D8 10 80  	.BYTE	$04,$d8,$10,$80
 1111                   
 1112 106D:03 30 B0     	.BYTE	$03,$30,$b0
 1113 1070:01           	.BYTE	$01
 1114                   ; Next data is up-left
 1115 1071:03 62 72     	.BYTE	$03,$62,$72
 1116 1074:03 62 54     	.BYTE	$03,$62,$54
 1117 1077:03 62 54     	.BYTE	$03,$62,$54
 1118 107A:03 6A 10     	.BYTE	$03,$6a,$10
 1119 107D:03 6A 10     	.BYTE	$03,$6a,$10
 1120 1080:01           	.BYTE	$01
 1121                   ; Next data is down-left
 1122 1081:03 74 30     	.BYTE	$03,$74,$30
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   97
                                                        16:35:31  

 1123 1084:02 8A        	.BYTE	$02,$8a
 1124 1086:03 91 00     	.BYTE	$03,$91,$00
 1125 1089:03 98 80     	.BYTE	$03,$98,$80
 1126 108C:03 A0 40     	.BYTE	$03,$a0,$40
 1127 108F:03 AC 20     	.BYTE	$03,$ac,$20
 1128 1092:03 B2 10     	.BYTE	$03,$b2,$10
 1129 1095:03 B9 08     	.BYTE	$03,$b9,$08
 1130 1098:03 10 B0     	.BYTE	$03,$10,$b0
 1131 109B:00           	.BYTE	$00
 1132                   ; 84 total image bytes
 1133                   
 1134                   
 1135 109C:             glider
 1136 109C:04 10 00     	.BY	ONE_PER_PIXEL+NORMAL_SPRITE, RELOAD_HV, 0
 1137 109F:00 00        	.WO	0
 1138 10A1:48 10        	.WO	glidersprite
 1139 10A3:30 00 89 00  	.WO	LEFTEDGE, TOPEDGE+60
 1139                   
 1140 10A7:00 01 00 01  	.WO	$0100, $0100
 1140                   
 1141 10AB:02           	.BY	$02
 1142                   
 1143                   * Calculate the reload value for the sample timer usin
 1144                   * 		RELOAD	=	1,000,000 / RATE,
 1145                   * where rate is in KHz.
 1146                   * 
 1147                   * The minimum sample rate suported is 3907 (when reloa
 1148                   * The maximum sample rate for this example program see
 1149                   * about 15000.
 1150                   
 1151 10AC:             defaultrates
 1152 10AC:85 FA 85 85  	.by MIL/7500, MIL/4000, MIL/7500, MIL/7500, MIL/7500
 1152      85           
 1153                   
 1154 10B1:             stbase
 1155 10B1:             pausetext
 1156 10B1:DF           	.by %1101*16+$f
 1157 10B2:8F AE        	.by SCREENWIDTH/2-8*4+95, SCREENHEIGHT/4-4+153
 1158 10B4:29 1B 0C 20  	.zs "(PAUSED)"
 1158      1E 10 0F 2A  
 1158      00           
 1159 10BD:             s0text
 1160 10BD:D6           	.by %1101*16+6			; font 0, color 6, new position to f
 1161 10BE:8B AE        	.by SCREENWIDTH/2-9*4+95, SCREENHEIGHT/4-4+153	; hpos
 1162 10C0:12 10 19 1F  	.zs "GENTLEMEN"
 1162      17 10 18 10  
 1162      19 00        
 1163 10CA:             s1text
 1164 10CA:D1           	.by %1101*16+1
 1165 10CB:97 AE        	.by SCREENWIDTH/2-6*4+95, SCREENHEIGHT/4-4+153
 1166 10CD:21 14 0F 1B  	.zs "VIDPWR"
 1166      22 1D 00     
 1167 10D4:             s2text
 1168 10D4:D3           	.by %1101*16+3
 1169 10D5:97 AE        	.by SCREENWIDTH/2-6*4+95, SCREENHEIGHT/4-4+153
 1170 10D7:0C 22 22 22  	.zs "AWWWW!"
 1170      22 26 00     
 1171 10DE:             s3text
 1172 10DE:D4           	.by %1101*16+4
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   98
                                                        16:35:31  

 1173 10DF:97 AE        	.by SCREENWIDTH/2-6*4+95, SCREENHEIGHT/4-4+153
 1174 10E1:1A 1A 1A 1A  	.zs "OOOOH!"
 1174      13 26 00     
 1175 10E8:             s4text
 1176 10E8:D5           	.by %1101*16+5
 1177 10E9:9B AE        	.by SCREENWIDTH/2-5*4+95, SCREENHEIGHT/4-4+153
 1178 10EB:24 10 0C 13  	.zs "YEAH!"
 1178      26 00        
 1179                   
 1180 10F1:             stextoffsets
 1181 10F1:00 0C 19 23  	.by 0, s0text-stbase, s1text-stbase, s2text-stbase, s
 1181      2D 37        
 1182                   
 1183 10F7:             sscabs_l
 1184 10F7:00 ** ** **  	.by <pbuf, <s0buf, <s1buf, <s2buf, <s3buf, <s4buf
 1184      ** **        
 1185 10FD:             sscabs_h
 1186 10FD:00 ** ** **  	.by >pbuf, >s0buf, >s1buf, >s2buf, >s3buf, >s4buf
 1186      ** **        
 1187                   
 1188                   
 1189 1103:             slbase
 1190 1103:             slidertext
 1191 1103:DF           	.by %1101*16+$f
 1192 1104:63 CB        	.by 4+95, 50+153
 1193 1106:             vstext
 1194 1106:2F 01 21 1A  	.as "; VOLUME"								; 8
 1194      17 20 18 10  
 1194                   
 1195                   
 1196 110E:DF           	.by %1101*16+$f
 1197 110F:63 D5        	.by 4+95, 60+153
 1198 1111:             rstext
 1199 1111:01 01 1D 0C  	.as "  RATE"								; 6
 1199      1F 10        
 1200                   
 1201 1117:DF           	.by %1101*16+$f
 1202 1118:63 DF        	.by 4+95, 70+153
 1203 111A:             pstext
 1204 111A:01 01 1B 0C  	.zs "  PAN"									; 5
 1204      19 00        
 1205                   
 1206 1120:03 0E 17     sltextoffsets	.by vstext-slbase, rstext-slbase, pstext
 1207                   
 1208 1123:             helptext
 1209 1123:CF           	.by %1100*16+$f
 1210 1124:60 E7        	.by 1+95, SCREENHEIGHT+153-{4*6}
 1211 1126:15 1A 24 1B  	.as "JOYPAD LEFT-RIGHT SELECT SAMPLE"		; 31
 1211      0C 0F 01 17  
 1211      10 11 1F 2C  
 1211      1D 14 12 13  
 1211      1F 01 1E 10  
 1211      17 10 0E 1F  
 1211      01 1E 0C 18  
 1211      1B 17 10     
 1212                   
 1213 1145:CF           	.by %1100*16+$f
 1214 1146:60 ED        	.by 1+95, SCREENHEIGHT+153-{3*6}
 1215 1148:15 1A 24 1B  	.as "JOYPAD UP-DOWN SELECT SLIDER"			; 28
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page   99
                                                        16:35:31  

 1215      0C 0F 01 20  
 1215      1B 2C 0F 1A  
 1215      22 19 01 1E  
 1215      10 17 10 0E  
 1215      1F 01 1E 17  
 1215      14 0F 10 1D  
 1215                   
 1216                   
 1217 1164:CF           	.by %1100*16+$f
 1218 1165:60 F3        	.by 1+95, SCREENHEIGHT+153-{2*6}
 1219 1167:0D 01 0C 19  	.as "B AND JOYPAD LEFT-RIGHT SET SLIDER"	; 34
 1219      0F 01 15 1A  
 1219      24 1B 0C 0F  
 1219      01 17 10 11  
 1219      1F 2C 1D 14  
 1219      12 13 1F 01  
 1219      1E 10 1F 01  
 1219      1E 17 14 0F  
 1219      10 1D        
 1220                   
 1221 1189:CF           	.by %1100*16+$f
 1222 118A:60 F9        	.by 1+95, SCREENHEIGHT+153-{1*6}
 1223 118C:0C 01 1B 17  	.zs "A PLAYS A SAMPLE"						; 16
 1223      0C 24 1E 01  
 1223      0C 01 1E 0C  
 1223      18 1B 17 10  
 1223      00           
 1224                   
 1225 119D:             ratetext
 1226 119D:DF           	.by %1101*16+$f
 1227 119E:F7 F7        	.by SCREENWIDTH-8+95, SCREENHEIGHT-8+153
 1228 11A0:             rate
 1229 11A0:02 00        	.zs "0"
 1230                   
 1231                   
 1232                   * ----------------------------------------------------
 1233                   * Buffers
 1234                   * 
 1235 11A2:             interrupts		.ds 16
 1236 11B2:             samplerates		.ds NUMSOUNDS
 1237 11B7:             plainfont		.ds {48*15+FONTBLANK}
 1238 148B:             lilfont			.ds {48*11+FONTBLANK}
 1239                   
 1240 169F:             sliderbuffer	.ds 20+{8+6+5-1}*11
 1241 1779:             helpbuffer		.ds 20+{31+28+34+16-1}*11
 1242                   
 1243 1C31:             rbuf			.ds 20
 1244 1C45:             pbuf			.ds 20+{8-1}*11
 1245 1CA6:             s0buf			.ds 20+{9-1}*11
 1246 1D12:             s1buf			.ds 20+{6-1}*11
 1247 1D5D:             s2buf			.ds 20+{6-1}*11
 1248 1DA8:             s3buf			.ds 20+{6-1}*11
 1249 1DF3:             s4buf			.ds 20+{5-1}*11
 1250                   
 1251                   
 1252                   		.in 6502:src/hsfx.var
    1                   ; Thursday 19-Apr-90 16:17:32
    2                   * === hsfx.var =======================================
    3                   *
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  100
                        6502:src/hsfx.var               16:35:31  

    4                   * Handy Sound Effects Driver  --  Handy Software
    5                   *
    6                   * Confidential and Proprietary
    7                   * Copyright (C) 1989, Epyx, Inc.
    8                   *
    9                   * Date		Name		Description
   10                   * ---------	--------------	---------------------------
   11                   * 19-Apr-90	SHL		Moved top_of_loop0,1 variables from h
   12                   *				Moved hsfx_temp to zero page in hsfx.src
   13                   * 18-Apr-90	SHL		Added HSFXVarStart and HSFXVarEnd mar
   14                   * 31-Aug-89	Stephen Jungels	Split this file from hsfx.
   15                   *
   16                   * ====================================================
   17                   
   18                   
   19                   ; Variables used by the HSFX driver
   20                   
   21                   ; If you are using HSFX you must include this file
   22                   
   23                   
   24 1E33:             HSFXVarStart
   25                   
   26                   
   27 1E33:             audio_interruptus .ds 1	; Set on entry to audio interr
   28 1E34:             audio_lockout	.ds 1	; flag to lock out audio interrupt
   29 1E35:             audio_dropout	.ds 1	; count of audio frames that have 
   30                   
   31 1E36:             top_of_loop0	.ds 1	; recursion flag
   32 1E37:             top_of_loop1	.ds 1	; recursion flag
   33                   
   34                   
   35                   * ChannelInUse is used to denote both that the HSFX ch
   36                   * and the priority of the effect currently playing on 
   37                   * A ChannelInUse value of 0 (HSFX_FREECHANNEL) denotes
   38                   * A value of $FF (HSFX_NOCHANNEL) denotes channel not 
   39                   * Any other value is a channel-priority value, where s
   40                   * odd priorities and music notes get even priorities.
   41                   * Note that ChannelInUse has 5 elements, allowing for 
   42                   * "mock channel" which is guaranteed to always have a 
   43                   * Channel 4 is returned by StartHSFX when the effect c
   44                   
   45 1E38:             ChannelInUse	.ds HSFX_CHANNELCOUNT+1
   46                   
   47                   
   48                   * NOTE:  The above software depends on the exact order
   49                   * accumulators and interpolators.
   50                   * Also, the software presumes that:  there are HSFX_AC
   51                   * accumulators; there are a total of HSFX_REGCOUNT arr
   52                   * and each pair is (HSFX_CHANNELCOUNT * HSFX_REGSIZE) 
   53                   
   54 1E3D:             freql		.ds HSFX_CHANNELCOUNT
   55 1E41:             freqh		.ds HSFX_CHANNELCOUNT
   56 1E45:             shiftl		.ds HSFX_CHANNELCOUNT
   57 1E49:             shifth		.ds HSFX_CHANNELCOUNT
   58 1E4D:             feedbackl	.ds HSFX_CHANNELCOUNT
   59 1E51:             feedbackh	.ds HSFX_CHANNELCOUNT
   60 1E55:             volumel		.ds HSFX_CHANNELCOUNT
   61 1E59:             volumeh		.ds HSFX_CHANNELCOUNT
   62 1E5D:             freq_interpl	.ds HSFX_CHANNELCOUNT
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  101
                        6502:src/hsfx.var               16:35:31  

   63 1E61:             freq_interph	.ds HSFX_CHANNELCOUNT
   64 1E65:             shift_interpl	.ds HSFX_CHANNELCOUNT
   65 1E69:             shift_interph	.ds HSFX_CHANNELCOUNT
   66 1E6D:             feed_interpl	.ds HSFX_CHANNELCOUNT
   67 1E71:             feed_interph	.ds HSFX_CHANNELCOUNT
   68 1E75:             vol_interpl	.ds HSFX_CHANNELCOUNT
   69 1E79:             vol_interph	.ds HSFX_CHANNELCOUNT
   70                   
   71 1E7D:             flagsl		.ds HSFX_CHANNELCOUNT	;16 bit flags
   72 1E81:             flagsh		.ds HSFX_CHANNELCOUNT
   73                   
   74 1E85:             next_keyframel	.ds HSFX_CHANNELCOUNT	;next 'change of 
   75 1E89:             next_keyframeh	.ds HSFX_CHANNELCOUNT
   76                   
   77 1E8D:             current_framel	.ds HSFX_CHANNELCOUNT	;current frame be
   78 1E91:             current_frameh	.ds HSFX_CHANNELCOUNT
   79                   
   80 1E95:             loop_count0	.ds HSFX_CHANNELCOUNT	;# loops to perform
   81 1E99:             loop_adrl0	.ds HSFX_CHANNELCOUNT	;'top of loop' addres
   82 1E9D:             loop_adrh0	.ds HSFX_CHANNELCOUNT
   83                   
   84 1EA1:             loop_count1	.ds HSFX_CHANNELCOUNT	;# loops to perform
   85 1EA5:             loop_adrl1	.ds HSFX_CHANNELCOUNT	;'top of loop' addres
   86 1EA9:             loop_adrh1	.ds HSFX_CHANNELCOUNT
   87                   
   88 1EAD:             shift_flag	.ds HSFX_CHANNELCOUNT
   89                   
   90 1EB1:             clock_temp	.ds HSFX_CHANNELCOUNT	;something wrong here
   91 1EB5:             preload_temp	.ds HSFX_CHANNELCOUNT
   92 1EB9:             data_temp	.ds HSFX_CHANNELCOUNT
   93 1EBD:             shift_temp	.ds HSFX_CHANNELCOUNT
   94 1EC1:             integrate	.ds HSFX_CHANNELCOUNT
   95                   
   96 1EC5:             hsfx_basel	.ds HSFX_CHANNELCOUNT	;pointers to data tab
   97 1EC9:             hsfx_baseh	.ds HSFX_CHANNELCOUNT
   98                   
   99 1ECD:             launch_channel	.ds HSFX_CHANNELCOUNT	;for out of phase
  100                   
  101                   
  102 1ED1:             HSFXVarEnd
  103                   
 1253                   * 
 1254                   * Put the display buffers as high as possible
 1255                   * 
 1256      E018         dispbuf0		.eq		$fff8-DISPLAY_BUFSIZE
 1257      C038         dispbuf1		.eq		dispbuf0-DISPLAY_BUFSIZE
 1258                   
 1259                   
 1260                   * ----------------------------------------------------
 1261                   * The sample playback buffers
 1262                   * 
 1263 1ED1:             	.ALIGN 256			; must be aligned to a page boundary
 1264 1F00:             soundbuffer		.ds 	256
 1265 2000:             volumetable		.ds		256
 1266                   * 
 1267                   
 1268                   * ----------------------------------------------------
 1269                   * Title screen
 1270                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  102
                                                        16:35:31  

 1271                   		.tf title0.bin
 1272 2100:             		.or $8000
 1273                   
 1274 8000:00 0C 00 06  	.BYTE   $00,$0c,$00,$06,$09,$0f,$00,$0c
 1274      09 0F 00 0C  
 1274                   
 1275 8008:00 00 05 0C  	.BYTE   $00,$00,$05,$0c,$0e,$0c,$08,$04
 1275      0E 0C 08 04  
 1275                   
 1276 8010:00 AE 0C 0F  	.BYTE   $00,$ae,$0c,$0f,$00,$13,$f0,$d2
 1276      00 13 F0 D2  
 1276                   
 1277 8018:CF FA 09 AF  	.BYTE   $cf,$fa,$09,$af,$0f,$cc,$88,$44
 1277      0F CC 88 44  
 1277                   
 1278                   
 1279                   
 1280 8020:             titleerase
 1281 8020:C1 B0 00     	.BY FOUR_PER_PIXEL+BACKNONCOLL_SPRITE, RELOAD_HVST+LI
 1282 8023:00 00        	.DA 0
 1283 8025:00 **        	.DA tpixelsprite	 
 1284 8027:00 00 00 00  	.DA 0,0
 1284                   
 1285 802B:00 A0 00 66  	.DA 160*256,102*256
 1285                   
 1286 802F:00 00 00 00  	.DA 0, 0
 1286                   
 1287 8033:77           	.BYTE $77
 1288                   
 1289 8034:02 00 00 00  tpixelsprite .hs 02000000
 1289                   
 1290                   
 1291                   * ----------------------------------------------------
 1292                   * Fonts
 1293                   * 
 1294                   		.tf plainfont.bin
 1295 8038:             		.or 0
 1296                   		.in plainfont.fnt
    1                   
    2 0000:30           	.by 48			; num chars in font
    3 0001:02           	.by 2			; sprite next-line offset
    4 0002:07           	.by 7			; byte length of one char
    5 0003:08           	.by 8			; font width
    6                   
    7 0004:00           	.BY %00000000
    8 0005:00           	.BY %00000000
    9 0006:00           	.BY %00000000
   10 0007:00           	.BY %00000000
   11 0008:00           	.BY %00000000
   12 0009:00           	.BY %00000000
   13 000A:00           	.BY %00000000
   14                   
   15 000B:7C           	.BY %01111100
   16 000C:C6           	.BY %11000110
   17 000D:C6           	.BY %11000110
   18 000E:C6           	.BY %11000110
   19 000F:C6           	.BY %11000110
   20 0010:C6           	.BY %11000110
   21 0011:7C           	.BY %01111100
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  103
                        plainfont.fnt                   16:35:31  

   22                   
   23 0012:18           	.BY %00011000
   24 0013:18           	.BY %00011000
   25 0014:78           	.BY %01111000
   26 0015:18           	.BY %00011000
   27 0016:18           	.BY %00011000
   28 0017:38           	.BY %00111000
   29 0018:FE           	.BY %11111110
   30                   
   31 0019:7C           	.BY %01111100
   32 001A:C6           	.BY %11000110
   33 001B:06           	.BY %00000110
   34 001C:0C           	.BY %00001100
   35 001D:18           	.BY %00011000
   36 001E:30           	.BY %00110000
   37 001F:FE           	.BY %11111110
   38                   
   39 0020:7C           	.BY %01111100
   40 0021:C6           	.BY %11000110
   41 0022:06           	.BY %00000110
   42 0023:0C           	.BY %00001100
   43 0024:06           	.BY %00000110
   44 0025:C6           	.BY %11000110
   45 0026:7C           	.BY %01111100
   46                   
   47 0027:1C           	.BY %00011100
   48 0028:3C           	.BY %00111100
   49 0029:6C           	.BY %01101100
   50 002A:CC           	.BY %11001100
   51 002B:FE           	.BY %11111110
   52 002C:0C           	.BY %00001100
   53 002D:0C           	.BY %00001100
   54                   
   55 002E:FC           	.BY %11111100
   56 002F:C0           	.BY %11000000
   57 0030:C0           	.BY %11000000
   58 0031:FC           	.BY %11111100
   59 0032:06           	.BY %00000110
   60 0033:06           	.BY %00000110
   61 0034:FC           	.BY %11111100
   62                   
   63 0035:7C           	.BY %01111100
   64 0036:C0           	.BY %11000000
   65 0037:C0           	.BY %11000000
   66 0038:FC           	.BY %11111100
   67 0039:C6           	.BY %11000110
   68 003A:C6           	.BY %11000110
   69 003B:7C           	.BY %01111100
   70                   
   71 003C:FE           	.BY %11111110
   72 003D:06           	.BY %00000110
   73 003E:0C           	.BY %00001100
   74 003F:18           	.BY %00011000
   75 0040:30           	.BY %00110000
   76 0041:60           	.BY %01100000
   77 0042:C0           	.BY %11000000
   78                   
   79 0043:7C           	.BY %01111100
   80 0044:C6           	.BY %11000110
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  104
                        plainfont.fnt                   16:35:31  

   81 0045:C6           	.BY %11000110
   82 0046:7C           	.BY %01111100
   83 0047:C6           	.BY %11000110
   84 0048:C6           	.BY %11000110
   85 0049:7C           	.BY %01111100
   86                   
   87 004A:7C           	.BY %01111100
   88 004B:C6           	.BY %11000110
   89 004C:C6           	.BY %11000110
   90 004D:7E           	.BY %01111110
   91 004E:06           	.BY %00000110
   92 004F:06           	.BY %00000110
   93 0050:7C           	.BY %01111100
   94                   
   95 0051:38           	.BY %00111000
   96 0052:6C           	.BY %01101100
   97 0053:C6           	.BY %11000110
   98 0054:FE           	.BY %11111110
   99 0055:C6           	.BY %11000110
  100 0056:C6           	.BY %11000110
  101 0057:C6           	.BY %11000110
  102                   
  103 0058:FC           	.BY %11111100
  104 0059:C6           	.BY %11000110
  105 005A:C6           	.BY %11000110
  106 005B:FC           	.BY %11111100
  107 005C:C6           	.BY %11000110
  108 005D:C6           	.BY %11000110
  109 005E:FC           	.BY %11111100
  110                   
  111 005F:7C           	.BY %01111100
  112 0060:C6           	.BY %11000110
  113 0061:C0           	.BY %11000000
  114 0062:C0           	.BY %11000000
  115 0063:C0           	.BY %11000000
  116 0064:C6           	.BY %11000110
  117 0065:7C           	.BY %01111100
  118                   
  119 0066:FC           	.BY %11111100
  120 0067:C6           	.BY %11000110
  121 0068:C6           	.BY %11000110
  122 0069:C6           	.BY %11000110
  123 006A:C6           	.BY %11000110
  124 006B:C6           	.BY %11000110
  125 006C:FC           	.BY %11111100
  126                   
  127 006D:FE           	.BY %11111110
  128 006E:C0           	.BY %11000000
  129 006F:C0           	.BY %11000000
  130 0070:F8           	.BY %11111000
  131 0071:C0           	.BY %11000000
  132 0072:C0           	.BY %11000000
  133 0073:FE           	.BY %11111110
  134                   
  135 0074:FE           	.BY %11111110
  136 0075:C0           	.BY %11000000
  137 0076:C0           	.BY %11000000
  138 0077:F8           	.BY %11111000
  139 0078:C0           	.BY %11000000
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  105
                        plainfont.fnt                   16:35:31  

  140 0079:C0           	.BY %11000000
  141 007A:C0           	.BY %11000000
  142                   
  143 007B:7C           	.BY %01111100
  144 007C:C6           	.BY %11000110
  145 007D:C0           	.BY %11000000
  146 007E:CE           	.BY %11001110
  147 007F:C6           	.BY %11000110
  148 0080:C6           	.BY %11000110
  149 0081:7E           	.BY %01111110
  150                   
  151 0082:C6           	.BY %11000110
  152 0083:C6           	.BY %11000110
  153 0084:C6           	.BY %11000110
  154 0085:FE           	.BY %11111110
  155 0086:C6           	.BY %11000110
  156 0087:C6           	.BY %11000110
  157 0088:C6           	.BY %11000110
  158                   
  159 0089:7E           	.BY %01111110
  160 008A:18           	.BY %00011000
  161 008B:18           	.BY %00011000
  162 008C:18           	.BY %00011000
  163 008D:18           	.BY %00011000
  164 008E:18           	.BY %00011000
  165 008F:7E           	.BY %01111110
  166                   
  167 0090:7E           	.BY %01111110
  168 0091:06           	.BY %00000110
  169 0092:06           	.BY %00000110
  170 0093:06           	.BY %00000110
  171 0094:06           	.BY %00000110
  172 0095:C6           	.BY %11000110
  173 0096:7C           	.BY %01111100
  174                   
  175 0097:C6           	.BY %11000110
  176 0098:CC           	.BY %11001100
  177 0099:D8           	.BY %11011000
  178 009A:F0           	.BY %11110000
  179 009B:D8           	.BY %11011000
  180 009C:CC           	.BY %11001100
  181 009D:C6           	.BY %11000110
  182                   
  183 009E:C0           	.BY %11000000
  184 009F:C0           	.BY %11000000
  185 00A0:C0           	.BY %11000000
  186 00A1:C0           	.BY %11000000
  187 00A2:C0           	.BY %11000000
  188 00A3:C0           	.BY %11000000
  189 00A4:FE           	.BY %11111110
  190                   
  191 00A5:C6           	.BY %11000110
  192 00A6:EE           	.BY %11101110
  193 00A7:FE           	.BY %11111110
  194 00A8:D6           	.BY %11010110
  195 00A9:C6           	.BY %11000110
  196 00AA:C6           	.BY %11000110
  197 00AB:C6           	.BY %11000110
  198                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  106
                        plainfont.fnt                   16:35:31  

  199 00AC:C6           	.BY %11000110
  200 00AD:E6           	.BY %11100110
  201 00AE:F6           	.BY %11110110
  202 00AF:DE           	.BY %11011110
  203 00B0:CE           	.BY %11001110
  204 00B1:C6           	.BY %11000110
  205 00B2:C6           	.BY %11000110
  206                   
  207 00B3:7C           	.BY %01111100
  208 00B4:C6           	.BY %11000110
  209 00B5:C6           	.BY %11000110
  210 00B6:C6           	.BY %11000110
  211 00B7:C6           	.BY %11000110
  212 00B8:C6           	.BY %11000110
  213 00B9:7C           	.BY %01111100
  214                   
  215 00BA:FC           	.BY %11111100
  216 00BB:C6           	.BY %11000110
  217 00BC:C6           	.BY %11000110
  218 00BD:FC           	.BY %11111100
  219 00BE:C0           	.BY %11000000
  220 00BF:C0           	.BY %11000000
  221 00C0:C0           	.BY %11000000
  222                   
  223 00C1:7C           	.BY %01111100
  224 00C2:C6           	.BY %11000110
  225 00C3:C6           	.BY %11000110
  226 00C4:C6           	.BY %11000110
  227 00C5:D6           	.BY %11010110
  228 00C6:CE           	.BY %11001110
  229 00C7:7A           	.BY %01111010
  230                   
  231 00C8:FC           	.BY %11111100
  232 00C9:C6           	.BY %11000110
  233 00CA:C6           	.BY %11000110
  234 00CB:FC           	.BY %11111100
  235 00CC:D8           	.BY %11011000
  236 00CD:CC           	.BY %11001100
  237 00CE:C6           	.BY %11000110
  238                   
  239 00CF:7C           	.BY %01111100
  240 00D0:C6           	.BY %11000110
  241 00D1:C0           	.BY %11000000
  242 00D2:7C           	.BY %01111100
  243 00D3:06           	.BY %00000110
  244 00D4:C6           	.BY %11000110
  245 00D5:7C           	.BY %01111100
  246                   
  247 00D6:7E           	.BY %01111110
  248 00D7:18           	.BY %00011000
  249 00D8:18           	.BY %00011000
  250 00D9:18           	.BY %00011000
  251 00DA:18           	.BY %00011000
  252 00DB:18           	.BY %00011000
  253 00DC:18           	.BY %00011000
  254                   
  255 00DD:C6           	.BY %11000110
  256 00DE:C6           	.BY %11000110
  257 00DF:C6           	.BY %11000110
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  107
                        plainfont.fnt                   16:35:31  

  258 00E0:C6           	.BY %11000110
  259 00E1:C6           	.BY %11000110
  260 00E2:C6           	.BY %11000110
  261 00E3:7C           	.BY %01111100
  262                   
  263 00E4:C6           	.BY %11000110
  264 00E5:C6           	.BY %11000110
  265 00E6:6C           	.BY %01101100
  266 00E7:6C           	.BY %01101100
  267 00E8:6C           	.BY %01101100
  268 00E9:38           	.BY %00111000
  269 00EA:38           	.BY %00111000
  270                   
  271 00EB:C6           	.BY %11000110
  272 00EC:C6           	.BY %11000110
  273 00ED:C6           	.BY %11000110
  274 00EE:D6           	.BY %11010110
  275 00EF:D6           	.BY %11010110
  276 00F0:D6           	.BY %11010110
  277 00F1:6C           	.BY %01101100
  278                   
  279 00F2:C6           	.BY %11000110
  280 00F3:C6           	.BY %11000110
  281 00F4:6C           	.BY %01101100
  282 00F5:38           	.BY %00111000
  283 00F6:6C           	.BY %01101100
  284 00F7:C6           	.BY %11000110
  285 00F8:C6           	.BY %11000110
  286                   
  287 00F9:66           	.BY %01100110
  288 00FA:66           	.BY %01100110
  289 00FB:3C           	.BY %00111100
  290 00FC:18           	.BY %00011000
  291 00FD:18           	.BY %00011000
  292 00FE:18           	.BY %00011000
  293 00FF:18           	.BY %00011000
  294                   
  295 0100:FE           	.BY %11111110
  296 0101:0C           	.BY %00001100
  297 0102:18           	.BY %00011000
  298 0103:30           	.BY %00110000
  299 0104:60           	.BY %01100000
  300 0105:C0           	.BY %11000000
  301 0106:FE           	.BY %11111110
  302                   
  303 0107:18           	.BY %00011000
  304 0108:3C           	.BY %00111100
  305 0109:3C           	.BY %00111100
  306 010A:3C           	.BY %00111100
  307 010B:18           	.BY %00011000
  308 010C:00           	.BY %00000000
  309 010D:18           	.BY %00011000
  310                   
  311 010E:66           	.BY %01100110
  312 010F:66           	.BY %01100110
  313 0110:66           	.BY %01100110
  314 0111:00           	.BY %00000000
  315 0112:00           	.BY %00000000
  316 0113:00           	.BY %00000000
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  108
                        plainfont.fnt                   16:35:31  

  317 0114:00           	.BY %00000000
  318                   
  319 0115:18           	.BY %00011000
  320 0116:18           	.BY %00011000
  321 0117:30           	.BY %00110000
  322 0118:00           	.BY %00000000
  323 0119:00           	.BY %00000000
  324 011A:00           	.BY %00000000
  325 011B:00           	.BY %00000000
  326                   
  327 011C:0C           	.BY %00001100
  328 011D:18           	.BY %00011000
  329 011E:30           	.BY %00110000
  330 011F:30           	.BY %00110000
  331 0120:30           	.BY %00110000
  332 0121:18           	.BY %00011000
  333 0122:0C           	.BY %00001100
  334                   
  335 0123:30           	.BY %00110000
  336 0124:18           	.BY %00011000
  337 0125:0C           	.BY %00001100
  338 0126:0C           	.BY %00001100
  339 0127:0C           	.BY %00001100
  340 0128:18           	.BY %00011000
  341 0129:30           	.BY %00110000
  342                   
  343 012A:00           	.BY %00000000
  344 012B:00           	.BY %00000000
  345 012C:00           	.BY %00000000
  346 012D:00           	.BY %00000000
  347 012E:18           	.BY %00011000
  348 012F:18           	.BY %00011000
  349 0130:30           	.BY %00110000
  350                   
  351 0131:00           	.BY %00000000
  352 0132:00           	.BY %00000000
  353 0133:00           	.BY %00000000
  354 0134:3C           	.BY %00111100
  355 0135:00           	.BY %00000000
  356 0136:00           	.BY %00000000
  357 0137:00           	.BY %00000000
  358                   
  359 0138:00           	.BY %00000000
  360 0139:00           	.BY %00000000
  361 013A:00           	.BY %00000000
  362 013B:00           	.BY %00000000
  363 013C:00           	.BY %00000000
  364 013D:18           	.BY %00011000
  365 013E:18           	.BY %00011000
  366                   
  367 013F:00           	.BY %00000000
  368 0140:18           	.BY %00011000
  369 0141:18           	.BY %00011000
  370 0142:00           	.BY %00000000
  371 0143:18           	.BY %00011000
  372 0144:18           	.BY %00011000
  373 0145:00           	.BY %00000000
  374                   
  375 0146:10           	.BY %00010000
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  109
                        plainfont.fnt                   16:35:31  

  376 0147:18           	.BY %00011000
  377 0148:FC           	.BY %11111100
  378 0149:FE           	.BY %11111110
  379 014A:FC           	.BY %11111100
  380 014B:18           	.BY %00011000
  381 014C:10           	.BY %00010000
  382                   
  383 014D:7C           	.BY %01111100
  384 014E:C6           	.BY %11000110
  385 014F:06           	.BY %00000110
  386 0150:0C           	.BY %00001100
  387 0151:18           	.BY %00011000
  388 0152:00           	.BY %00000000
  389 0153:18           	.BY %00011000
  390                   
 1297                   
 1298                   		.tf lilfont.bin
 1299 0154:             		.or 0
 1300                   		.in lilfont.fnt
    1                   
    2 0000:30           	.by 48		; num chars
    3 0001:02           	.by 2		; offset to next line
    4 0002:05           	.by 5		; length of one char
    5 0003:04           	.by 4		; font width
    6                   
    7 0004:             spacesprite
    8 0004:00           	.by  0
    9 0005:00           	.by  0
   10 0006:00           	.by  0
   11 0007:00           	.by  0
   12 0008:00           	.by  0
   13                   
   14 0009:             zerosprite
   15                   ; Handy Sprite Image Data
   16                   ; Bits per Pixel = 1
   17                   ; Next data is down-right
   18 0009:E0           	.BYTE	$e0
   19 000A:A0           	.BYTE	$a0
   20 000B:A0           	.BYTE	$a0
   21 000C:A0           	.BYTE	$a0
   22 000D:E0           	.BYTE	$e0
   23                   ; 11 total image bytes
   24                   
   25                   
   26 000E:             onesprite
   27                   ; Handy Sprite Image Data
   28                   ; Bits per Pixel = 1
   29                   ; Next data is down-right
   30 000E:40           	.BYTE	$40
   31 000F:40           	.BYTE	$40
   32 0010:40           	.BYTE	$40
   33 0011:40           	.BYTE	$40
   34 0012:40           	.BYTE	$40
   35                   ; 11 total image bytes
   36                   
   37 0013:             twosprite
   38                   ; Handy Sprite Image Data
   39                   ; Bits per Pixel = 1
   40                   ; Next data is down-right
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  110
                        lilfont.fnt                     16:35:31  

   41 0013:E0           	.BYTE	$e0
   42 0014:20           	.BYTE	$20
   43 0015:E0           	.BYTE	$e0
   44 0016:80           	.BYTE	$80
   45 0017:E0           	.BYTE	$e0
   46                   ; 11 total image bytes
   47                   
   48 0018:             threesprite
   49                   ; Handy Sprite Image Data
   50                   ; Bits per Pixel = 1
   51                   ; Next data is down-right
   52 0018:E0           	.BYTE	$e0
   53 0019:20           	.BYTE	$20
   54 001A:E0           	.BYTE	$e0
   55 001B:20           	.BYTE	$20
   56 001C:E0           	.BYTE	$e0
   57                   ; 11 total image bytes
   58                   
   59 001D:             foursprite
   60                   ; Handy Sprite Image Data
   61                   ; Bits per Pixel = 1
   62                   ; Next data is down-right
   63 001D:A0           	.BYTE	$a0
   64 001E:A0           	.BYTE	$a0
   65 001F:E0           	.BYTE	$e0
   66 0020:20           	.BYTE	$20
   67 0021:20           	.BYTE	$20
   68                   ; 11 total image bytes
   69                   
   70 0022:             fivesprite
   71                   ; Handy Sprite Image Data
   72                   ; Bits per Pixel = 1
   73                   ; Next data is down-right
   74 0022:E0           	.BYTE	$e0
   75 0023:80           	.BYTE	$80
   76 0024:E0           	.BYTE	$e0
   77 0025:20           	.BYTE	$20
   78 0026:E0           	.BYTE	$e0
   79                   ; 11 total image bytes
   80                   
   81 0027:             sixsprite
   82                   ; Handy Sprite Image Data
   83                   ; Bits per Pixel = 1
   84                   ; Next data is down-right
   85 0027:E0           	.BYTE	$e0
   86 0028:80           	.BYTE	$80
   87 0029:E0           	.BYTE	$e0
   88 002A:A0           	.BYTE	$a0
   89 002B:E0           	.BYTE	$e0
   90                   ; 11 total image bytes
   91                   
   92 002C:             sevensprite
   93                   ; Handy Sprite Image Data
   94                   ; Bits per Pixel = 1
   95                   ; Next data is down-right
   96 002C:E0           	.BYTE	$e0
   97 002D:20           	.BYTE	$20
   98 002E:40           	.BYTE	$40
   99 002F:40           	.BYTE	$40
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  111
                        lilfont.fnt                     16:35:31  

  100 0030:40           	.BYTE	$40
  101                   ; 11 total image bytes
  102                   
  103 0031:             eightsprite
  104                   ; Handy Sprite Image Data
  105                   ; Bits per Pixel = 1
  106                   ; Next data is down-right
  107 0031:E0           	.BYTE	$e0
  108 0032:A0           	.BYTE	$a0
  109 0033:E0           	.BYTE	$e0
  110 0034:A0           	.BYTE	$a0
  111 0035:E0           	.BYTE	$e0
  112                   ; 11 total image bytes
  113                   
  114 0036:             ninesprite
  115                   ; Handy Sprite Image Data
  116                   ; Bits per Pixel = 1
  117                   ; Next data is down-right
  118 0036:E0           	.BYTE	$e0
  119 0037:A0           	.BYTE	$a0
  120 0038:E0           	.BYTE	$e0
  121 0039:20           	.BYTE	$20
  122 003A:20           	.BYTE	$20
  123                   ; 11 total image bytes
  124                   
  125                   
  126 003B:             asprite
  127                   ; Handy Sprite Image Data
  128                   ; Bits per Pixel = 1
  129                   ; Next data is down-right
  130 003B:40           	.BYTE	$40
  131 003C:A0           	.BYTE	$a0
  132 003D:E0           	.BYTE	$e0
  133 003E:A0           	.BYTE	$a0
  134 003F:A0           	.BYTE	$a0
  135                   ; 11 total image bytes
  136                   
  137 0040:             bsprite
  138                   ; Handy Sprite Image Data
  139                   ; Bits per Pixel = 1
  140                   ; Next data is down-right
  141 0040:C0           	.BYTE	$c0
  142 0041:A0           	.BYTE	$a0
  143 0042:C0           	.BYTE	$c0
  144 0043:A0           	.BYTE	$a0
  145 0044:C0           	.BYTE	$c0
  146                   ; 11 total image bytes
  147                   
  148 0045:             csprite
  149                   ; Handy Sprite Image Data
  150                   ; Bits per Pixel = 1
  151                   ; Next data is down-right
  152 0045:60           	.BYTE	$60
  153 0046:80           	.BYTE	$80
  154 0047:80           	.BYTE	$80
  155 0048:80           	.BYTE	$80
  156 0049:60           	.BYTE	$60
  157                   ; 11 total image bytes
  158                   
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  112
                        lilfont.fnt                     16:35:31  

  159 004A:             dsprite
  160                   ; Handy Sprite Image Data
  161                   ; Bits per Pixel = 1
  162                   ; Next data is down-right
  163 004A:C0           	.BYTE	$c0
  164 004B:A0           	.BYTE	$a0
  165 004C:A0           	.BYTE	$a0
  166 004D:A0           	.BYTE	$a0
  167 004E:C0           	.BYTE	$c0
  168                   ; 11 total image bytes
  169                   
  170 004F:             esprite
  171                   ; Handy Sprite Image Data
  172                   ; Bits per Pixel = 1
  173                   ; Next data is down-right
  174 004F:E0           	.BYTE	$e0
  175 0050:80           	.BYTE	$80
  176 0051:C0           	.BYTE	$c0
  177 0052:80           	.BYTE	$80
  178 0053:E0           	.BYTE	$e0
  179                   ; 11 total image bytes
  180                   
  181 0054:             fsprite
  182                   ; Handy Sprite Image Data
  183                   ; Bits per Pixel = 1
  184                   ; Next data is down-right
  185 0054:E0           	.BYTE	$e0
  186 0055:80           	.BYTE	$80
  187 0056:C0           	.BYTE	$c0
  188 0057:80           	.BYTE	$80
  189 0058:80           	.BYTE	$80
  190                   ; 11 total image bytes
  191                   
  192 0059:             gsprite
  193                   ; Handy Sprite Image Data
  194                   ; Bits per Pixel = 1
  195                   ; Next data is down-right
  196 0059:60           	.BYTE	$60
  197 005A:80           	.BYTE	$80
  198 005B:80           	.BYTE	$80
  199 005C:A0           	.BYTE	$a0
  200 005D:60           	.BYTE	$60
  201                   ; 11 total image bytes
  202                   
  203 005E:             hsprite
  204                   ; Handy Sprite Image Data
  205                   ; Bits per Pixel = 1
  206                   ; Next data is down-right
  207 005E:A0           	.BYTE	$a0
  208 005F:A0           	.BYTE	$a0
  209 0060:E0           	.BYTE	$e0
  210 0061:A0           	.BYTE	$a0
  211 0062:A0           	.BYTE	$a0
  212                   ; 11 total image bytes
  213                   
  214 0063:             isprite
  215                   ; Handy Sprite Image Data
  216                   ; Bits per Pixel = 1
  217                   ; Next data is down-right
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  113
                        lilfont.fnt                     16:35:31  

  218 0063:E0           	.BYTE	$e0
  219 0064:40           	.BYTE	$40
  220 0065:40           	.BYTE	$40
  221 0066:40           	.BYTE	$40
  222 0067:E0           	.BYTE	$e0
  223                   ; 11 total image bytes
  224                   
  225 0068:             jsprite
  226                   ; Handy Sprite Image Data
  227                   ; Bits per Pixel = 1
  228                   ; Next data is down-right
  229 0068:20           	.BYTE	$20
  230 0069:20           	.BYTE	$20
  231 006A:20           	.BYTE	$20
  232 006B:A0           	.BYTE	$a0
  233 006C:40           	.BYTE	$40
  234                   ; 11 total image bytes
  235                   
  236 006D:             ksprite
  237                   ; Handy Sprite Image Data
  238                   ; Bits per Pixel = 1
  239                   ; Next data is down-right
  240 006D:A0           	.BYTE	$a0
  241 006E:C0           	.BYTE	$c0
  242 006F:C0           	.BYTE	$c0
  243 0070:A0           	.BYTE	$a0
  244 0071:A0           	.BYTE	$a0
  245                   ; 11 total image bytes
  246                   
  247 0072:             lsprite
  248                   ; Handy Sprite Image Data
  249                   ; Bits per Pixel = 1
  250                   ; Next data is down-right
  251 0072:80           	.BYTE	$80
  252 0073:80           	.BYTE	$80
  253 0074:80           	.BYTE	$80
  254 0075:80           	.BYTE	$80
  255 0076:E0           	.BYTE	$e0
  256                   ; 11 total image bytes
  257                   
  258 0077:             msprite
  259                   ; Handy Sprite Image Data
  260                   ; Bits per Pixel = 1
  261                   ; Next data is down-right
  262 0077:A0           	.BYTE	$a0
  263 0078:E0           	.BYTE	$e0
  264 0079:A0           	.BYTE	$a0
  265 007A:A0           	.BYTE	$a0
  266 007B:A0           	.BYTE	$a0
  267                   ; 11 total image bytes
  268                   
  269 007C:             nsprite
  270                   ; Handy Sprite Image Data
  271                   ; Bits per Pixel = 1
  272                   ; Next data is down-right
  273 007C:A0           	.BYTE	$a0
  274 007D:E0           	.BYTE	$e0
  275 007E:E0           	.BYTE	$e0
  276 007F:A0           	.BYTE	$a0
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  114
                        lilfont.fnt                     16:35:31  

  277 0080:A0           	.BYTE	$a0
  278                   ; 11 total image bytes
  279                   
  280 0081:             osprite
  281                   ; Handy Sprite Image Data
  282                   ; Bits per Pixel = 1
  283                   ; Next data is down-right
  284 0081:E0           	.BYTE	$e0
  285 0082:A0           	.BYTE	$a0
  286 0083:A0           	.BYTE	$a0
  287 0084:A0           	.BYTE	$a0
  288 0085:E0           	.BYTE	$e0
  289                   ; 11 total image bytes
  290                   
  291 0086:             psprite
  292                   ; Handy Sprite Image Data
  293                   ; Bits per Pixel = 1
  294                   ; Next data is down-right
  295 0086:C0           	.BYTE	$c0
  296 0087:A0           	.BYTE	$a0
  297 0088:C0           	.BYTE	$c0
  298 0089:80           	.BYTE	$80
  299 008A:80           	.BYTE	$80
  300                   ; 11 total image bytes
  301                   
  302 008B:             qsprite
  303                   ; Handy Sprite Image Data
  304                   ; Bits per Pixel = 1
  305                   ; Next data is down-right
  306 008B:E0           	.BYTE	$e0
  307 008C:A0           	.BYTE	$a0
  308 008D:A0           	.BYTE	$a0
  309 008E:E0           	.BYTE	$e0
  310 008F:20           	.BYTE	$20
  311                   ; 11 total image bytes
  312                   
  313 0090:             rsprite
  314                   ; Handy Sprite Image Data
  315                   ; Bits per Pixel = 1
  316                   ; Next data is down-right
  317 0090:C0           	.BYTE	$c0
  318 0091:A0           	.BYTE	$a0
  319 0092:C0           	.BYTE	$c0
  320 0093:A0           	.BYTE	$a0
  321 0094:A0           	.BYTE	$a0
  322                   ; 11 total image bytes
  323                   
  324 0095:             ssprite
  325                   ; Handy Sprite Image Data
  326                   ; Bits per Pixel = 1
  327                   ; Next data is down-right
  328 0095:60           	.BYTE	$60
  329 0096:80           	.BYTE	$80
  330 0097:40           	.BYTE	$40
  331 0098:20           	.BYTE	$20
  332 0099:C0           	.BYTE	$c0
  333                   ; 11 total image bytes
  334                   
  335 009A:             tsprite
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  115
                        lilfont.fnt                     16:35:31  

  336                   ; Handy Sprite Image Data
  337                   ; Bits per Pixel = 1
  338                   ; Next data is down-right
  339 009A:E0           	.BYTE	$e0
  340 009B:40           	.BYTE	$40
  341 009C:40           	.BYTE	$40
  342 009D:40           	.BYTE	$40
  343 009E:40           	.BYTE	$40
  344                   ; 11 total image bytes
  345                   
  346 009F:             usprite
  347                   ; Handy Sprite Image Data
  348                   ; Bits per Pixel = 1
  349                   ; Next data is down-right
  350 009F:A0           	.BYTE	$a0
  351 00A0:A0           	.BYTE	$a0
  352 00A1:A0           	.BYTE	$a0
  353 00A2:A0           	.BYTE	$a0
  354 00A3:40           	.BYTE	$40
  355                   ; 11 total image bytes
  356                   
  357 00A4:             vsprite
  358                   ; Handy Sprite Image Data
  359                   ; Bits per Pixel = 1
  360                   ; Next data is down-right
  361 00A4:A0           	.BYTE	$a0
  362 00A5:A0           	.BYTE	$a0
  363 00A6:A0           	.BYTE	$a0
  364 00A7:40           	.BYTE	$40
  365 00A8:40           	.BYTE	$40
  366                   ; 11 total image bytes
  367                   
  368 00A9:             wsprite
  369                   ; Handy Sprite Image Data
  370                   ; Bits per Pixel = 1
  371                   ; Next data is down-right
  372 00A9:A0           	.BYTE	$a0
  373 00AA:A0           	.BYTE	$a0
  374 00AB:A0           	.BYTE	$a0
  375 00AC:E0           	.BYTE	$e0
  376 00AD:A0           	.BYTE	$a0
  377                   ; 11 total image bytes
  378                   
  379 00AE:             xsprite
  380                   ; Handy Sprite Image Data
  381                   ; Bits per Pixel = 1
  382                   ; Next data is down-right
  383 00AE:A0           	.BYTE	$a0
  384 00AF:A0           	.BYTE	$a0
  385 00B0:40           	.BYTE	$40
  386 00B1:A0           	.BYTE	$a0
  387 00B2:A0           	.BYTE	$a0
  388                   ; 11 total image bytes
  389                   
  390 00B3:             ysprite
  391                   ; Handy Sprite Image Data
  392                   ; Bits per Pixel = 1
  393                   ; Next data is down-right
  394 00B3:A0           	.BYTE	$a0
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  116
                        lilfont.fnt                     16:35:31  

  395 00B4:A0           	.BYTE	$a0
  396 00B5:40           	.BYTE	$40
  397 00B6:40           	.BYTE	$40
  398 00B7:40           	.BYTE	$40
  399                   ; 11 total image bytes
  400                   
  401 00B8:             zsprite
  402                   ; Handy Sprite Image Data
  403                   ; Bits per Pixel = 1
  404                   ; Next data is down-right
  405 00B8:E0           	.BYTE	$e0
  406 00B9:20           	.BYTE	$20
  407 00BA:40           	.BYTE	$40
  408 00BB:80           	.BYTE	$80
  409 00BC:E0           	.BYTE	$e0
  410                   ; 11 total image bytes
  411                   
  412                   
  413 00BD:             exclsprite
  414                   ; Handy Sprite Image Data
  415                   ; Bits per Pixel = 1
  416                   ; Next data is down-right
  417 00BD:40           	.BYTE	$40
  418 00BE:40           	.BYTE	$40
  419 00BF:40           	.BYTE	$40
  420 00C0:00           	.BYTE	$00
  421 00C1:40           	.BYTE	$40
  422                   ; 11 total image bytes
  423                   
  424 00C2:             dquotesprite
  425                   ; Handy Sprite Image Data
  426                   ; Bits per Pixel = 1
  427                   ; Next data is down-right
  428 00C2:A0           	.BYTE	$a0
  429 00C3:A0           	.BYTE	$a0
  430 00C4:00           	.BYTE	$00
  431 00C5:00           	.BYTE	$00
  432 00C6:00           	.BYTE	$00
  433                   ; 11 total image bytes
  434                   
  435 00C7:             squotesprite
  436                   ; Handy Sprite Image Data
  437                   ; Bits per Pixel = 1
  438                   ; Next data is down-right
  439 00C7:40           	.BYTE	$40
  440 00C8:40           	.BYTE	$40
  441 00C9:00           	.BYTE	$00
  442 00CA:00           	.BYTE	$00
  443 00CB:00           	.BYTE	$00
  444                   ; 11 total image bytes
  445                   
  446 00CC:             oparensprite
  447                   ; Handy Sprite Image Data
  448                   ; Bits per Pixel = 1
  449                   ; Next data is down-right
  450 00CC:40           	.BYTE	$40
  451 00CD:80           	.BYTE	$80
  452 00CE:80           	.BYTE	$80
  453 00CF:80           	.BYTE	$80
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  117
                        lilfont.fnt                     16:35:31  

  454 00D0:40           	.BYTE	$40
  455                   ; 11 total image bytes
  456                   
  457 00D1:             cparensprite
  458                   ; Handy Sprite Image Data
  459                   ; Bits per Pixel = 1
  460                   ; Next data is down-right
  461 00D1:80           	.BYTE	$80
  462 00D2:40           	.BYTE	$40
  463 00D3:40           	.BYTE	$40
  464 00D4:40           	.BYTE	$40
  465 00D5:80           	.BYTE	$80
  466                   ; 11 total image bytes
  467                   
  468 00D6:             commasprite
  469                   ; Handy Sprite Image Data
  470                   ; Bits per Pixel = 1
  471                   ; Next data is down-right
  472 00D6:00           	.BYTE	$00
  473 00D7:00           	.BYTE	$00
  474 00D8:00           	.BYTE	$00
  475 00D9:40           	.BYTE	$40
  476 00DA:80           	.BYTE	$80
  477                   ; 11 total image bytes
  478                   
  479                   
  480 00DB:             dashsprite
  481                   ; Handy Sprite Image Data
  482                   ; Bits per Pixel = 1
  483                   ; Next data is down-right
  484 00DB:00           	.BYTE	$00
  485 00DC:00           	.BYTE	$00
  486 00DD:E0           	.BYTE	$e0
  487 00DE:00           	.BYTE	$00
  488 00DF:00           	.BYTE	$00
  489                   ; 11 total image bytes
  490                   
  491                   
  492 00E0:             periodsprite
  493                   ; Handy Sprite Image Data
  494                   ; Bits per Pixel = 1
  495                   ; Next data is down-right
  496 00E0:00           	.BYTE	$00
  497 00E1:00           	.BYTE	$00
  498 00E2:00           	.BYTE	$00
  499 00E3:00           	.BYTE	$00
  500 00E4:40           	.BYTE	$40
  501                   ; 11 total image bytes
  502                   
  503                   
  504 00E5:             colonsprite
  505                   ; Handy Sprite Image Data
  506                   ; Bits per Pixel = 1
  507                   ; Next data is down-right
  508 00E5:00           	.BYTE	$00
  509 00E6:40           	.BYTE	$40
  510 00E7:00           	.BYTE	$00
  511 00E8:40           	.BYTE	$40
  512 00E9:00           	.BYTE	$00
Epyx HandyAsm 1.12      digidemo.src                    15-Apr-12516:35:31 Page  118
                        lilfont.fnt                     16:35:31  

  513                   ; 11 total image bytes
  514                   
  515 00EA:             scolonsprite
  516                   ; Handy Sprite Image Data
  517                   ; Bits per Pixel = 1
  518                   ; Next data is down-right
  519 00EA:00           	.BYTE	$00
  520 00EB:40           	.BYTE	$40
  521 00EC:00           	.BYTE	$00
  522 00ED:40           	.BYTE	$40
  523 00EE:80           	.BYTE	$80
  524                   ; 11 total image bytes
  525                   
  526 00EF:             qmarksprite
  527                   ; Handy Sprite Image Data
  528                   ; Bits per Pixel = 1
  529                   ; Next data is down-right
  530 00EF:C0           	.BYTE	$c0
  531 00F0:20           	.BYTE	$20
  532 00F1:40           	.BYTE	$40
  533 00F2:00           	.BYTE	$00
  534 00F3:40           	.BYTE	$40
  535                   ; 11 total image bytes
  536                   
  537                   
 1301                   
Epyx HandyAsm 1.12      Symbols                         15-Apr-12516:35:31 Page  119
                                                        16:35:31  

$0040 ACCUMULATE                        $0040 ALGO_3
$0000 ASM.EQUSYMS                       $010C ASM.VERSION
$FD40 ATTENREG0                         $FD41 ATTENREG1
$FD42 ATTENREG2                         $FD43 ATTENREG3
$FD86 AUDIN                             $0010 AUDIN_BIT
$FD20 AUDIO0                            $FD28 AUDIO1
$FD30 AUDIO2                            $FD38 AUDIO3
$0006 AUDIO_CLOCK_MASK                  $0001 AUDIO_DISABLE
$0040 AUDIO_PRELOAD                     $0006 AUDIO_TIMER
$0000 AUD_1                             $0004 AUD_16
$0001 AUD_2                             $0005 AUD_32
$0002 AUD_4                             $0006 AUD_64
$0003 AUD_8                             $0004 AUD_BACKUP
$0007 AUD_CLOCK_MASK                    $0005 AUD_CONTROL
$0006 AUD_COUNTER                       $0001 AUD_FEEDBACK
$0007 AUD_LINKING                       $0007 AUD_OTHER
$0002 AUD_OUTPUT                        $0003 AUD_SHIFT
$0000 AUD_VOLCNTRL                      $0001 A_BUTTON
$0A46 AllocAudio                        $0000 BACKGROUND_SPRITE
$0001 BACKNONCOLL_SPRITE                $0000 BACK_SHADOW_SPRITE
MACRO BEGIN_ALLOCATE_ZEROPAGE           MACRO BEGIN_ZPAGE
$00C0 BITS_MASK                         $FDB0 BLUERED0
$FDB1 BLUERED1                          $FDB2 BLUERED2
$FDB3 BLUERED3                          $FDB4 BLUERED4
$FDB5 BLUERED5                          $FDB6 BLUERED6
$FDB7 BLUERED7                          $FDB8 BLUERED8
$FDB9 BLUERED9                          $FDBA BLUEREDA
$FDBB BLUEREDB                          $FDBC BLUEREDC
$FDBD BLUEREDD                          $FDBE BLUEREDE
$FDBF BLUEREDF                          $0002 BORROW_IN
$0001 BORROW_OUT                        $0003 BOUNDARY_SPRITE
$0002 BSHADOW_SPRITE                    $0002 B_BUTTON
$0002 CART0_IO_INACTIVE                 $0004 CART1_IO_INACTIVE
$0002 CART_ADDR_DATA                    $0001 CART_ADDR_STROBE
$0002 CART_POWER_OFF                    MACRO CLEARACCUM
$FC0F COLLADRH                          $FC0E COLLADRL
$FC0B COLLBASH                          $FC0A COLLBASL
$FC25 COLLOFFH                          $FC24 COLLOFFL
$FD91 CPUSLEEP                          $FFFE CPU_IRQ
$FFFA CPU_NMI                           $FFFC CPU_RESET
$0853 CartDirectory                     $0851 CartIOCount
$084F CartOffsetHigh                    $084E CartOffsetLow
$0850 CartPage                          $1E38 ChannelInUse
MACRO DBUF_DISPLAY                      $0005 DIGITIMER
$FD95 DISPADRH                          $FD94 DISPADRL
$FD92 DISPCTL                           $0826 DISPCTL_RAM
MACRO DISPLAY                           $099A DISPLAY.0017
$09A0 DISPLAY.00172                     $1FE0 DISPLAY_BUFSIZE
$0080 DISPLAY_EOFFLAG                   $0040 DISPLAY_EOLFLAG
MACRO DISP_AX                           MACRO DISP_AY
$0008 DISP_COLOR                        $0002 DISP_FLIP
$0004 DISP_FOURBIT                      $0001 DMA_ENABLE
$0001 DRAW_LEFT                         $0002 DRAW_UP
$082B DisplayBuffer                     $082E DisplayFlags
$095C DisplayFrameCount                 MACRO ECHO_VALUE
$0008 ENABLE_COUNT                      $0080 ENABLE_INT
$0020 ENABLE_INTEGRATE                  $0010 ENABLE_RELOAD
MACRO END_ALLOCATE_ZEROPAGE             MACRO END_DISABLE
Epyx HandyAsm 1.12      Symbols                         15-Apr-12516:35:31 Page  120
                                                        16:35:31  

$0001 END_OF_EFFECT                     MACRO END_ZPAGE
$0001 EOF_USER                          $0004 EVER_ON
$0001 EXTERNAL_POWER                    $0200 FBACK_ACCUM
$0020 FBACK_INTERP                      $0080 FEEDBACK_7
$0002 FIRST_FONT_FILE                   $0004 FIRST_SOUND_FILE
MACRO FLIP                              $0004 FLIP_BUTTON
$0004 FONTBLANK                         $0002 FONTCHARLEN
$0001 FONTOFFSET                        $0000 FONTSIZE
$0003 FONTWIDTH                         $000B FONT_TYPE
$00C0 FOUR_PER_PIXEL                    $0001 FRAMECOUNT_UP
$0004 FRAMERR                           $0800 FREQ_ACCUM
$0080 FREQ_INTERP                       $0974 FrameEnd
$09B5 FrameEndExit                      $0A3B FreeAudio
MACRO GETDIR                            MACRO GETDIRFAST
$0001 GETDIR_USER                       MACRO GETJOY
MACRO GETSWITCH                         $0001 GRABAUDIO_USER
$FDA0 GREEN0                            $FDA1 GREEN1
$FDA2 GREEN2                            $FDA3 GREEN3
$FDA4 GREEN4                            $FDA5 GREEN5
$FDA6 GREEN6                            $FDA7 GREEN7
$FDA8 GREEN8                            $FDA9 GREEN9
$FDAA GREENA                            $FDAB GREENB
$FDAC GREENC                            $FDAD GREEND
$FDAE GREENE                            $FDAF GREENF
$093C GetDirAddress                     $0A53 GrabAudio
$FC00 HARDWARE_START                    MACRO HBRK
$FD00 HCOUNT                            $0020 HFLIP
MACRO HOFF16                            MACRO HOFF8
$FC05 HOFFH                             $FC04 HOFFL
$0001 HORIZONTAL_INT                    $FCC4 HOWIE
$FC15 HPOSSTRTH                         $FC14 HPOSSTRTL
MACRO HPRFONT                           MACRO HPRINT
$001F HPR_ALL                           $0006 HPR_ALPHA
$000B HPR_BASIC                         MACRO HPR_CHARSET
$0001 HPR_DIGIT                         $0004 HPR_LOWER
$0010 HPR_OTHER                         $0008 HPR_PUNC
$0002 HPR_UPPER                         $1ED1 HSFXVarEnd
$1E33 HSFXVarStart                      $0004 HSFX_ACCUMCOUNT
$0001 HSFX_ACTIVE                       $00FE HSFX_BIGPRIORITY
$0004 HSFX_CHANNELCOUNT                 $0000 HSFX_FREECHANNEL
$0001 HSFX_LILPRIORITY                  $00FF HSFX_NOCHANNEL
$0008 HSFX_REGCOUNT                     $0002 HSFX_REGSIZE
$FC29 HSIZOFFH                          $FC28 HSIZOFFL
MACRO INITEOF                           MACRO INITHSFX
MACRO INITINT                           $0436 INITINT.0007
MACRO INITLIT                           MACRO INITSUZY
MACRO INITSYS                           $0002 INNER_BUTTON
$0008 INTEGRATE                         $FD80 INTRST
$FD81 INTSET                            $082D INTSET_RAM
$FD8B IODAT                             $0827 IODAT_RAM
$FD8A IODIR                             $0828 IODIR_RAM
$FCC3 IOData                            $FCC2 IOStatus
$095D InitEOF                           $09B8 InitHSFX
$0845 IntReturn                         $FCB0 JOYSTICK
$0080 JOY_DOWN                          $0010 JOY_LEFT
$0020 JOY_RIGHT                         $0040 JOY_UP
$0004 LAST_CLOCK                        $FCC0 LEDS
$0010 LEFT0_SELECT                      $0020 LEFT1_SELECT
$0040 LEFT2_SELECT                      $0080 LEFT3_SELECT
Epyx HandyAsm 1.12      Symbols                         15-Apr-12516:35:31 Page  121
                                                        16:35:31  

$0030 LEFTEDGE                          $0008 LEFTHAND
$0008 LEFTHANDED                        $00F0 LEFT_ATTENMASK
$0000 LILFONT                           $0080 LITERAL
$8000 LOOP0                             $2000 LOOP1
$FFF9 MAPCTL                            $FC55 MATHA
$FC54 MATHB                             $FC53 MATHC
$0020 MATHCARRY                         $FC52 MATHD
$FC63 MATHE                             $FC62 MATHF
$FC61 MATHG                             $FC60 MATHH
$FC6F MATHJ                             $FC6E MATHK
$FC6D MATHL                             $FC6C MATHM
$FC57 MATHN                             $FC56 MATHP
$0040 MATHWARNING                       $0080 MATHWORKING
$00FF MAXRELOAD                         $FD88 MIKEYHREV
$FD89 MIKEYSREV                         $FD00 MIKEY_BASE
$0002 MIKEY_SPACE                       $4240 MIL
$0041 MINRELOAD                         $FD44 MPAN
$FD50 MSTEREO                           $FD9C MTEST0
$FD9D MTEST1                            $FD9E MTEST2
$4000 NEXT0                             $1000 NEXT1
$001D NEXTZPG                           $0004 NOEXP
$0005 NONCOLL_SPRITE                    $0004 NORMAL_SPRITE
$0020 NO_COLLIDE                        $0005 NUMSOUNDS
$0000 ONE_PER_PIXEL                     MACRO OPENFILE
$0008 OPTION1_BUTTON                    $0004 OPTION2_BUTTON
$0001 OUTER_BUTTON                      $0008 OVERRUN
$085B OpenFile0                         MACRO PALDEF
$0001 PARBIT                            $0010 PAREN
$0010 PARERR                            $0001 PAREVEN
$0001 PAUSE_SWITCH                      $FD93 PBKUP
$0001 PLAINFONT                         MACRO PLAYHSFX
$0002 POWERON                           $FC2F PROCADRH
$FC2E PROCADRL                          $FCB2 RCART_0
$FCB3 RCART_1                           MACRO READCART
MACRO READFILE                          $0010 READ_ENABLE
$0010 RELOAD_HV                         $0020 RELOAD_HVS
$0030 RELOAD_HVST                       $0030 RELOAD_MASK
$0000 RELOAD_NONE                       $0008 RESETERR
MACRO RESETHSFX                         $0040 RESET_DONE
MACRO RESET_TIMEOUT                     MACRO RESPRITE
$0008 RESTART_BUTTON                    $0008 RESTLESS
MACRO RESTORE_CART                      $0008 REUSE_PALETTE
MACRO RGB16                             MACRO RGB16_I
MACRO RGB_AXY                           $0001 RIGHT0_SELECT
$0002 RIGHT1_SELECT                     $0004 RIGHT2_SELECT
$0008 RIGHT3_SELECT                     $000F RIGHT_ATTENMASK
$0004 ROMDIR_DEST                       $0008 ROMDIR_ENTRY_SIZE
$019A ROMDIR_FILE0_OFFSET               $0000 ROMDIR_FILE0_PAGE
$01A2 ROMDIR_FILE1_LOC                  $01A2 ROMDIR_FILE1_OFFSET
$0000 ROMDIR_FILE1_PAGE                 $0003 ROMDIR_FLAG
$0001 ROMDIR_OFFSET                     $0000 ROMDIR_PAGE
$0006 ROMDIR_SIZE                       $0001 ROMFILE_ALIGN
$0100 ROMPAGECOUNT                      $0400 ROMPAGESIZE
$0008 ROMSEGSPERPAGE                    $0000 ROMSIZE
$019A ROM_HEADER_SIZE                   $0000 ROM_SCREENBLANK_VALUE
$0004 ROM_SPACE                         $0002 RXBRK
$0040 RXINTEN                           $0040 RXRDY
$08A7 ReadFile0                         $0829 RenderBuffer
$09CF ResetHSFX                         $089B RestoreReturn
Epyx HandyAsm 1.12      Symbols                         15-Apr-12516:35:31 Page  122
                                                        16:35:31  

$FC2D SCBADRH                           $FC2C SCBADRL
$FC11 SCBNEXTH                          $FC10 SCBNEXTL
$0000 SCB_CTRL0                         $0001 SCB_CTRL1
$0002 SCB_CTRL2                         $0005 SCB_DATA
$0007 SCB_HPOS                          $000B SCB_HSIZE
$0003 SCB_NEXT                          $0013 SCB_PALETTE
$001B SCB_SIZEOF                        $000F SCB_STRETCH
$0011 SCB_TILT                          $0009 SCB_VPOS
$000D SCB_VSIZE                         $0080 SCREENHCENTER
$0066 SCREENHEIGHT                      $0080 SCREENVCENTER
$00A0 SCREENWIDTH                       $FC23 SCVPOSH
$FC22 SCVPOSL                           $FD90 SDONEACK
$FD8C SERCTL                            $FD8D SERDAT
$FD10 SERIALRATE                        $0010 SERIAL_INT
MACRO SETCARTADDR                       MACRO SETCARTPAGE
MACRO SETCOLL                           MACRO SETDBUF
MACRO SETDISP                           MACRO SETDISP_50
MACRO SETDISP_60                        MACRO SETDISP_75
MACRO SET_AUDIO_CLOCK                   MACRO SET_BRK
MACRO SET_TO_READ_CART                  $0007 SHADOW_SPRITE
$0400 SHIFT_ACCUM                       $0004 SHIFT_ALWAYS
$0040 SHIFT_INTERP                      $0080 SIGNMATH
$0004 SKIP_SPRITE                       $FC82 SPRCOLL
$FC80 SPRCTL0                           $FC81 SPRCTL1
$FC13 SPRDLINEH                         $FC12 SPRDLINEL
$FC21 SPRDOFFH                          $FC20 SPRDOFFL
$FC91 SPRGO                             $FC19 SPRHSIZH
$FC18 SPRHSIZL                          $FC83 SPRINIT
MACRO SPRITES                           $0002 SPRITESTOP
$0002 SPRITETOSTOP                      $0001 SPRITEWORKING
$0001 SPRITE_GO                         $FC92 SPRSYS
$0825 SPRSYS_RAM                        $FC1B SPRVSIZH
$FC1A SPRVSIZL                          MACRO START_DISABLE
$FC1D STRETCHH                          $FC1C STRETCHL
$FC90 SUZYBUSEN                         $FC88 SUZYHREV
$FC89 SUZYSREV                          $FC00 SUZY_BASE
$0001 SUZY_SPACE                        $FCB1 SWITCHES
$FD87 SYSCTL1                           $087C SetCartAddress
$0888 SetCartOffset                     $0915 SetCartPage
$09E3 StartHSFX                         $0A20 StopHSFX
$0CD7 TEMPORG                           $0080 THREE_PER_PIXEL
$FC03 TILTACUMH                         $FC02 TILTACUML
$FC1F TILTH                             $FC1E TILTL
MACRO TIMEOUT                           $FD00 TIMER0
$0001 TIMER0_INT                        $FD04 TIMER1
$0002 TIMER1_INT                        $FD08 TIMER2
$0004 TIMER2_INT                        $FD0C TIMER3
$0008 TIMER3_INT                        $FD10 TIMER4
$FD14 TIMER5                            $0020 TIMER5_INT
$FD18 TIMER6                            $0040 TIMER6_INT
$FD1C TIMER7                            $0080 TIMER7_INT
$0008 TIMER_DONE                        $0000 TIM_BACKUP
$0001 TIM_CONTROLA                      $0003 TIM_CONTROLB
$0002 TIM_COUNT                         $FC01 TMPADRH
$FC00 TMPADRL                           $004D TOPEDGE
$0080 TURBO_DISABLE                     $0040 TWO_PER_PIXEL
$0002 TXBRK                             $0020 TXEMPTY
$0080 TXINTEN                           $0004 TXOPEN
$0080 TXRDY                             $0004 UNSAFEACCESS
Epyx HandyAsm 1.12      Symbols                         15-Apr-12516:35:31 Page  123
                                                        16:35:31  

$0004 UNSAFEACCESSRST                   $082F UserIntHandler
$0001 VARIVOLUME                        $FD08 VCOUNT
$0008 VECTOR_SPACE                      $0004 VERTICAL_INT
$0010 VFLIP                             $FC0D VIDADRH
$FC0C VIDADRL                           $FC09 VIDBASH
$FC08 VIDBASL                           MACRO VOFF16
MACRO VOFF8                             $FC07 VOFFH
$FC06 VOFFL                             $0100 VOL_ACCUM
$0010 VOL_INTERP                        $FC17 VPOSSTRTH
$FC16 VPOSSTRTL                         $FC27 VSIZACUMH
$FC26 VSIZACUML                         $FC2B VSIZOFFH
$FC2A VSIZOFFL                          $0010 VSTRETCH
$0010 VSTRETCHING                       MACRO WAITEOF
MACRO WAITEOL                           MACRO WAITMATH
$0D02 WAITMATH.00290                    $0E83 WAITMATH.002D0
MACRO WAITNEOF                          MACRO WAITNEOL
MACRO WAITSUZY                          $07A8 WAITSUZY.00131
$0006 XOR_SHADOW_SPRITE                 $0006 XOR_SPRITE
$0B2F advance_channels                  $003B asprite
$1E35 audio_dropout                     $1E33 audio_interruptus
$1E34 audio_lockout                     $0CD3 audio_offsets
$0014 audio_ptr                         $0040 bsprite
$0C7A calc_next_audio                   $001C cartseg
$06CE check_option                      $1EB1 clock_temp
$00E5 colonsprite                       $00D6 commasprite
$00D1 cparensprite                      $0DE0 create_sprite_text
$0045 csprite                           $1E91 current_frameh
$1E8D current_framel                    $00DB dashsprite
$1EB9 data_temp                         $10AC defaultrates
$0019 digichannel                       $E018 dispbuf0
$C038 dispbuf1                          $00C2 dquotesprite
$076F draw_glider                       $0718 draw_screen
$004A dsprite                           $0031 eightsprite
$0C8D end_freq                          $0C77 end_of_effect
$004F esprite                           $00BD exclsprite
$1E71 feed_interph                      $1E6D feed_interpl
$1E51 feedbackh                         $1E4D feedbackl
$0A60 find_lesser_channel               $0E43 firstchar
$0022 fivesprite                        $1E81 flagsh
$1E7D flagsl                            $0FA0 fontlist
$000C fontptr                           $0013 fontwidth
$001D foursprite                        $0A77 freeChannelX
$1E61 freq_interph                      $1E5D freq_interpl
$1E41 freqh                             $1E3D freql
$0054 fsprite                           $0E62 get_char_pointer
$109C glider                            $1048 glidersprite
$0A56 grabChannelX                      $0059 gsprite
$0831 hardInt                           $1779 helpbuffer
$1123 helptext                          $1EC9 hsfx_baseh
$1EC5 hsfx_basel                        $0A90 hsfx_driver
$0AB6 hsfx_driver_grunt                 $0016 hsfx_temp
$005E hsprite                           $0BAE infinite0
$0BEC infinite1                         $07BD init_my_stereo
$0CD7 init_sampler                      $1EC1 integrate
$11A2 interrupts                        $0063 isprite
$0008 joystick                          $0068 jsprite
$0848 jumpIntTable                      $0A79 killChannelX
$006D ksprite                           $0009 lastjoy
$000B lastswitch                        $1ECD launch_channel
Epyx HandyAsm 1.12      Symbols                         15-Apr-12516:35:31 Page  124
                                                        16:35:31  

$0B10 launch_channels                   $0B13 launch_next_channel
$0D18 launch_sound                      $148B lilfont
$0F0C load_font                         $001B loadinprogress
$0533 loop                              $1E9D loop_adrh0
$1EA9 loop_adrh1                        $1E99 loop_adrl0
$1EA5 loop_adrl1                        $1E95 loop_count0
$1EA1 loop_count1                       $0B7F loop_frame
$0072 lsprite                           $0400 main
$0077 msprite                           $0BBF next0_done
$0BFE next1_done                        $1E89 next_keyframeh
$1E85 next_keyframel                    $0E57 nextchar
$0036 ninesprite                        $0BD6 no_loop0
$0C15 no_loop1                          $007C nsprite
$0010 numfonts                          $000E onesprite
$00CC oparensprite                      $0081 osprite
$0FA4 palette                           $065D pandown
$1038 panslider                         $1028 pansliderbox
$067F panup                             $0011 panval
$069C pause_flip_restart                $000E pausestate
$10B1 pausetext                         $1C45 pbuf
$00E0 periodsprite                      $0FC4 pixelsprite
$11B7 plainfont                         $06F9 play_sample
$1EB5 preload_temp                      $0086 psprite
$111A pstext                            $00EF qmarksprite
$008B qsprite                           $11A0 rate
$0651 ratedown                          $1018 rateslider
$1008 ratesliderbox                     $119D ratetext
$0689 rateup                            $1C31 rbuf
$08C3 readCart0Grunt                    $0576 read_controls
$0F6A read_some_bytes                   $0D52 read_sound_segment
$0D6E readsegloop                       $0D71 readsegmod
$0F08 reloaddepth                       $079A resprite
$0427 restart                           $0090 rsprite
$0D8F rss_done                          $1111 rstext
$1CA6 s0buf                             $10BD s0text
$1D12 s1buf                             $10CA s1text
$1D5D s2buf                             $10D4 s2text
$1DA8 s3buf                             $10DE s3text
$1DF3 s4buf                             $10E8 s4text
$0FD8 samplebox                         $0006 samplenum
$11B2 samplerates                       $0007 samplerequest
$00EA scolonsprite                      $0FC8 screenerase
$05F7 set_sliders                       $0DC4 set_sprite_text
$07D2 set_stereo_pan                    $0CF0 set_volume
$0693 setrate                           $002C sevensprite
$1EAD shift_flag                        $1E69 shift_interph
$1E65 shift_interpl                     $1EBD shift_temp
$1E49 shifth                            $1E45 shiftl
$0027 sixsprite                         $1103 slbase
$0012 slider                            $0638 slider_down
$0665 slider_up                         $169F sliderbuffer
$1103 slidertext                        $1120 sltextoffsets
$0D90 sound_interrupt                   $0017 soundactive
$1F00 soundbuffer                       $0D9A soundchannel
$0DB6 sounddone                         $0DA8 soundexit
$0DAB soundload                         $0D90 soundmod
$0004 spacesprite                       $00C7 squotesprite
$10FD sscabs_h                          $10F7 sscabs_l
$0095 ssprite                           $10B1 stbase
Epyx HandyAsm 1.12      Symbols                         15-Apr-12516:35:31 Page  125
                                                        16:35:31  

$10F1 stextoffsets                      $0018 stopsound
$0BD5 stuff0                            $0C14 stuff1
$000A switch                            $11A2 sysIntTable
$0000 sysptr                            $0002 sysptr2
$0004 sysptr3                           $0538 systemp
$0018 threesprite                       $000F timersave
$8020 titleerase                        $06DF toggle_pause_state
$1E36 top_of_loop0                      $1E37 top_of_loop1
$8034 tpixelsprite                      $009A tsprite
$0013 twosprite                         $0B75 update_frame
$009F usprite                           $1E79 vol_interph
$1E75 vol_interpl                       $0645 voldown
$001A volume                            $1E59 volumeh
$1E55 volumel                           $0FF8 volumeslider
$0FE8 volumesliderbox                   $2000 volumetable
$0672 volup                             $00A4 vsprite
$1106 vstext                            $00A9 wsprite
$00AE xsprite                           $00B3 ysprite
$0009 zerosprite                        $00B8 zsprite
